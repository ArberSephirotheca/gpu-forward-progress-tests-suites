#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 mat4 _f0;
 ivec4 _f1;
 mat4x2 _f2;
 mat3x4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 mat3x4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
 uvec3 _f1;
 vec4 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 float _f1;
 _GLF_struct_13 _f2;
 vec4 _f3;
 _GLF_struct_14 _f4;
} ;

struct _GLF_struct_10 {
 mat3 _f0;
 bvec3 _f1;
 bvec3 _f2;
 ivec4 _f3;
 bvec4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 mat2 _f1;
 mat3x4 _f2;
 uint _f3;
 bvec4 _f4;
 ivec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_8 {
 ivec4 _f0;
 bool _f1;
 vec4 _f2;
 mat3x2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 mat3x2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 mat2x4 _f1;
 ivec2 _f2;
 bool _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_4 {
 mat2x3 _f0;
 vec2 _f1;
 int _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 mat4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_2 {
 bvec3 _f0;
 ivec2 _f1;
 mat3 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 mat4x3 _f1;
 uint _f2;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 int _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 bool _f2;
 _GLF_struct_2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 uint read;
 _GLF_struct_3 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_15 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(0.0, 1.0, 1.0))), 1.0, 0.0, 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))), true, false))), true && (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, true, true)))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.2), _GLF_FUZZED(8042.1203)), vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x3((injectionSwitch)[0], 0.0, 0.0, 0.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))), false || (bool(false)))), bool(bvec4(bool(bool(false)), true, true, false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, _GLF_IDENTITY(bool(bool(((injectionSwitch.x > injectionSwitch.y)) && true)), (bool(_GLF_IDENTITY(bool(((injectionSwitch.x > injectionSwitch.y)) && true), bool(bool(_GLF_IDENTITY(bool(((injectionSwitch.x > injectionSwitch.y)) && true), ! (! (bool(((injectionSwitch.x > injectionSwitch.y)) && true))))))))) || false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), clamp(_GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))) - vec2(0.0, 0.0)), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), max(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))).y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), ! (! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (false))) || false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))), true, false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - sqrt(vec2(0.0, 0.0))), vec2(vec3(mat2(1.0) * (injectionSwitch), 1.0)))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(5.5)), bool(false)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(! (_GLF_DEAD(false)), false)), bool(bvec3(bool(bvec2(! (_GLF_DEAD(false)), false)), true, true))), (bool(bvec2(! (_GLF_DEAD(false)), false))) || false)), true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)) && true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.8, 178.587)) : injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.8, 178.587)) : injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.8, 178.587)) : injectionSwitch)).x > injectionSwitch.y)) || _GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.8, 178.587)) : injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-7.8, 178.587)) : injectionSwitch)).x > injectionSwitch.y)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false))))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))
    barrier();
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) | 0u))), subgroup_size));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) >> 0u), (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u)) ^ 0u), (true ? _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u), clamp(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u), 0u ^ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u)))))), min((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u)), uint(uint(uint(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) + 0u)))))) >> 0u)))), (_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (~ (workgroup_base + subgroup_base)))) + 0u)))) ^ 0u) : _GLF_FUZZED(subgroup_id))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), false || (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bool((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8892.5836)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) : _GLF_FUZZED(69.34)))), bool(true)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-1336.7679), (_GLF_IDENTITY(_GLF_FUZZED(-1336.7679), clamp(_GLF_FUZZED(-1336.7679), _GLF_IDENTITY(_GLF_FUZZED(-1336.7679), min(_GLF_FUZZED(-1336.7679), _GLF_FUZZED(-1336.7679))), _GLF_IDENTITY(_GLF_FUZZED(-1336.7679), mix(float(_GLF_FUZZED(-1336.7679)), float(_GLF_FUZZED(-52.36)), bool(false)))))) / sqrt(1.0))), bool(false))) > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) && true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true))) && true), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true), false, _GLF_IDENTITY(false, ! (! (false))), true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(ivec4(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (false ? _GLF_FUZZED(41019) : _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1))))))))), _GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (_GLF_IDENTITY(~ (~ (virtual_gid)), min(~ (~ (virtual_gid)), ~ (~ (virtual_gid)))))))), (virtual_gid) * 1u)], 4, 64, 2), _GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), (_GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), 0u | (clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2))))) | (clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2))))), min(~ (_GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), (_GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), 0u | (clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2))))) | (clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2))))), ~ (_GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), (_GLF_IDENTITY(clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)), 0u | (clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2))))) | (clamp(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))), 0u + ((_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid))))))), ~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uint(~ (virtual_gid)), max(uint(~ (virtual_gid)), uint(~ (virtual_gid)))))), _GLF_IDENTITY(~ (~ (~ (virtual_gid))), 0u ^ (~ (~ (~ (virtual_gid))))))))))), (virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (_GLF_IDENTITY(~ (virtual_gid), min(~ (virtual_gid), ~ (virtual_gid)))))))), _GLF_IDENTITY((virtual_gid), ~ (~ ((virtual_gid)))) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), ~ (~ (~ (virtual_gid)))))), (virtual_gid) * 1u)], 4, 64, 2)))))))))), _GLF_struct_3(_GLF_struct_0(bvec3(true), 1, mat4x2(1.0)), _GLF_struct_1(mat3x4(1.0), mat4x3(1.0), 1u), true, _GLF_struct_2(bvec3(true), ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) ^ 0)), mat3(1.0), bvec3(true)), bvec4(true)), _GLF_struct_6(_GLF_struct_4(mat2x3(1.0), vec2(1.0), 1), mat4(1.0), _GLF_struct_5(_GLF_IDENTITY(vec4(1.0), (true ? vec4(1.0) : _GLF_FUZZED(vec4(-9.7, 3.0, -9.6, _GLF_IDENTITY(-20.54, float(mat2x3(_GLF_IDENTITY(-20.54, (true ? _GLF_IDENTITY(-20.54, max(_GLF_IDENTITY(-20.54, min(-20.54, -20.54)), -20.54)) : _GLF_FUZZED(725.855))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, abs(1.0), 1.0, 1.0, 1.0, 1.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)))), 0.0, exp(0.0), 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0, 0.0)))))), 1.0, sin(0.0), 1.0, abs(0.0)))))))), mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0))))), ivec2(1), true, uvec2(1u))), _GLF_struct_11(_GLF_struct_7(mat2x3(1.0), mat3x2(1.0), vec4(1.0)), _GLF_struct_8(_GLF_IDENTITY(ivec4(1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), (ivec4(1)) >> ivec4(0, _GLF_IDENTITY(0, (0) | (0)), 0, 0)), (true ? _GLF_IDENTITY(ivec4(1), (ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1)))))))) >> ivec4(0, 0, 0, 0)) : _GLF_FUZZED(ivec4(55918, -56164, 72238, -77795))))) + ivec4(0, 0, 0, 0)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), false)))))))), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat3x2(1.0), vec2(1.0)), _GLF_struct_9(uvec2(1u), mat2(1.0), mat3x4(1.0), 1u, bvec4(true), ivec2(1), mat4(1.0)), _GLF_struct_10(mat3(1.0), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), _GLF_IDENTITY(true && ((true)), bool(bvec4(true && ((true)), false, false, false))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || _GLF_IDENTITY((true), true && ((true))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || _GLF_IDENTITY((true), true && ((true))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || _GLF_IDENTITY((true), true && ((_GLF_IDENTITY(true, true && (true))))))))))))))), bvec3(true), ivec4(1), bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))), true)))), mat3(1.0)), ivec4(1)), _GLF_struct_15(_GLF_struct_12(uvec2(1u), uvec3(1u), vec4(1.0), mat2x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0, _GLF_struct_13(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || false)), bvec2(bvec4(bvec2(true), false, true))), false, false))), mat4x3(1.0), mat3x2(1.0), mat2x4(1.0), mat3x4(1.0), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), ~ (~ (~ (1u))))))), (false ? _GLF_FUZZED(uvec4(139248u, 99990u, 123093u, 184416u)) : uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_base))), ~ (~ (1u))), max(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, ~ (~ (1u)))))))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), _GLF_IDENTITY(_GLF_IDENTITY(((1u)), ~ (~ (((1u))))), (_GLF_IDENTITY(((1u)), (true ? ((1u)) : _GLF_FUZZED(num_workgroup)))) ^ _GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY((1u), _GLF_IDENTITY(clamp((1u), (1u), (1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp((1u), (1u), (1u)), min(_GLF_IDENTITY(clamp((1u), (1u), (1u)), (clamp((1u), (1u), (1u))) ^ 0u), clamp((1u), (1u), (1u))))), (~ (_GLF_IDENTITY(clamp((1u), (1u), (1u)), min(_GLF_IDENTITY(clamp((1u), (1u), (1u)), (clamp((1u), (1u), (1u))) ^ 0u), clamp((1u), (1u), (1u)))))) >> 0u))))))))), max(uvec4(_GLF_IDENTITY(1u, ~ (~ (1u)))), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, 0u | (1u)))), ~ (~ (1u)))))), uvec4(_GLF_IDENTITY(1u, ~ (~ (1u))))))), vec4(1.0), _GLF_struct_14(_GLF_IDENTITY(mat4(1.0), _GLF_IDENTITY((mat4(1.0)), transpose(transpose((mat4(1.0))))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), ivec4(1), mat4x2(1.0), mat3x4(1.0), uvec4(1u))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY((subgroup_local_id % 2), max(_GLF_IDENTITY((subgroup_local_id % 2), 0u + ((subgroup_local_id % 2))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) % 2), (false ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id % 2))))) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 4, 64, _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, min(4, 4)), 4)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, true))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec4(bvec2(_GLF_DEAD(false), false), false, true)))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
  }
 subgroupBarrier();
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_16.read, min(_GLF_struct_replacement_16.read, _GLF_struct_replacement_16.read)), 4, _GLF_IDENTITY(64, (64) | _GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), ((64)) / 1))))), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) | (64))))), ((_GLF_IDENTITY(_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) | (64)))), (false ? _GLF_FUZZED(85907) : _GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, (64) | (64)))))))) - 0), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 1)))), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), bool(bvec4(bool(_GLF_IDENTITY(bool(false), false || (bool(false)))), true, false, false))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
