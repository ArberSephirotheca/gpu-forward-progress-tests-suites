#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_24 {
 vec4 _f0;
 mat4x2 _f1;
 bool _f2;
 mat3x2 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_22 {
 vec4 _f0;
 ivec4 _f1;
 ivec2 _f2;
 mat3x2 _f3;
 bvec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_21 {
 int _f0;
 mat4x2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_23 {
 bvec4 _f0;
 uvec2 _f1;
 _GLF_struct_21 _f2;
 float _f3;
 ivec4 _f4;
 _GLF_struct_22 _f5;
} ;

struct _GLF_struct_19 {
 mat2 _f0;
 ivec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_19 _f0;
 uint read;
} ;

struct _GLF_struct_17 {
 vec3 _f0;
 mat3x2 _f1;
 ivec3 _f2;
 mat2x3 _f3;
 ivec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_16 {
 vec3 _f0;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 _GLF_struct_16 _f1;
 mat3 _f2;
 _GLF_struct_17 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_25 {
 uvec2 _f0;
 mat4x2 _f1;
 _GLF_struct_18 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_23 _f4;
 _GLF_struct_24 _f5;
} ;

struct _GLF_struct_13 {
 mat4 _f0;
 vec3 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
 mat2x4 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_14 {
 mat2 _f0;
 _GLF_struct_13 _f1;
 ivec4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_15 {
 mat2 _f0;
 _GLF_struct_14 _f1;
 mat4x3 _f2;
 uint subgroup_local_id;
} ;

struct _GLF_struct_10 {
 mat3x4 _f0;
 mat3x2 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_9 {
 vec3 _f0;
 mat4x3 _f1;
 bvec2 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_8 {
 ivec3 _f0;
 uvec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_11 {
 mat3x2 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 mat4 _f1;
 mat2x4 _f2;
 vec4 _f3;
 uvec3 _f4;
 vec4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_7 {
 mat3x2 _f0;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_12 {
 _GLF_struct_7 _f0;
 uint workgroup_base;
 _GLF_struct_11 _f1;
 mat4x2 _f2;
 bvec2 _f3;
 float _f4;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
 bvec3 _f3;
 uvec3 _f4;
 mat3x4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_3 _f0;
} ;

struct _GLF_struct_1 {
 bvec4 _f0;
 mat4 _f1;
 bvec4 _f2;
 mat2 _f3;
 bvec2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 _GLF_struct_0 _f1;
 vec2 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
 mat2x4 _f1;
 _GLF_struct_2 _f2;
 uint workgroup_id;
 mat3x2 _f3;
 vec4 _f4;
 _GLF_struct_4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(0, int(ivec2(0, 0))))); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(0) : _GLF_FUZZED(_injected_loop_counter))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                      barrier();
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), true, true, false)))))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                  barrier();
                                 barrier();
                                }
                               else
                                {
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                  {
                                   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                                    {
                                     barrier();
                                    }
                                  }
                                 barrier();
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), mix(float(_GLF_FUZZED(2.6)), float(float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), bool(true))), float(_GLF_FUZZED(-5183.3000)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false)), ! (! (false)))));
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
  {
   do
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) + 0) >> 0)), ((1) | (1)) - 0))))), int(int(_GLF_IDENTITY((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-63767) : 1)), (1) | (1))))), _GLF_IDENTITY(int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(735.202)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))), 0, 0)), _GLF_IDENTITY(int(ivec4(int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1)))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(0, 0 ^ (0)), 0)), 0, 0, 1)), _GLF_IDENTITY(0 | (int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) + 0), (_GLF_IDENTITY(0, (0) + 0)) * 1) | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec4(54530, ivec3(-63645, -29085, -4161))), ivec4(0, 0, 0, 0) ^ (_GLF_FUZZED(ivec4(54530, ivec3(-63645, -29085, -4161))))) : ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0), (_GLF_IDENTITY(0, (0) + 0)) * 1) | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))), 0, 0, 1), (ivec4(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | 0) + 0), (_GLF_IDENTITY(0, (0) + 0)) * 1) | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(ivec4(54530, ivec3(-63645, -29085, -4161))), ivec4(0, 0, 0, 0) ^ (_GLF_FUZZED(ivec4(54530, ivec3(-63645, -29085, -4161))))) : ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0), (_GLF_IDENTITY(0, (0) + 0)) * 1) | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))), 0, 0, 1)) + ivec4(0, 0, 0, 0)))), max(_GLF_IDENTITY(0 | (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), min(_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), min(0 | (_GLF_IDENTITY(1, (1) | (1))), 0 | (_GLF_IDENTITY(1, (1) | (1))))), 0 | (_GLF_IDENTITY(1, (1) | (1))))))), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 0, 0), clamp(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, (1) | (1))) | (_GLF_IDENTITY(1, (1) | (1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))), clamp(int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), clamp(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, max(1, 1)))))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ (0 | 0)), 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), clamp(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (ivec4((_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), max(_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), clamp(0 | (_GLF_IDENTITY(1, (1) | (1))), 0 | (_GLF_IDENTITY(1, (1) | (1))), 0 | (_GLF_IDENTITY(1, (1) | (1)))))) | (0 | (_GLF_IDENTITY(1, (1) | (1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (1) | (1))), (0 | (_GLF_IDENTITY(1, (1) | (1)))) ^ 0)) >> 0))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), min(clamp(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), clamp(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), (ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)) | ivec4(0, 0, 0, 0)), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0), ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)))))))), (int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))) - (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), clamp(int(4), int(4), int(4)))))), 0, 0, 1))), (0 | (int(_GLF_IDENTITY(ivec4(int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), 0, 0, 1), (ivec4(int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), 0, 0, 1)) | ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) | (0 | (int(ivec4(int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), _GLF_IDENTITY(0, (0) ^ 0), 0, 1))))), 0 | (int(ivec4(int(ivec4((_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | (1))))), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0)), 0, 0, 1))))))))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec4(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false, false, true)))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec4(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false, false, true)))), (! (_GLF_IDENTITY(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), bool(bvec4(! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false, false, true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = ((0 & 88198) & 21473); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), true && (! (injectionSwitch.x > injectionSwitch.y)))))) && true), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true))), (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true))) && true, bool(bvec3((_GLF_IDENTITY(true, true && (true))) && true, false, true)))))))), (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-74.45)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))) < injectionSwitch.y)))) && true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), false || (! (_GLF_WRAPPED_IF_TRUE(true)))))), false, true, false))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y))))
                                barrier();
                               barrier();
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true))), false, false))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(bool((false))))), bool(bvec3(! (_GLF_IDENTITY((false), bool(bool((false))))), true, true))))), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY((false), ! _GLF_IDENTITY((! (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false))))))))))), bool(bool((! (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), false || ((false))))))))))))))), true, true, true))))) || false)))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), true && (! _GLF_IDENTITY((! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))), ((! (true))) || false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, int(ivec4(6, 0, 0, 1))))))); _injected_loop_counter --)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(mat2(1.0), _GLF_struct_14(mat2(1.0), _GLF_struct_13(mat4(1.0), vec3(1.0), mat3x4(1.0), mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0 * (_GLF_IDENTITY(1.0, max(1.0, 1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))))), (false ? _GLF_FUZZED(5170.5710) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat2x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-2.2), max(_GLF_FUZZED(-2.2), _GLF_FUZZED(-2.2)))), max(_GLF_IDENTITY((true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-2.2), max(_GLF_FUZZED(-2.2), _GLF_FUZZED(-2.2)))), max((true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-2.2), max(_GLF_FUZZED(-2.2), _GLF_FUZZED(-2.2)))), (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-2.2), max(_GLF_FUZZED(-2.2), _GLF_FUZZED(-2.2)))))), (true ? 1.0 : _GLF_IDENTITY(_GLF_FUZZED(-2.2), max(_GLF_FUZZED(-2.2), _GLF_FUZZED(-2.2))))))), _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-858.252 / -321.513))), float(0.0), bool(true))), 0.0)), 0.0))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) * (1.0)), length(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, _GLF_IDENTITY(0.0, (0.0) * exp(log(1.0))))), 1.0))), float(float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false))) ? 1.0 : _GLF_FUZZED(-2.2))), 1.0, 1.0, 1.0, length(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) * round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), min(normalize(vec2(1.0, 1.0)), normalize(vec2(1.0, 1.0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(8.8)), bool(false))), (_GLF_IDENTITY(0.0, (0.0) - 0.0)) * round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (normalize(vec2(1.0, 1.0))) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))) / 1.0), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) - 0.0, min((0.0) - 0.0, (0.0) - 0.0)))) * round(_GLF_IDENTITY(length(normalize(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5.2) : 1.0))), (vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-5.2) : 1.0)))) * mat2(1.0)))), max(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), min(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (true ? length(normalize(vec2(1.0, 1.0))) : _GLF_FUZZED(-8.3))), length(normalize(vec2(1.0, 1.0))))), length(normalize(vec2(1.0, 1.0))))))), (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) * round(length(_GLF_IDENTITY(normalize(vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-21.22) : 1.0)))), 1.0)), 1.0)), (normalize(vec2(1.0, 1.0))) - vec2(0.0, 0.0)))))) / 1.0), 0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) - 0.0), 0.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, determinant(mat2(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0)), 1.0, 0.0, 1.0, cos(0.0), 0.0))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0)), 1.0)), float(_GLF_IDENTITY(float(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.2))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(35.11)), float(1.0), bool(true))), 1.0)), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 0.0 + (1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-86.39)), _GLF_IDENTITY(float(vec3(float(_GLF_FUZZED(-86.39)), 1.0, 0.0)), float(mat3x4(float(vec3(float(_GLF_FUZZED(-86.39)), 1.0, 0.0)), 0.0, round(length(normalize(1.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) - 0.0)) * round(length(normalize(vec2(1.0, 1.0))))), 0.0, 0.0)), 1.0))), float(_GLF_IDENTITY(vec3(float(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.2))), 1.0, 1.0, 1.0, length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(-395.694) : (0.0))) - 0.0)) * _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (length(normalize(vec2(1.0, 1.0)))) - 0.0)), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0))))))), ((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))))) / 1.0) + length(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (false ? _GLF_FUZZED(-19.54) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0))), 0.0, 1.0), min(_GLF_IDENTITY(vec3(float(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.2))), 1.0, 1.0, 1.0, length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(-395.694) : (0.0))) - 0.0)) * _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (length(normalize(vec2(1.0, 1.0)))) - 0.0)), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0))))))), ((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))))) / 1.0) + length(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (false ? _GLF_FUZZED(-19.54) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0))), 0.0, 1.0), min(vec3(float(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.2))), 1.0, 1.0, 1.0, length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(-395.694) : (0.0))) - 0.0)) * _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (length(normalize(vec2(1.0, 1.0)))) - 0.0)), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0))))))), ((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))))) / 1.0) + length(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (false ? _GLF_FUZZED(-19.54) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0))), 0.0, 1.0), vec3(float(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.2))), 1.0, 1.0, 1.0, length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(-395.694) : (0.0))) - 0.0)) * _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (length(normalize(vec2(1.0, 1.0)))) - 0.0)), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0))))))), ((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))))) / 1.0) + length(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (false ? _GLF_FUZZED(-19.54) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0))), 0.0, 1.0))), vec3(float(float(mat2x3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.2))), 1.0, 1.0, 1.0, length(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), (false ? _GLF_FUZZED(-395.694) : (0.0))) - 0.0)) * _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), (length(normalize(vec2(1.0, 1.0)))) - 0.0)), round(length(normalize(vec2(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0))))))), ((_GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), max(round(length(normalize(vec2(1.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))))))) / 1.0) + length(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, 0.0)), (false ? _GLF_FUZZED(-19.54) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 1.0))), 0.0, 1.0)))))))))))))), mat2x4(1.0), mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(11.48) : _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(96.68) : injectionSwitch.y)))))), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true))), 0.0, 0.0, 1.0))).x > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * 1.0), injectionSwitch[1])), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4.8)), float(1.0), bool(true))), 0.0, 0.0, 1.0))).x > injectionSwitch.y)))) || false)) ? _GLF_IDENTITY(_GLF_FUZZED(758.420), float(mat2(_GLF_FUZZED(758.420), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0))) : 1.0)))), ivec4(1), mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(-57.25)), float(_GLF_IDENTITY((1.0), (true ? (1.0) : _GLF_FUZZED(-855.709)))), bool(true))) * 1.0), 1.0, 1.0, determinant(mat4(1.0, round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), _GLF_IDENTITY((normalize(vec2(1.0, 1.0))) * mat2(1.0), mix(vec2((_GLF_IDENTITY((normalize(vec2(1.0, 1.0))), vec2(_GLF_IDENTITY(vec2((normalize(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(((- 7.7)))), float(1.0), bool(true))))))), mix(vec2((_GLF_IDENTITY(vec2((normalize(vec2(1.0, 1.0)))), (false ? _GLF_FUZZED(vec2(2.9, 2.9)) : vec2((normalize(vec2(1.0, 1.0)))))))[0], _GLF_FUZZED(10.35)), vec2(_GLF_FUZZED(641.659), (vec2((normalize(vec2(1.0, 1.0)))))[1]), bvec2(false, true))))) * mat2(1.0))[0], ((normalize(vec2(1.0, 1.0))) * mat2(1.0))[1]), vec2(_GLF_FUZZED(31.23), _GLF_IDENTITY(_GLF_FUZZED(-89.77), mix(float(_GLF_FUZZED(9984.8088)), float(_GLF_IDENTITY(_GLF_FUZZED(-89.77), mix(float(_GLF_FUZZED(-89.77)), float(_GLF_FUZZED(-9.5)), bool(false)))), bool(true)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7013.3130)), bool(false))), 0.0)), clamp(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(1.0, exp(0.0) * (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-4128.6589)), float(1.0), bool(true))), 1.0)), 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2492.5009)), float(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), bool(true))), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))), dot(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0)), (mat2x4(1.0, determinant(mat3(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0))) * mat2(1.0))), min(float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0)), (mat2x4(1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0))) * mat2(1.0))), float(_GLF_IDENTITY(mat2x4(1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0)))))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0))))))), (false ? _GLF_FUZZED(53.17) : float(mat3x2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), 1.0, 0.0, 0.0, 1.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0)))))))))), 0.0, 1.0, 1.0, exp(0.0)), (mat2x4(1.0, _GLF_IDENTITY(determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), clamp(determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, exp(0.0))) * mat2(1.0)))))), 0.0, 1.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), min(_GLF_IDENTITY(max(0.0, 0.0), (max(0.0, 0.0)) - 0.0), max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0))))))), tan(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.2)))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)), _GLF_IDENTITY(min(float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), float(vec3(round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))) / 1.0), tan(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(939.487)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-156.119) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.0)))))), bool(true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(_GLF_IDENTITY(59.06, (true ? 59.06 : _GLF_FUZZED(sin(min(1.8, -5.4)))))) : 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)), float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(dot(injectionSwitch, vec2(-9.3, 300.434))) : _GLF_IDENTITY(1.0, (1.0) - 0.0))))), (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), min(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-8717.1574, -6685.9669, -9.8)) : vec3(1.0, 0.0, 1.0))))), vec3(0.0, 1.0, 0.0))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.8) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0)), 1.0)), 1.0, 1.0, 1.0))), min(_GLF_IDENTITY(min(float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), float(vec3(round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))) / 1.0), tan(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(939.487)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-156.119) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.0)))))), bool(true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(_GLF_IDENTITY(59.06, (true ? 59.06 : _GLF_FUZZED(sin(min(1.8, -5.4)))))) : 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)), float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(dot(injectionSwitch, vec2(-9.3, 300.434))) : _GLF_IDENTITY(1.0, (1.0) - 0.0))))), (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), min(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-8717.1574, -6685.9669, -9.8)) : vec3(1.0, 0.0, 1.0))))), vec3(0.0, 1.0, 0.0))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.8) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0)), 1.0)), 1.0, 1.0, 1.0))), mix(float(_GLF_FUZZED(725.249)), float(min(float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), float(vec3(round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))) / 1.0), tan(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(939.487)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-156.119) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.0)))))), bool(true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(_GLF_IDENTITY(59.06, (true ? 59.06 : _GLF_FUZZED(sin(min(1.8, -5.4)))))) : 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)), float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(dot(injectionSwitch, vec2(-9.3, 300.434))) : _GLF_IDENTITY(1.0, (1.0) - 0.0))))), (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), min(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-8717.1574, -6685.9669, -9.8)) : vec3(1.0, 0.0, 1.0))))), vec3(0.0, 1.0, 0.0))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.8) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0)), 1.0)), 1.0, 1.0, 1.0)))), bool(true))), min(float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), float(vec3(round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0))), (_GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)))) / 1.0), tan(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(939.487)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-156.119) : _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.0)))))), bool(true))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(_GLF_IDENTITY(59.06, (true ? 59.06 : _GLF_FUZZED(sin(min(1.8, -5.4)))))) : 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0)), float(mat4x3(1.0, 0.0, 1.0, 0.0, sin(_GLF_IDENTITY(0.0, max(0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(dot(injectionSwitch, vec2(-9.3, 300.434))) : _GLF_IDENTITY(1.0, (1.0) - 0.0))))), (1.0) * 1.0), 1.0, 1.0, determinant(mat4(1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), max(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), min(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (false ? _GLF_FUZZED(vec3(-8717.1574, -6685.9669, -9.8)) : vec3(1.0, 0.0, 1.0))))), vec3(0.0, 1.0, 0.0))), tan(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-8.8) : _GLF_IDENTITY(0.0, (0.0) / 1.0))), (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0)), 1.0)), 1.0, 1.0, 1.0))))))))), mat4x3(1.0), gl_SubgroupInvocationID);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * mat2(1.0), clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * mat2(1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))) / vec2(1.0, 1.0)) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * mat2(1.0)))).x)), ~ (~ _GLF_IDENTITY((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x))), 1 * (_GLF_IDENTITY((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x))), min((int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x))), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x)))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ _GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), min((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x)))))), (_GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) | (int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) : _GLF_FUZZED(_GLF_IDENTITY(1225, _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1225, (1225) - 0)), 0 ^ (int(_GLF_IDENTITY(1225, (1225) - 0))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(1225, (1225) - 0)), 0 ^ (int(_GLF_IDENTITY(1225, (1225) - 0)))))) ^ 0))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))), _GLF_IDENTITY(int(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(max(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x))))))), (max(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))))))) | 0))))) | (int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))))), _GLF_IDENTITY(int(ivec2(int(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), clamp(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), min(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), float(vec4(length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0))))), length(vec3(0.0, 0.0, 0.0)))), 1.0, abs(0.0))), max(vec2(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-860.942, 6.1)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0), 1.0, 1.0)), length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0)))))).x))))), (int((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0))), max(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, length(vec3(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, _GLF_IDENTITY(dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), float(vec3(dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), 1.0, 0.0)))), 0.0, 0.0, 1.0, 0.0), (true ? mat2x3(0.0, _GLF_IDENTITY(dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), float(vec3(dot(vec3(sin(0.0), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), 1.0, 0.0)))), 0.0, 0.0, 1.0, 0.0) : _GLF_FUZZED(mat2x3(465.041, -288.572, 5746.1145, 6768.1833, -7.5, -6.2)))))), 0.0, 0.0)), 1.0, abs(0.0))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, length(vec3(0.0, 0.0, 0.0)), 1.0, abs(0.0)))))).x)))))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))), (_GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), min(_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), int(ivec4(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), 0, 1, 0))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))) | (int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ (int((_GLF_IDENTITY(~ (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), clamp(_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), clamp(max(_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))))), 0)), max(int(ivec2(int(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), clamp(int(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0), _GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0))))), int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), min(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), max(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) | (int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), clamp(0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))))))))), 0)), int(ivec2(int(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (_GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)))))), clamp(int(int((~ (int(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-710.630)), bool(false))), injectionSwitch.x)))))), int(int((~ _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), _GLF_IDENTITY(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), int(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))) | (int(_GLF_IDENTITY(int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(~ (int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))) / (1 & 1)))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), int(ivec4(~ ((_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0 ^ (_GLF_IDENTITY(~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))), max(~ (int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))), int(_GLF_IDENTITY(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))), (_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))), (true ? (~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))) : _GLF_FUZZED(_injected_loop_counter)))) / 1)), int(ivec3(int(_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))), (_GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))), (true ? (~ (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))))))) : _GLF_FUZZED(_injected_loop_counter)))) / 1)), 0, 0))))))), ~ (int((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))))), 0)))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1), (_injected_loop_counter) << 0)) >> 0) != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ _GLF_IDENTITY((~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED(_injected_loop_counter) : (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), false)))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
              barrier();
            }
          }
        }
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), (_GLF_FUZZED((~ 57074u))) | (_GLF_FUZZED((~ 57074u)))))))), ((_GLF_FUZZED((~ 57074u)))) | ((_GLF_FUZZED((~ 57074u))))), (~ (_GLF_FUZZED((~ 57074u)))) | (~ _GLF_IDENTITY((_GLF_FUZZED((~ 57074u))), clamp((_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), (_GLF_FUZZED((~ 57074u))) | (_GLF_FUZZED((~ 57074u)))))))), ((_GLF_FUZZED((~ 57074u)))) | ((_GLF_FUZZED((~ 57074u))))), (~ (_GLF_FUZZED((~ 57074u)))) | (~ _GLF_IDENTITY((_GLF_FUZZED((~ 57074u))), clamp((_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))))))))), min(_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), (_GLF_FUZZED((~ 57074u))) | (_GLF_FUZZED((~ 57074u)))))))), ((_GLF_FUZZED((~ 57074u)))) | ((_GLF_FUZZED((~ 57074u))))), (~ (_GLF_FUZZED((~ 57074u)))) | (~ _GLF_IDENTITY((_GLF_FUZZED((~ 57074u))), clamp((_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))))))))), _GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED((~ 57074u)), (_GLF_FUZZED((~ 57074u))) | (_GLF_FUZZED((~ 57074u)))))))), ((_GLF_FUZZED((~ 57074u)))) | ((_GLF_FUZZED((~ 57074u))))), (~ (_GLF_FUZZED((~ 57074u)))) | (~ _GLF_IDENTITY((_GLF_FUZZED((~ 57074u))), clamp((_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))), (_GLF_FUZZED((~ 57074u))))))))))) : _GLF_FUZZED(packHalf2x16(injectionSwitch))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat3(1.0), mat2x4(1.0), _GLF_struct_2(vec4(1.0), _GLF_struct_0(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true), bvec2(bvec3(bvec2(true), false))))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true)), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec3(bvec2(bvec2(bvec2(true))), true))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true)))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec2(bvec2(bvec2(true))))), false, false)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec2(bvec2(bvec2(true))))), false, false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec2(bvec2(bvec2(true))))), false, false))))))), true))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(true)), bvec2(bvec3(bvec2(bvec2(true)), true)))))))), true)))), _GLF_IDENTITY(false, false || (false)))), false))))), true)))))), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec2(bvec2(bvec2(bvec2(true))))))), true)))))), bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), (! (! (true))) || false)))), _GLF_IDENTITY(vec2(1.0), max(vec2(1.0), vec2(1.0))), _GLF_struct_1(bvec4(true), mat4(1.0), bvec4(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, _GLF_IDENTITY(false, true && (false)) || (true))))) && true)), mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, true)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ivec4(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) << 0)))))), gl_WorkGroupID.x, mat3x2(1.0), vec4(_GLF_IDENTITY(1.0, (1.0) * 1.0)), _GLF_struct_4(_GLF_struct_3(uvec4(1u), mat4x3(1.0), mat3x2(1.0), bvec3(true), uvec3(1u), mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-690.534)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0 + (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-690.534)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true)))))), mat3x2(1.0))));
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) | 0), max(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (1) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))) ^ 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_7(mat3x2(1.0), _GLF_struct_6(uvec3(_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u | (1u)))), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(52706u) : 1u), ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(52706u) : 1u)) * (1u & 1u)))), max(clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), uint(uvec3(0u | (1u), 0u, 0u)))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(52706u) : 1u))), clamp(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), (_GLF_IDENTITY(0u | _GLF_IDENTITY((1u), ((1u)) * (1u & 1u)), (true ? 0u | (1u) : _GLF_FUZZED(subgroup_id)))) + 0u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(52706u) : 1u))))))), mat4(1.0), mat2x4(1.0), vec4(1.0), uvec3(1u), vec4(1.0), ivec3(1))), workgroup_size * _GLF_struct_replacement_5.workgroup_id, _GLF_struct_11(mat3x2(1.0), _GLF_struct_8(ivec3(1), uvec4(1u), vec3(1.0)), _GLF_struct_9(vec3(1.0), mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), clamp(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) - 0.0), mix(float(_GLF_FUZZED(float(129058u))), float(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) - 0.0)), bool(true)))) / 1.0), min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(177.518))), 1.0))))), _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(round(5.0), clamp(round(5.0), round(5.0), round(5.0)))) : min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))), float(mat3x4(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), clamp(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) - 0.0), mix(float(_GLF_FUZZED(float(129058u))), float(_GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))) - 0.0)), bool(true)))) / 1.0), min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(177.518))), 1.0))))), _GLF_IDENTITY(min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(round(5.0), clamp(round(5.0), round(5.0), round(5.0)))) : min(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))))))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0))))), bvec2(true), vec2(1.0)), _GLF_struct_10(mat3x4(1.0), mat3x2(1.0), uvec3(1u)), vec4(1.0)), mat4x2(1.0), bvec2(true), 1.0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_12.workgroup_base, max(_GLF_struct_replacement_12.workgroup_base, _GLF_struct_replacement_12.workgroup_base)) + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_struct_replacement_15.subgroup_local_id) / 1u)) | 0u), 0u + (_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_struct_replacement_15.subgroup_local_id) / 1u)) | 0u)));
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1)) + 0))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)) / 1.0))))))), false))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 1 * (int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec3(58456, 89098, 13998)[2]))) << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, (7) + 0), 7)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch), vec2(vec2(_GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch), (clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)) * mat2(1.0)))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, true, false))))), true))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), int(1))) ^ 0)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), int(1))) ^ _GLF_IDENTITY(0, max(0, 0))))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), int(1))) ^ 0)))))))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < (1 | 0)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < (1 | 0))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), bool(bvec4(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) ^ 0)), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), true)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_12.workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u)) >> 0u)) | (subgroup_base)) + ((_GLF_struct_replacement_15.subgroup_local_id + 1) % subgroup_size), 1u * (_GLF_struct_replacement_12.workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u)) - 0u), (subgroup_base) / 1u)) >> 0u)) | (subgroup_base)) + ((_GLF_struct_replacement_15.subgroup_local_id + 1) % subgroup_size)));
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) << 0u), 1u, _GLF_IDENTITY(1u, (1u) | 0u))), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), max(clamp(1u, 1u, 1u), clamp(1u, 1u, 1u)))), min(_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) << 0u), 1u, _GLF_IDENTITY(1u, (1u) | 0u))), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), max(clamp(1u, 1u, 1u), clamp(1u, 1u, 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) << 0u), 1u, _GLF_IDENTITY(1u, (1u) | 0u))), _GLF_IDENTITY(1u, ~ (~ (1u))), 1u), max(clamp(1u, 1u, 1u), clamp(1u, 1u, 1u)))), uint(uvec2(_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) << 0u), 1u, _GLF_IDENTITY(1u, (1u) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), ~ (~ (1u))), 1u), max(clamp(1u, 1u, 1u), clamp(1u, 1u, 1u)))), 0u)))))), mat4x2(1.0), _GLF_struct_18(mat3x4(1.0), _GLF_struct_16(vec3(1.0)), mat3(1.0), _GLF_struct_17(_GLF_IDENTITY(vec3(1.0), abs(_GLF_IDENTITY(exp(vec3(0.0, 0.0, 0.0)), max(exp(vec3(0.0, 0.0, 0.0)), exp(vec3(0.0, 0.0, 0.0))))) * (vec3(1.0))), mat3x2(1.0), ivec3(1), mat2x3(1.0), ivec2(1), bvec3(true)), uvec2(1u)), _GLF_struct_20(_GLF_struct_19(mat2(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, min(1.0, 1.0))))), ivec4(1), uvec3(1u)), atomicLoad(buf[virtual_gid], 4, 64, 2)), _GLF_struct_23(bvec4(true), uvec2(1u), _GLF_struct_21(1, mat4x2(1.0), bvec2(true)), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.4)), _GLF_IDENTITY(_GLF_IDENTITY(float(1.0), (float(1.0)) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.8)), bool(false)))), float(mat3x2(_GLF_IDENTITY(float(1.0), (float(1.0)) / 1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ivec4(1), _GLF_struct_22(vec4(1.0), ivec4(1), ivec2(1), mat3x2(1.0), bvec3(true), vec2(1.0))), _GLF_struct_24(vec4(1.0), mat4x2(1.0), _GLF_IDENTITY(true, _GLF_IDENTITY(true, false || (true)) && (true)), mat3x2(1.0), bvec2(true)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if((_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, min(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_struct_replacement_15.subgroup_local_id) | (_GLF_struct_replacement_15.subgroup_local_id)), _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, clamp(_GLF_struct_replacement_15.subgroup_local_id, _GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_struct_replacement_15.subgroup_local_id) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, (_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, 1u * (_GLF_struct_replacement_15.subgroup_local_id))) | 0u), (_GLF_IDENTITY(_GLF_struct_replacement_15.subgroup_local_id, _GLF_IDENTITY((_GLF_struct_replacement_15.subgroup_local_id), clamp((_GLF_struct_replacement_15.subgroup_local_id), (_GLF_struct_replacement_15.subgroup_local_id), (_GLF_struct_replacement_15.subgroup_local_id))) - 0u)) / 1u), (_GLF_struct_replacement_15.subgroup_local_id) + _GLF_IDENTITY(0u, min(0u, 0u))))))) % 2) == 0)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY((next_virtual_gid), 0u | (_GLF_IDENTITY((next_virtual_gid), 0u | ((next_virtual_gid))))))], uint(1), 4, 64, 4);
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) | (8))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) | (8))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (~ (8))), _GLF_IDENTITY((8) | (8), (_GLF_IDENTITY((8) | (8), ((8) | (8)) >> 0)) | ((8) | (8))))), int(_GLF_IDENTITY(_GLF_IDENTITY(8, ~ (_GLF_IDENTITY(~ (8), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (8))))), (8) | (8)))))) | (int(_GLF_IDENTITY(8, (8) | (8))))), int(8)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (false) || false)))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true))) || false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), max(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))))); _injected_loop_counter ++)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               do
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0), (mat3x2(injectionSwitch.y, 1.0, 0.0, 0.0, 0.0, 0.0)) * mat3(1.0))))) - 0.0)))))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                        {
                                         barrier();
                                        }
                                      }
                                     barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         else
                                          {
                                           do
                                            {
                                             if(_GLF_WRAPPED_IF_TRUE(true))
                                              {
                                               barrier();
                                              }
                                             else
                                              {
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                          }
                                        }
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) ^ 0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (0))), 0, _GLF_IDENTITY(0, (0) >> 0))), (0) + 0), 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                      }
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           do
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec3(true, false, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
                                              {
                                              }
                                             else
                                              {
                                               barrier();
                                              }
                                            }
                                           while(_GLF_WRAPPED_LOOP(false));
                                           if(_GLF_DEAD(false))
                                            {
                                             do
                                              {
                                               barrier();
                                              }
                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                            }
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
            }
           else
            {
            }
           do
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             barrier();
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(bitCount(subgroup_id))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, (true) || false), true, false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - _GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), false || (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, _GLF_IDENTITY(true, ! (! (true))))))))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, clamp(1 & 1, 1 & 1, 1 & 1))) | 0))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))) / _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(1.0) * (mat2(1.0, 1.0, 1.0, 1.0))), (_GLF_IDENTITY(mat2(1.0, 1.0, 1.0, 1.0), mat2(1.0) * (mat2(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))) / mat2(1.0, 1.0, 1.0, 1.0))) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, clamp(7, 7, 7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))) || false), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))) || false))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))), ((! ((_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))) || false)))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), false || (bool(bvec2(false, true)))))) && true), (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))));
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) : _GLF_FUZZED(-4172.4794))))) || (true))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         barrier();
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))
                      {
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) || false))))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 + (int(1))), int(1)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   else
                    {
                     do
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             subgroupBarrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1]))), _GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))) * mat2(1.0), ((vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])), (false ? _GLF_FUZZED(-64.43) : _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))) * mat2(1.0)) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(4.6) : 1.0)))))))).y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x), 1.0, 0.0)), (_GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), (false ? _GLF_FUZZED(90.52) : max(injectionSwitch.y, injectionSwitch.y)))))), injectionSwitch.y)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), (true ? float(mat2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y), mix(float(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), float(_GLF_FUZZED(-2.0)), bool(false)))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)) : _GLF_FUZZED(-3611.3410)))) / 1.0))))));
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0))))) & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(96.09)), float(injectionSwitch.y), bool(true))), injectionSwitch.y, injectionSwitch.y))) - 0.0), bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-5.5)))))))
                      barrier();
                     barrier();
                    }
                  }
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + abs(0.0))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(checker[virtual_gid], _GLF_struct_replacement_25._f3.read, 4, 64, 4);
      }
     else
      {
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
