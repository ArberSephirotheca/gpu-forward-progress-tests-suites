#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size;
 uvec4 GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 _GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size, (GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(4u), uvec2(4u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, false || (false)))), (bool(bool(_GLF_IDENTITY(false, false || (false))))) || false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec4 GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, tan(0.0), 1.0, 1.0)))))), false, false, true)))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.x = subgroup_id;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(49102) : _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0)), (false ? _GLF_FUZZED(-34868) : ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (false ? _GLF_FUZZED(49102) : _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))) > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))), ! (! ((! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.z = subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x = GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.z;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z = subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y) : _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), 1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))))), (_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(37415u, (37415u) | 0u)) : (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), (~ (gl_NumWorkGroups.x)) << 0u)))) | (gl_NumWorkGroups.x), (90204u & 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (_GLF_IDENTITY(~ (gl_NumWorkGroups.x), ~ (~ (~ (gl_NumWorkGroups.x))))))) | (gl_NumWorkGroups.x))))))))));
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.x = num_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.y = workgroup_size;
 GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.y = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.y;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.w = GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.y;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-3.4, -7959.0014)) : (injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))));
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = ((14708) & (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x = workgroup_id;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0))) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(60415) : _injected_loop_counter --)))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-18.48)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))) > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))))))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))) >> 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.z = GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size) | (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size)).w * GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.z;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 do
  {
   GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.w = _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y = GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.w;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), ((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u)) >> 0u), 0u, 1u, 1u)))))) >> 0u), 0u)), (uint(uvec2(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, 0u))) * 1u), (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u))))), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u))))), (0u ^ 1u) * (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u)))))))))) >> 0u), 0u)), (uint(uvec2(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, 0u))) * _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) >> 0u), 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u)))))) >> 0u), 0u)), (uint(uvec2(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, 0u))) * _GLF_IDENTITY(1u, (1u) << 0u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u)))))) >> 0u), 0u)), (uint(uvec2(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, 0u))) * 1u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, ~ (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), uint(uvec4(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y), (~ (GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y)) >> 0u), 0u, 1u, 1u)))))) >> 0u), 0u)), (uint(uvec2(GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.y, 0u))) * 1u)))))) * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, clamp(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x))) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))), max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))))).x))) | (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)), min(false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, clamp(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x))) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))), max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))))).x))) | (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)), false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, clamp(GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x, GLF_merged3_0_2_51_2_1_13_3_1_14GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_sizeworkgroup_base.xy.x))) : _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))), max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ ((_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, min(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size, GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size))) + uvec4(0u, 0u, 0u, 0u)))))).x))) | (GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      break;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z, (false ? _GLF_FUZZED(subgroup_base) : GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z));
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.w = _GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), uint(_GLF_IDENTITY(uvec2(~ (virtual_gid), 0u), ~ (~ (uvec2(~ (virtual_gid), 0u))))))));
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.y + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.y) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec4(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), 0u, 1u, 1u))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, uint(uvec4(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), 0u, 1u, 1u))), (_GLF_IDENTITY(subgroup_base, uint(uvec4(_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base)), 0u, 1u, 1u)))) << 0u))))), 0u ^ (subgroup_base)) + _GLF_IDENTITY(((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z + 1) % GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x), (false ? _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_size.y) : ((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z + 1) % GLF_merged4_0_1_13_1_1_14_2_1_12_3_1_14subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.x)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true))))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) >> 0), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.w], uint(1), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if((GLF_merged4_0_1_13_1_1_11_2_1_17_3_1_11num_workgroupsubgroup_idsubgroup_local_idvirtual_gid.z % 2) == 0)
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), 0u | (_GLF_IDENTITY((next_virtual_gid), max((next_virtual_gid), (next_virtual_gid))))) ^ (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), (false ? _GLF_FUZZED(next_virtual_gid) : uint(1u))))))], uint(_GLF_IDENTITY(2, (2) | 0)), 4, 64, _GLF_IDENTITY(4, max(4, 4)));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, false))))))), false, true, true)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, false))))))), false, true, true))))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))) && true))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, false))))))), false, true, true)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, false))))))), false, true, true))))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))) && true))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, false))))))), false, true, true)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x < injectionSwitch.y)), false, false))))))), false, true, true))))), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true))) && true)))) && true)) || false))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), false || (false || (_GLF_DEAD(false))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 ^ 1), ! (! (_injected_loop_counter != (0 ^ 1))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(460.684), _GLF_FUZZED(_GLF_IDENTITY(8.3, max(8.3, 8.3)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1)))) >> _GLF_IDENTITY(int(1), int(1))), max((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1)))), ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1))))) | ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1)))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1)))) >> _GLF_IDENTITY(int(1), int(1))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1))), min(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1))), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) / 1)))))) >> _GLF_IDENTITY(int(1), int(1)))) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))), (_injected_loop_counter --) - 0))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true)))) && true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))).y) || false))))))))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), false, false)), bool(bvec2(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y), false, false)), false))))))))))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))))))))), true))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 do
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(int(0), 0 | (int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))), true, false, false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-28.77) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-865.021)), bool(false))))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(injectionSwitch) : (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((false ? _GLF_FUZZED(-28.77) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), float(_GLF_FUZZED(-865.021)), bool(false)))), mix(float((false ? _GLF_FUZZED(-28.77) : _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), float(_GLF_FUZZED(-865.021)), bool(false))))), float(_GLF_FUZZED(-7926.8279)), bool(false)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(injectionSwitch) : (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).y)))))) || false)) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(69.12))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
