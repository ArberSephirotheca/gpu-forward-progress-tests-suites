#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), _GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))), false || (bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 + (0 & -11927))))), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 + (0 & -11927))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(true, false || (true)))))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, int(ivec3(-11927, 0, (1 & 1))))))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), false, true)))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) + 0), _GLF_IDENTITY(0, (0) ^ 0), 0)) & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))))))), (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true)))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0)) & -11927))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (! (_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(0, (0) | (0)) & -11927), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))) >> 0) > (0 & -11927)), (! _GLF_IDENTITY((_injected_loop_counter > (_GLF_IDENTITY(0, min(0, 0)) & -11927)), ((_injected_loop_counter > (_GLF_IDENTITY(0, min(0, 0)) & -11927))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))))), _GLF_IDENTITY(false || (bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), ! (_GLF_IDENTITY(! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec2(! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true))))))), ! (! (false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), ((0 & -11927)) | (_GLF_IDENTITY((0 & -11927), 0 | (_GLF_IDENTITY((0 & -11927), 0 + ((0 & -11927))))))))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), ! (! (_injected_loop_counter > (0 & -11927)))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > (_GLF_IDENTITY(0 & -11927, (0 & -11927) ^ 0)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, (_GLF_IDENTITY(-11927, int(ivec4(_GLF_IDENTITY(-11927, (false ? _GLF_FUZZED(-8702) : -11927)), 0, 0, (0 << _GLF_IDENTITY(int(1), int(1))))))) | (-11927))))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), ! (_GLF_IDENTITY(! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true && (! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))))), false || (bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))))))))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)), false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec3(bvec4(bvec3(bvec2(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(bvec2(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec3(bvec4(bvec3(bvec2(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), false))))))))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(atomicXor(_injected_loop_counter, 48146)) : _injected_loop_counter))) | 0) > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))))))), (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0)) & -11927))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), false, true)))), ! (! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), ! (! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), ! (_GLF_IDENTITY(! (_injected_loop_counter > (0 & -11927)), (! (_injected_loop_counter > (0 & -11927))) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), ! (_GLF_IDENTITY(! (_injected_loop_counter > (0 & -11927)), (! (_injected_loop_counter > (0 & -11927))) && true)))), (! (_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), ! (_GLF_IDENTITY(! (_injected_loop_counter > (0 & -11927)), _GLF_IDENTITY((! (_injected_loop_counter > (0 & -11927))), bool(_GLF_IDENTITY(bool((! (_injected_loop_counter > (0 & -11927)))), ! (! (bool((! (_injected_loop_counter > (0 & -11927))))))))) && true))))) || false))))))), _GLF_IDENTITY(false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))), ! (! (false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, ~ (~ (-11927)))))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true, false, true)), (bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true, false, true))) && true)), true)))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), ((0 & -11927)) | 0)))), ! (_GLF_IDENTITY(! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true && (! (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, (-11927) / (1 & 1)))))), ! (! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, (-11927) / (1 & 1))))))))))))))), false || (bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true))))))))))))))) && true), (_GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, (-11927) >> 0)))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, (-11927) / int(_GLF_ONE(1.0, injectionSwitch.y)))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y))), min(ivec2(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y))), ivec2(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y)))))), 1 * (int(ivec2(_injected_loop_counter, int(_GLF_ONE(1.0, injectionSwitch.y))))))) > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), _GLF_IDENTITY(false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))), (false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))) && true)), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), true, true)))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))), false, true)))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), _GLF_IDENTITY((_injected_loop_counter > (0 & -11927)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_injected_loop_counter > (0 & -11927)), false, false), bvec3(bvec4(bvec3((_injected_loop_counter > (0 & -11927)), false, false), true)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bvec3((_injected_loop_counter > (0 & -11927)), false, false), bvec3(bvec4(bvec3((_injected_loop_counter > (0 & -11927)), false, false), true)))), true, false, false)), (bool(bvec4(bool(_GLF_IDENTITY(bvec3((_injected_loop_counter > (0 & -11927)), false, false), bvec3(bvec4(bvec3((_injected_loop_counter > (0 & -11927)), false, false), true)))), true, false, false))) || false))) || false))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, (0 & -11927) << 0))))), bool(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, (0 & -11927) << 0)))))), true && (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, (0 & -11927) << 0))))))))))), false || (_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927))))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))))))), (! (! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))) || false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) >> ((0 >> _GLF_IDENTITY(int(3), int(3))) ^ 0)) & _GLF_IDENTITY(-11927, min(_GLF_IDENTITY(-11927, (-11927) | (-11927)), -11927))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), (_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))) && true), bool(_GLF_IDENTITY(bvec3(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, (_GLF_IDENTITY(0 & -11927, clamp(0 & -11927, 0 & -11927, 0 & -11927))) | (0 & -11927)))))), true, false), bvec3(bvec4(bvec3(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), true, false), false)))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> (0 >> _GLF_IDENTITY(int(4), int(4)))) > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (! (_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), 0 | ((0 & -11927))), ! (_GLF_IDENTITY(! (_injected_loop_counter > (0 & -11927)), _GLF_IDENTITY((! (_injected_loop_counter > (0 & -11927))), false || ((! (_injected_loop_counter > (0 & -11927))))) && true))))))), _GLF_IDENTITY(false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), min((0 & -11927), (0 & -11927)))))))), ! (! (false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), bool(bvec3(_injected_loop_counter > (0 & -11927), false, true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) << 0) > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927)))))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) << 0) > (_GLF_IDENTITY(0 & -11927, 0 ^ (_GLF_IDENTITY(0 & -11927, ~ (~ (0 & -11927))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), false || (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), ((0 & -11927)) ^ 0)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), ((0 & -11927)) ^ 0)))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), ((0 & -11927)) ^ 0))))))))), bool(bvec2(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & -11927), ((0 & -11927)) ^ 0))))))))), false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + log(1.0)), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + log(1.0)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + log(1.0)))) > injectionSwitch.y)), false, true)))), ! (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), (_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), (_injected_loop_counter > (0 & -11927)) || false)) && true), false || (_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), clamp(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))), _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))))))) * _GLF_IDENTITY(1, min(1, 1))) > (0 & -11927), false || _GLF_IDENTITY((_injected_loop_counter > (0 & -11927)), ((_injected_loop_counter > (0 & -11927))) || false)))), bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))), ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 & -11927), false || (_injected_loop_counter > (0 & -11927))))))))))), _GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) || false, bool(bvec4((_GLF_IDENTITY(true, (true) && true)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1) > (0 & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & _GLF_IDENTITY(-11927, (-11927) >> 0)))))))), false || (bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, clamp(0, 0, 0)) & -11927))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), ! (_GLF_IDENTITY(! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true && (! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))))))))), false || (bool(bool(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))), (! (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), _GLF_IDENTITY(bool(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927)))), ! (_GLF_IDENTITY(! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true && (! (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & -11927, int(ivec2(0 & -11927, ((1 & 1) ^ 0)))))))))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -11927))))), true && ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) > (0 & -11927))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) && true)) && true)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8318.8206)), bool(false)))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8318.8206)), bool(false)))))), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8318.8206)), bool(false)))))), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8318.8206)), bool(false)))))), false)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))))))) && _GLF_IDENTITY(true, true && (true)))))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0)), float(mat3x4(float(mat3(injectionSwitch.y, 0.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-879.876) : injectionSwitch.y, float(mat4x2(false ? _GLF_FUZZED(-879.876) : injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), determinant(mat4(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)))))))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), false, true)))))))))))), false, false, false))))))), false), false, true))))))
      continue;
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), false)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))), true)))), true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))), true))))), true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
      }
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))
    {
    }
   else
    {
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)))), (_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) - 0u), 0u, 0u) | _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | ((gl_WorkGroupID))))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, (0u) | 0u)), clamp(min(0u, _GLF_IDENTITY(0u, (0u) | 0u)), min(0u, _GLF_IDENTITY(0u, (0u) | 0u)), min(0u, _GLF_IDENTITY(0u, (0u) | 0u)))), (_GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, (0u) | 0u)), clamp(min(0u, _GLF_IDENTITY(0u, (0u) | 0u)), min(0u, _GLF_IDENTITY(0u, (0u) | 0u)), min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | 0u, ((0u) | 0u) - 0u)))))) / 1u)))), max(_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) | _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | ((gl_WorkGroupID))))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | 0u))))), _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | ((gl_WorkGroupID))))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), (_GLF_IDENTITY(0u, (0u) | 0u)) >> 0u)))))))) ^ uvec3(0u, 0u, 0u)), clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID)).x, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID)).x), min(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))))).x), (true ? (_GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)), gl_WorkGroupID)).x) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID), (clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)) | uvec3(0u, 0u, 0u))), gl_WorkGroupID)).x)))));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), max(workgroup_id, workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(max(workgroup_id, workgroup_id), ~ (~ (max(workgroup_id, workgroup_id))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), (1u & 1u) * (_GLF_IDENTITY(workgroup_id, clamp(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), workgroup_id, workgroup_id)))), max(workgroup_id, workgroup_id)), 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) | (_GLF_IDENTITY(0u & 158574u, (false ? _GLF_FUZZED(subgroup_id) : 0u & 158574u)))), _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)))), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), max(workgroup_id, workgroup_id)), 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, 1u * (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec3(workgroup_id, 0u, 0u), min(_GLF_IDENTITY(uvec3(workgroup_id, 0u, 0u), ~ (~ (uvec3(workgroup_id, 0u, 0u)))), _GLF_IDENTITY(uvec3(workgroup_id, 0u, 0u), (_GLF_IDENTITY(uvec3(workgroup_id, 0u, 0u), uvec3(0u, 0u, 0u) ^ (uvec3(workgroup_id, 0u, 0u)))) ^ uvec3(0u, 0u, 0u))))))) - 0u))), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(110281u) : workgroup_id))) / 1u), workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u)))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u), (false ? _GLF_FUZZED(110281u) : workgroup_id))) / _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, uint(uvec3(1u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u)))))), workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (0u & 122897u)), workgroup_id)), 0u)))) | 0u), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) + 0u))), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)))), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(110281u) : workgroup_id, clamp(false ? _GLF_FUZZED(110281u) : workgroup_id, false ? _GLF_FUZZED(110281u) : workgroup_id, false ? _GLF_FUZZED(110281u) : workgroup_id))))) / 1u), workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u)))) | 0u), _GLF_IDENTITY((1u ^ 0u), ((1u ^ 0u)) / 1u))), min(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(110281u) : _GLF_IDENTITY(workgroup_id, (workgroup_id) | (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))))) / 1u), workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u)))) | 0u), (1u ^ 0u))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(110281u) : workgroup_id))) / 1u), workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u)))) | _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u))), (1u ^ 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(110281u) : workgroup_id))) / _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1u))), workgroup_id)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(46921u, 77935u, 96399u).yzxx) : uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 0u, 0u))))), 0u)))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), uint(uvec2(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 0u)))))) / 1u);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, max(0, 0))), (~ (_GLF_IDENTITY(0, max(0, 0)))) - 0))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(max(int(8), int(8)), (max(int(8), int(8))) | (_GLF_IDENTITY(max(int(8), int(8)), (max(int(8), int(8))) | (max(int(8), int(8)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3(! (_GLF_WRAPPED_IF_TRUE(true)), false, false))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), bool(bvec3(! (_GLF_WRAPPED_IF_TRUE(true)), false, false)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-90.48)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), abs(1.0), 1.0))).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))), (false ? _GLF_FUZZED(77794) : int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, abs(1.0), 1.0))).y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (int(8))))), bool(bool(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (int(8))))), true && (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 + (int(8))))))))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec2(! (_GLF_IDENTITY(false, (false) || false)), true)))))))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false), false, true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec2(! (true), true), bvec2(bvec2(bvec2(! (true), true))))))), bool(bvec3(! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec2(! (true), true), bvec2(bvec2(bvec2(! (true), true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (workgroup_base + subgroup_base) - 0u) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), false || (bool(bvec3(false, true, true)))))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-15393)))); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((true ? _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_size))) / 1u))))) : _GLF_FUZZED(subgroup_local_id)), (false ? _GLF_FUZZED(workgroup_id) : (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) << 0u), (_GLF_IDENTITY((subgroup_size) / 1u, (_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(workgroup_base))) / 1u) << 0u)) / 1u)))))), 1u * (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, 0u ^ (0u))) ^ (_GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u))) * (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, _GLF_IDENTITY(((subgroup_size) / 1u), (true ? _GLF_IDENTITY(((subgroup_size) / 1u), (((subgroup_size) / _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) - (0u | 0u)), 1u, 1u)))) >> 0u) : _GLF_FUZZED(workgroup_id))) << 0u)))))))) : _GLF_FUZZED(subgroup_local_id))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (((_GLF_IDENTITY(70268, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(70268, int(ivec3(70268, 1, 0)))), int(ivec4(~ (_GLF_IDENTITY(70268, int(ivec3(70268, 1, 0)))), (-86202 & 0), 0, 0))))) & _GLF_IDENTITY(0, ~ (~ (0)))) ^ 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - (0 >> _GLF_IDENTITY(int(7), int(7))))), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(7140, clamp(_GLF_IDENTITY(7140, (7140) << 0), 7140, _GLF_IDENTITY(7140, (7140) << 0)))) : _GLF_IDENTITY(1, (1) | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, (1) / 1))), int(0))) >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), (vec3(1.0, 0.0, 1.0)) - vec3(0.0, 0.0, 0.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0)))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-15.08)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          continue;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))))
    break;
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, uint(uint(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(num_workgroup) : virtual_gid))) / 1u))))], uint(1), _GLF_IDENTITY(4, 0 + (4)), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) * 1), (_GLF_IDENTITY(64, (64) * 1)) / 1), 4);
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), true))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))))))))), bool(bvec3((! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false))))))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), false), bvec3(bvec3(bvec3(bvec2(false, false), false)))))))))))))), false, false))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     break;
                    }
                   continue;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y : _GLF_FUZZED(-2.7), (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y : _GLF_FUZZED(-2.7)) + 0.0))), 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(float(6469))), float(0.0), bool(true)), (mix(float(_GLF_FUZZED(float(6469))), float(0.0), bool(true))) / _GLF_ONE(1.0, injectionSwitch.y))), 0.0)), 0.0), vec2(1.0, 1.0))), 1.0, 0.0, 1.0)), sin(0.0), _GLF_IDENTITY(0.0, (0.0) / sqrt(1.0)), abs(1.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(tan(0.0), 1.0), mat2(1.0) * (vec2(tan(0.0), 1.0))), vec2(0.0, 1.0)), dot(vec2(tan(0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0)), vec2(0.0, 1.0))), 1.0)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
            return;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, int(int(_GLF_IDENTITY(1 & 1, _GLF_IDENTITY((1 & 1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))), 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))), 1))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) & 1), _GLF_IDENTITY(0, (0) | (0)) ^ (_GLF_IDENTITY((1 & 1) | (1 & 1), (_GLF_IDENTITY((1 & 1) | (1 & 1), (false ? _GLF_FUZZED(-41658) : (1 & 1) | (1 & 1)))) - 0)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1)))) | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) > _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, _GLF_IDENTITY(1, clamp(1, 1, 1)))))) | _GLF_IDENTITY((0), ((0)) ^ 0)))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) << 0)) / _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), 0 | (int(int(1))))), _GLF_IDENTITY(1, (1) | 0)))), 1)))) | (0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(-32055, clamp(_GLF_IDENTITY(-32055, (-32055) ^ 0), -32055, -32055)) & _GLF_IDENTITY(0, int(ivec3(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), _GLF_IDENTITY(1, int(int(1))))))) | (0)), max(_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0)), clamp(_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0)), _GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0))))))) << 0)))) | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0))), _GLF_IDENTITY(0 | (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0)))), int(int(_GLF_IDENTITY(0 | (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0)))), (_GLF_IDENTITY(0 | (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 | (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0))))))) ^ 0))))))))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0)))))) - 0), _GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), int(3)), (true ? clamp(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), 1 * (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter))))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0)))))) - 0), _GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), int(3)), (true ? clamp(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), 1 * (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0)))))) - 0), _GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), int(3)), (true ? clamp(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), 1 * (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter))))))), (_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0)))))) - 0), _GLF_IDENTITY(int(3), _GLF_IDENTITY(clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), int(3)), (true ? clamp(_GLF_IDENTITY(int(3), min(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), clamp(int(3), int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter))), 1 * (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(_injected_loop_counter)))))) : _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter)))))))) << 0)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(0, (-32055 & 0) | (0)))), ((~ (_GLF_IDENTITY(0, (-32055 & 0) | (0))))) >> 0)) << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (-32055 & 0) | (0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (0 & -22871) ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, _GLF_IDENTITY(0 ^ (_GLF_IDENTITY(3, 0 | (3))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, 0 | (3)), (_GLF_IDENTITY(3, 0 | (3))) >> 0))))), (_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(3, 0 | (3))))) | (_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(3, 0 | (3)), (_GLF_IDENTITY(3, 0 | (3))) / 1)))))))), int(3)))))) * 1)), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)), _injected_loop_counter)))) > _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (0)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (_GLF_IDENTITY(0, max(0, 0)))))), clamp(~ (~ (_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (_GLF_IDENTITY(0, max(0, 0)))))), ~ (~ (_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (_GLF_IDENTITY(0, max(0, 0)))))), ~ (~ (_GLF_IDENTITY(0, (-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))) | (_GLF_IDENTITY(0, max(0, 0))))))))) | (~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1)))), ~ (~ ((-32055 & _GLF_IDENTITY(0, int(ivec3(0, 0, 1))))))) | (0))))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, min(3, 3)), _GLF_IDENTITY((_GLF_IDENTITY(3, min(3, 3))), min((_GLF_IDENTITY(3, min(3, 3))), (_GLF_IDENTITY(3, min(3, 3))))) >> 0)), 0 | (int(_GLF_IDENTITY(_GLF_IDENTITY(3, min(3, 3)), _GLF_IDENTITY((_GLF_IDENTITY(3, min(3, 3))), min((_GLF_IDENTITY(3, min(3, 3))), (_GLF_IDENTITY(3, min(3, 3))))) >> 0)))), min(_GLF_IDENTITY(int(3), (int(_GLF_IDENTITY(3, (3) << 0))) - _GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1), int(3))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (-32055 & 0) | (0))))) << _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(-32055, ~ (~ (_GLF_IDENTITY(-32055, ~ (~ (-32055)))))) & 0) | (0))))) << _GLF_IDENTITY(int(3), int(3)))))) * 1)), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false) && true)))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, determinant(mat2(1.0, 0.0, 1.0, 1.0)), sqrt(1.0)), (false ? _GLF_FUZZED(mat2(-5.7, -4.3, -241.045, 6.7)) : mat2(injectionSwitch, determinant(mat2(1.0, 0.0, 1.0, 1.0)), sqrt(1.0)))))))).y))))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (! (_GLF_IDENTITY(false, false || (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || false))) && true)))
            break;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), float(mat3(log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (false ? _GLF_FUZZED(56.96) : 1.0))), mat4(1.0) * (mat2x4(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, _GLF_IDENTITY(log(_GLF_IDENTITY(1.0, max(1.0, 1.0))), float(mat3(log(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, determinant(mat4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(9.7)), float(0.0), bool(_GLF_IDENTITY(true, (true) && true)))), 0.0, 1.0)) * (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))), max(1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))), 1.0))))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) && true))), true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! (false)))), bool(bvec3(! (_GLF_IDENTITY(! (false), true && (! (false)))), true, false)))), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))), true, false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))), true, true)), bvec2(bvec4(bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true)))), true, true)), true, true)))))), ! (_GLF_IDENTITY(! (false), true && _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), true, true, false))))) && true))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), 1.0, 0.0, 0.0, _GLF_IDENTITY(log(1.0), float(mat3(log(1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), float(_GLF_IDENTITY(mat3x2(float(0.0), sin(sin(0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0), transpose(transpose(mat3x2(float(0.0), sin(sin(0.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0)))))), float(_GLF_FUZZED(140.584)), bool(false)))))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(56.96) : 1.0))), mat4(1.0) * (mat2x4(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, max(1.0, 1.0))), (false ? _GLF_FUZZED(mix(7.6, 7529.6185, false)) : log(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), float(mat3(log(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(55.91)), float(1.0), bool(true)))) - determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 1.0)), max(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, determinant(mat4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.1)), bool(false))), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))), max(1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))), 1.0))))) > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, false || (true)))))))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), bool(bool(bool(bvec4(_GLF_DEAD(false), true, true, true)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (2))), 4, 64, 4);
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       break;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          break;
         continue;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true, _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))) && true, _GLF_IDENTITY(false, ! (! (false))), false, true)), true && (_GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (injectionSwitch.x > injectionSwitch.y)))))) && true, _GLF_IDENTITY(false, ! (! (false))), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true, _GLF_IDENTITY(false, ! (! (false))), false, true))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, false)))))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)))).y)), false)))))), true, false)))))));
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (false)))))) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 | 0), 0 | (_GLF_IDENTITY((0 | 0), 0 | (_GLF_IDENTITY((0 | 0), (false ? _GLF_FUZZED(5404) : _GLF_IDENTITY((0 | 0), ((0 | 0)) >> 0)))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y)), true, false))), false, true)), (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))).y)), true, false))), false, true))) && true))))
            continue;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), false || ((! (false))))))), _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ! (! ((! (false))))), ! (! (! _GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))) || false, ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! ((! (false)))), bool(bvec3(_GLF_IDENTITY((! ((! (false)))), ((! ((! (false))))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (! _GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), bool(bool(((! (false)))))))))))) || false)))))) && true)))
                {
                 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(9.8)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.9)), _GLF_IDENTITY(float(injectionSwitch.y), 0.0 + (float(injectionSwitch.y))), bool(true)))), bool(_GLF_IDENTITY(true, (true) || false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(_GLF_IDENTITY(int(2), (int(2)) | (int(2))), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(max(int(6), int(6)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? max(int(6), int(6)) : _GLF_IDENTITY(_GLF_FUZZED(-99104), min(_GLF_FUZZED(-99104), _GLF_FUZZED(-99104)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, clamp(6, 6, 6)), int(ivec4(_GLF_IDENTITY(6, clamp(6, 6, 6)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, ~ _GLF_IDENTITY((~ (next_virtual_gid)), max((~ (next_virtual_gid)), (~ (next_virtual_gid))))), _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u), 0u + (next_virtual_gid)), next_virtual_gid))], uint(2), 4, 64, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) >> (0 ^ 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))) >> (0 ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY((4), max(_GLF_IDENTITY((4), (_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), (_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), 0 + (_GLF_IDENTITY((4), max((4), (4)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((4), max((4), (4))), min(_GLF_IDENTITY((4), max((4), (4))), _GLF_IDENTITY((4), max((4), (4)))))))) - 0), (4))) >> (0 ^ 0), min(_GLF_IDENTITY((4), max(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), max((4), (4)))) - 0), (4))) >> (0 ^ 0), _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), (_GLF_IDENTITY((4), max(_GLF_IDENTITY((4), _GLF_IDENTITY(int(_GLF_IDENTITY(int((4)), (int((4))) | 0)), clamp(int(_GLF_IDENTITY(int((4)), (int((4))) | 0)), int(_GLF_IDENTITY(int((4)), (int((4))) | 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(int((4)), (int((4))) | 0), (_GLF_IDENTITY(int((4)), (int((4))) | 0)) << 0)), 0 | (int(_GLF_IDENTITY(int((4)), (int((4))) | 0))))))), (4)))) - _GLF_IDENTITY(0, 0 | (0))), (4))) >> (0 ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec2(-51450, -22639)[0]) : 0)))))) + 0)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(max(4, _GLF_IDENTITY(4, 0 | (4))), _GLF_IDENTITY(int(int(_GLF_IDENTITY(max(4, _GLF_IDENTITY(4, 0 | (4))), min(max(4, _GLF_IDENTITY(4, 0 | (4))), max(4, _GLF_IDENTITY(4, 0 | (4))))))), (int(int(_GLF_IDENTITY(max(4, _GLF_IDENTITY(4, 0 | (4))), min(max(4, _GLF_IDENTITY(4, 0 | (4))), max(4, _GLF_IDENTITY(4, 0 | (4)))))))) * 1))), (4) >> (0 ^ 0)), 0 ^ (_GLF_IDENTITY(4, (4) >> (0 ^ _GLF_IDENTITY(0, 0 + (0))))))) >> (14039 & 0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 | (4)), 4))) >> (0 ^ _GLF_IDENTITY(0, ~ (~ (0))))), 0 ^ (_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), min((_GLF_IDENTITY(4, max(4, 4))), _GLF_IDENTITY((_GLF_IDENTITY(4, max(4, 4))), min((_GLF_IDENTITY(4, max(4, 4))), (_GLF_IDENTITY(4, max(4, 4))))))) >> _GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, ~ (~ (0)))), (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, ~ (~ (0)))), max((0 ^ _GLF_IDENTITY(0, ~ (~ (0)))), (0 ^ _GLF_IDENTITY(0, ~ (~ (0))))))) | (_GLF_IDENTITY((0 ^ _GLF_IDENTITY(0, ~ (~ (0)))), (true ? (0 ^ _GLF_IDENTITY(0, ~ (~ (0)))) : _GLF_FUZZED(84886)))))))), max(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) >> (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0 ^ 0, 0 | (0 ^ 0)), (_GLF_IDENTITY(0 ^ 0, 0 | (0 ^ 0))) >> 0))))), _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(4, 4)), 4)), _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, ~ (~ (4)))))), (_GLF_IDENTITY(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))), int(_GLF_IDENTITY(int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))), ~ (_GLF_IDENTITY(~ (int(max(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), min(_GLF_IDENTITY(~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), (_GLF_IDENTITY((int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), int(ivec3(_GLF_IDENTITY((int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), clamp((int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))))), 0, 1)))) ^ 0), 0 ^ (~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))))))), min(~ (_GLF_IDENTITY(~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), _GLF_IDENTITY(0 ^ (~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))))), (0 << _GLF_IDENTITY(int(3), int(3))) ^ (0 ^ (~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))))))))), ~ (_GLF_IDENTITY(~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) - 0), 4)), 4))))), 0 ^ (_GLF_IDENTITY(~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4))))), (~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))))) | (~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))))))))))))), ~ (int(max(_GLF_IDENTITY(4, max(4, 4)), _GLF_IDENTITY(4, max(4, 4)))))))))))) << _GLF_IDENTITY(0, (0) - 0))), (4) >> (0 ^ _GLF_IDENTITY(0, (false ? _GLF_FUZZED(82854) : 0)))))))))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 1.0, 1.0)), max(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(398.151))), 1.0)), sqrt(vec2(1.0, 1.0)) * (vec2(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(398.151))), 1.0)))))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false); _injected_loop_counter ++)
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
