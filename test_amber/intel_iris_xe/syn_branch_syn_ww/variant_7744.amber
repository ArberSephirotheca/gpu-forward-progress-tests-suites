#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2x3 _f0;
 uvec2 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 mat2 _f4;
 uint num_workgroup;
 uvec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))) > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))) || false)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))) || false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, float(mat3(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, 1.0, 1.0, 0.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, abs(1.0))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(_GLF_IDENTITY(mat3(mat2(1.0)), _GLF_IDENTITY(mat3(mat4x3(_GLF_IDENTITY(mat3(mat2(1.0)), transpose(transpose(mat3(mat2(1.0))))))), (false ? _GLF_FUZZED(mat3(-3.5, -3587.3008, 2.4, 7.6, 34.76, 62.90, 4.5, 1.4, 4072.7916)) : mat3(mat4x3(_GLF_IDENTITY(mat3(mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0)))), transpose(transpose(mat3(mat2(1.0))))))))))), (mat2(_GLF_IDENTITY(mat3(mat2(1.0)), _GLF_IDENTITY(mat3(mat4x3(_GLF_IDENTITY(mat3(mat2(1.0)), transpose(transpose(mat3(mat2(1.0))))))), (false ? _GLF_FUZZED(mat3(-3.5, -3587.3008, 2.4, 7.6, 34.76, 62.90, 4.5, 1.4, 4072.7916)) : mat3(mat4x3(_GLF_IDENTITY(mat3(mat2(1.0)), transpose(transpose(mat3(mat2(1.0)))))))))))) / mat2(1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)) * mat2(1.0), (_GLF_IDENTITY(true, ! (! (true))) ? ((injectionSwitch) * mat2(1.0)) * mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0)) : _GLF_FUZZED(injectionSwitch))))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec2((_GLF_DEAD(false)), false), bvec2(bvec3(bvec2((_GLF_DEAD(false)), false), true))))), bool(bvec3(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(false, (false) || false) || ((_GLF_DEAD(false)))), true, true)))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec4(! (_GLF_IDENTITY(false, false || (false))), true, false, true))), _GLF_IDENTITY(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (! (true && (! (_GLF_IDENTITY(false, false || (false))))))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))))), false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec4(! (_GLF_IDENTITY(false, false || (false))), true, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, false))))), true))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), true && (bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))))))))))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec4(! (_GLF_IDENTITY(false, false || (false))), true, false, true))), _GLF_IDENTITY(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))), bool(bvec3((! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY((_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (false)))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))))) || false, ! (! ((_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (false)))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))))) || false))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))), bool(bvec3((! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY((_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (false)))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))))) || false, ! (! ((_GLF_IDENTITY(true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (false)))), ! (! (_GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, false || (false)))), ! (_GLF_IDENTITY(! (true && (! (_GLF_IDENTITY(false, false || (false))))), bool(bool(! (true && (! (_GLF_IDENTITY(false, false || (false)))))))))))))) || false))))))) && true)))), false))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat2x3(1.0), uvec2(1u), mat3x4(1.0), bvec4(true), mat2(1.0), _GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)), uvec2(1u));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-604.347)), bool(false))) > injectionSwitch.y, false, false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-604.347)), bool(false))) > injectionSwitch.y, false, false, false)), false, true), bvec3(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-604.347)), bool(false))) > injectionSwitch.y, false, false, false)), false, true))))))) && true)) || false, false || (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false, false, false))) && true)) || false, false || (_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, sqrt(1.0), 0.0, 1.0, determinant(mat2(0.0, length(vec2(0.0, 0.0)), 0.0, 0.0)), 1.0, 1.0, 0.0))).x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))) && true)) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, false, false, false))) && true), true && (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), (bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))) && true)))) || false))))))))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[_GLF_IDENTITY(0, 0 | (0))], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(0u | (gl_WorkGroupID[2]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))))), (false ? _GLF_FUZZED(subgroup_id) : (gl_WorkGroupID[2]))))) | (_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(0u | (gl_WorkGroupID[2]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[_GLF_IDENTITY(2, int(ivec4(2, 0, 0, (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) & 1))))]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), (_GLF_IDENTITY((gl_WorkGroupID[2]), min(_GLF_IDENTITY((gl_WorkGroupID[2]), ((gl_WorkGroupID[2])) / 1u), (gl_WorkGroupID[2])))) / 1u), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min(_GLF_IDENTITY((gl_WorkGroupID[2]), uint(uvec3((gl_WorkGroupID[2]), 1u, 1u))), (gl_WorkGroupID[_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, int(int(2))), 2))]))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))))))), 1u * (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), (_GLF_IDENTITY((gl_WorkGroupID[2]), min(_GLF_IDENTITY((gl_WorkGroupID[2]), ((gl_WorkGroupID[2])) / 1u), (gl_WorkGroupID[2])))) / 1u), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min(_GLF_IDENTITY((gl_WorkGroupID[2]), uint(uvec3((gl_WorkGroupID[2]), 1u, 1u))), (gl_WorkGroupID[_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, int(int(2))), 2))]))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (0u << _GLF_IDENTITY(uint(2u), uint(2u))))))))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((gl_WorkGroupID[2]), max(_GLF_IDENTITY((gl_WorkGroupID[2]), uint(uint((gl_WorkGroupID[2])))), (gl_WorkGroupID[2]))))))) | (_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) ^ 0u), _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) >> uvec3(0u, 0u, 0u))))[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u)))))) + 0u), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(0u | (gl_WorkGroupID[2]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? (gl_WorkGroupID[2]) : _GLF_FUZZED(subgroup_local_id))), min((gl_WorkGroupID[2]), (gl_WorkGroupID[_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << 0)) | (2)), 0)))]))) : _GLF_FUZZED(subgroup_size)))))))))), (false ? _GLF_FUZZED(subgroup_id) : (gl_WorkGroupID[2]))))) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], _GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], gl_WorkGroupID[2]))))[2]))) | _GLF_IDENTITY(0u, (0u) | (0u)))))), ~ (~ ((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], _GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], gl_WorkGroupID[2]))))[2]))) | _GLF_IDENTITY(0u, (0u) | (0u)))))))))), 0u, 1u))))).x, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) | (gl_WorkGroupID[2]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))), uint(uvec2(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))), 0u)))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), _GLF_IDENTITY((gl_WorkGroupID[2]), clamp((gl_WorkGroupID[2]), (gl_WorkGroupID[2]), (gl_WorkGroupID[2]))))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), max(_GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), clamp((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), ~ (~ ((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))))))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), clamp((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), min(_GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), clamp((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))))) | (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))))), (false ? _GLF_FUZZED(subgroup_id) : (gl_WorkGroupID[2]))))) | (_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(0u, 0u, 0u))[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u))))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(0u | (gl_WorkGroupID[2]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], (gl_WorkGroupID[0]) ^ 0u), gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u)))[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u))[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))), (_GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2])))) | 0u) : _GLF_FUZZED(subgroup_size)))))))))), (false ? _GLF_FUZZED(subgroup_id) : (gl_WorkGroupID[2]))))) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))), ((_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])))) * 1u) | 0u)))), uint(uvec4((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))), ((_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])))) * 1u) | 0u)))), 0u, (0u << _GLF_IDENTITY(uint(4u), uint(4u))), 1u)))), 0u, 1u))))).x, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[_GLF_IDENTITY(1, 0 + (1))], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(0u | (_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), (_GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupID, 0u)), (true ? uvec3(uvec4(gl_WorkGroupID, 0u)) : _GLF_FUZZED(uvec3(103041u, 187832u, 64317u))))) - uvec3(0u, 0u, 0u)))[_GLF_IDENTITY(2, clamp(2, 2, 2))]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), max(_GLF_IDENTITY((gl_WorkGroupID[2]), ((gl_WorkGroupID[2])) - 0u), (gl_WorkGroupID[2]))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(min((gl_WorkGroupID[2]), (gl_WorkGroupID[2])), (min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) << 0u)) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) / uvec3(1u, 1u, 1u))[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))))))), (false ? _GLF_FUZZED(subgroup_id) : (gl_WorkGroupID[2]))))) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u)))))), ((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u))))))) | ((_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u))))))))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], _GLF_IDENTITY(0u | (gl_WorkGroupID[2]), 0u + (_GLF_IDENTITY(0u | (gl_WorkGroupID[2]), min(0u | (gl_WorkGroupID[2]), 0u | (gl_WorkGroupID[2])))))), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, 0 + (2))))) + (43453 & 0))], 0u | _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID[2]), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED(atomicLoad(subgroup_local_id, bitfieldExtract(26845, -31609, -48286), -57622, 5569)) : _GLF_FUZZED(subgroup_size))))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((_GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) - uvec3(0u, 0u, 0u))) / (uvec3(0u, 0u, 0u) ^ uvec3(1u, 1u, 1u)))[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))) | _GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), clamp((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), (uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), uint(uvec4((uint(uint(_GLF_IDENTITY((gl_WorkGroupID[2]), (true ? _GLF_IDENTITY((gl_WorkGroupID[2]), min((gl_WorkGroupID[2]), (gl_WorkGroupID[2]))) : _GLF_FUZZED(subgroup_size)))))), 1u, 1u, 1u))))))))), (false ? _GLF_FUZZED(subgroup_id) : (_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID))[2]))))) | (_GLF_IDENTITY(gl_WorkGroupID[2], 0u | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[2], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], 0u ^ (gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[2]))[2])), (_GLF_IDENTITY(gl_WorkGroupID[_GLF_IDENTITY(2, (2) | (2))], max(gl_WorkGroupID[2], _GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[_GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(46853) : 0))], gl_WorkGroupID[1], gl_WorkGroupID[2]))[2]))) | 0u))))), 0u, 1u))))).x) / 1u), (0u ^ 1u), ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 0u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) | (workgroup_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch)).y)), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), true, false, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    return;
   return;
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bvec3(bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), true, false))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) && true)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(245.174)))) && true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), true, true, false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, min(workgroup_base + subgroup_base, workgroup_base + subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, uint(_GLF_IDENTITY(uvec2(subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uvec2(subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (uvec2(subgroup_base, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))) / _GLF_IDENTITY(1u, max(1u, 1u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true))))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.5)), bvec2(true, false))), injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_base))), ~ (~ (~ (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_base)))))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bool(false))))), (bool(bool(_GLF_IDENTITY(false, bool(bool(false)))))) || false)))))))
  barrier();
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) ^ 0)), uint(_GLF_IDENTITY(uvec2((subgroup_local_id % 2), 0u), _GLF_IDENTITY((false ? _GLF_FUZZED(uvec2(uvec4(170541u, 101328u, 151814u, 62567u))) : uvec2((subgroup_local_id % 2), 0u)), ((false ? _GLF_FUZZED(uvec2(uvec4(170541u, 101328u, 151814u, 62567u))) : uvec2((subgroup_local_id % 2), 0u))) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))) == 0)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, ((false) && true) && true))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (false)))), false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)), bool(bool(! (false)))), false)), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false))))), true, false, false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)), bool(bool(! (false)))), false)), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false))))), true, false, false)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)), bool(bool(! (false)))), false)), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false))))), true, false, false)))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)), bool(bool(! (false)))), false)), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false))))), true, false, false)))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(bool(bvec4(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))) && true)), bool(bool(! (false)))), false)), true, false, false)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(! (false), bool(bool(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), false))))), true, false, false)))), true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true)))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true))))))))), (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true)))))))))) || false)))), ! (! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))), true, true)), (bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false), bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))), true, true))) || false)))))))) || false))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), false || _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false))), ! (! ((bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))), false)))))))))), (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)))))), (false || (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, false))))))) && true)))) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))) && true))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))) && true))))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), _GLF_IDENTITY((bool(bvec4(_GLF_DEAD(false), true, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((bool(bvec4(_GLF_DEAD(false), true, true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) && true))))))))))))))), false || (false))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)) || false)), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false || (false))), false, false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     return;
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true && (false)), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], clamp(_GLF_IDENTITY((injectionSwitch)[1], 1.0 * (_GLF_IDENTITY((injectionSwitch)[1], float(mat2x3((injectionSwitch)[1], _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0))))), (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(vec3((injectionSwitch)[1], 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), (vec3((injectionSwitch)[1], 1.0, _GLF_ZERO(0.0, injectionSwitch.x))) * vec3(1.0, 1.0, 1.0)))))) : _GLF_FUZZED(2605.5496)))), vec2(_GLF_IDENTITY(_GLF_FUZZED(5.2), mix(float(_GLF_FUZZED(5.2)), float(_GLF_FUZZED(vec3(-2.5, -948.660, 397.944).t)), bool(false))), _GLF_FUZZED(6.9)), bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))), false))).x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, tan(0.0), 0.0, 0.0, abs(cos(0.0)), 1.0, 0.0, 0.0))))))) && true)) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), vec2(mat2x3(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), max(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 1.0))), min(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, ! (! (true))))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, min(2, 2))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
