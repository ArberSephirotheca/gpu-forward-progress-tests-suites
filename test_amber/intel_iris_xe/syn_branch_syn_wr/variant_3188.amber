#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))) && true)))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       break;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, (false) || false), true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(tanh(fract(-599.496))), mix(float(_GLF_FUZZED(tanh(fract(-599.496)))), float(_GLF_FUZZED(8.9)), bool(false))) : injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(tanh(fract(-599.496))), mix(float(_GLF_FUZZED(tanh(fract(-599.496)))), float(_GLF_FUZZED(8.9)), bool(false))) : injectionSwitch.x)) > injectionSwitch.y))))))))))
      continue;
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false)))))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (2))), (true ? int(_GLF_IDENTITY(2, (2) | (2))) : _GLF_FUZZED(97650))), (int(2)) >> 0)))); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
                break;
               for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.2, -3.6)))), injectionSwitch)), injectionSwitch)).y)))))))) && true))))))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 else
                  {
                  }
                }
               return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, clamp(0, 0, 0)) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) << 0)) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))) && true));
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) : _GLF_FUZZED((+ 8.5)))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), ! (! (! (! ((injectionSwitch.x > injectionSwitch.y)))))))) || false))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)), int(ivec2(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)), 0))), int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-466.174)), bool(false)))))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = (9536 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, clamp(1, 1, 1))))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1179.5595) : injectionSwitch.x)) > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0, 1.0, abs(0.0), 1.0, 0.0, 0.0))).y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u)))), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))))) | (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> 0u), 0u)), _GLF_IDENTITY(0u, (0u) | (0u)), 0u)) ^ 0u), (true ? (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))))) | (0u ^ 0u) : _GLF_FUZZED(workgroup_id))))), 0u, 0u), (uvec4(workgroup_id, (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), max(uint(8u), uint(8u))))), 0u, 0u)) >> uvec4(0u, 0u, 0u, 0u))));
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), _GLF_IDENTITY((subgroup_size) + 0u, 0u + (_GLF_IDENTITY((subgroup_size) + 0u, uint(uvec3((subgroup_size) + 0u, _GLF_IDENTITY((1u & 1u), 0u | (_GLF_IDENTITY((1u & 1u), min((1u & 1u), (1u & 1u))))), 0u)))))))), subgroup_size)), clamp(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + _GLF_IDENTITY(0u, (0u) | (0u | 0u))))), subgroup_size)), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size))))) - 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))) + 0u))), ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))), ~ (~ (_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))))))))) + 0u)))))), subgroup_size)), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))) + 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))) + 0u, (_GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED((subgroup_local_id ++)))) + 0u) + 0u)) << 0u)))), subgroup_size))) << 0u), (subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), clamp(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size)))))) : _GLF_FUZZED(workgroup_base)))) / 1u), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) - 0u))))) + 0u))), subgroup_size)), _GLF_IDENTITY(uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) - 0u))))) + 0u))), subgroup_size)))), clamp(uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) - 0u))))) + 0u))), subgroup_size)))), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) - 0u))))) + 0u))), subgroup_size)))), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) << (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) - 0u))))) + 0u))), subgroup_size))))))))), subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))), clamp(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u)))), ((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))))) | ((_GLF_IDENTITY(subgroup_size, uint(uvec2(subgroup_size, 0u))))))), subgroup_size))))) + 0u))), subgroup_size)))), (subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))), subgroup_size))) ^ 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, uint(uvec4(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id)), 1u, 0u, 0u)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(-65.29) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << 0)])).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(-65.29) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, abs(0.0), 0.0, 0.0, 0.0, cos(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))))), min(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, abs(0.0), 0.0, 0.0, 0.0, cos(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)))))), (float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, abs(0.0), 0.0, 0.0, 0.0, cos(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))))))) - 0.0), float(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, abs(0.0), 0.0, 0.0, 0.0, cos(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))))))))))), determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0)))), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(-65.29) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-511.001) : _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0))), injectionSwitch[1])).y)), determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0)))), false, true, false)), (bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(-65.29) : _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-511.001) : _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) + 0.0))), injectionSwitch[1])).y)), determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0)))), false, true, false))) && true)), true, true, false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(-65.29) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-764.974) : 1.0)), 1.0)))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(-65.29) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), determinant(mat3(1.0, sin(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0)))), false, true, false))), true, true, false))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))).y))), true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))))), true && (bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))))))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-43.95), _GLF_FUZZED(-8203.2436)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), true)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))))), true, true)))))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, 1 * (1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), ~ (~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))));
            }
          }
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
              {
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), false))), (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, 0)), (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), (_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), ! (! (bool(_GLF_WRAPPED_IF_TRUE(true)))))) || false))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     continue;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ 0) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
          return;
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))), (true ? _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 1.0))) : _GLF_FUZZED(25.77))) > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     for(int _injected_loop_counter = (0 ^ 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(7) : _GLF_FUZZED(int(step(2585.2755, -83.47))))))))) && true)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), (int(5)) - 0)))), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | (0 | 0)), (_injected_loop_counter ++) >> 0))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), vec3(mat3(vec3(injectionSwitch, 0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), injectionSwitch)).y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           do
            {
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) ^ _GLF_IDENTITY(0, 0 ^ (0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) ^ _GLF_IDENTITY(0, 0 ^ (0)), ((_GLF_IDENTITY(1, min(1, 1))) ^ _GLF_IDENTITY(0, 0 ^ (0))) | ((_GLF_IDENTITY(1, min(1, 1))) ^ _GLF_IDENTITY(0, 0 ^ (0))))) / 1))) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0)) * 1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) ^ 0)))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) * 1), int(_GLF_IDENTITY(5, ~ (~ (5)))))), ((0 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, ~ (~ (5))))))) - 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                   break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), vec2(_GLF_FUZZED(5814.6917), _GLF_FUZZED(-531.174)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-892.541), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).y))));
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))), ! (! (! (! (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 1))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, min(1, 1)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, sqrt(abs(0.0))))) > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false)))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))), _GLF_IDENTITY(true, bool(bool(true))))))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), _GLF_IDENTITY(min((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) * uint(_GLF_ONE(1.0, injectionSwitch.y))) >> 0u) << _GLF_IDENTITY(uint(0u), uint(0u))))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id)))))) | (subgroup_local_id)))))), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ (~ (subgroup_local_id)), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), clamp((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), ~ (~ ((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id)))))))), (_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), min((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))), 0u ^ ((_GLF_IDENTITY(~ (~ (subgroup_local_id)), (~ (~ (subgroup_local_id))) | (~ (~ (subgroup_local_id))))))))))) - 0u)))), ~ (~ (min((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))), max(~ (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid))), (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))) | (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))))), 0u + (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid))), (_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))) + 0u))))))))) : _GLF_IDENTITY(0u, (0u) >> 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) | (_GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), _GLF_IDENTITY(0u, 0u ^ (0u)), 1u, 0u))))), uint(0u))))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id))))), (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id))))), (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | _GLF_IDENTITY(((~ (subgroup_local_id))), (((~ (subgroup_local_id)))) + 0u)))) << 0u)))) | (subgroup_local_id)))))), (0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), ((0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) / 1u), min(_GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, (0u) >> 0u) << _GLF_IDENTITY(uint(0u), uint(0u))))) + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id)))))) | (subgroup_local_id)))))), 0u + ((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, (0u) >> 0u) << _GLF_IDENTITY(uint(0u), uint(0u))))) + (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id)))))))) | (subgroup_local_id)))))))), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), min(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u))))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), (_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(0u), uint(0u))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))), min((_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(159.183)), vec2(_GLF_FUZZED(float(false)), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(false, true)), bvec2(bvec4(bvec2(bvec2(false, true)), true, true)))))))))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, (0u) >> 0u) << _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), (vec2(injectionSwitch[0], injectionSwitch[1])) * mat2(1.0))).y))), _GLF_IDENTITY(true, bool(bvec3(true, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(0u, (0u) >> 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(_GLF_IDENTITY(uint(0u), (uint(0u)) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 1u * (~ (0u)))))) - 0u)), (true ? uint(0u) : _GLF_FUZZED(subgroup_id))))), uint(0u))))), ((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(1.3)), bool(false))) > injectionSwitch.y), false, false, false)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), true))))), ((! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), true)))))) && true)))) ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(uint(-153.102)))), (0u) >> 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(_GLF_IDENTITY(uint(0u), (uint(0u)) - 0u), _GLF_IDENTITY(uint(0u), (true ? uint(0u) : _GLF_FUZZED(subgroup_id))))), uint(0u)))))) - 0u) | 0u)) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (subgroup_local_id)), ((~ (subgroup_local_id))) | ((~ (subgroup_local_id)))), min(~ _GLF_IDENTITY((~ (subgroup_local_id)), _GLF_IDENTITY(((~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))), (true ? ((~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) : _GLF_FUZZED(subgroup_local_id))) | ((~ (subgroup_local_id)))), ~ _GLF_IDENTITY((~ (subgroup_local_id)), _GLF_IDENTITY(((~ (subgroup_local_id))) | ((~ (subgroup_local_id))), uint(uvec3(((~ (subgroup_local_id))) | ((~ (subgroup_local_id))), 0u, (1u & 1u))))))))) | (subgroup_local_id)))))), (0u << _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u)))), uint(uvec2((_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u)))), 1u))))))) + (_GLF_IDENTITY(subgroup_local_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))) / 1u)))), ((_GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))) / 1u))))) - 0u))))))) - 0u))))) % 2) == 0)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            continue;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat4(1.0) * (vec4(injectionSwitch.y, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat4(1.0) * (vec4(injectionSwitch.y, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mat4(1.0) * (vec4(injectionSwitch.y, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))))) / abs(1.0)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false, false))) || false))))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.1)), bool(false))) > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (_GLF_IDENTITY(~ (buf[virtual_gid]), uint(uvec2(~ (buf[virtual_gid]), 0u))))), 4, _GLF_IDENTITY(64, 0 + (64)), 2);
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0)), max(vec2(mat3x2(injectionSwitch, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x), 1.0, 1.0, 1.0)), vec2(mat3x2(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0))))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(44904))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                      {
                      }
                     else
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 ^ (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 & _GLF_IDENTITY(int(-4.2), 0 + (_GLF_IDENTITY(int(-4.2), (int(-4.2)) / int(_GLF_ONE(1.0, injectionSwitch.y)))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true)))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    break;
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               continue;
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               return;
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))))
              continue;
            }
          }
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)).x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, sqrt(0.0), exp(determinant(mat2(0.0, 0.0, 0.0, 0.0))), round(length(normalize(1.0))), 0.0)), (true ? _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, sqrt(0.0), exp(determinant(mat2(0.0, 0.0, 0.0, 0.0))), round(length(normalize(1.0))), 0.0)), (vec2(mat3x2(injectionSwitch, sqrt(0.0), exp(determinant(mat2(0.0, 0.0, 0.0, 0.0))), round(length(normalize(1.0))), 0.0))) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(71.95, -6884.8385))))).y, true && (injectionSwitch.x > injectionSwitch.y))))))
                    continue;
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) / _GLF_IDENTITY(dot(vec3(0.0, abs(0.0), 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), max(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), clamp(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0)))), dot(vec3(0.0, abs(0.0), 1.0), vec3(0.0, 0.0, 1.0)))) > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)) && true))) && true))
            return;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), false || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec3(bool(_GLF_DEAD(false)), true, true))))), true, false))))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             break;
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           do
            {
             read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(62685))), 2)) / 1u), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) - 0, 0 | (_GLF_IDENTITY((64) - 0, ((64) - 0) - (0 | 0))))), 2)));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))))), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))))))) > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(((_GLF_IDENTITY(1 | 0, int(ivec4(_GLF_IDENTITY(1 | 0, (1 | 0) << 0), 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), 0 | ((_GLF_IDENTITY(int(6), int(6))))) ^ 0)) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), max(((_GLF_IDENTITY(1 | 0, int(ivec4(_GLF_IDENTITY(1 | 0, (1 | 0) << 0), 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), 0 | ((_GLF_IDENTITY(int(6), int(6))))) ^ 0)) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(((_GLF_IDENTITY(1 | 0, int(ivec4(_GLF_IDENTITY(1 | 0, (1 | 0) << 0), 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), 0 | ((_GLF_IDENTITY(int(6), int(6))))) ^ 0)) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))), 0 + (((_GLF_IDENTITY(1 | 0, int(ivec4(_GLF_IDENTITY(1 | 0, (1 | 0) << 0), 1, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY((_GLF_IDENTITY(int(6), int(6))), 0 | ((_GLF_IDENTITY(int(6), int(6))))) ^ 0)) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     return;
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, max(_GLF_IDENTITY(3, 0 ^ (_GLF_IDENTITY(3, min(3, 3)))), _GLF_IDENTITY(3, 0 ^ (3))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false)))))))))))
      return;
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 1.0, abs(0.0), 1.0, 0.0))) > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, true && (false)))), (! ((_GLF_IDENTITY(false, true && (false))))) || false)))) && true), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (false) || false), _GLF_IDENTITY(true, (true) && true) && (false))), false, _GLF_IDENTITY(true, ! (! (true)))), bvec3(bvec3(bvec3(! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false))), false, true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (0 & 7369); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(_GLF_IDENTITY(0, 0 ^ (0)))) << 0))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0)))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0)))), 1 * (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))))))) | 0) << (_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0)))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       subgroupBarrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
      }
     else
      {
      }
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(ivec2(int(2), 0), clamp(ivec2(int(2), 0), ivec2(int(2), 0), ivec2(int(2), 0))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 ^ (2))), (int(2)) << 0)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true)), (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true))) || false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                  {
                   return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(74870) : int(1))))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(true))))), false || (bool(bvec3(false, true, _GLF_IDENTITY(true, bool(bool(true))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(-25094))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 + (1)), 1))))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
