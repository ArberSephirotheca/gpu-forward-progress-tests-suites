#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_39 {
 mat2x4 _f0;
 mat4 _f1;
 int _f2;
} ;

struct _GLF_struct_38 {
 int _f0;
 float _f1;
 uint _f2;
} ;

struct _GLF_struct_37 {
 mat3 _f0;
} ;

struct _GLF_struct_36 {
 bvec2 _f0;
 ivec2 _f1;
 float _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_40 {
 float _f0;
 _GLF_struct_36 _f1;
 _GLF_struct_37 _f2;
 ivec2 _f3;
 _GLF_struct_38 _f4;
 vec3 _f5;
 _GLF_struct_39 _f6;
} ;

struct _GLF_struct_34 {
 ivec2 _f0;
 ivec3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_35 {
 bvec4 _f0;
 _GLF_struct_34 _f1;
 uvec2 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_32 {
 mat2 _f0;
 vec4 _f1;
 mat4x2 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_33 {
 _GLF_struct_32 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_30 {
 mat3x2 _f0;
 bvec2 _f1;
 mat4x3 _f2;
 bool _f3;
 uint _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_29 {
 ivec3 _f0;
} ;

struct _GLF_struct_28 {
 int _f0;
 float _f1;
 ivec4 _f2;
 vec2 _f3;
 int _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_31 {
 vec3 _f0;
 _GLF_struct_28 _f1;
 _GLF_struct_29 _f2;
 vec2 _f3;
 mat2x3 _f4;
 _GLF_struct_30 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_41 {
 _GLF_struct_31 _f0;
 _GLF_struct_33 _f1;
 _GLF_struct_35 _f2;
 uint num_workgroup;
 vec3 _f3;
 _GLF_struct_40 _f4;
} ;

struct _GLF_struct_25 {
 mat2 _f0;
 bvec3 _f1;
 vec4 _f2;
 mat2 _f3;
 float _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_24 {
 ivec4 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 float _f3;
 uint virtual_gid;
 vec3 _f4;
} ;

struct _GLF_struct_26 {
 mat4x3 _f0;
 vec2 _f1;
 _GLF_struct_24 _f2;
 mat3x4 _f3;
 _GLF_struct_25 _f4;
 mat3x4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_22 {
 uint _f0;
 vec2 _f1;
 uvec2 _f2;
 bvec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_23 {
 _GLF_struct_22 _f0;
} ;

struct _GLF_struct_27 {
 _GLF_struct_23 _f0;
 mat4x2 _f1;
 _GLF_struct_26 _f2;
} ;

struct _GLF_struct_19 {
 mat3x4 _f0;
} ;

struct _GLF_struct_18 {
 ivec3 _f0;
 mat2 _f1;
 vec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_17 {
 mat4 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_17 _f0;
 _GLF_struct_18 _f1;
 _GLF_struct_19 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_15 {
 mat4x3 _f0;
} ;

struct _GLF_struct_14 {
 int _f0;
} ;

struct _GLF_struct_16 {
 _GLF_struct_14 _f0;
 uint workgroup_id;
 _GLF_struct_15 _f1;
} ;

struct _GLF_struct_21 {
 mat2x4 _f0;
 mat4x3 _f1;
 _GLF_struct_16 _f2;
 mat2x3 _f3;
 _GLF_struct_20 _f4;
} ;

struct _GLF_struct_11 {
 bool _f0;
 ivec2 _f1;
 bvec3 _f2;
 mat2x4 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_12 {
 ivec2 _f0;
 _GLF_struct_11 _f1;
 vec3 _f2;
 bvec3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_13 {
 _GLF_struct_12 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 ivec2 _f1;
 uint _f2;
 mat4x2 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_7 {
 uint _f0;
 int _f1;
 mat2x4 _f2;
 ivec2 _f3;
 mat2x3 _f4;
 uint _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_6 {
 bool _f0;
 mat2x3 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_9 {
 uint next_virtual_gid;
 mat4x2 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_8 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_4 {
 mat3 _f0;
 mat2 _f1;
 uvec3 _f2;
 mat2x4 _f3;
 vec2 _f4;
 ivec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 mat4x2 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_5 _f0;
 _GLF_struct_9 _f1;
} ;

struct _GLF_struct_0 {
 ivec3 _f0;
 mat4x3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 _GLF_struct_0 _f1;
 float _f2;
 bool _f3;
} ;

struct _GLF_struct_2 {
 uint subgroup_size;
 _GLF_struct_1 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(gl_SubgroupSize, _GLF_struct_1(mat4x3(1.0), _GLF_struct_0(ivec3(1), mat4x3(1.0), ivec4(1)), 1.0, true));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_12(ivec2(1), _GLF_struct_11(true, ivec2(1), bvec3(true), mat2x4(1.0), uvec3(1u)), vec3(1.0), bvec3(true), vec4(1.0)), gl_SubgroupInvocationID);
 _GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(_GLF_struct_31(vec3(1.0), _GLF_struct_28(1, 1.0, ivec4(1), vec2(1.0), 1, bvec4(true)), _GLF_struct_29(ivec3(1)), vec2(1.0), mat2x3(1.0), _GLF_struct_30(mat3x2(1.0), bvec2(true), mat4x3(1.0), true, 1u, bvec2(true)), uvec2(1u)), _GLF_struct_33(_GLF_struct_32(mat2(1.0), vec4(1.0), mat4x2(1.0), vec3(1.0), mat3(1.0)), uvec2(1u)), _GLF_struct_35(bvec4(true), _GLF_struct_34(ivec2(1), ivec3(1), uvec4(1u)), uvec2(1u), uvec3(1u)), gl_NumWorkGroups.x, vec3(1.0), _GLF_struct_40(1.0, _GLF_struct_36(bvec2(true), ivec2(1), 1.0, mat2x3(1.0)), _GLF_struct_37(mat3(1.0)), ivec2(1), _GLF_struct_38(1, 1.0, 1u), vec3(1.0), _GLF_struct_39(mat2x4(1.0), mat4(1.0), 1)));
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_21 _GLF_struct_replacement_21 = _GLF_struct_21(mat2x4(1.0), mat4x3(1.0), _GLF_struct_16(_GLF_struct_14(1), gl_WorkGroupID.x, _GLF_struct_15(mat4x3(1.0))), mat2x3(1.0), _GLF_struct_20(_GLF_struct_17(mat4(1.0), vec3(1.0)), _GLF_struct_18(ivec3(1), mat2(1.0), vec4(1.0), mat2x4(1.0)), _GLF_struct_19(mat3x4(1.0)), mat4x3(1.0)));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_21._f2.workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_2.subgroup_size;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_23(_GLF_struct_22(1u, vec2(1.0), uvec2(1u), bvec3(true), true)), mat4x2(1.0), _GLF_struct_26(mat4x3(1.0), vec2(1.0), _GLF_struct_24(ivec4(1), ivec2(1), mat4x2(1.0), 1.0, workgroup_base + subgroup_base + _GLF_struct_replacement_13.subgroup_local_id, vec3(1.0)), mat3x4(1.0), _GLF_struct_25(mat2(1.0), bvec3(true), vec4(1.0), mat2(1.0), 1.0, mat2x4(1.0)), mat3x4(1.0), uvec2(1u)));
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_5(_GLF_struct_3(mat3(1.0), vec4(1.0)), _GLF_struct_4(mat3(1.0), mat2(1.0), uvec3(1u), mat2x4(1.0), vec2(1.0), ivec2(1), ivec4(1)), mat4x2(1.0), ivec2(1)), _GLF_struct_9(workgroup_base + subgroup_base + ((_GLF_struct_replacement_13.subgroup_local_id + 1) % _GLF_struct_replacement_2.subgroup_size), mat4x2(1.0), _GLF_struct_6(true, mat2x3(1.0), bvec2(true)), _GLF_struct_7(1u, 1, mat2x4(1.0), ivec2(1), mat2x3(1.0), 1u, uvec3(1u)), _GLF_struct_8(vec4(1.0), ivec2(1), 1u, mat4x2(1.0), uvec4(1u)), vec4(1.0)));
 uint read = 0;
 atomicStore(buf[_GLF_struct_replacement_10._f1.next_virtual_gid], uint(1), 4, 64, 4);
 if((_GLF_struct_replacement_13.subgroup_local_id % 2) == 0)
  {
   read = atomicLoad(buf[_GLF_struct_replacement_27._f2._f2.virtual_gid], 4, 64, 2);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[_GLF_struct_replacement_27._f2._f2.virtual_gid], 4, 64, 2);
  }
 subgroupBarrier();
 atomicStore(checker[_GLF_struct_replacement_27._f2._f2.virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
