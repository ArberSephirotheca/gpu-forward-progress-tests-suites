#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, ! (! (false))), false))), (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))))))) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0), (injectionSwitch.x) * 1.0))) > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0), (injectionSwitch.x) * 1.0))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0), (injectionSwitch.x) * 1.0))) > injectionSwitch.y))))), (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0), (injectionSwitch.x) * 1.0))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) * 1.0), (injectionSwitch.x) * 1.0))) > injectionSwitch.y)))))) || false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, true)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), false)), bool(bvec4(bool(bvec2(! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ((_GLF_IDENTITY(! (false), ! (! (! (false)))))) || false), false)), true, true, true)))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), false)), bool(bvec4(bool(bvec2(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), false)), true, true, true)))), true))))))))), false || (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize.x), max((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))), min(_GLF_IDENTITY((gl_WorkGroupSize.x), max((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))), _GLF_IDENTITY((gl_WorkGroupSize.x), max((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))))) | (gl_WorkGroupSize.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), ((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x)))) | (_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), clamp((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), min((_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x))))))))) - 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), _GLF_IDENTITY(mat2(mat3(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.4)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))), (mat2(mat3(mat2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.4)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))) + mat2(0.0, 0.0, 0.0, 0.0))))) > _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), log(1.0), 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), max(float(mat2(1.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat2(1.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), float(mat3(float(mat2(1.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, tan(0.0), 0.0, 0.0, 0.0, tan(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, abs(0.0), 0.0)))))), _GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(5.7)), float(cos(0.0)), bool(true))), _GLF_IDENTITY(abs(0.0), (abs(0.0)) * 1.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)), vec3(0.0, 0.0, 1.0))), 1.0, 1.0, 0.0)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), false, false, true))))))))))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))))))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) && true)), true, true, _GLF_IDENTITY(true, ! (! (true))))))) && true))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((true ? 7.7 : 7.8)), _GLF_FUZZED(9.6)), bvec2(false, false))).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), true, true, true)))) && true))), false, false, true))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), max(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), ~ (~ (uvec4(4850u, _GLF_IDENTITY(73427u, (_GLF_IDENTITY(73427u, clamp(73427u, _GLF_IDENTITY(73427u, min(73427u, 73427u)), 73427u))) | (0u ^ (56897u & 0u))), 21003u, 44632u)))), uvec4(4850u, 73427u, 21003u, 44632u)))) : uvec4(workgroup_size, 1u, 0u, 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), max(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), ~ (~ (uvec4(4850u, 73427u, 21003u, 44632u)))), uvec4(4850u, 73427u, 21003u, 44632u)))) : uvec4(workgroup_size, 1u, 0u, 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), ~ (~ (uvec4(4850u, 73427u, 21003u, 44632u)))), _GLF_IDENTITY((uvec4(82452u, 18882u, 69771u, 167639u) & uvec4(0u, 0u, 0u, 0u)), uvec4(0u, 0u, 0u, 0u) ^ ((uvec4(82452u, 18882u, 69771u, 167639u) & uvec4(0u, 0u, 0u, 0u)))) + _GLF_IDENTITY((_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), ~ (~ (uvec4(4850u, 73427u, 21003u, 44632u))))), ((_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), ~ (~ (uvec4(4850u, 73427u, 21003u, 44632u)))))) - uvec4(0u, 0u, 0u, 0u))), uvec4(4850u, 73427u, 21003u, 44632u)))) : uvec4(workgroup_size, 1u, 0u, 1u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), clamp(uvec4(workgroup_size, 1u, 0u, 1u), _GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), (uvec4(workgroup_size, 1u, 0u, 1u)) | (uvec4(workgroup_size, 1u, 0u, 1u))), uvec4(workgroup_size, 1u, 0u, 1u))), max(_GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), clamp(uvec4(workgroup_size, 1u, 0u, 1u), uvec4(workgroup_size, 1u, 0u, 1u), uvec4(workgroup_size, 1u, 0u, 1u))), _GLF_IDENTITY(uvec4(workgroup_size, 1u, 0u, 1u), clamp(uvec4(workgroup_size, 1u, 0u, 1u), uvec4(workgroup_size, 1u, 0u, 1u), uvec4(workgroup_size, 1u, 0u, 1u))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), max(_GLF_IDENTITY(uvec4(4850u, 73427u, 21003u, 44632u), ~ _GLF_IDENTITY((~ (uvec4(_GLF_IDENTITY(4850u, (4850u) << 0u), 73427u, 21003u, 44632u))), uvec4(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) ^ ((~ (uvec4(_GLF_IDENTITY(4850u, (4850u) << 0u), 73427u, 21003u, 44632u)))))), uvec4(4850u, 73427u, 21003u, 44632u)))) : uvec4(workgroup_size, 1u, 0u, 1u))))) << 0u)) + 0u)) / 1u)))) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | 0u), (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_base))) + subgroup_base) * 1u) + _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bvec2(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.2))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.y) * 1.0))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bvec2(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.2))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.y) * 1.0))))))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bvec2(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((true ? -2.5 : -3.2))), float(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.2))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.y) * 1.0))))))))), bool(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bvec2(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.2))), _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0))))).y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), (injectionSwitch.y) * 1.0))))))))))))) && true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uint(workgroup_base)), 0u ^ (_GLF_IDENTITY(uint(uint(workgroup_base)), (uint(uint(workgroup_base))) | (uint(uint(workgroup_base))))))) + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u + (((subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4((_GLF_IDENTITY(false, ! (! (false)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, ! (! (false))))), true && (bool(! (_GLF_IDENTITY(false, ! (! (false)))))))), true && (bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, ! (! (false))))), true && (bool(! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3(_GLF_IDENTITY((false), bool(bvec4((false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))))))) && true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(355.727), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) ^ 0)], _GLF_IDENTITY(_GLF_FUZZED(2.2), _GLF_IDENTITY((true ? _GLF_FUZZED(2.2) : _GLF_FUZZED(8851.9598)), mix(float(_GLF_FUZZED(-7516.6782)), float((true ? _GLF_FUZZED(2.2) : _GLF_FUZZED(8851.9598))), bool(true))))), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[0], _GLF_FUZZED(2.2)), (vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), 0.0, 1.0))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch), vec2(vec4((injectionSwitch), 0.0, 1.0)))))[0], _GLF_FUZZED(2.2))) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(2.2)))), bvec2(true, false))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || _GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.0)), bool(false))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id, 0u | (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id)))) % 2) == _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) << 0), 0, 0)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0))), clamp(float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), min(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), vec2(vec2(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0))))), vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0))))), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), min(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(atanh(7.2)) : 0.0)))))), length(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2343.7163) : 0.0))) * 1.0), 0.0)), sin(0.0), 0.0, determinant(mat3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(round(length(normalize(vec2(1.0, 1.0))))), 0.0, 1.0), (false ? _GLF_FUZZED(mat4x3(3.8, -7.5, -699.456, 7.4, -507.139, 0.5, -263.047, -1.7, 1.4, -2.5, -9.0, 5.6)) : _GLF_IDENTITY(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(round(length(normalize(vec2(1.0, 1.0))))), 0.0, 1.0), (mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(round(length(normalize(vec2(1.0, 1.0))))), 0.0, 1.0)) * mat4(1.0)))))), 1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 1.0, 1.0, 0.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), min(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)), vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), cos(0.0)))), length(vec2(0.0, 0.0)), sin(0.0), 0.0, determinant(mat3(1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((+ 9.4))), float(0.0), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(1.0), 1.0, 1.0, 0.0)) : _GLF_FUZZED(injectionSwitch)))))))))))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))) || _GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | 0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) ^ 0u))) + (_GLF_IDENTITY((virtual_gid) | 0u, uint(uvec3((virtual_gid) | 0u, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u))))))], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup)), ((_GLF_IDENTITY(true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) / 1u), 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) * 1u))) : _GLF_FUZZED(num_workgroup), (true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) / 1u), 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) * 1u))) : _GLF_FUZZED(num_workgroup)) << 0u))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), ~ (~ (_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u))))))), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY((uint(2u)), clamp((uint(2u)), (uint(2u)), _GLF_IDENTITY((uint(2u)), ~ (~ (_GLF_IDENTITY((uint(2u)), 0u + ((uint(2u))))))))) ^ 0u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) | 0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | 0u, 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec2(uint(_GLF_IDENTITY(2u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(2u, 0u), (uvec2(2u, 0u)) >> uvec2(0u, 0u))), (false ? _GLF_FUZZED((subgroup_local_id << num_workgroup)) : uint(_GLF_IDENTITY(uvec2(2u, 0u), (uvec2(2u, 0u)) >> uvec2(0u, 0u))))))), 0u), (uvec2(uint(2u), 0u)) | (_GLF_IDENTITY(uvec2(uint(2u), 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))), _GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))))), uvec2(uint(2u), 0u)))))))))))))) / 1u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, ~ (~ (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) / 1u), 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, 0 ^ (64)), 2)) * 1u))) : _GLF_FUZZED(num_workgroup))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), ~ (~ (_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u))))))), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY((uint(2u)), clamp((uint(2u)), (uint(2u)), _GLF_IDENTITY((uint(2u)), ~ (~ (_GLF_IDENTITY((uint(2u)), 0u + ((uint(2u))))))))) ^ 0u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) | 0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) >> 0), 2))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | 0u, 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), 0u ^ (uint(2u)))) | 0u)) | (uint(2u))), _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec2(uint(2u), 0u), (uvec2(uint(2u), 0u)) | (_GLF_IDENTITY(uvec2(uint(2u), 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))), _GLF_IDENTITY(uvec2(uint(2u), 0u), _GLF_IDENTITY(~ (~ (uvec2(uint(2u), 0u))), (_GLF_IDENTITY(~ (~ (uvec2(uint(2u), 0u))), (~ (~ (uvec2(uint(2u), 0u)))) >> uvec2(0u, 0u))) + uvec2(0u, 0u))))), uvec2(uint(2u), 0u)))))))))))))) / 1u))), ~ (~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(virtual_gid)))) | _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) / 1u), 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), (read = atomicLoad(buf[virtual_gid], 4, 64, 2)) * 1u))) : _GLF_FUZZED(num_workgroup))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u)))))), ~ (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u)))))), (~ (~ (_GLF_IDENTITY(uint(2u), ~ (~ (uint(2u))))))) / 1u))))), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY((uint(2u)), clamp((uint(2u)), (uint(2u)), _GLF_IDENTITY((uint(2u)), ~ (~ (_GLF_IDENTITY((uint(2u)), 0u + ((uint(2u))))))))) ^ 0u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(read = atomicLoad(buf[virtual_gid], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (2) | 0)))), _GLF_IDENTITY((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup)), ((true ? _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | 0u, 0u + ((virtual_gid) | 0u)))], 4, 64, 2), 1u * (read = atomicLoad(buf[virtual_gid], 4, 64, 2))) : _GLF_FUZZED(num_workgroup))) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, uint(uvec3(2u, 0u, 0u)))), uint(uvec2(uint(2u), 0u)))), _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec2(uint(2u), 0u), (uvec2(uint(2u), _GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, (0u) | 0u))))) | (_GLF_IDENTITY(uvec2(uint(2u), 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))), max(_GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))), _GLF_IDENTITY(uvec2(uint(2u), 0u), ~ (~ (uvec2(uint(2u), 0u)))))), uvec2(uint(2u), 0u)))))))))))))) / 1u)))))))) | 0u);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0))))))) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, cos(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) + tan(vec2(0.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), (false ? _GLF_FUZZED(faceforward(vec2(-70.28, 9.0), injectionSwitch, injectionSwitch)) : _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0), (mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), min(vec2(_GLF_IDENTITY(mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0), (mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0), (mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x), float(_GLF_FUZZED(1.3)), bool(false)))), float(_GLF_FUZZED((5585.8434 * 2528.3221))), bool(false))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), (false ? _GLF_FUZZED(faceforward(vec2(-70.28, 9.0), injectionSwitch, injectionSwitch)) : (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x), float(_GLF_FUZZED(1.3)), bool(false)))), float(_GLF_FUZZED((5585.8434 * 2528.3221))), bool(false))) > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), mat2(mat2x3(mat2(1.0))))))) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, cos(vec2(_GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-1.9))))) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) + tan(vec2(0.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), (false ? _GLF_FUZZED(faceforward(vec2(-70.28, 9.0), injectionSwitch, injectionSwitch)) : _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0), (mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), min(vec2(_GLF_IDENTITY(mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0), (mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 0.0, sin(0.0), 1.0, 0.0)))), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), vec2(_GLF_IDENTITY(mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0), (mat2x3((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), sqrt(0.0), sqrt(exp(0.0)), 1.0, 1.0)) - mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))))))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x), float(_GLF_FUZZED(1.3)), bool(false)))), float(_GLF_FUZZED((5585.8434 * 2528.3221))), bool(false))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-0.6, 679.582)) : injectionSwitch))), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY((mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0), (false ? _GLF_FUZZED(faceforward(vec2(-70.28, 9.0), injectionSwitch, injectionSwitch)) : (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))))) + sqrt(vec2(0.0, 0.0))).x, mix(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))) + sqrt(vec2(0.0, 0.0))).x), float(_GLF_FUZZED(1.3)), bool(false)))), float(_GLF_FUZZED((5585.8434 * 2528.3221))), bool(false))) > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), uint(uvec3(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2))), 0u, 1u)));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))).y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, (0 | 0) ^ (4)))))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
