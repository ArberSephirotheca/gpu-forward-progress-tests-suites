#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(subgroup_size))), 0u | (_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(subgroup_size)))))), uint(_GLF_IDENTITY(2u, (2u) - 0u))))), (subgroup_id) | 0u) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) | (_GLF_IDENTITY(_GLF_FUZZED(workgroup_base), ~ (~ (_GLF_FUZZED(workgroup_base)))))) : subgroup_size))) ^ _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u + (0u)), _GLF_IDENTITY(0u, (0u) | (0u)) ^ (0u))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) >> 0u, uint(uvec3((subgroup_size) >> 0u, 1u, 1u)))), (false ? _GLF_FUZZED(workgroup_id) : subgroup_size) | (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | _GLF_IDENTITY((workgroup_id), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) - 0u)), (~ (_GLF_IDENTITY((workgroup_id), ((workgroup_id)) - 0u))) / 1u)))), (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) / 1u))))) : subgroup_size)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_id) : subgroup_size, clamp(false ? _GLF_FUZZED(workgroup_id) : subgroup_size, false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (true ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), (true ? _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))) : _GLF_FUZZED(78072u)))), uint(uint(_GLF_FUZZED(workgroup_id)))) : _GLF_FUZZED((subgroup_id * _GLF_IDENTITY(workgroup_size, min(workgroup_size, _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u), _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)))))))))) : subgroup_size, false ? _GLF_FUZZED(workgroup_id) : subgroup_size))) >> 0u))), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), min(float(0.0), _GLF_IDENTITY(float(0.0), clamp(float(0.0), float(0.0), float(0.0))))))), injectionSwitch.x)) + (subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), min(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) | _GLF_IDENTITY(0u, (0u) | 0u), ((_GLF_FUZZED(workgroup_id)) | _GLF_IDENTITY(0u, (0u) | 0u)) + 0u)), _GLF_FUZZED(workgroup_id))) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), (subgroup_size) >> _GLF_IDENTITY(0u, (0u) + 0u))))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)) || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) && true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (82787 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1)))))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (int(1))), ((~ (int(1)))) ^ 0), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1)))))))))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (_GLF_IDENTITY(int(1), (int(1)) | int(_GLF_ZERO(0.0, injectionSwitch.x))))))))))), 0 ^ (~ _GLF_IDENTITY((~ (int(1))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1))))))), (_GLF_IDENTITY((_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1))))))), clamp((_GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ((~ (int(1)))) | ((~ (int(1))))))))), (_GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ((~ (int(1)))) / 1))))), _GLF_IDENTITY((_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1))))))), ((_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1)))))))) | ((_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1)))))))))))) ^ (0 >> _GLF_IDENTITY(int(3), int(3)))))))))), (false ? _GLF_FUZZED(_injected_loop_counter) : min(_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (int(1)), min(~ (int(1)), _GLF_IDENTITY(~ (int(1)), (~ (int(_GLF_IDENTITY(1, (1) | (1))))) >> 0)))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1))))))), int(_GLF_IDENTITY(int((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (int(1)), (true ? ~ (int(1)) : _GLF_FUZZED(_injected_loop_counter)))), ((_GLF_IDENTITY(~ (int(1)), (true ? ~ (int(1)) : _GLF_FUZZED(_injected_loop_counter))))) | ((_GLF_IDENTITY(~ (int(1)), (true ? ~ (int(1)) : _GLF_FUZZED(_injected_loop_counter)))))), ~ (~ ((~ (int(1)))))))), ~ (~ (int((_GLF_IDENTITY((_GLF_IDENTITY(~ (int(1)), (~ (int(1))) ^ 0)), ~ (~ ((~ (int(1)))))))))))))))), _GLF_IDENTITY(int(1), ~ _GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (~ ((~ (int(1)))))))))))))), ~ (~ (_GLF_IDENTITY(int(1), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (int(1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), (ivec3(~ ((~ (int(1)))), 0, 0)) / ivec3(1, 1, 1)), min(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), (true ? ivec3(~ ((~ (int(1)))), 0, 0) : _GLF_FUZZED(ivec3(-10771, -25495, -71529)))), ivec3(~ ((~ (int(1)))), 0, 0))))), ~ (~ (_GLF_IDENTITY(~ ((~ (int(1)))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (_GLF_IDENTITY(int(1), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), ~ (~ (int(8)))))) | (int(1)))))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1)))))))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))))) - (0 >> _GLF_IDENTITY(int(7), int(7))))))))))))), clamp(_GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (int(1)))), int(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), min(_GLF_IDENTITY(ivec3(~ _GLF_IDENTITY(((~ (int(1)))), (((~ (int(1))))) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), 0, 0), (true ? ivec3(~ ((~ (int(1)))), 0, 0) : _GLF_FUZZED(ivec3(-10771, -25495, -71529)))), ivec3(~ ((~ (int(1)))), 0, 0))))), ~ (~ (_GLF_IDENTITY(~ ((~ _GLF_IDENTITY((int(1)), 0 ^ ((int(1)))))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((_GLF_IDENTITY(~ (int(1)), (true ? ~ (int(1)) : _GLF_FUZZED(_injected_loop_counter)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1)))))))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ _GLF_IDENTITY((int(1)), 0 + ((int(1))))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))))) - (0 >> _GLF_IDENTITY(int(7), int(7))))))))))))), _GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (int(1)))), int(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), min(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), (true ? ivec3(~ ((~ (int(1)))), 0, 0) : _GLF_FUZZED(ivec3(-10771, -25495, -71529)))), ivec3(~ ((~ (int(1)))), 0, 0))))), (true ? _GLF_IDENTITY(~ ((~ (int(1)))), int(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), min(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), (true ? ivec3(~ ((~ (int(1)))), 0, 0) : _GLF_FUZZED(ivec3(-10771, -25495, -71529)))), ivec3(~ ((~ (int(1)))), 0, 0))))) : _GLF_FUZZED(((_injected_loop_counter) ++)))), ~ (~ (_GLF_IDENTITY(~ ((~ (int(1)))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1)))))))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1)))))))))) - 0)))) - 0))) - (0 >> _GLF_IDENTITY(int(7), int(7))))))))))))), _GLF_IDENTITY((~ (int(1))), ~ (~ (_GLF_IDENTITY((~ (int(1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (int(1)))), int(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), min(_GLF_IDENTITY(ivec3(~ ((~ (int(1)))), 0, 0), (true ? ivec3(~ ((~ (int(1)))), 0, 0) : _GLF_FUZZED(ivec3(-10771, -25495, -71529)))), ivec3(~ ((~ (int(1)))), 0, 0))))), ~ (~ (_GLF_IDENTITY(~ ((~ (int(1)))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1)))))))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))))))) - (0 >> _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ ((~ (int(1)))), min(~ ((~ (int(1)))), ~ ((~ (int(1)))))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1)))))))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : ~ ((~ (int(1))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(~ ((~ (int(1)))), (false ? _GLF_FUZZED(-98920) : _GLF_IDENTITY(~ ((~ (int(1)))), min(~ ((~ (int(1)))), ~ ((~ (int(1))))))))))))) - (0 >> _GLF_IDENTITY(int(7), int(7))))) / 1)))))))))))))))), int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                            {
                             return;
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
        }
      }
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(vec3(-9.5, -9.1, -41.68).g, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0))).x > injectionSwitch.y)) ? _GLF_FUZZED(-822.671) : vec3(-9.5, -9.1, -41.68).g, (true ? _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0))).x > injectionSwitch.y)) ? _GLF_FUZZED(-822.671) : vec3(-9.5, -9.1, -41.68).g : _GLF_FUZZED(2122.7055))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), min(injectionSwitch.y, injectionSwitch.y))), bool(true)))) - abs(0.0))))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) ^ 0) ^ 1); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter != 0, false, false)), bool(bvec4(bool(bvec3(_injected_loop_counter != 0, false, false)), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)), false, false))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))) || false, true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), false, true))) && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), true && ((_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))) && true))))), bool(bvec4(! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), true)))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), true)), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), false, false), true)))))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), false || (true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))))))), false, true, false))))) || false))) && true))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, false), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), true, false), true)))))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0)))), _GLF_IDENTITY((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0), _GLF_IDENTITY(mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]), bvec2(false, true)), mix(vec2(_GLF_FUZZED(3.5), _GLF_FUZZED(-489.162)), vec2(_GLF_IDENTITY((mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]), bvec2(false, true))), _GLF_IDENTITY(mat2(1.0) * ((mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]), bvec2(false, true)))), (_GLF_IDENTITY(mat2(1.0) * ((mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]), bvec2(false, true)))), min(mat2(1.0) * ((mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]), bvec2(false, true)))), mat2(1.0) * ((mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]), bvec2(false, true))))))) / vec2(1.0, 1.0)))[0], (mix(vec2(((mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[0], _GLF_FUZZED(-291.106)), vec2(_GLF_FUZZED(-5531.5127), _GLF_IDENTITY(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1], max(((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1], ((mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))))) * mat2(1.0))[1]))), bvec2(false, true)))[1]), bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), true)))))).x < _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))).y), true, false, true))))))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter))) / 1)) - 0) > 0); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       return;
                                      }
                                     else
                                      {
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                      }
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), true && ((_GLF_WRAPPED_IF_TRUE(true)))))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))), false || ((! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false))))))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 ^ 1), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_injected_loop_counter != (1 ^ 1)), true && ((_injected_loop_counter != (1 ^ 1)))), (! (_injected_loop_counter != (1 ^ 1))) && true)))); _injected_loop_counter --)
                        {
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           do
                            {
                             do
                              {
                               for(int _injected_loop_counter = (_GLF_IDENTITY(1 & 1, min(1 & 1, 1 & _GLF_IDENTITY(1, 0 | (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), injectionSwitch.x)))))) < injectionSwitch.y))) || false)))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 & 9471) ^ 1)); _injected_loop_counter ++)
                                    {
                                     do
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), ! (! (! (injectionSwitch.x < injectionSwitch.y))))))))))))
                                            {
                                             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                                            }
                                           else
                                            {
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                      }
                    }
                   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))))));
                  }
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0))); _GLF_IDENTITY(_injected_loop_counter --, (true ? _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0) : _GLF_FUZZED(9838))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if((subgroup_local_id % 2) == 0)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), max(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2)));
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) << 0)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), (1))) << 0) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false))))) || false))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) << 0)), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                                  {
                                   return;
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), (! (! (_GLF_IDENTITY(false, (false) && true)))) && true))))) && true)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), (! (! (_GLF_IDENTITY(false, (false) && true)))) && true))))) && true))))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), clamp(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), 0.0 + (_GLF_FUZZED(-3235.3884))), _GLF_FUZZED(-3235.3884), _GLF_FUZZED(-3235.3884))), mix(float(_GLF_FUZZED(-0.5)), float(_GLF_FUZZED(-3235.3884)), bool(true)))), float(injectionSwitch.x), bool(true))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 0.0))), max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), min(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), max(_GLF_FUZZED(-3235.3884), _GLF_FUZZED(-3235.3884))), max(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), max(_GLF_FUZZED(-3235.3884), _GLF_FUZZED(-3235.3884))), _GLF_IDENTITY(_GLF_FUZZED(-3235.3884), max(_GLF_FUZZED(-3235.3884), _GLF_FUZZED(-3235.3884))))))), _GLF_FUZZED(-3235.3884))), mix(float(_GLF_FUZZED(-0.5)), float(_GLF_FUZZED(-3235.3884)), bool(true)))), 1.0 * (float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), min(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), max(_GLF_FUZZED(-3235.3884), _GLF_FUZZED(_GLF_IDENTITY(-3235.3884, (_GLF_IDENTITY(-3235.3884, (-3235.3884) - 0.0)) * 1.0)))), max(_GLF_IDENTITY(_GLF_FUZZED(-3235.3884), max(_GLF_FUZZED(-3235.3884), _GLF_FUZZED(-3235.3884))), _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-3235.3884, min(-3235.3884, _GLF_IDENTITY(-3235.3884, (-3235.3884) + 0.0)))), max(_GLF_FUZZED(-3235.3884), _GLF_FUZZED(-3235.3884))))))), _GLF_FUZZED(-3235.3884))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-0.5), (_GLF_FUZZED(-0.5)) * 1.0)), float(_GLF_FUZZED(-3235.3884)), bool(true)))))), float(injectionSwitch.x), bool(true)))))) * 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.6, -11.24)) : injectionSwitch)))).y))))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), false)))))))) && (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), bool(bool(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))), bool(_GLF_IDENTITY(bvec3(! (! (false)), true, true), bvec3(bvec4(bvec3(! (! (false)), true, true), _GLF_IDENTITY(false, ! (! (false)))))))))))) || false), false)), ! (! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))) || false), false))))))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, sqrt(1.0), sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7919.3572)), bool(false))), 1.0))))), 0.0, 1.0)))))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) < injectionSwitch.y))), (injectionSwitch.x < injectionSwitch.y) && true))))))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         do
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                            }
                                           else
                                            {
                                             read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2), (_GLF_IDENTITY((2), ~ (~ ((2))))) + 0) | 0)), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, ~ _GLF_IDENTITY((~ (64)), ~ (~ ((_GLF_IDENTITY(~ (64), int(_GLF_IDENTITY(int(_GLF_IDENTITY(~ (64), max(~ (64), ~ (64)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))), (_GLF_IDENTITY(~ _GLF_IDENTITY((64), (_GLF_IDENTITY((64), min((64), _GLF_IDENTITY((64), int(ivec4((64), 1, 1, 1)))))) | (_GLF_IDENTITY((64), ((64)) >> 0))), max(~ (64), ~ (64)))) | (_GLF_IDENTITY(~ (64), max(~ (64), ~ (64))))))) - 0)))))))))), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])), 4, 64, 2)));
                                            }
                                          }
                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(ivec3((1), 1, 1))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       subgroupBarrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
