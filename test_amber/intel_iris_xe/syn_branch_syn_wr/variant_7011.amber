#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_13 {
 uint next_virtual_gid;
 mat2 _f0;
 bool _f1;
} ;

struct _GLF_struct_11 {
 vec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_10 {
 mat2 _f0;
 mat3x4 _f1;
 bvec2 _f2;
 uvec2 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 bool _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_11 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
 int _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_6 {
 mat3x2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 vec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 mat2x4 _f1;
 bvec2 _f2;
 ivec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 mat4x2 _f1;
 uint _f2;
 ivec3 _f3;
 float _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 mat4 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
 _GLF_struct_5 _f5;
 _GLF_struct_6 _f6;
} ;

struct _GLF_struct_14 {
 bvec3 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_12 _f3;
 _GLF_struct_13 _f4;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uint virtual_gid;
 mat3x4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))), 0.0, 0.0, 1.0))) < injectionSwitch.y)))), (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])), _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    return;
   return;
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        return;
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), _GLF_IDENTITY(false, true && (false)) || ((_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y, clamp(false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y, false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y, false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y))))) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(length(3.8))), (false ? _GLF_FUZZED(-125.416) : (true ? injectionSwitch.y : _GLF_FUZZED(length(3.8)))))), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), (false ? _GLF_FUZZED(-949.496) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y))), float(_GLF_FUZZED(8296.2088)), bool(false)))))) + _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0), (mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0)) * mat4(1.0)))), bool(false)))), max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), (false ? _GLF_FUZZED(-949.496) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y))), float(_GLF_FUZZED(8296.2088)), bool(false)))))) + _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0), (mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0)) * mat4(1.0)))), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), (false ? _GLF_FUZZED(-949.496) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y))), float(_GLF_FUZZED(8296.2088)), bool(false)))))) + _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0), (mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0)) * mat4(1.0)))), bool(false)))), mix(float(_GLF_FUZZED(-67.07)), float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), (false ? _GLF_FUZZED(-949.496) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((106.800 + -1.9)) : injectionSwitch.y))), float(_GLF_FUZZED(8296.2088)), bool(false)))))) + _GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(1.1)), float(_GLF_IDENTITY(mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0), (mat4x3(float(_GLF_FUZZED(1.1)), 0.0, _GLF_IDENTITY(dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0)), dot(vec3(1.0, tan(0.0), 1.0), vec3(0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 1.0, 0.0, log(1.0), 1.0, 0.0, 1.0)) * mat4(1.0)))), bool(false))))), bool(true))))))))))))) && true)))
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3857.8276), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(0.5), _GLF_IDENTITY(float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)), min(float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)), float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)))))), bvec2(true, false))).x), float(_GLF_IDENTITY(vec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3857.8276), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(0.5), _GLF_IDENTITY(float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)), min(float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)), float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)))))), bvec2(true, false))).x), 1.0, 1.0), (false ? _GLF_FUZZED(vec3(2.8, 508.296, 97.10)) : vec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3857.8276), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(0.5), _GLF_IDENTITY(float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)), min(float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)), float(mat2x3(_GLF_FUZZED(0.5), 1.0, 1.0, 1.0, sqrt(0.0), 0.0)))))), bvec2(true, false))).x), 1.0, 1.0)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), (_GLF_IDENTITY(~ (int(0)), (_GLF_IDENTITY(~ (int(0)), clamp(~ (int(0)), ~ (int(0)), ~ (int(0))))) | (~ (int(0))))) >> 0))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5)), clamp(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (true ? _GLF_ONE(1.0, injectionSwitch.y) : _GLF_FUZZED(71.96)))) << _GLF_IDENTITY(int(5), int(5)), int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) << 0)))), int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (5) >> 0))))), int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))))))))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
              return;
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(max(vec4(-946.393, 12.93, 0.8, -42.65), 1.4).x)))) || false)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! (true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, false, true)), false || (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, false, true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), sqrt(0.0), 0.0)))), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             break;
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), bool(bvec2(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), false))))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          continue;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-37.62))) > injectionSwitch.y))), (! (bool(bool(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)))) || false))))))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))) && true)))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               continue;
              }
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (true ? _GLF_IDENTITY(min(0, 0), max(min(0, 0), min(0, 0))) : _GLF_FUZZED(ivec3(69055, 18650, 79607)[2])))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) - 0, clamp((int(7)) - 0, (int(7)) - _GLF_IDENTITY(0, (0) >> 0), (int(7)) - 0))))) >> _GLF_IDENTITY(int(7), int(7)))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_injected_loop_counter ++), (~ (_injected_loop_counter ++)) / 1))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 continue;
                }
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    return;
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec4(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, min(1u, 1u)))))), workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u) + subgroup_local_id, mat3x4(1.0));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      continue;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(bvec3(true), _GLF_struct_7(_GLF_struct_1(bvec3(_GLF_IDENTITY(true, true && (true))), mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(285.160)), float(1.0), bool(true)))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) | (_GLF_IDENTITY(ivec3(1), ivec3(ivec4(ivec3(_GLF_IDENTITY(1, (1) | (1))), 0))))), _GLF_IDENTITY(ivec3(0, 0, 0), ivec3(_GLF_IDENTITY(0, (0) + 0), 0, 0) + (_GLF_IDENTITY(ivec3(0, 0, 0), (_GLF_IDENTITY(ivec3(0, 0, 0), (_GLF_IDENTITY(ivec3(0, 0, 0), ivec3(0, 0, 0) | (ivec3(0, 0, 0)))) | (ivec3(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-67700)))) << 0), 0)))) ^ ivec3(0, 0, 0)))) | (ivec3(1))), 1.0, mat4x2(_GLF_IDENTITY(1.0, (1.0) - 0.0))), mat4(1.0), _GLF_struct_2(ivec4(1), ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) ^ 0))) ^ 0))), _GLF_struct_3(mat4x3(_GLF_IDENTITY(1.0, length(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) * mat3(1.0))) + (1.0)))), _GLF_struct_4(mat2x4(1.0), mat2x4(1.0), bvec2(true), ivec4(1), bvec2(true)), _GLF_struct_5(ivec2(1), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY((vec4(1.0)), clamp((vec4(1.0)), (vec4(1.0)), (vec4(1.0)))) + _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), (vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-2.5)), float(0.0), bool(true))))) - vec4(0.0, 0.0, 0.0, 0.0))) - vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / cos(vec4(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0)), mix(vec4(((vec4(1.0)))[0], _GLF_FUZZED(-6.0), ((vec4(1.0)))[2], ((vec4(1.0)))[3]), vec4(_GLF_FUZZED(4.1), ((vec4(1.0)))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-47.51)), bvec4(false, true, false, false)))[0], (vec4(1.0))[1], _GLF_FUZZED(-47.75), (vec4(1.0))[3]), vec4(_GLF_FUZZED(409.124), _GLF_FUZZED(-1.2), (vec4(1.0))[2], _GLF_FUZZED((+ -2.7))), bvec4(false, false, true, false))), vec4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0)), mix(vec4(((vec4(1.0)))[0], _GLF_FUZZED(-6.0), ((vec4(1.0)))[2], ((vec4(1.0)))[3]), vec4(_GLF_FUZZED(4.1), ((vec4(1.0)))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-47.51)), bvec4(false, true, false, false)))[0], (vec4(1.0))[1], _GLF_FUZZED(-47.75), (vec4(1.0))[3]), vec4(_GLF_FUZZED(409.124), _GLF_FUZZED(-1.2), (vec4(1.0))[2], _GLF_FUZZED((+ -2.7))), bvec4(false, false, true, false))), (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0)), mix(vec4(((vec4(1.0)))[0], _GLF_FUZZED(-6.0), ((vec4(1.0)))[2], ((vec4(1.0)))[3]), vec4(_GLF_FUZZED(4.1), ((vec4(1.0)))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-47.51)), bvec4(false, true, false, false)))[0], (vec4(1.0))[1], _GLF_FUZZED(-47.75), (vec4(1.0))[3]), vec4(_GLF_FUZZED(409.124), _GLF_FUZZED(-1.2), (vec4(1.0))[2], _GLF_FUZZED((+ -2.7))), bvec4(false, false, true, false)))) * mat4(_GLF_ONE(1.0, injectionSwitch.y))), 0.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, log(1.0), 1.0, 0.0, 0.0))))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-878.314)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) - 0.0) : _GLF_FUZZED(5557.8198))) : _GLF_FUZZED(5.9))), 1.0)))), vec4(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)))), max(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / cos(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), _GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0)), mix(vec4(((vec4(1.0)))[0], _GLF_FUZZED(_GLF_IDENTITY(-6.0, (-6.0) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, tan(0.0), 0.0, 1.0, 1.0)))), ((vec4(1.0)))[2], ((vec4(1.0)))[3]), vec4(_GLF_FUZZED(4.1), ((vec4(1.0)))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-47.51)), bvec4(false, true, false, false)))[0], (vec4(1.0))[1], _GLF_FUZZED(-47.75), (vec4(1.0))[3]), vec4(_GLF_FUZZED(409.124), _GLF_FUZZED(-1.2), (vec4(1.0))[2], _GLF_FUZZED((+ -2.7))), bvec4(false, false, true, false))))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-878.314)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) - 0.0) : _GLF_FUZZED(5557.8198))) : _GLF_FUZZED(_GLF_IDENTITY(5.9, float(_GLF_IDENTITY(float(5.9), min(_GLF_IDENTITY(float(5.9), min(float(5.9), float(5.9))), float(5.9)))))))), 1.0)))), (true ? _GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), max(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / cos(vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0)), mix(vec4(((vec4(1.0)))[0], _GLF_FUZZED(-6.0), ((vec4(1.0)))[2], ((vec4(1.0)))[3]), vec4(_GLF_FUZZED(4.1), ((vec4(1.0)))[1], _GLF_FUZZED(6.1), _GLF_FUZZED(-47.51)), bvec4(false, true, false, false)))[0], _GLF_IDENTITY((vec4(1.0))[1], (true ? (vec4(1.0))[1] : _GLF_FUZZED(8782.1131))), _GLF_FUZZED(-47.75), (vec4(1.0))[3]), vec4(_GLF_FUZZED(409.124), _GLF_FUZZED(-1.2), (vec4(1.0))[2], _GLF_FUZZED((+ -2.7))), bvec4(false, false, true, false))))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-878.314)), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (1.0) - 0.0) : _GLF_FUZZED(5557.8198))) : _GLF_FUZZED(_GLF_IDENTITY(5.9, clamp(5.9, 5.9, 5.9))))), 1.0)))) : _GLF_FUZZED(vec4(365.847, 70.17, -81.11, -99.04)))), 0.0, 0.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 1.0))))), (_GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), max(vec4(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-19.42, (false ? _GLF_FUZZED(3.7) : -19.42)))), float(1.0), bool(true))), 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(6479.6680)), bool(false))) : _GLF_FUZZED(5557.8198))) : _GLF_FUZZED(5.9))), 1.0))))))) * vec4(1.0, 1.0, 1.0, 1.0)), vec3(1.0)), _GLF_struct_6(mat3x2(1.0), bvec4(_GLF_IDENTITY(true, (true) || false)))), _GLF_struct_9(_GLF_struct_8(uvec3(1u), mat3x2(1.0), mat2x3(1.0), 1, ivec2(1)), uvec4(1u)), _GLF_struct_12(mat3(1.0), true, _GLF_struct_10(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), mat3x4(1.0), bvec2(true), _GLF_IDENTITY(uvec2(1u), ~ _GLF_IDENTITY((~ (uvec2(1u))), uvec2(_GLF_IDENTITY(uvec2((~ (uvec2(1u)))), uvec2(_GLF_IDENTITY(uvec4(uvec2((~ (uvec2(1u)))), 0u, 1u), clamp(uvec4(uvec2((~ (uvec2(1u)))), 0u, 1u), uvec4(uvec2((~ (uvec2(1u)))), 0u, 1u), _GLF_IDENTITY(uvec4(uvec2((~ (_GLF_IDENTITY(uvec2(1u), max(_GLF_IDENTITY(uvec2(1u), uvec2(uvec2(uvec2(1u)))), uvec2(1u)))))), 0u, 1u), ~ (_GLF_IDENTITY(~ (uvec4(_GLF_IDENTITY(uvec2((~ (uvec2(1u)))), clamp(_GLF_IDENTITY(uvec2((~ (uvec2(1u)))), clamp(uvec2((~ (uvec2(1u)))), uvec2((~ (uvec2(1u)))), uvec2((~ (uvec2(1u)))))), _GLF_IDENTITY(uvec2((~ (uvec2(1u)))), min(uvec2((~ (uvec2(1u)))), uvec2((~ (uvec2(1u)))))), uvec2((~ (uvec2(1u)))))), 0u, 1u)), max(~ (uvec4(uvec2((~ (uvec2(1u)))), 0u, 1u)), ~ (uvec4(uvec2((~ (uvec2(1u)))), 0u, 1u))))))))))))), mat4x2(1.0)), _GLF_struct_11(vec2(1.0), mat3x2(1.0)), ivec3(1)), _GLF_struct_13(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) + ((subgroup_local_id + 1) % subgroup_size), mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), vec2(mat4x3(vec2(1.0, 0.0), length(vec2(0.0, 0.0)), 1.0, 1.0, round(length(normalize(1.0))), 1.0, sqrt(1.0), _GLF_IDENTITY(0.0, float(mat2x3(0.0, abs(0.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 1.0, 0.0, tan(0.0))))), dot(vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec2(1.0, 0.0))))), _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (_GLF_IDENTITY(0 | 0, int(ivec4(0 | 0, 0, 1, 0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 do
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(0.7) : injectionSwitch[1])))).y, 0.0 + (injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(7043.6972) : (injectionSwitch.y)))) * cos(0.0)))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), float(_GLF_IDENTITY(float((injectionSwitch.y)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4005.5418))) + (float((injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), float(_GLF_IDENTITY(float((injectionSwitch.y)), 0.0 + (float((injectionSwitch.y))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), float(_GLF_IDENTITY(float((injectionSwitch.y)), 0.0 + (float((injectionSwitch.y))))))))))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, false))))))), false || (bool(bvec3(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), float(_GLF_IDENTITY(float((injectionSwitch.y)), 0.0 + (float((injectionSwitch.y))))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(true, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))) && true)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))) && true)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(8.7))))))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(8.7))))))) && true))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.2)), bool(false))))), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.2)), bool(false))))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(224.286)), float(injectionSwitch.y), bool(true))), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.2)), bool(false)))))))) - 0.0))))))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0) + (injectionSwitch.y))))))) && true)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))) || false))))))), (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))) && true)))))))) || false))))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = ((0 | 0) & 91306); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       do
        {
         do
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).y))))
                return;
               continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false)))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ _GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (0 ^ 1) * (~ (~ (0)))))))), bool(bool(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 0, min(0 ^ 0, 0 ^ 0)))))))))); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint read = 0;
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_14._f4.next_virtual_gid, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))), min(~ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))), ~ (~ (~ (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))))))))))) : _GLF_struct_replacement_14._f4.next_virtual_gid)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_14._f4.next_virtual_gid, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_struct_replacement_14._f4.next_virtual_gid))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + ((_GLF_IDENTITY(_GLF_struct_replacement_14._f4.next_virtual_gid, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_struct_replacement_14._f4.next_virtual_gid, 0u + (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_struct_replacement_14._f4.next_virtual_gid))))))) << 0u)], uint(_GLF_IDENTITY(1, min(1, 1))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(-83599) : 64))) >> 0), _GLF_IDENTITY(int(ivec2(64, 0)), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (int(ivec2(64, 0))))), 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, (1) + 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     return;
    }
  }
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-3024) : 1))); _injected_loop_counter ++)
    {
     if((subgroup_local_id % 2) == 0)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), min(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0 + (max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))))))), injectionSwitch.x)) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       read = atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, uint(uvec4(_GLF_struct_replacement_0.virtual_gid, 0u, 1u, 0u)))], 4, 64, 2);
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), false || (_GLF_IDENTITY(bool(! (false)), true && (bool(! (false)))))))))))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), true && ((false))), ! (! (_GLF_IDENTITY((false), true && ((false))))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) || false)))))))) && true)) || false)), bool(bool((_GLF_IDENTITY(false, false || (false)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-1.7, 8451.2344)) : injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                break;
              }
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(_GLF_IDENTITY(4, 1 * (4))), int(ivec3(int(4), 1, 0))))) << _GLF_IDENTITY(int(5), int(5)), ((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec3(int(4), 1, 0))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (5) >> 0)))), int(5))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
            break;
           break;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               _GLF_IDENTITY(read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, 1u * (_GLF_struct_replacement_0.virtual_gid)), 0u ^ _GLF_IDENTITY((_GLF_struct_replacement_0.virtual_gid), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_struct_replacement_0.virtual_gid) : _GLF_FUZZED(133461u))))], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) / 1), _GLF_IDENTITY(int(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / _GLF_IDENTITY(1, (1) >> ((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), 0, 0, 1), clamp(ivec4(int(6), 0, 0, 1), ivec4(int(6), 0, 0, 1), ivec4(int(6), 0, 0, 1))))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), 0, 0))), int(6))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, _GLF_IDENTITY(max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))), int(ivec4(max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))), 1, 0, 0)))))))) : _GLF_FUZZED(-40587)), (false ? _GLF_FUZZED(_injected_loop_counter) : (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / _GLF_IDENTITY(1, (1) >> ((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), 0, 0, 1), clamp(ivec4(int(6), 0, 0, 1), ivec4(int(6), 0, 0, 1), ivec4(int(6), 0, 0, 1))))), (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4))))), 0, 0))), int(6))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, _GLF_IDENTITY(max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))), int(ivec4(max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))), 1, 0, 0)))))))) : _GLF_FUZZED(-40587))))), 1), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * _GLF_IDENTITY(((64) / 1), 0 ^ (_GLF_IDENTITY(((64) / 1), (0 << _GLF_IDENTITY(int(2), int(2))) ^ (((64) / 1))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1)))))))) : _GLF_FUZZED(-40587))), 1)) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / _GLF_IDENTITY(1, int(ivec4(1, 1, 1, (1 ^ 0)))), max((64) / 1, _GLF_IDENTITY((64) / 1, 1 * ((64) / 1))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) - (0 ^ 0)), _GLF_IDENTITY((64) / 1, max((64) / 1, _GLF_IDENTITY(_GLF_IDENTITY((64) / 1, 1 * ((64) / 1)), 0 + (_GLF_IDENTITY((64) / 1, 1 * ((64) / _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))))))))))))) : _GLF_FUZZED(-40587))), 1))))), int(int(_GLF_IDENTITY(64, (64) / 1)))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)) ? int(int(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) / 1), _GLF_IDENTITY(int(int(_GLF_IDENTITY(64, (64) / 1))), (int(int(_GLF_IDENTITY(64, (64) / 1)))) | (int(int(_GLF_IDENTITY(64, (64) / 1)))))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED((_injected_loop_counter / _injected_loop_counter)))))))))), 1 * (_GLF_IDENTITY(int(int(_GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, 0 ^ ((64) / 1))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(int(_GLF_IDENTITY(64, _GLF_IDENTITY((64) / _GLF_IDENTITY(1, (1) << 0), 0 ^ ((64) / 1))))), min(int(int(_GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), _GLF_IDENTITY((64) / 1, 0 ^ (_GLF_IDENTITY((64), 0 | ((64))) / 1))))), int(int(_GLF_IDENTITY(64, _GLF_IDENTITY((64) / 1, 0 ^ (_GLF_IDENTITY((64) / 1, ~ (~ (_GLF_IDENTITY((64) / 1, _GLF_IDENTITY(0 | ((64) / 1), ~ (~ (_GLF_IDENTITY(0 | ((64) / 1), int(ivec4(0 | ((64) / 1), 0, (0 << _GLF_IDENTITY(int(8), int(8))), 1)))))))))))))))))))))), 2), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id))), (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id)))) ^ 0u))), clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), 0u ^ ((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (4) >> 0), 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u))))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY((subgroup_id / num_workgroup), ((subgroup_id / num_workgroup)) * 1u)) : ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) | 0u), 0u)), 0u))))))))))))))), (_GLF_IDENTITY((~ _GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], clamp(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], clamp(buf[_GLF_struct_replacement_0.virtual_gid], buf[_GLF_struct_replacement_0.virtual_gid], buf[_GLF_struct_replacement_0.virtual_gid])), _GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], max(buf[_GLF_struct_replacement_0.virtual_gid], buf[_GLF_struct_replacement_0.virtual_gid])), buf[_GLF_struct_replacement_0.virtual_gid])), 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u)))))), 0u | (~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, (0u) / 1u))), 0u)))))))))))), 0u ^ ((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) / 1)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) + 0)) >> (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), int(1)))), 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY((4), ((4)) << 0) ^ 0), 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), uint(_GLF_IDENTITY(uvec3(~ (0u), 1u, 0u), ~ (~ (uvec3(~ (0u), 1u, 0u)))))))), 0u, _GLF_IDENTITY(0u, (0u) ^ (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))))), _GLF_IDENTITY(0u, (0u) >> 0u)))))))))))))), (_GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (_GLF_struct_replacement_0.virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, min(_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, uint(uvec4(_GLF_struct_replacement_0.virtual_gid, 0u, 1u, 0u))), _GLF_struct_replacement_0.virtual_gid))], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u)))), 0u)))))))))), 0u ^ (_GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) - 0u) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], ~ (~ (buf[_GLF_struct_replacement_0.virtual_gid]))), 4, _GLF_IDENTITY(64, (64) | (64)), 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), ((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) - 0u) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], ~ (~ (buf[_GLF_struct_replacement_0.virtual_gid]))), 4, _GLF_IDENTITY(64, (64) | (64)), 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))))))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, (_GLF_struct_replacement_0.virtual_gid) * 1u)], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, min(_GLF_IDENTITY(_GLF_struct_replacement_0.virtual_gid, uint(uvec4(_GLF_struct_replacement_0.virtual_gid, 0u, 1u, 0u))), _GLF_struct_replacement_0.virtual_gid))], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u ^ (0u)), 0u, 0u)))), 0u)))))))))), 0u ^ (_GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) - 0u) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], ~ (~ (buf[_GLF_struct_replacement_0.virtual_gid]))), 4, _GLF_IDENTITY(64, (64) | (64)), 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))), ((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, min(2, _GLF_IDENTITY(2, (2) << 0)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), (_GLF_FUZZED(workgroup_base)) - 0u) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], ~ (~ (buf[_GLF_struct_replacement_0.virtual_gid]))), 4, _GLF_IDENTITY(64, (64) | (64)), 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u))))))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))))) << 0u)), ((~ _GLF_IDENTITY((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(_GLF_IDENTITY(buf[_GLF_struct_replacement_0.virtual_gid], (buf[_GLF_struct_replacement_0.virtual_gid]) - 0u), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(2, (2) | 0), clamp(_GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(2, (2) | 0))))))), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) / 1), 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))), max(~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) / 1), 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))), ~ (_GLF_IDENTITY(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), uint(uvec2(~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) / 1), 64, 2)), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))))), 0u ^ ((read = _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)))), (true ? ~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)) : _GLF_FUZZED(workgroup_base)))))))), ((_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)))), (true ? ~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)) : _GLF_FUZZED(workgroup_base))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)))), (true ? ~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)) : _GLF_FUZZED(workgroup_base)))))))), ~ (~ ((_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), min(atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2), atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)))), (true ? ~ (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)) : _GLF_FUZZED(workgroup_base))))))))))))), uint(uvec2(~ _GLF_IDENTITY((atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY((atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), clamp((atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)), (atomicLoad(buf[_GLF_struct_replacement_0.virtual_gid], 4, 64, 2)))))), _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)))))))))))))) << 0u)) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u))))) << (0u >> _GLF_IDENTITY(uint(4u), uint(4u)))));
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))) || false))))
      return;
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 & 1) & _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), int(_GLF_IDENTITY(int((~ (1))), (int((~ (1)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))), 0, 0))))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 & 1) & 1))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))), true)))))))
        break;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(2), int(2)), min(1 << _GLF_IDENTITY(int(2), int(2)), 1 << _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupBarrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), (bool(bvec4(false, true, false, true))) || false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY((bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), true))), bool(bool(_GLF_IDENTITY((bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec2(false, false))))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((bool(bvec4(false, true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec2(false, false))))), true)))))))) || false)))) && true))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y) || false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(false)))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (false))) || false)))
                    return;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), min(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 1, 0)))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), true)))))))), (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      return;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))) && true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
    {
    }
   else
    {
     atomicStore(checker[_GLF_struct_replacement_0.virtual_gid], read, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8.0) : _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-22.03)), bool(false))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))) || false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(_GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), true))))))
          break;
         continue;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  break;
                 return;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, _GLF_IDENTITY(false, true && (false))))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6100.3670), _GLF_FUZZED(6.7)), bvec2(false, false))).x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 0.0, 1.0)))) / 1.0), injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY((injectionSwitch.x) / 1.0, clamp((injectionSwitch.x) / 1.0, _GLF_IDENTITY((injectionSwitch.x) / 1.0, max((injectionSwitch.x) / 1.0, _GLF_IDENTITY((injectionSwitch.x) / 1.0, ((injectionSwitch.x) / 1.0) / 1.0))), (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))) || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))))
              break;
             continue;
            }
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0)), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))) && true))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))), false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false)), true, false)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false)), true, false)), false, true))))))))))))))), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)), false, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
