#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_IDENTITY(true, (true) || false) && (! (! (_GLF_DEAD(false)))))))) && true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! _GLF_IDENTITY((! (bool(bvec3(false, true, true)))), bool(bool(_GLF_IDENTITY((! (bool(bvec3(false, true, true)))), false || ((! (bool(bvec3(false, true, true)))))))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(ivec3(_GLF_IDENTITY(38213, 0 ^ (_GLF_IDENTITY(38213, 0 | (38213)))), -37675, 42949)[1]))), _injected_loop_counter)) != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false) || (false), (_GLF_IDENTITY(false || (false), (false || (false)) && true)) && true)))))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, length(0.0), 1.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-77.00)), float(1.0), bool(true))), 1.0)))), (_GLF_IDENTITY((injectionSwitch.x), ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x)) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), mat2(1.0) * (vec2(0.0, 1.0))))))) / _GLF_ONE(1.0, injectionSwitch.y)) * 1.0), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x, injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), injectionSwitch)), min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) / 1)); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y)))), (float(_GLF_IDENTITY(float(injectionSwitch.y), max(float(injectionSwitch.y), float(injectionSwitch.y))))) / 1.0)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED(-57.63)), bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))), false, true, true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false, true, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), bool(bvec4(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), true, true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false, true, true)), bool(bool(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false, true, true)), bool(bool(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))), true, false, false)))) && true))), (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || (true)) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8054.1079), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-85.57)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))).y))), false, true, true)), bool(bool(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), false, false)))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), false, false)))), false), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), false, false)))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), false), false)), false, false)))), false), true)))), true))))))))) || false)))), true)))))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y)))))); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && _GLF_IDENTITY(true, true && (true))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) - 0.0)) < injectionSwitch.y, false, false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, false, false)))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((0 & 80262) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), true, true, false)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), true, true, false)))), true), bvec2(bvec2(bvec2(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(bool((injectionSwitch.x > injectionSwitch.y)), true, true, false)))), true))))))))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) || false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))), (bool(bvec2(true, true))) && true))))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(((54.01 != -2667.7718) ? vec3(-8329.4733, -1.2, -2826.8490).x : -300.798)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(90.93)), bvec2(true, false))), max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))))) - vec2(0.0, 0.0)), mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), _GLF_IDENTITY(vec2(mat4x2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), 0.0, sqrt(1.0), abs(1.0), 0.0, 1.0, 1.0)), (vec2(mat4x2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))), 0.0, sqrt(1.0), abs(1.0), 0.0, 1.0, 1.0))) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)))).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-88.71))) : _GLF_FUZZED(54.76))) > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))) || false), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, log(1.0), 1.0, 0.0)), 0.0), mix(vec3(_GLF_FUZZED(-94.37), _GLF_FUZZED(-7705.9333), _GLF_FUZZED(-8.3)), vec3((vec3(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, log(1.0), 1.0, 0.0)), 0.0))[0], (vec3(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, log(1.0), 1.0, 0.0)), 0.0))[1], (vec3(injectionSwitch.y, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 0.0, log(1.0), 1.0, 0.0)), 0.0))[2]), bvec3(true, true, true))))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, true, true), true))))))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)) > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 1.0, round(length(normalize(1.0)))))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), (true) && true) && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), false || (! ((false))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && (! ((false)))))), (true && (false)) && true)), true, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))), bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, (_GLF_IDENTITY((true) && true, ((true) && true) && true)) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > 0), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > 0), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > 0)))), false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, false)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ (_GLF_IDENTITY(0, ~ (~ (0))) >> _GLF_IDENTITY(int(8), int(8)))), _injected_loop_counter)) > 0)), bool(bvec2(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 | (0)))), false))))); _injected_loop_counter --)
    {
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)); _injected_loop_counter ++)
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   break;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(bool((_GLF_IDENTITY(false, ! (! (false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(true, bool(bool(true))), false)))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))) || false))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   for(int _injected_loop_counter = (-96144 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                }
               else
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
                }
              }
            }
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch)))[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) + 0.0)) + 0.0)))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_FUZZED(8.8)), bvec2(false, false)), _GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], float(mat2x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], 0.0, 0.0, 1.0, sqrt(1.0), 0.0))), min(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), float(mat4(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), max(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), (min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0])) * 1.0), min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))), log(1.0), 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), float(mat3(((injectionSwitch)[0]), _GLF_IDENTITY(abs(0.0), float(float(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))))), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.1)), bool(false))))))) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY(_GLF_FUZZED(8.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8)))))), bvec2(false, false)), min(mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], float(mat2x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], 0.0, 0.0, 1.0, sqrt(1.0), 0.0))), min(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), float(mat4(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), max(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), (min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0])) * 1.0), min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))), log(1.0), 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), float(mat3(((injectionSwitch)[0]), _GLF_IDENTITY(abs(0.0), float(float(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))))), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.1)), bool(false))))))) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY(_GLF_FUZZED(8.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8)))))), bvec2(false, false)), mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], float(mat2x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], 0.0, 0.0, 1.0, sqrt(1.0), 0.0))), min(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), float(mat4(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), max(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), (min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0])) * 1.0), min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))), log(1.0), 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), float(mat3(((injectionSwitch)[0]), _GLF_IDENTITY(abs(0.0), float(float(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))))), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.1)), bool(false))))))) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY(_GLF_FUZZED(8.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8)))))), bvec2(false, false)))), 1.0, 0.0, exp(0.0), 0.0)), min(vec2(mat3x2(mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], float(mat2x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], 0.0, 0.0, 1.0, sqrt(1.0), 0.0))), min(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), float(mat4(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), max(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), (min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0])) * 1.0), min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))), log(1.0), 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0))), mix(float(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), float(mat4(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), max(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), (min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0])) * 1.0), min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))), log(1.0), 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(float(40889u))), bool(false)))), _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), float(mat3(((injectionSwitch)[0]), _GLF_IDENTITY(abs(_GLF_IDENTITY(0.0, (0.0) - 0.0)), float(float(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))))), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.1)), bool(false))))))) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY(_GLF_FUZZED(8.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_IDENTITY(_GLF_FUZZED(8.8), 1.0 * (_GLF_IDENTITY(_GLF_FUZZED(8.8), 1.0 * (_GLF_FUZZED(8.8))))), _GLF_FUZZED(8.8))), _GLF_FUZZED(8.8)))))), bvec2(false, false)), 1.0, 0.0, exp(0.0), 0.0)), vec2(mat3x2(mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), float(mat2x3((injectionSwitch)[_GLF_IDENTITY(0, max(0, 0))], 0.0, 0.0, 1.0, sqrt(1.0), 0.0))), min(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), float(mat4(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), max(_GLF_IDENTITY(min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]), (min((injectionSwitch)[_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(_GLF_IDENTITY(ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))), max(_GLF_IDENTITY(ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))), clamp(ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))), ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))), ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))))), _GLF_IDENTITY(ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))), min(ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))), ivec2((0), (0 << _GLF_IDENTITY(int(7), int(7)))))))))) | (0))], (injectionSwitch)[0])) * 1.0), min((injectionSwitch)[_GLF_IDENTITY(0, (0) | (0))], (injectionSwitch)[0]))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, 1.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0)))), log(1.0), 0.0, 0.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((injectionSwitch)[0]), float(mat3(((injectionSwitch)[0]), _GLF_IDENTITY(abs(0.0), float(float(_GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0)))))), 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(6.1)), bool(false))))))) / 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.2), _GLF_IDENTITY(_GLF_FUZZED(8.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(8.8), min(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8))), _GLF_IDENTITY(_GLF_FUZZED(8.8), max(_GLF_FUZZED(8.8), _GLF_FUZZED(8.8)))))), bvec2(false, false)), 1.0, 0.0, exp(0.0), 0.0)))))).x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
          {
          }
         else
          {
           return;
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 0, 0)))) ^ 0))) < (0 ^ 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))) * vec2(1.0, 1.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(1.0 * _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-8.4)), float((injectionSwitch.y)), bool(true))), min(1.0 * (injectionSwitch.y), 1.0 * (injectionSwitch.y))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            break;
           break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)))) * vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true), bool(bvec2(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec3(-28.60, -5228.3676, -666.422).p)), bvec2(true, false))).y, injectionSwitch.y)))))))))
            return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat2((injectionSwitch)[0], determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, length(vec3(0.0, 0.0, 0.0))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.3), _GLF_FUZZED(413.031)), bvec2(false, false))).y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | _GLF_IDENTITY(1, max(1, 1)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    return;
   for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, true), false))))); _injected_loop_counter ++)
    {
     return;
    }
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(79726) : 1))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : subgroup_base)), 0u | (_GLF_IDENTITY(subgroup_base, (false ? _GLF_FUZZED(packHalf2x16(injectionSwitch)) : subgroup_base))))) >> 0u) + _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY((subgroup_local_id) - 0u, _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) << 0u)), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY((subgroup_local_id) - 0u, _GLF_IDENTITY(((subgroup_local_id) - 0u), (_GLF_IDENTITY(((subgroup_local_id) - 0u), (true ? ((subgroup_local_id) - 0u) : _GLF_FUZZED(atomicXor(workgroup_size, subgroup_id))))) >> 0u) * 1u)) << 0u))))), max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, (false ? _GLF_FUZZED(workgroup_id) : (subgroup_local_id) - 0u)), _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, ~ (~ ((subgroup_local_id) - 0u))), _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) << 0u), clamp(_GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, ~ (_GLF_IDENTITY(~ ((subgroup_local_id) - 0u), (_GLF_IDENTITY(~ ((subgroup_local_id) - 0u), ~ (~ (~ ((subgroup_local_id) - 0u))))) * 1u))), _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) << 0u), _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, ~ (~ ((subgroup_local_id) - 0u))), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id) - 0u), max(((subgroup_local_id) - 0u), ((subgroup_local_id) - 0u))), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) << 0u), _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, ~ (~ ((subgroup_local_id) - 0u))), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ 0u) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) << 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) - 0u, _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u), (_GLF_IDENTITY((subgroup_local_id) - 0u, _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * 1u)) | 0u)) << 0u)), (false ? _GLF_FUZZED(uvec3(161146u, 73389u, 83441u)[2]) : _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, (_GLF_IDENTITY((subgroup_local_id) - 0u, _GLF_IDENTITY(((subgroup_local_id) - 0u), (((subgroup_local_id) - 0u)) >> 0u) * _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) ^ 0u))))) << 0u))))) / 1u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x))) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false), (injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 0.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 0.0, sqrt(1.0))))))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + length(0.0)), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y : _GLF_FUZZED(215.967))), injectionSwitch.y)) : _GLF_FUZZED(98.33)))))))
        continue;
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, exp(0.0), 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0)))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, (write_val) >> 0u), 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true), false))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x < injectionSwitch.y), bool(bvec2(! (injectionSwitch.x < injectionSwitch.y), false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   else
    {
    }
   return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(tan(0.0), (_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0)))) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, abs(1.0), 1.0, _GLF_IDENTITY(abs(1.0), float(mat4x3(abs(1.0), 0.0, abs(1.0), round(length(normalize(vec2(1.0, 1.0)))), log(1.0), 0.0, 0.0, abs(0.0), sin(tan(0.0)), 1.0, 1.0, 1.0)))))).x > injectionSwitch.y))))
      continue;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false)))))))))))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false))))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), false)))))))))))))), true)), false, true, true)))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
      }
     buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(read_val, 0u ^ (read_val))), max(_GLF_IDENTITY((_GLF_IDENTITY(read_val, 0u ^ (read_val))), ((_GLF_IDENTITY(read_val, 0u ^ (read_val)))) + 0u), (_GLF_IDENTITY(read_val, 0u ^ (read_val))))) * (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))))), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))))), max((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(_GLF_IDENTITY(4u, (4u) << 0u), _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))))), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))), max(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))), _GLF_IDENTITY(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))), min(_GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))), _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))))))))))), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))), max(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))), _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))))), _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))), _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : 4u)))))))))), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), uint(4u))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u)))) | ((1u << _GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(4u, min(4u, _GLF_IDENTITY(4u, _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_id) : 4u), min((false ? _GLF_FUZZED(workgroup_id) : 4u), (false ? _GLF_FUZZED(workgroup_id) : 4u))))))))))) + 0u)))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY((read_val) * _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)), ((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u)), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) - 0u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, ((1u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) | (uint(3u))))) >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u)))) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(atomicMax(read_val, workgroup_base)) : (1u))), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY(_GLF_IDENTITY((1u), (true ? (1u) : _GLF_FUZZED(subgroup_local_id))), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), min(((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY(_GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(subgroup_local_id) : (1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))), (_GLF_IDENTITY((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))), max((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))))))) | ((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), max(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), (uint(_GLF_IDENTITY(1u, (1u) | (1u)))) | (uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))))) ^ 0u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 1u), (false ? _GLF_FUZZED(uvec2(182775u, 103282u)) : uvec2(_GLF_IDENTITY(uint(4u), uint(4u)), 1u)))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ _GLF_IDENTITY((~ ((1u))), ~ (~ ((~ ((1u))))))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))) - 0u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ ((read_val) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((read_val) * ((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))), (min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(1u, (1u) | (1u)))), (uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))) | 0u)), min(uint(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(1u, (1u) | (1u)))), (uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))) | 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(1u, (1u) | (1u)))), (uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))) | 0u)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(1u, (1u) | (1u)))), (uint(uint(_GLF_IDENTITY(1u, (1u) | (1u))))) | 0u))))))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((1u), ((1u)) / 1u), clamp((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) - 0u)))), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((_GLF_IDENTITY(1u, min(1u, 1u)))) >> 0u), _GLF_IDENTITY((1u), uint(_GLF_IDENTITY(uint((1u)), (uint((1u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))) | (1u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))), min(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) | (1u))))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((read_val) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, min(4u, 4u))) / 1u)), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), 0u), max(uvec2(_GLF_IDENTITY((read_val) * ((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(_GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), _GLF_IDENTITY((1u), ((1u)) | ((1u))), (1u)))))), (min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), (uint(_GLF_IDENTITY(1u, (1u) | (1u)))) / 1u), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u))))))) | (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ (~ ((1u)))), (1u), (1u)))))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((read_val) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY((read_val) * ((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), 0u | (uint(_GLF_IDENTITY(1u, (1u) | (1u))))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ _GLF_IDENTITY((~ ((1u))), (true ? (~ ((1u))) : _GLF_FUZZED(num_workgroup)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(uvec3(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), 1u, 0u))), 0u, 1u), (uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(uvec3(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), 1u, 0u))), 0u, 1u)) - uvec3(0u, 0u, 0u))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((read_val) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), 0u | (_GLF_IDENTITY((read_val) * ((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), 0u | (uint(_GLF_IDENTITY(1u, (1u) | (1u))))), uint(_GLF_IDENTITY(1u, (1u) | _GLF_IDENTITY((1u), clamp(_GLF_IDENTITY((1u), ~ _GLF_IDENTITY((~ ((1u))), (true ? (~ ((1u))) : _GLF_FUZZED(num_workgroup)))), (1u), (1u)))))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) * 1u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(uvec3(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), 1u, 0u))), 0u, 1u), (uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(uvec3(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), clamp((1u), (1u), _GLF_IDENTITY((1u), min(_GLF_IDENTITY((1u), ((1u)) >> 0u), _GLF_IDENTITY((1u), uint(uint((1u)))))))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), 1u, 0u))), 0u, 1u)) - uvec3(0u, 0u, 0u))))) ^ 0u)) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((read_val) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))))), 0u))))), _GLF_IDENTITY((read_val) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(4u) : _GLF_FUZZED(read_val)))) | (uint(4u))), uint(uvec3(uint(4u), 0u, 0u))))), (_GLF_IDENTITY(uint(4u), max(uint(4u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? uint(4u) : _GLF_FUZZED(read_val)))) | (uint(4u))), uint(uvec3(uint(4u), 0u, 0u)))))) >> 0u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) - 0u)))), (_GLF_IDENTITY((read_val) * _GLF_IDENTITY(((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) / 1u), uint(4u)))), _GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY(0u, (0u) + 0u) ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u))))))), (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))) | (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (true ? _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(subgroup_base)))))), ((read_val) * _GLF_IDENTITY(((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))), (158480u & 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), min(uvec4(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))), (158480u & 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), uvec4(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))), (158480u & 0u), 1u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))))))))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) / 1u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), 0u | (_GLF_IDENTITY(uint(4u), uint(4u)))), _GLF_IDENTITY(uint(4u), uint(4u)))), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) ^ 0u)))))))), (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(write_val) : uint(4u))), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))) | (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u)))), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))) | ((read_val) * _GLF_IDENTITY(((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)), _GLF_IDENTITY(~ _GLF_IDENTITY((~ (4u)), ((~ (4u))) * 1u), uint(uint(~ _GLF_IDENTITY((~ (4u)), ((~ (4u))) * 1u)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((_GLF_IDENTITY(4u, ~ (_GLF_IDENTITY(~ (4u), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (0u << _GLF_IDENTITY(uint(6u), uint(6u))) + 0u)) | (_GLF_IDENTITY(~ (4u), (~ (4u)) | (~ (4u)))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) + uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-6.3) : _GLF_ZERO(0.0, injectionSwitch.x))))))))), min(_GLF_IDENTITY(((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u ^ (1u))))), clamp((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u ^ (1u))))), (_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u ^ (1u))))), _GLF_IDENTITY((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u ^ (1u))))), ((_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u ^ (1u)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 0u))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))))), injectionSwitch.x)), ~ (~ ((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), clamp((_GLF_IDENTITY((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (~ (4u))), min(_GLF_IDENTITY(4u, ~ (~ (4u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (~ (4u))), (_GLF_IDENTITY(4u, ~ (~ (4u)))) | 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), uint(4u))), ((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (~ (4u))), min(_GLF_IDENTITY(4u, ~ (~ (4u))), _GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (~ (4u))), (_GLF_IDENTITY(4u, ~ (~ (4u)))) | 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (~ (~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (~ (4u))), min(_GLF_IDENTITY(4u, ~ (~ (4u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4u, ~ (~ (4u))), (_GLF_IDENTITY(4u, ~ (~ (4u)))) << 0u), (_GLF_IDENTITY(4u, ~ (~ (4u)))) | 0u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), uint(4u)))) | 0u) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (_GLF_IDENTITY(4u, uint(uvec3(_GLF_IDENTITY(4u, uint(uvec2(_GLF_IDENTITY(4u, (4u) >> 0u), 1u))), (91105u & 0u), 1u))))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) + _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), min(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), ((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) - 0u), 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), sqrt(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)))))))))), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), ((_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (true ? (1u) : _GLF_FUZZED(117406u))) - _GLF_IDENTITY(0u, (0u) << 0u)), 1u)) << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4u), min(~ (4u), ~ (4u)))), min(~ (~ (4u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (4u), ~ (_GLF_IDENTITY(~ (~ (4u)), uint(uvec4(~ (~ (4u)), 1u, 1u, 1u))))), (_GLF_IDENTITY(~ (4u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4u), (~ (4u)) >> 0u)), uint(uvec4(~ (~ (4u)), 1u, 1u, 1u)))))) - 0u)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ ((_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) + uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))))), (_GLF_IDENTITY(min(_GLF_IDENTITY((read_val) * ((_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-761.239, 8.1)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) | (1u))))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, 0u ^ (1u)), (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, 0u ^ _GLF_IDENTITY((1u), ((1u)) | 0u))))))))) ^ 0u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), max(uint(4u), uint(4u))), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((_GLF_IDENTITY(read_val, uint(_GLF_IDENTITY(uvec3(read_val, (1u ^ 1u), 0u), uvec3(0u, 0u, 0u) | (uvec3(read_val, (1u ^ 1u), 0u)))))) * ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) / 1u), (_GLF_IDENTITY(4u, (4u) / 1u)) / 1u), _GLF_IDENTITY(4u, (4u) / 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (true ? _GLF_IDENTITY(4u, max(4u, 4u)) : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY((4u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_base) : (4u))) / 1u)), ~ (~ (uint(_GLF_IDENTITY(4u, (4u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u)))), uint(_GLF_IDENTITY(4u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(4u, (4u) - 0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(read_val, uint(uvec2(read_val, 1u)))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ((read_val) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(1u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) << 0u)) / 1u), 1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) * 1u))))) | ((read_val) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), (_GLF_IDENTITY((read_val) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (_GLF_IDENTITY((read_val), ~ (_GLF_IDENTITY(~ ((read_val)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((read_val)))))) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(vec4(float(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(false))), _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(1u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((virtual_gid % workgroup_size)) : uint(4u))), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) >> 0u)) | (_GLF_IDENTITY(uint(4u), uint(4u)))), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) << 0u)) / 1u), 1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))) | ((read_val) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)))))))) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(read_val, uint(uvec2(read_val, 1u)))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ((read_val) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(1u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) << 0u)) / 1u), 1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))))) >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) * 1u))))) | ((read_val) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))), (_GLF_IDENTITY((read_val) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(uint(4u), uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), (_GLF_IDENTITY((read_val), ~ (_GLF_IDENTITY(~ ((read_val)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((read_val)))))) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0)), float(vec4(float(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(8.9)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0, round(length(normalize(1.0))), 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (4u) ^ 0u))), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), clamp(1u << _GLF_IDENTITY(uint(4u), uint(4u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (1u << _GLF_IDENTITY(uint(4u), uint(4u))) << 0u)) / 1u), 1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))) | ((read_val) * ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(4u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (0u ^ 0u) ^ (4u))), uint(4u)))))) ^ 0u)) << 0u)), (false ? _GLF_FUZZED(subgroup_size) : min(_GLF_IDENTITY((read_val) * ((_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(_GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))), uint(uvec4(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))), 0u, 1u, 0u))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))) << 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))), 0u | ((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1u))) >> 0u), (1u) | (1u))))))))) ^ 0u)), (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - (0u << _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), ~ (~ (uint(1u))))))), clamp(1u, 1u, 1u))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), min(~ (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), ~ (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, max(1u, 1u)), 1u, 1u)))))))) | 0u)))) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_IDENTITY((min(uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))), _GLF_IDENTITY(1u, (1u) | (1u))))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))), clamp((min(uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))), _GLF_IDENTITY(1u, (1u) | (1u))))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))), (min(uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))), _GLF_IDENTITY(1u, (1u) | (1u))))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))), (min(uint(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), ~ (~ (_GLF_IDENTITY(1u, (1u) | (1u))))))), _GLF_IDENTITY(1u, (1u) | (1u))))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))) << 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))), 0u | ((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), ~ (~ (uint(_GLF_IDENTITY(1u, (1u) | (1u)))))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))) ^ 0u))) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), _GLF_IDENTITY(min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u)))), (min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), max((1u) | (1u), (1u) | (1u))))))) << 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))), 0u | ((uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (1u) | (1u))), min(uint(_GLF_IDENTITY(1u, (1u) | (1u))), uint(_GLF_IDENTITY(1u, (1u) | (1u))))))))) ^ 0u)))) << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ~ (~ ((read_val) * (_GLF_IDENTITY(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), (true ? (1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)) : _GLF_FUZZED(write_val)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 0u + (uint(_GLF_IDENTITY(4u, uint(_GLF_IDENTITY(uvec3(4u, 0u, (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), uint(uvec4(uint(6u), 1u, 0u, 1u)))))), (uvec3(4u, 0u, (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), uint(uvec4(uint(6u), 1u, 0u, 1u))))))) >> uvec3(0u, 0u, 0u)))))))) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), min(_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, min(4u, 4u))), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(uint(4u), uint(4u)), ((1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (_GLF_IDENTITY(uint(4u), (true ? _GLF_IDENTITY(uint(4u), min(uint(4u), uint(4u))) : _GLF_FUZZED(subgroup_local_id))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))) << 0u), (1u << _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) | (uint(4u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), min(uint(4u), uint(4u))), uint(4u))))))))))), _GLF_IDENTITY((read_val) * ((1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, ~ (~ (_GLF_IDENTITY(4u, (4u) - 0u))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), _GLF_IDENTITY(((read_val) * _GLF_IDENTITY(((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + 0u)), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 0u + (uint(4u)))) - 0u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(subgroup_size) : uint(4u)))), (_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(subgroup_size) : uint(4u))))) | (_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(subgroup_size) : uint(4u)))))))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u | (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (4u) + 0u)), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 0u + (uint(4u)))) - 0u), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(subgroup_size) : uint(4u)))), (_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(subgroup_size) : uint(4u))))) | (_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(subgroup_size) : uint(4u)))))))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))) | _GLF_IDENTITY((_GLF_IDENTITY((read_val), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), uint(uvec3(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), 0u, 1u)))))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))), ((_GLF_IDENTITY(4u, ~ (~ (4u))))) >> 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), min(_GLF_IDENTITY((_GLF_IDENTITY((read_val), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), uint(uvec3(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), 0u, 1u)))))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))), ((_GLF_IDENTITY(4u, ~ (~ (4u))))) >> 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), max((_GLF_IDENTITY((read_val), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), uint(uvec3(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), 0u, 1u)))))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))), ((_GLF_IDENTITY(4u, ~ (~ (4u))))) >> 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), (_GLF_IDENTITY((read_val), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), uint(uvec3(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), 0u, 1u)))))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))), ((_GLF_IDENTITY(4u, ~ (~ (4u))))) >> 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), (_GLF_IDENTITY((read_val), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), uint(uvec3(_GLF_IDENTITY((read_val), clamp((read_val), (read_val), _GLF_IDENTITY((read_val), ~ (~ ((read_val)))))), 0u, 1u)))))) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(_GLF_IDENTITY(4u, _GLF_IDENTITY((_GLF_IDENTITY(4u, ~ (~ (4u)))), ((_GLF_IDENTITY(4u, ~ (~ (4u))))) >> 0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))))), (_GLF_IDENTITY(((read_val) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, ~ (~ (_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(virtual_gid)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) || false, ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) || false)))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), min(_GLF_IDENTITY(4u, (4u) + 0u), _GLF_IDENTITY(4u, (4u) + 0u))), _GLF_IDENTITY(4u, (4u) + 0u), _GLF_IDENTITY(4u, (4u) + 0u)))))), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 0u + (_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 1u * (uint(4u)))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), min(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(106492u) : 0u))) ^ 0u)), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))) | ((read_val) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, log(1.0), 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))) : _GLF_FUZZED(-4.8))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.3)), vec2(_GLF_FUZZED(9019.9626), (injectionSwitch)[1]), bvec2(false, true))).x)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-3671.2361)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x)))) + log(1.0)), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), (true ? float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)) : _GLF_FUZZED(-7138.4528))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u)), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), (uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u)))), 0u | (((read_val) * ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, ~ (~ (_GLF_IDENTITY(4u, (true ? 4u : _GLF_FUZZED(virtual_gid)))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) || false, ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) || false)))) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4u, (4u) + 0u), min(_GLF_IDENTITY(4u, (4u) + 0u), _GLF_IDENTITY(4u, (4u) + 0u))), _GLF_IDENTITY(4u, (4u) + 0u), _GLF_IDENTITY(4u, (4u) + 0u)))))), uint(4u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 0u + (_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), 1u * (uint(4u)))) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(float(_GLF_ZERO(0.0, injectionSwitch.x)), min(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_ZERO(0.0, injectionSwitch.x))))))))))))) - _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(106492u) : 0u))) ^ 0u)), uint(4u)), 0u ^ (1u << _GLF_IDENTITY(uint(4u), uint(4u)))))))))) >> _GLF_IDENTITY(uint(4u), uint(4u)))) | ((read_val) * ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 0.0, log(1.0), 1.0, abs(1.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))) : _GLF_FUZZED(-4.8))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.3)), vec2(_GLF_FUZZED(9019.9626), (injectionSwitch)[1]), bvec2(false, true))).x)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-3671.2361)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x)))) + log(1.0)), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)), (true ? float(vec3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0)) : _GLF_FUZZED(-7138.4528))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (clamp(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0u)), 0u, 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), (uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(4u, ~ (~ (4u)))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))))))) + 0u)))))) >> 0u)))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false)))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        break;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, ! (! (true))), false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (! ((! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))))))))))) && (_GLF_IDENTITY(false, false || (false))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), true && (false))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
              {
               return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (1 ^ _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), 1 * (_GLF_IDENTITY(int(ivec2(0, 0)), 0 | (_GLF_IDENTITY(int(ivec2(0, 0)), ~ (~ (int(ivec2(0, 0))))))))))) / 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))) || false)) && true); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, min(4, 4))), _GLF_IDENTITY(int(4), min(int(4), int(4)))))); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
