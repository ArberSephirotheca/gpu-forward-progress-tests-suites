#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_9 {
 uint subgroup_size;
 ivec2 _f0;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 uvec2 _f1;
 ivec4 _f2;
 mat2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 float _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_6 {
 uint _f0;
 vec2 _f1;
 uint _f2;
} ;

struct _GLF_struct_5 {
 bool _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 ivec2 _f1;
 mat4 _f2;
 uvec2 _f3;
 bvec2 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
 vec3 _f1;
 float _f2;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 vec3 _f3;
 _GLF_struct_6 _f4;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 uvec2 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_2 {
 float _f0;
 uvec4 _f1;
 ivec4 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_11 {
 mat4x3 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_10 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_0 {
 uint num_workgroup;
 mat4x2 _f0;
 mat2x3 _f1;
 uint _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  barrier();
 uvec2 GLF_merged2_0_1_4_1_1_11readvirtual_gid;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) != (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), int(1))))), (true ? _GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), int(1))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), int(1))))), 0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), int(1))))))), (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))) / 1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), int(1))))))) : _GLF_FUZZED(_injected_loop_counter))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> (0 >> _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false), false))), false))))), true, false), true))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))))))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy = GLF_merged2_0_1_4_1_1_11readvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0), (mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0)) + mat3x2(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0))), (true ? float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0), (mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0)) + mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))) : _GLF_FUZZED(-54.56)))) > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(mat4x3(1.0), _GLF_struct_2(1.0, uvec4(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, _GLF_IDENTITY(max(1u, 1u), (max(1u, 1u)) ^ 0u)), _GLF_IDENTITY(1u, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(5u), uint(5u)), _GLF_IDENTITY(uint(uvec4(0u << _GLF_IDENTITY(uint(5u), uint(5u)), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec4(0u << _GLF_IDENTITY(uint(5u), uint(5u)), 0u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0u))) + (1u))))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), clamp(1, 1, _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 | (1))))))), max(ivec4(1), ivec4(1))), _GLF_struct_1(ivec2(1), uvec2(1u), mat2x3(1.0), mat2x3(1.0), mat2x4(1.0))), _GLF_struct_7(_GLF_struct_3(mat3x2(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(vec3(mat4x3(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), 1.0), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), 1.0), (true ? mat4x2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, clamp((1.0) - 0.0, _GLF_IDENTITY((1.0) - 0.0, cos(0.0) * ((1.0) - 0.0)), (1.0) - 0.0)))), mix(vec3(_GLF_FUZZED(145.027), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3167.6960)), bool(false))), (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - 0.0)))[_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) * 1), 1))], (_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))) * vec3(1.0, 1.0, 1.0)))[2]), vec3(_GLF_IDENTITY((vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)))[0], ((vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (1.0) - 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))))), _GLF_IDENTITY(1.0, (1.0) - 0.0)))))[0]) / 1.0), _GLF_FUZZED((11.54)), _GLF_FUZZED(-50.61)), bvec3(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false)), ! (! (bool(bvec4((injectionSwitch.x < injectionSwitch.y), false, false, false))))))), false, false))), 1.0, 0.0, 1.0, sin(0.0), 1.0) : _GLF_FUZZED(mat4x2(-3.1, -8.6, -305.787, 353.672, 9.6, -38.17, -92.07, -79.90)))) : _GLF_FUZZED(mat4x2(-1515.5051, 28.76, -5.3, _GLF_IDENTITY(5.3, max(5.3, 5.3)), 213.846, 0.3, -9.0, -8.5))))), _GLF_IDENTITY((vec3(_GLF_IDENTITY(mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), 1.0), (true ? _GLF_IDENTITY(mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), 1.0), (true ? mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(1.0), float(_GLF_FUZZED(-192.094)), bool(false)))) : _GLF_FUZZED(mat4x2(_GLF_IDENTITY(-3.1, (-3.1) - 0.0), -8.6, -305.787, _GLF_IDENTITY(353.672, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(353.672, (353.672) * 1.0), exp(0.0), determinant(mat2(exp(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(353.672, (353.672) * 1.0), exp(0.0), determinant(mat2(exp(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 0.0)))), min(float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(353.672, (353.672) * 1.0), exp(0.0), determinant(mat2(exp(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(353.672, (353.672) * 1.0), exp(0.0), determinant(mat2(exp(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 0.0)))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(353.672, (353.672) * 1.0), exp(0.0), determinant(mat2(exp(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 0.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(_GLF_IDENTITY(353.672, (353.672) * 1.0), exp(0.0), determinant(mat2(exp(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 0.0))))))), 9.6, -38.17, -92.07, -79.90)))) : _GLF_FUZZED(mat4x2(-1515.5051, 28.76, -5.3, 5.3, 213.846, 0.3, -9.0, -8.5)))))), (true ? (vec3(_GLF_IDENTITY(mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), 1.0), (true ? _GLF_IDENTITY(mat4x2(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(0.2)), bool(false)))))), 1.0, 0.0, 1.0, sin(0.0), 1.0), (true ? mat4x2(vec3(1.0), 1.0, 0.0, 1.0, sin(0.0), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), mix(float(1.0), float(_GLF_FUZZED(-192.094)), bool(false)))) : _GLF_FUZZED(mat4x2(_GLF_IDENTITY(-3.1, (-3.1) - 0.0), -8.6, -305.787, 353.672, 9.6, -38.17, -92.07, -79.90)))) : _GLF_FUZZED(mat4x2(-1515.5051, 28.76, -5.3, 5.3, 213.846, 0.3, -9.0, -8.5)))))) : _GLF_FUZZED(vec3(-230.525, -0.2, 3.9)))) * _GLF_IDENTITY(mat3(1.0), (_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) * mat3(1.0))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 0.0)), max(vec3(mat4x3(vec3(1.0), 1.0, round(_GLF_IDENTITY(length(normalize(vec2(1.0, 1.0))), min(length(normalize(vec2(1.0, 1.0))), length(normalize(vec2(1.0, 1.0)))))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(8466.5863)), bool(false)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(8466.5863)), bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(8466.5863)), bool(false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(8466.5863)), bool(false)))), mix(float((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(8466.5863)), bool(false))))), float(_GLF_FUZZED(-5.1)), bool(false))))) - log(1.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, determinant(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-55.34)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)), vec3(mat4x3(vec3(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), mat3(1.0) * (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED(mat3(97.77, 5.7, 4561.1533, 5864.8132, -5269.8352, 4050.2112, 3.4, -334.427, _GLF_IDENTITY(-0.3, min(_GLF_IDENTITY(-0.3, float(float(-0.3))), _GLF_IDENTITY(-0.3, (true ? -0.3 : _GLF_FUZZED(3545.2376))))))) : _GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), mat3(1.0) * (_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0), (true ? mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat3(-424.693, -6219.2146, 2716.8383, -3.5, -6.2, 3.9, 10.15, 4.3, 691.354))))))))))), 0.0, 0.0))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(584.632)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1188.4180)), bool(false)))), _GLF_IDENTITY(bool(true), true && (_GLF_IDENTITY(bool(true), false || (bool(true)))))))), _GLF_struct_4(mat3x2(1.0), ivec2(1), mat4(1.0), uvec2(1u), bvec2(true), ivec4(1)), _GLF_struct_5(true, mat3x4(1.0)), vec3(1.0), _GLF_struct_6(1u, vec2(1.0), 1u)), _GLF_struct_10(mat4(1.0), 1.0, _GLF_struct_8(mat4(1.0), uvec2(1u), ivec4(1), mat2(1.0), mat2(1.0)), _GLF_struct_9(gl_SubgroupSize, ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) && true) ? 1 : _GLF_FUZZED(-7201)))) | (1)))), vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0))), mat2(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(gl_NumWorkGroups.x, mat4x2(1.0), mat2x3(1.0), 1u);
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (true ? gl_WorkGroupSize.x : _GLF_FUZZED(52012u)));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), true && (! (! (true)))))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, true, true))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec3((false), false, true))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec3((false), false, true))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (! (false)))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), true, true, true))) && true)))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y), float(_GLF_FUZZED(0.3)), bool(false))))))))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))) << 0u)) - 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), bool(bvec2(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), true))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))) && true), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.6) : injectionSwitch.x)), injectionSwitch.x))) * 1.0) < injectionSwitch.y)))))), bool(bvec4((! (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))) && true), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(1.6) : injectionSwitch.x)), injectionSwitch.x))) * 1.0) < injectionSwitch.y)))))), true, true, false))))))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((50061 & (_GLF_IDENTITY(0, (0) + (0 << _GLF_IDENTITY(int(5), int(5)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((50061 & (0 << _GLF_IDENTITY(int(2), int(2)))) >> _GLF_IDENTITY(int(4), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)))), (_GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))))) ^ 0u) * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_base = subgroup_id * _GLF_struct_replacement_11._f3._f3.subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u & 155878u) + (workgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u & 155878u) + (workgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u & 155878u) + (workgroup_base)), 0u ^ (_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u))))) + subgroup_base + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) | 0u))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y = _GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), virtual_gid, virtual_gid)), virtual_gid));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 1u * (subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1)))) % _GLF_struct_replacement_11._f3._f3.subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.z = _GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, 1u * (next_virtual_gid)), next_virtual_gid)), max(next_virtual_gid, next_virtual_gid));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(8.9, 9725.4267)) : vec2(1.0, 1.0))))))[1])).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x), mix(float((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x)), float(_GLF_FUZZED(-9160.5518)), bool(false))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.38)), bool(false))))), 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.38)), bool(false))))), 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-48.38)), bool(false))))), 1.0)), (false ? _GLF_FUZZED(vec2(-38.33, -63.55)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[1])).x)))) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(vec2(-7399.9800, -42.29).r)), bool(false))))))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read = _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (_GLF_IDENTITY(0, max(0, 0))) << 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, (false) && true)))), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.w = read;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(1), int(1))) | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.x = _GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread) / uvec4(1u, 1u, 1u, 1u)).w;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.z], uint(1), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec2(1, 0)))) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(4), int(4))) & 60525)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), (0 >> _GLF_IDENTITY(int(1), int(1))) - 0))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min(_GLF_IDENTITY((1) | (1), ((1) | (1)) | ((1) | (1))), (1) | (1))))))
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) / 1)) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))))) && true))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false))))), true, false, true)))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ 47.14))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.x = atomicLoad(_GLF_IDENTITY(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], min(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y]))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], min(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y]))), 0u + (~ (_GLF_IDENTITY(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], min(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y])))))))))), _GLF_IDENTITY(4, int(ivec2(4, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(8495) : 1)), 1, 1))))), 64, 2);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), true && (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), (! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true)) && true)))))))
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))))), (_GLF_DEAD(false)) && true))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     subgroupAll(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), float(float(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), 1.0, 0.0, 1.0, log(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), cos(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-9935.2012 + -9.1))), bool(false))), 0.0)), 0.0, 1.0)), 0.0)))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), float(_GLF_FUZZED(-6.3)), bool(false))), 0.0, 1.0, log(1.0), cos(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-88.45)), float(float(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0, 0.0))), bool(true)))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), determinant(mat2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0)), 0.0), transpose(transpose(mat4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, 1.0, 0.0, 1.0, log(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) - 0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))))))), cos(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9.6) : _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), max((0.0), (0.0))) * 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(determinant(mat2(1.0, 0.0, 0.0, 1.0)), float(_GLF_IDENTITY(mat3(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0), (true ? mat3(determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0, exp(0.0), 1.0, 1.0, 0.0, 0.0, 1.0) : _GLF_FUZZED(mat3(-4971.9846, -0.0, -25.22, 22.35, 984.477, 2656.0307, 673.898, 63.86, -4.0)))))), 0.0)))))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) || false)), true)), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))) || false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- vec2(6.1, -52.74)).t)), bool(false))))) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))))));
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          barrier();
        }
      }
     GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.x = _GLF_IDENTITY(atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2), (_GLF_IDENTITY(atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2), clamp(_GLF_IDENTITY(atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2), (atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2)) | 0u), _GLF_IDENTITY(atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2), (atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2)) >> 0u), _GLF_IDENTITY(atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2), (atomicLoad(buf[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, clamp(4, 4, 4))))))), 64, 2)) - 0u)))) | 0u);
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bool(! ((injectionSwitch.x > injectionSwitch.y)))))))))))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true))))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), true, false))))))) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(1.0) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(8.4))) > injectionSwitch.y))))), false)), bvec3(bvec4(bvec3(bvec3(false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), false)))))))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(7971.8216))) > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bool(false || (injectionSwitch.x > injectionSwitch.y)))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) && true), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 1.0, 1.0))).x > injectionSwitch.y)))))))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false)))))), bool(bvec3(true, true, true))))))), true, true, true)))))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true, true))))))))), true, true, true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec3(true, true, true)))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), (! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))) && true)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), ! (! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))), (! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))) && true)))), false, false), false)))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))))), true, true, true)))))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(true, true, true)), (bool(bvec3(true, true, true))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(bool(bvec3(true, true, true)), (bool(bvec3(true, true, true))) || false))))))))))))), _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true)))), true, true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec3(true, true, true)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_IDENTITY(true, (true) && true)))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(true, false || (true)), true, true)), false, _GLF_IDENTITY(true, true && (true)), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))))), true, true, true))))))))) || false)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, false || ((true) || false)))) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), false))))), (bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(true, true, true), _GLF_IDENTITY(false, ! (! (false))))), bvec3(bvec4(bvec3(bvec4(bvec3(true, true, true), false)), _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))), (injectionSwitch.x < injectionSwitch.y)))))), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), false)))))) && true))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), true, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), true && (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))))), true)), (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, true)))))))))))), false)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, true)))))))))))), false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(true, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(true, true, true)))))))))))), false)))))), false))))), (bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), false)))))) && true))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), true))) && true)))))), ! (! (bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(true, true, true)), (bool(bvec3(true, true, true))) || false), ! (_GLF_IDENTITY(! (bool(bvec3(true, true, true))), bool(bool(! (bool(bvec3(true, true, true)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (! (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)))))), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), ! (! ((_GLF_IDENTITY(true, (true) || false))))) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, true)))) || false), true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), true))), bvec3(bvec3(bvec3(true, true, true)))))), false))))), (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) || false), true, true), bvec3(bvec3(bvec3(true, true, true)))))), false)))))) && true))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), true && (bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))))), true)), (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), true)))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), true))))))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), bool(bvec2((true), true))), (! (true)) || false))), true, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec3(bvec3(bvec3(true, true, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec3(bvec3(bvec3(true, true, true)))))), false)))))), false)))))) && true))), ! (! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))), true, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))), true))) && true)))))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       subgroupBarrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (94539 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true)))))), false || (_GLF_DEAD(false))), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))))), bool(bvec2(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))))), false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     atomicStore(checker[GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy.y], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u))))), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread, uvec4(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[0], GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[1], GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[2], GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[3])).xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u))))), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))), uvec2(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))), ((_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u))))) << uvec2(0u, 0u))))))))), (0u | 0u), 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread, uvec4(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[0], GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[1], GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[2], GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread[3])).xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u))))), ~ (~ (_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))), uvec2(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u)))), ((_GLF_IDENTITY(GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy, (GLF_merged3_0_2_39_2_1_16_3_1_4GLF_merged2_0_1_4_1_1_11readvirtual_gidnext_virtual_gidread.xy) * uvec2(1u, 1u))) >> (uvec2(1u, 1u) ^ _GLF_IDENTITY(uvec2(1u, 1u), min(uvec2(1u, 1u), uvec2(1u, 1u))))) << uvec2(0u, 0u))))))))), (0u | 0u), 0u)) | uvec4(0u, 0u, 0u, 0u)))).x, 4, 64, 4);
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
