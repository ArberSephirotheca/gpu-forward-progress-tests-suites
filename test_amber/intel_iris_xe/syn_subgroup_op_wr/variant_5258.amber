#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, clamp(0 | 0, 0 | 0, _GLF_IDENTITY(0 | 0, 0 | (0 | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), (bool(bool(_GLF_IDENTITY(false, (false) && true)))) || false)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(9.4)))))) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(9.4)))))) || false)), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(9.4)))))) || false, ! (! ((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0) : _GLF_FUZZED(9.4)))))) || false)))))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(73460) : 1)))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(-64942, (true ? -64942 : _GLF_FUZZED(sign(-71814))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)), injectionSwitch.x)), 1.0 * (injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(73797) : 1)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 ^ (7))), int(7))) * (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         return;
        }
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y)))) && true)))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
        {
         return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))))))) | ((~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))))))) >> uvec3(0u, 0u, 0u), clamp((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), (uvec3(gl_NumWorkGroups)) ^ uvec3(0u, 0u, 0u))))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))), (true ? ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))) : _GLF_FUZZED(uvec3(148594u, 69673u, 154578u)))))) >> uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(129405u, 133858u, 109038u)) : (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u))), max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u)))))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))), (false ? _GLF_FUZZED(uvec3(186378u, 50058u, subgroup_local_id)) : ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))))) >> uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups) | (gl_NumWorkGroups)).x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))), uvec3(uvec3(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))))))))), ((_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))), uvec3(uvec3(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))))))) >> uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(129405u, 133858u, 109038u)) : (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)), clamp(max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))), ((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))))) << uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups) | (gl_NumWorkGroups)).x), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), max(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), clamp(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))), uvec3(uvec3(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))))))))), ((_GLF_IDENTITY(gl_NumWorkGroups, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u))), uvec3(uvec3(~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))))))) >> uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(129405u, 133858u, 109038u)) : (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, uint(uvec3(0u, 0u, 1u))))), 0u))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), _GLF_IDENTITY(max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)), clamp(max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups)))), ((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))) | ((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(gl_NumWorkGroups))))))) << uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)))))) >> uvec3(0u, 0u, 0u)))), (gl_NumWorkGroups) | (gl_NumWorkGroups)).x), 1u))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]), ~ _GLF_IDENTITY((~ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))), (false ? _GLF_FUZZED(uvec3(5535u, 54672u, 159345u)) : (~ (uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_local_id) : workgroup_id), ((false ? _GLF_FUZZED(subgroup_local_id) : workgroup_id)) | ((false ? _GLF_FUZZED(subgroup_local_id) : workgroup_id)))), clamp(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id))) - _GLF_IDENTITY(0u, (0u) | 0u)), workgroup_id, workgroup_id));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false)) || false), (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) || false))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec4((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))) || false), (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false)))))) || false)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-115.314)), bool(false)))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) > 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (true ? _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), subgroup_id)) : _GLF_FUZZED(subgroup_id))) * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), (_GLF_IDENTITY(true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base))), ~ (~ ((_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))))))) / 1u)) : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), clamp(subgroup_base, subgroup_base, subgroup_base))))) / 1u)) : _GLF_FUZZED(uaddCarry(num_workgroup, workgroup_id, workgroup_base))) / 1u))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), bool(bvec3(false, false, true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false, false)), false || (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), false, false, false))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(sqrt(injectionSwitch)))).x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(54.53))), 1.0, 0.0, 1.0)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), 0 ^ (1))) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 | (0))) ^ 0))), _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4)))), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))) && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || false, ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false)))) || false)))))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) || false, ! (! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, true && (false))) && (false)))) || false)))))), true)))) && _GLF_IDENTITY(true, bool(bool(true)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((subgroup_local_id % 2) == 0)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, true)))))))
        {
        }
       else
        {
         return;
        }
      }
     do
      {
       do
        {
         do
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(-14232, _GLF_IDENTITY((_GLF_IDENTITY(-14232, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true) ? -14232 : _GLF_FUZZED(-9655)), clamp((_GLF_IDENTITY(true, (true) && true) ? -14232 : _GLF_FUZZED(-9655)), (_GLF_IDENTITY(true, (true) && true) ? -14232 : _GLF_FUZZED(-9655)), (_GLF_IDENTITY(true, (true) && true) ? -14232 : _GLF_FUZZED(-9655)))))), ((_GLF_IDENTITY(-14232, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec4(bvec3(true, true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))))) ? -14232 : _GLF_FUZZED(-9655))))) | ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))))) / 1) & 0, _GLF_IDENTITY((_GLF_IDENTITY(-14232, _GLF_IDENTITY((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))), ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655))))) | ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))))) / 1) & 0) ^ 0, ((_GLF_IDENTITY(-14232, _GLF_IDENTITY((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))), ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655))))) | ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))))) / 1) & 0) ^ 0) | ((_GLF_IDENTITY(-14232, _GLF_IDENTITY((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))), ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655))))) | ((_GLF_IDENTITY(-14232, (true ? -14232 : _GLF_FUZZED(-9655)))))) / 1) & 0) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (-52511 & 0)); _injected_loop_counter --)
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, (6) | 0)))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                        {
                         return;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.5), _GLF_FUZZED(5630.2966)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))))), (false ? _GLF_FUZZED(vec2(-681.595, -96.91)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.3)), float(injectionSwitch.y), bool(true))))))) || false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
        }
       subgroupAll(false);
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, uint(uint(virtual_gid)))], 4, 64, 2);
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-5070.4331))) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))), true, false))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))) || false), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))) || false), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) << 0)))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
       do
        {
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), false, true))))))))), ! (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), mix(float(_GLF_FUZZED(9.3)), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), bool(true))))))).x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), mix(float(_GLF_FUZZED(9.3)), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, _GLF_IDENTITY(sin(0.0), float(vec4(_GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(0.0))), 0.0, 1.0, 1.0))), 0.0, 0.0))), bool(true))))))).x > injectionSwitch.y))), (true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3(injectionSwitch, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec4(1.0, sin(0.0), 0.0, 0.0)), mix(float(_GLF_FUZZED(9.3)), float(dot(vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 1.0)))), vec4(1.0, _GLF_IDENTITY(sin(0.0), float(vec4(_GLF_IDENTITY(sin(0.0), max(sin(0.0), sin(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 0.0, abs(1.0))))))), 0.0, 1.0, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 0.0, 0.0, log(1.0), abs(1.0), determinant(mat3(0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, abs(1.0), 0.0)), 0.0)))))), 0.0, 0.0))), bool(true))))))).x > injectionSwitch.y)))) || false))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, _GLF_IDENTITY(sqrt(1.0), (sqrt(1.0)) * 1.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-2.3) : 0.0)), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), max(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.3, float(mat4(9.3, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), tan(0.0)))))), float(dot(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3803.0195) : _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4.9)), bool(false))))), 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), bool(true)), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.3, float(mat4(9.3, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), tan(0.0)))))), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0), mat2(mat4x3(mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0)))))), sin(0.0), 0.0, 0.0))), bool(true)), clamp(mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.3, float(mat4(9.3, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.9) : 0.0)))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), tan(0.0)))))), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), bool(true)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.3, float(mat4(9.3, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4283.3030)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), tan(0.0)))))), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(27.25)), float(0.0), bool(true)))))), 0.0, 0.0))), bool(true)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.3, float(mat4(9.3, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(442.572) : _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)))), 0.0, 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), tan(0.0)))))), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), _GLF_IDENTITY(bool(true), (bool(true)) && true)))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(9.3, float(mat4(9.3, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, sqrt(_GLF_ONE(1.0, injectionSwitch.y)), tan(0.0)))))), _GLF_IDENTITY(float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), clamp(_GLF_IDENTITY(float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), mix(float(float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0)))), float(_GLF_FUZZED(7262.1758)), bool(false))), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))), float(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, sin(0.0), 0.0, 0.0))))), bool(true))))))))).x > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)), clamp(mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(-7.2), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-7.2, (_GLF_IDENTITY(-7.2, float(vec4(-7.2, 1.0, 0.0, 1.0)))) * _GLF_IDENTITY(dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0)), dot(vec2(log(1.0), 1.0), vec2(0.0, 1.0))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), false, false))))))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)), _GLF_IDENTITY(mat2(1.0) * (mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))), (mat2(1.0) * (mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)))) + vec2(0.0, 0.0))), mix(vec2((_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)), _GLF_IDENTITY(mat2(1.0) * (mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))), (mat2(1.0) * (mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)))) + vec2(0.0, 0.0))))[0], _GLF_FUZZED(-6.0)), vec2(_GLF_FUZZED((7.8 * 75.50)), (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)), _GLF_IDENTITY(mat2(1.0) * (mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false))), (mat2(1.0) * (mix(vec2(_GLF_FUZZED(-7.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.5)), bvec2(true, false)))) + vec2(0.0, 0.0))))[1]), bvec2(false, true))))) - vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0))), 0.0)))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[_GLF_IDENTITY(1, (1) ^ (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))))))]) / abs(1.0)))).y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / abs(1.0))), mix(vec2(_GLF_FUZZED(-518.252), _GLF_IDENTITY((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY((injectionSwitch[1]) / abs(1.0), clamp((injectionSwitch[1]) / abs(1.0), (injectionSwitch[1]) / abs(1.0), (injectionSwitch[1]) / abs(1.0))))))[1], _GLF_IDENTITY(float(vec4((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / _GLF_IDENTITY(abs(1.0), 1.0 * (_GLF_IDENTITY(abs(1.0), max(abs(1.0), abs(1.0))))))))[1], determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0)), clamp(float(vec4((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / abs(1.0))))[1], determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0)), float(vec4((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / abs(1.0))))[1], determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 1.0)), float(vec4((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29620)))]) / abs(1.0))))[_GLF_IDENTITY(1, (1) | 0)], determinant(mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-111.169) : 1.0)))), 1.0)), 1.0)), 0.0, 1.0)))))), vec2((vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / abs(1.0))))[0], _GLF_FUZZED(8.8)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))))))).y))) && true)))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter))) | (_injected_loop_counter)) > 0, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0), false))))))) && true))))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), min(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(45.36) : _GLF_IDENTITY(0.0, (0.0) + 0.0)))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), mix(float(_GLF_FUZZED(float(65122u))), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), min(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(45.36) : _GLF_IDENTITY(0.0, (0.0) + 0.0)))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 0.0, 0.0, 0.0)), clamp(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), mix(vec3((vec3(1.0, 0.0, 0.0))[0], _GLF_FUZZED(-9.7), (vec3(1.0, 0.0, 0.0))[2]), vec3(_GLF_FUZZED((395.993 + 8.5)), _GLF_IDENTITY((vec3(1.0, 0.0, 0.0))[1], _GLF_IDENTITY(float(float((vec3(1.0, 0.0, 0.0))[1])), (float(float((vec3(1.0, 0.0, 0.0))[1]))) - 0.0)), _GLF_FUZZED(4.2)), bvec3(false, true, false))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-162.667)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), _GLF_IDENTITY(0.0, (0.0) + sin(0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6730.7456) : 0.0))))), 1.0, 1.0), mat4(1.0) * (vec4(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(6730.7456) : 0.0))))), 1.0, 1.0)))), float(mat3x2(float(vec4(1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7.6) : 1.0)))), 0.0), vec2(_GLF_IDENTITY(1.0, float(mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-62.11))), 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0, 1.0))), 0.0)), dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 0.0, log(1.0), 0.0, 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 0.0))), 1.0)), 0.0))), 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6.2)), bool(false))))), 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0), (mat3x2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-825.559) : _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))), 0.0)))), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0)) * mat3(_GLF_ONE(1.0, injectionSwitch.y))))), 0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))), min(1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))), clamp(1.0 * (_GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0)), 0.0 + (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))))), 1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(0.0, sqrt(0.0), 1.0, abs(1.0), abs(0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), float(vec4(float(mat4(0.0, sqrt(0.0), 1.0, abs(1.0), abs(0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 1.0)))), 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))), 1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))))))), max(1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0 * (float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))), (_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)) ? 1.0 * (float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)), (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))) - 0.0, max((_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))) - 0.0, (_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))) - 0.0)))), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 0.0, 0.0, 0.0))) : _GLF_FUZZED(111.624))), (1.0 * (_GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, clamp((injectionSwitch.x) / 1.0, (injectionSwitch.x) / 1.0, _GLF_IDENTITY((injectionSwitch.x) / 1.0, 0.0 + ((injectionSwitch.x) / _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7408.6341)), bool(false)))))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), mix(float(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), float(_GLF_FUZZED(2.1)), bool(false))), 0.0, 0.0, 0.0)), float(mat4x3(float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, clamp((injectionSwitch.x) / 1.0, (injectionSwitch.x) / 1.0, _GLF_IDENTITY((injectionSwitch.x) / 1.0, 0.0 + ((injectionSwitch.x) / 1.0))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), max(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0))), 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(5.0)), float(1.0), bool(true)))))))))) / abs(1.0))))), float(mat3x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-29.42)), bool(false))), 0.0)) : _GLF_FUZZED(-16.37))), 0.0), (_GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0), _GLF_IDENTITY(mix(vec3((vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[0], _GLF_IDENTITY((vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[1], min((vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[1], (vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[1])), (vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[2]), vec3(_GLF_FUZZED(-0.1), _GLF_FUZZED(-632.296), _GLF_FUZZED(1618.4515)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (mix(vec3((vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[0], _GLF_IDENTITY((vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[1], min((vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[1], (vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[1])), (vec3(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-16.37))), 0.0))[2]), vec3(_GLF_FUZZED(-0.1), _GLF_FUZZED(-632.296), _GLF_FUZZED(1618.4515)), bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) * mat3(1.0)))) + vec3(0.0, 0.0, 0.0)), vec3(1.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))), 0.0, 0.0, 0.0))))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))) && _GLF_IDENTITY(true, (true) && true))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), clamp(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2)));
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(54.78)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(95.51)))), float(_GLF_FUZZED(8.2)), bool(false))) > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))), true, true, true))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) && true)))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), 0 ^ (int(1))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(clamp(read, _GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(mix(next_virtual_gid, read, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.5, -83.05)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) * 1.0) / 1.0)))))))), read), ~ (~ (_GLF_IDENTITY(clamp(read, _GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(mix(next_virtual_gid, read, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.5, -83.05)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) * 1.0) / 1.0)))))))), read), (clamp(read, _GLF_IDENTITY(_GLF_IDENTITY(read, (read) >> 0u), (true ? read : _GLF_FUZZED(mix(next_virtual_gid, read, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.5, -83.05)) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))))) - vec2(0.0, 0.0)))))).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.y)), (true ? ((injectionSwitch.y)) : _GLF_FUZZED(6.7))) * 1.0) / 1.0)))))))), read)) * 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(4, clamp(4, 4, 4)))), _GLF_IDENTITY(64, (64) >> 0), 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
