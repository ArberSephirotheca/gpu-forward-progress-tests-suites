#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base;
 uvec2 GLF_merged2_0_1_4_1_1_14readworkgroup_size;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid;
 uvec4 GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base;
 uvec4 GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   barrier();
  }
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_id;
 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz = GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
  barrier();
 uvec4 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uvec3 GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-97.98)), float(injectionSwitch[0]), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), injectionSwitch[1])).y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz = GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_size;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-781.016), _GLF_FUZZED(6.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec2 GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
 GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.xy = GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   return;
  }
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy = _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.xy, max(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.xy, (GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.xy) / uvec2(1u, 1u)), GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.xy));
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.y = _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.x;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.x = subgroup_local_id;
 GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.x = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.x;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.z = num_workgroup;
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.w = GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.z;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 GLF_merged2_0_1_4_1_1_14readworkgroup_size.y = workgroup_size;
 for(int _injected_loop_counter = (1 & (((0 ^ 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), ((0 | 1)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.z = GLF_merged2_0_1_4_1_1_14readworkgroup_size.y;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     barrier();
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) || false)))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.z = _GLF_IDENTITY(workgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), (workgroup_id) | (workgroup_id))), (0u ^ 0u) | ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u), (workgroup_id) | (workgroup_id))))));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), bool(bvec4((true), false, false, false)))), true, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.z * GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.w = workgroup_base;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 do
  {
   GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.w;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))) < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (34728 & 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-14.22)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (bool(true)) && true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), _GLF_IDENTITY(true, ! (! (true))), true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), _GLF_IDENTITY(true, ! (! (true))), true)), true && (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), _GLF_IDENTITY(true, ! (! (true))), true)))))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))), true)), true, true))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.y * GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.w = subgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.x = GLF_merged3_0_2_55_2_1_13_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenum_workgroupsubgroup_base.w;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint virtual_gid = GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y + GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.x + GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.x;
 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y = virtual_gid;
 GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.z = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid.y;
 GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.y = GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, _GLF_IDENTITY(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u), uvec3(1u, 1u, 1u) * (uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u)))), clamp(uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u), uvec3(1u, 1u, 1u) * (uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u), uvec3(1u, 1u, 1u) * (uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u), uvec3(1u, 1u, 1u) * (uvec3(min(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y, (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.y) + 0u), _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)) : _GLF_FUZZED((workgroup_id + uvec4(91959u, 38680u, 177554u, 94083u))))).xy.y), 1u, 1u)))))))) + GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.x + ((_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.x + 1, (false ? _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.x, (GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.xyz.x) >> 0u)) : _GLF_IDENTITY(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread, min(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread, GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread)).xyz.x + 1))) % GLF_merged4_0_1_17_1_1_13_2_1_11_3_1_14subgroup_local_idsubgroup_sizevirtual_gidworkgroup_base.y);
 do
  {
   GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.w = next_virtual_gid;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))) || false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true)) && true))
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z = GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_basesubgroup_idworkgroup_idnext_virtual_gid.w;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false))))))), bool(bvec2(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false, false))))))), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (false) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0), (mat4x2(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), min(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0), min(min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), min(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0), min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), min(float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3x4(0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))), 0.0)))))) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(false))
        break;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) && true), _GLF_IDENTITY(false, false || (false)), true)), (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), false, true))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x = GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(987.275), _GLF_FUZZED((vec2(-39.93, 37.29)).r)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(987.275), _GLF_FUZZED((vec2(-39.93, 37.29)).r)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))) < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), (false ? _GLF_FUZZED(316.394) : _GLF_IDENTITY(float(float(injectionSwitch.x)), mix(float(float(float(injectionSwitch.x))), float(_GLF_FUZZED(-202.816)), bool(false)))))) > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), false || (bool(bvec4(false, true, true, true)))))))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           barrier();
          }
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false))));
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)), (bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true))) && true)))), (bool(_GLF_IDENTITY(bool((false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)), (bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true))) && true))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (! (false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)), (bool(_GLF_IDENTITY(bool((false)), _GLF_IDENTITY((bool((false))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool((false))) && true, (_GLF_IDENTITY((bool((false))) && true, bool(bvec4((bool((false))) && true, false, true, false)))) || false)), false || (! (_GLF_IDENTITY((bool((false))) && true, (_GLF_IDENTITY((bool((false))) && true, bool(bvec4((bool((false))) && true, false, true, false)))) || false))))))))) && true)))), (bool(_GLF_IDENTITY(bool((false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false)), (bool((false))) && true)), (bool(_GLF_IDENTITY(bool((false)), (bool(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && true))) && true))) && true))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) && true), false, true)))) || false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), (! (false)) || false))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), false || (! _GLF_IDENTITY((false), ((false)) && true)))))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 ^ ((0 ^ 0) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY((1), min((1), (1))) + (_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) * 1), 1, 1, 1))) << _GLF_IDENTITY(int(0), int(0))))))), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))), int(ivec3(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, ((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(5, min(5, 5))))), int(5)), 1, 1))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(5, (5) >> (0 >> _GLF_IDENTITY(int(7), int(7)))))))), int(ivec3(1 << _GLF_IDENTITY(int(5), int(5)), 1, 1)))), (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(ivec3(1 << _GLF_IDENTITY(int(5), int(5)), 1, 1))))) | (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(ivec3(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) + 0))), 1, 1))))))), int(ivec4((_GLF_IDENTITY(~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) >> (0 >> _GLF_IDENTITY(int(4), int(4)))), _GLF_IDENTITY(5, (5) >> (0 >> _GLF_IDENTITY(int(7), int(7)))))))), int(ivec3(1 << _GLF_IDENTITY(int(5), int(5)), 1, 1)))), (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(ivec3(1 << _GLF_IDENTITY(int(5), int(5)), 1, 1))))) | (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), int(ivec3(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) + 0))), 1, 1))))))), 1, 0, 1))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), int(ivec2(int(5), (0 ^ 0)))), int(5))), (int(5)) << 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 12.22)), _GLF_FUZZED(-8.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 12.22)), _GLF_FUZZED(-8.4)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-162.827)), bool(false))), _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), (injectionSwitch)))[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) || false)))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_1_4_1_1_14readworkgroup_size.x = read;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, (false) || false)))) || false))
  {
   GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.w = GLF_merged2_0_1_4_1_1_14readworkgroup_size.x;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, max(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup)).xy.x, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup, uvec4(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[0], GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[1], GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[2], GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup[3])).xy.x, (false ? _GLF_FUZZED(GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.w) : GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x)), GLF_merged3_0_2_55_2_1_16_3_1_13GLF_merged2_0_1_16_1_1_14next_virtual_gidworkgroup_basenext_virtual_gidnum_workgroup.xy.x))], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), true && (bool(bvec4(false, false, true, true)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if((GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.x % 2) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(false);
    }
   GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.w = atomicLoad(_GLF_IDENTITY(buf[GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.y], uint(uvec3(buf[GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.y], 0u, 1u))), 4, _GLF_IDENTITY(64, clamp(64, _GLF_IDENTITY(64, (64) | 0), 64)), 2);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, true && (false)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-20.52), _GLF_FUZZED(-84.88)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.w = atomicLoad(buf[GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.xyz.y], 4, _GLF_IDENTITY(64, (64) | (64)), 2);
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 subgroupBarrier();
 atomicStore(checker[_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread, uvec4(_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread[0], uint(uint(_GLF_IDENTITY(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread[0], uint(uvec2(GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread[0], 0u)))))), GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread[1], GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread[2], GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread[3])).xyz.y], GLF_merged2_0_3_74_3_1_4GLF_merged3_0_1_17_1_1_11_2_1_14subgroup_local_idvirtual_gidworkgroup_sizeread.w, 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sqrt(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
