#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- -7.1)), _GLF_FUZZED(9717.4608)), vec2((injectionSwitch)[_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))], (injectionSwitch)[1]), bvec2(true, true))).y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5694.4602), _GLF_FUZZED(3974.5391)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, injectionSwitch.x))) - 0.0) < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0) < injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)), true))))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_injected_loop_counter < 1, _GLF_IDENTITY(true, ! (! (true))))))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_injected_loop_counter < 1, true)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ((true) && true) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), ~ _GLF_IDENTITY((~ (int(4))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (~ (int(4))) : _GLF_FUZZED(-12586))))) | 0))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | (6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) && true)))))), bool(bvec4((! (! (false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY((! (! (false))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))))), true), bvec2(bvec2(bvec2((_GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))))), true))))))))))))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(degrees(vec2(-5.6, 5.1))) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-379.639), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(95.20)), bvec2(true, false))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0))) * mat2(1.0))))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false || (bool(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(false)) && true, ((bool(false)) && true) || false))))))), ! (! (bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))), false || (bool(bool(_GLF_IDENTITY(bool(false), (bool(false)) && true)))))))))))) && true)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true, false, false))), true, true, false))) && true))))
      barrier();
     for(int _injected_loop_counter = ((_GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), clamp((1 ^ 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), (1 ^ 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) + 0), 1, 1)) ^ 0, ~ (_GLF_IDENTITY(~ (1 ^ 0), min(_GLF_IDENTITY(~ (1 ^ 0), (~ (1 ^ 0)) | 0), _GLF_IDENTITY(~ (1 ^ 0), int(ivec4(~ (1 ^ 0), 1, 1, 1)))))))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), min((1 ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), ~ (~ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), 1, 1))), (int(1)) | 0)))))) ^ 0), _GLF_IDENTITY((1 ^ 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), (false ? _GLF_FUZZED(2686) : _GLF_IDENTITY(int(1), (int(1)) | 0)))), ~ (~ ((1 ^ 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (1))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0)), (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0)), ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) << 0))) << 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + 0))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(exp(vec2(0.0, 0.0)), mix(vec2((exp(vec2(0.0, 0.0)))[0], (exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(5.1), _GLF_FUZZED(30.06)), bvec2(false, false))) * (injectionSwitch)).x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), _GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 1u))))) * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id));
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_base, min(subgroup_base, subgroup_base))), (~ (subgroup_base)) | (_GLF_IDENTITY(~ (subgroup_base), uint(uvec4(~ (subgroup_base), 0u, _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u * (_GLF_IDENTITY(1u, ~ (~ (1u))))), 1u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY((~ (subgroup_base)), uint(_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec4(_GLF_IDENTITY((~ (subgroup_base)), ~ (~ ((~ (subgroup_base))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (uvec4((~ _GLF_IDENTITY((subgroup_base), clamp((subgroup_base), (subgroup_base), (subgroup_base)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u)))) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u))))))))), (_GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY((~ (subgroup_base)), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u)), ~ (~ ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u))))), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))), (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), ~ (~ (uint(7u)))))))) | (_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u)))) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))), uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u)))) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u)))) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u))))) / uvec4(1u, 1u, 1u, 1u)))))), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u)))) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))))))))))) | (_GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_base)), ((~ (subgroup_base))) ^ 0u), uint(_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, min(_GLF_IDENTITY(7u, clamp(7u, 7u, _GLF_IDENTITY(7u, (7u) / 1u))), 7u)))), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u)))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))) | (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), ((1u << _GLF_IDENTITY(uint(7u), _GLF_IDENTITY(uint(7u), (uint(7u)) | 0u)))) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u))))))))))), _GLF_IDENTITY(subgroup_base, ~ (~ (_GLF_IDENTITY(subgroup_base, (subgroup_base) | (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))))), _GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY((~ (subgroup_base)), ((~ (subgroup_base))) / 1u)))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY((subgroup_base), 0u + (_GLF_IDENTITY((subgroup_base), ((subgroup_base)) / 1u))))), 0u | (clamp(subgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_base), ~ (~ (~ (subgroup_base)))), (~ (subgroup_base)) | (_GLF_IDENTITY(~ (subgroup_base), uint(_GLF_IDENTITY(uvec4(~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), max(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), min(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), _GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))))))), 0u, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) << 0u), 1u)), ~ (~ (1u))), 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(~ _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), max(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), min(_GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))), _GLF_IDENTITY((subgroup_base), min((subgroup_base), (subgroup_base))))))), 0u, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) * 1u)) << 0u), 1u)), ~ (~ (1u))), 1u))))))))), clamp(_GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY((~ (subgroup_base)), uint(_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), max(_GLF_FUZZED(num_workgroup), _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), clamp(_GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup), _GLF_FUZZED(num_workgroup))))) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))))), min((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), ~ (~ (1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) * 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))))), (_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), max(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))))), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)), max(uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), max(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))))), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), max(uint(7u), _GLF_IDENTITY(uint(7u), min(uint(7u), uint(7u))))), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))))))), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u))))))) | ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))), clamp((1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))), (1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u)))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), uint(uvec3(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), (_GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u))), 0u | ((false ? _GLF_FUZZED(num_workgroup) : 1u << _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u, 0u))))) * 1u)))))))) << 0u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) * ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) * 1u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))) ^ ((1u << _GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), (true ? _GLF_IDENTITY(uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) * ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) * 1u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))) ^ ((1u << _GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), uvec4(1u, 1u, 1u, 1u) * (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, 1u)))) * ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) * 1u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))) ^ ((1u << _GLF_IDENTITY(uint(7u), uint(7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))) : _GLF_FUZZED(uvec4(122623u, 66061u, 40381u, 4987u))))) | (uvec4((~ (subgroup_base)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, (_GLF_IDENTITY((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), clamp(1u << _GLF_IDENTITY(uint(7u), uint(7u)), _GLF_IDENTITY(1u << _GLF_IDENTITY(uint(7u), uint(7u)), ~ (_GLF_IDENTITY(~ (1u << _GLF_IDENTITY(uint(7u), uint(7u))), max(~ (1u << _GLF_IDENTITY(uint(7u), uint(7u))), ~ (1u << _GLF_IDENTITY(uint(7u), uint(7u))))))), 1u << _GLF_IDENTITY(uint(7u), uint(7u))))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u), max(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, _GLF_IDENTITY(0u, (0u) / 1u)), uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_IDENTITY(_GLF_FUZZED(5927u), (_GLF_FUZZED(5927u)) << 0u))), 1u, 1u, 0u)))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), (uint(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u), max(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u)))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u)))))) >> 0u), _GLF_IDENTITY(uint(7u), (uint(7u)) >> 0u)))), (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u), max(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, _GLF_IDENTITY(0u, (0u) / 1u)), uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_IDENTITY(_GLF_FUZZED(5927u), (_GLF_FUZZED(5927u)) << 0u))), 1u, 1u, 0u)))))) + (0u << _GLF_IDENTITY(uint(3u), uint(3u))))), (uint(_GLF_IDENTITY(7u, (_GLF_IDENTITY(7u, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u), max(uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(5927u))), 1u, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, min(1u, 1u)))), 0u)))))) + (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, clamp(3u, 3u, 3u))) << 0u)), uint(3u)))))) >> 0u), uint(7u))))) / 1u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u))))))))), _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))), _GLF_IDENTITY(subgroup_base, ~ _GLF_IDENTITY((~ (subgroup_base)), ((~ (subgroup_base))) / 1u)))), _GLF_IDENTITY(subgroup_base, (subgroup_base) | _GLF_IDENTITY((subgroup_base), _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), clamp(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u)))), clamp(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)))), 1u, 1u), clamp(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), clamp(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u)))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), clamp(uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(133011u) : 0u)), 1u, 1u))))))) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, (subgroup_base) | 0u)), ((subgroup_base)) / 1u)))))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 uint read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) << 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(0, ~ (~ (0))), ! (! ((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) * 1u)) == 0))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         subgroupAll(false);
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(findLSB(54575)) : 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec3(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true)) && true), true, true))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))));
      }
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, false || ((false) || false)))))))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(0 | (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)), ~ (~ (0 | (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bvec2(bool(bvec4(false, true, true, true)), true)))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), injectionSwitch)).y))));
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
          }
         switch(_GLF_SWITCH(0))
          {
           case 0:
           case 31:
           case 10:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, abs(sqrt(vec2(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   subgroupAll(false);
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y)) && (_GLF_WRAPPED_IF_FALSE(false))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(16.33), _GLF_FUZZED(-64.05)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_ZERO(0.0, injectionSwitch.x) + ((injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))));
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), bool(bvec4(true && (_GLF_DEAD(false)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), true, true)))), false, false, true))))
              barrier();
            }
           break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           default:
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             1;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, clamp(0, 0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    barrier();
                  }
                }
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 subgroupBarrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) << 0))
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, max(_GLF_IDENTITY(read, _GLF_IDENTITY((read), clamp((read), (read), (read))) << 0u), read)), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3))))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
