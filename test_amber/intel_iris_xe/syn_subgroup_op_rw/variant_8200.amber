#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 ivec2 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 uint _f3;
 uint subgroup_id;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 mat2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_1 {
 mat3x2 _f0;
 bvec3 _f1;
 mat4x3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_4 {
 ivec2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 mat4x3 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = ((0 ^ (0 | 0)) << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     barrier();
    }
   else
    {
    }
  }
 uvec2 GLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))), true && (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0))) * mat2(1.0))) * vec2(1.0, 1.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.8))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_IDENTITY(_GLF_FUZZED(-73179), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-73179), (_GLF_FUZZED(-73179)) << 0) : _GLF_FUZZED(_injected_loop_counter))) : _injected_loop_counter ++))), 0 | (~ (_injected_loop_counter ++))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(18.97)))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_0(uvec4(_GLF_IDENTITY(1u, (1u) | (1u))), mat4x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), mat3x2(1.0)), _GLF_struct_4(ivec2(1), _GLF_struct_1(mat3x2(1.0), bvec3(true), mat4x3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((false ? 55.96 : -9.1))), float(1.0), bool(true)))) - 0.0)), mat4(1.0)), _GLF_struct_2(mat3(1.0), mat2(1.0), _GLF_IDENTITY(mat3(1.0), mat3(_GLF_ONE(1.0, injectionSwitch.y)) * (mat3(1.0)))), _GLF_struct_3(ivec2(1), mat2x3(1.0), bvec4(_GLF_IDENTITY(true, ! (! (true)))), 1u, gl_SubgroupID)));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.9)), bool(false)))))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), ((_GLF_IDENTITY(false, (false) && true))) && true) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bool((false) || false)), (bool(bool((false) || false))) && true))) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), false || (bool(bool(_GLF_DEAD(false)))))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, tan(0.0), 1.0, 1.0))))), min(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, tan(0.0), 1.0, 1.0))))), int(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), mat2(1.0) * (min(injectionSwitch, injectionSwitch)))).x, float(mat2(injectionSwitch.x, tan(0.0), 1.0, 1.0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.6))))))))) || false, (((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.6)))))), ((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.6))))))) || false)))) || false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), true && ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), false || ((! (_GLF_IDENTITY(false, (false) && true)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.6))))))))) || _GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         barrier();
        }
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bvec2(! (! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), true))))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) | 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), max(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) | 0)) << (0 | 0)), int(6)), 1 << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))) ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.2), _GLF_FUZZED(6.1)), bvec2(false, false))).y), true, false, true)))), true)), ! _GLF_IDENTITY((! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))) - 0.0)), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true))), ((bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0)))) - 0.0)), bool(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ((! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec2(bool(injectionSwitch.x > injectionSwitch.y), true)))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true))))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(bool(bool(bool(bvec4(_GLF_IDENTITY((! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true)))), ((! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true))))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false || (bool(bool(bool(bvec4(_GLF_IDENTITY((! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true)))), ((! (bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))) || false), true, false, true)))), true))))) || false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / round(length(normalize(1.0)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, float(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, 0.0, 1.0, 1.0, 1.0, 1.0)))) / exp(0.0))))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(6), int(6))) | 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint subgroup_base = _GLF_struct_replacement_5._f1._f3.subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_id) : workgroup_base))))))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u) + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(min(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), uint(uint(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))))), min(_GLF_IDENTITY(min(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)), (min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (true ? workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size) : _GLF_FUZZED(subgroup_base))), max(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))))), max(subgroup_size, subgroup_size))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) - 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))))) ^ 0u), min(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tan(1.0)) : _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_16_1_1_4next_virtual_gidread.x = _GLF_IDENTITY(next_virtual_gid, 0u | (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), _GLF_IDENTITY(0u, (0u) / 1u))), ~ (~ (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (true ? _GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))) : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))))], ~ (~ (buf[virtual_gid]))), 0u)), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), 0u)), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(0u, 0u | (0u)) ^ (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])))), ~ (~ (buf[virtual_gid]))), 0u)), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), 0u)))))))), 4, _GLF_IDENTITY(64, _GLF_IDENTITY(clamp(64, 64, 64), min(clamp(64, 64, 64), clamp(64, 64, 64)))), 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y = read;
 if(_GLF_DEAD(false))
  barrier();
 if((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, (2) | (2)))), 0 + (_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), (2) ^ 0)) - int(_GLF_ZERO(0.0, injectionSwitch.x))), max(2, 2))) - (0 >> _GLF_IDENTITY(int(1), int(1)))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(2, int(int(2)))), (~ (_GLF_IDENTITY(2, int(int(2))))) / 1))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (subgroup_local_id % 2), (~ (subgroup_local_id % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (subgroup_local_id % 2), (~ (subgroup_local_id % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2)) | 0u), _GLF_IDENTITY((true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)), uint(_GLF_IDENTITY(uvec3((true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)), 0u, 0u), clamp(_GLF_IDENTITY(uvec3((true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)), 0u, 0u), (uvec3((true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY(int(int(2)), max(_GLF_IDENTITY(int(int(2)), min(int(int(2)), int(int(2)))), int(int(2)))))) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)), 0u, 0u)) | uvec3(0u, 0u, 0u)), uvec3((true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2)) | 0u) : _GLF_FUZZED(virtual_gid)), 0u, 0u), uvec3(_GLF_IDENTITY((true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)), max((true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) / 1u)), (~ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) % 2)) - 0u))), (_GLF_IDENTITY(subgroup_local_id % 2, (true ? subgroup_local_id % 2 : _GLF_FUZZED(subgroup_size)))) << 0u)) | (subgroup_local_id % 2) : _GLF_FUZZED(virtual_gid)))), 0u, 0u))))))))))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4)))))) << 0)) * 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) | 0), int(4))), 0 | ((_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) - 0), int(4)))))) << 0)) * 1) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), min(int(4), int(4)))) | 0), int(4)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || false), false, true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       atomicStore(buf[GLF_merged2_0_1_16_1_1_4next_virtual_gidread.x], uint(1), 4, 64, 4);
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(false, false, false, false)), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, false), bvec3(bvec4(bvec3(true, true, false), false))))), false), bvec3(bvec3(bvec3(bool(bvec4(false, false, false, false)), true, false)))))))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(6850.1819))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
        barrier();
       barrier();
      }
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || _GLF_IDENTITY(false, true && (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), true))), false, true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))) / 1) != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-626.025), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(506.830)), bvec2(true, false))).x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-96.74)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))) > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), false || (false))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.3) : 0.0))), max((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))).y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bool(bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), false || ((_GLF_IDENTITY(true, ! (! (true)))))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true))))), false, true)), (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), bool(bool(bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), false || ((_GLF_IDENTITY(true, ! (! (true)))))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true))))), false, true))) && true)))))))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                {
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(1, int(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(6), max(int(6), int(6))))), 0 ^ (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(int(6), max(int(6), int(6)))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))))))
        {
        }
       else
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) - tan(_GLF_ZERO(0.0, injectionSwitch.x)))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
          }
         else
          {
          }
         do
          {
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), false || (bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) || (_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (bool(bvec2(false, false)))))))))))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec3(bool(bool(_GLF_DEAD(false))), false, true)))), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.5) : _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))))), 0.0)), 1.0))))), _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))), max(false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))), false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true)))))), mix(float(_GLF_FUZZED(-8.2)), float(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))), max(false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))), false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true)))))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))), max(false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))), false ? _GLF_FUZZED(length(-4.9)) : _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(transpose(mat3(injectionSwitch.x, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0))))), mix(float(_GLF_FUZZED(-7.3)), float(float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0), transpose(_GLF_IDENTITY(transpose(mat3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0)), mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (transpose(mat3(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(length(vec4(0.0, 0.0, 0.0, 0.0)), float(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(mat3x4(_GLF_IDENTITY(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), min(vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0), vec4(length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, length(0.0)))))), 1.0)))))))), bool(true))))))) - 0.0)), bool(true))))) > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   atomicStore(buf[GLF_merged2_0_1_16_1_1_4next_virtual_gidread.x], uint(1), 4, 64, 4);
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(111.979)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0), (mat3x2(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(111.979)), float(injectionSwitch.x), bool(true))), 0.0, 1.0, 1.0, 1.0, 1.0)) * mat3(1.0)))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true))))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false, true), bvec3(bvec4(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false, true), false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 subgroupBarrier();
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uint(virtual_gid)), max(uint(uint(virtual_gid)), uint(uint(virtual_gid))))), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uint(virtual_gid)), max(uint(uint(virtual_gid)), uint(uint(virtual_gid))))), 1u, 0u, 0u))), virtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(bitfieldExtract(virtual_gid, _injected_loop_counter, _injected_loop_counter)))), virtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid)), min(virtual_gid, virtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(virtual_gid) : virtual_gid)), virtual_gid)), min(virtual_gid, virtual_gid))))) >> _GLF_IDENTITY((0u & 156344u), ((0u & 156344u)) / 1u)), 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u, 0u)), (uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(1u, 0u | (_GLF_IDENTITY(1u, (1u) + 0u))), 0u, 0u))) - 0u)), min(_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) | 0u))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), min(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 1u, 1u, 1u))), min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 1u, 0u))))), virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))), ~ (_GLF_IDENTITY(~ (min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), min(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), max(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) ^ 0u))))))), clamp(~ (min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), virtual_gid)), min(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))))))), ~ (min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), min(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))), ((_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))) >> 0u)))))), ~ (min(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), min(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) >> 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))))))))))), 1u, 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) - 0u), 1u, 0u, 0u)))), ((_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) >> 0u), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), max(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec3(virtual_gid, 0u, 0u), uvec3(uvec3(uvec3(virtual_gid, 0u, 0u)))))))), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) | (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))) >> (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), 1u, 0u, 0u))))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u), (uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)) ^ uvec4(0u, 0u, 0u, 0u))) >> uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) << 0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))), 0u + (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))) - 0u))), uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))), 1u, 0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), min(uint(uvec4(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), _GLF_IDENTITY((0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u, ~ (~ (_GLF_IDENTITY((0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u, ((0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u) ^ 0u))))))), 1u, 0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))), uint(uvec4(_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY((_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))), ((_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) + (0u | 0u)))))) | 0u))), 1u, 0u, ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size)))))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))))))))), max(_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uint(virtual_gid))), min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), max(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), clamp(min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid)))), 1u, 0u, 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), clamp(min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid)))), 1u, 0u, 0u)), min(uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), clamp(min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid)))), 1u, 0u, 0u)), uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), clamp(min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid)))), 1u, 0u, 0u))))) | (uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), clamp(min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid), min(virtual_gid, virtual_gid)))), 1u, 0u, 0u)))))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), clamp(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), _GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), ~ (~ (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))))))))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) - 0u))), 0u, 0u))))) : _GLF_FUZZED(workgroup_size))), clamp(_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), _GLF_IDENTITY((0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(1u, 1u * (1u)), 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size)))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size)))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), 0u ^ (min(virtual_gid, virtual_gid)))), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 0u ^ (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)))) : _GLF_FUZZED(atomicAnd(subgroup_local_id, workgroup_size)))), 1u, 0u, _GLF_IDENTITY(0u, 0u + (0u)))))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), 0u, 1u, 0u))))), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) | (virtual_gid)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u), (uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)) | (uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))) | (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u), ~ (_GLF_IDENTITY(~ (uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)), (~ (uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)))))))))) : _GLF_FUZZED(workgroup_size)))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u))))) : _GLF_FUZZED(workgroup_size))), min(_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (1u)), 0u, 0u))))) : _GLF_FUZZED(workgroup_size)))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))), _GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), (_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))) ^ 0u), 1u, 0u, 0u))))), (0u | _GLF_IDENTITY((~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), ~ (~ (_GLF_IDENTITY((~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), uint(uint((~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))))))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size)))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))))))))))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, ((0u | 0u) ^ 1u)), (uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, ((0u | 0u) ^ 1u))) / uvec4(1u, 1u, 1u, 1u)), (_GLF_IDENTITY(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, ((0u | 0u) ^ 1u)), (uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 1u, ((0u | 0u) ^ 1u))) / uvec4(1u, 1u, 1u, 1u))) - uvec4(0u, 0u, 0u, 0u)))))))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), (_GLF_IDENTITY(min(virtual_gid, virtual_gid), _GLF_IDENTITY(uint(uvec2(min(virtual_gid, virtual_gid), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), uint(uint(uint(uvec2(min(virtual_gid, virtual_gid), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))))) / 1u)), 1u, 0u, 0u))))), max(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 1u)))))) << (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, _GLF_IDENTITY(0u, (0u) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | _GLF_IDENTITY((~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) - 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))))) : _GLF_FUZZED(workgroup_size)))) | (true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))), clamp(_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))), _GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))), _GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(workgroup_size)))))))))) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), 1u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 1u))), 1u), (true ? uvec4(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), 1u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 1u))), 1u) : _GLF_FUZZED(uvec4(175376u, 23960u, 137681u, 24297u)))))), min(virtual_gid, virtual_gid)), _GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), ((1u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))))), 0u, 0u)))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), max(0u | (~ (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u), uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (_GLF_IDENTITY(true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size), (_GLF_IDENTITY(true ? _GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 0u, 0u)))))) | (_GLF_IDENTITY(0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))), (0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u)))))) | 0u))) : _GLF_FUZZED(workgroup_size), (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), (min(virtual_gid, virtual_gid)) + 0u)), 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) ^ 0u)))) | (0u))) | 0u), 0u))))) : _GLF_FUZZED(workgroup_size)) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size)))) | (true ? 0u | (~ (_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), 1u, 0u, 0u))))) : _GLF_FUZZED(workgroup_size))))))))))))))))], GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y, _GLF_IDENTITY(4, min(4, 4)), 64, _GLF_IDENTITY(4, 0 | (4)));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
