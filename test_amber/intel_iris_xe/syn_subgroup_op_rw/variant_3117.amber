#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_17 {
 ivec3 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 bvec3 _f1;
 vec2 _f2;
 mat3 _f3;
 bool _f4;
 mat3 _f5;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 mat2 _f1;
 vec3 _f2;
 _GLF_struct_17 _f3;
} ;

struct _GLF_struct_14 {
 ivec2 _f0;
 ivec2 _f1;
 bvec2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_13 {
 mat3x2 _f0;
 mat2x4 _f1;
 vec3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
} ;

struct _GLF_struct_15 {
 _GLF_struct_12 _f0;
 uint _f1;
 ivec2 _f2;
 _GLF_struct_13 _f3;
 mat2x4 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 uvec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 uint _f1;
 mat4 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 ivec3 _f1;
 bvec2 _f2;
 _GLF_struct_9 _f3;
 uvec2 _f4;
 vec3 _f5;
 _GLF_struct_10 _f6;
} ;

struct _GLF_struct_6 {
 float _f0;
 vec3 _f1;
} ;

struct _GLF_struct_5 {
 float _f0;
 vec4 _f1;
 float _f2;
 int _f3;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
} ;

struct _GLF_struct_3 {
 ivec3 _f0;
 int _f1;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 mat2 _f1;
 bvec4 _f2;
 uvec3 _f3;
 ivec4 _f4;
 int _f5;
 uint _f6;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 mat2x3 _f1;
 mat3 _f2;
 bvec2 _f3;
 uvec3 _f4;
 vec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 mat4x2 _f3;
 mat2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_19 {
 _GLF_struct_4 _f0;
 uint workgroup_base;
 _GLF_struct_7 _f1;
 mat2x3 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_15 _f4;
 _GLF_struct_18 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid;
 uvec4 GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidsubgroup_id;
 uvec4 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup;
 uvec4 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.xy = GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy = GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 uvec4 GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread;
 uvec4 GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizesubgroup_base;
 uvec4 GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid;
 GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidsubgroup_id.xyz = GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gid;
 GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz = GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidsubgroup_id.xyz;
 uvec4 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.xy = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size;
 GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizesubgroup_base.xyz = GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_size;
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz = GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizesubgroup_base.xyz;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidsubgroup_id.w = subgroup_id;
 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw.x = GLF_merged2_0_3_69_3_1_11GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidsubgroup_id.w;
 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy.x = GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw.x;
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.y = GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy.x;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.w = subgroup_size;
 GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.y = GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.w;
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.z = GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.y;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x = subgroup_local_id;
 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.x;
 GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.z = GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.zw.y;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.w = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.xy.y = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.xy.y = workgroup_id;
 GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.xy.x = GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.xy.y;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_4(_GLF_struct_0(mat4x3(1.0), mat2x3(1.0), mat3(1.0), bvec2(true), uvec3(1u), vec2(1.0), mat2(1.0)), _GLF_struct_1(mat3x4(1.0), mat4x3(1.0), ivec2(1)), _GLF_struct_2(bvec4(true), mat2(1.0), bvec4(true), uvec3(1u), ivec4(1), 1, 1u), mat4x2(1.0), mat2(1.0), _GLF_struct_3(ivec3(1), 1)), GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.xy.y * GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.xy.x, _GLF_struct_7(vec3(1.0), _GLF_struct_5(1.0, vec4(1.0), 1.0, 1), _GLF_struct_6(1.0, vec3(1.0))), mat2x3(1.0), _GLF_struct_11(_GLF_struct_8(mat3x2(1.0), 1u, mat4(1.0)), ivec3(1), bvec2(true), _GLF_struct_9(mat3(1.0), uvec3(1u), mat2(1.0)), uvec2(1u), vec3(1.0), _GLF_struct_10(mat4(1.0))), _GLF_struct_15(_GLF_struct_12(mat2(1.0)), 1u, ivec2(1), _GLF_struct_13(mat3x2(1.0), mat2x4(1.0), vec3(1.0), ivec2(1)), mat2x4(1.0), _GLF_struct_14(ivec2(1), ivec2(1), bvec2(true), vec4(1.0))), _GLF_struct_18(_GLF_struct_16(mat2x3(1.0), bvec3(true), vec2(1.0), mat3(1.0), true, mat3(1.0)), mat2(1.0), vec3(1.0), _GLF_struct_17(ivec3(1), mat4x3(1.0), ivec4(1), mat4x2(1.0))));
 uint subgroup_base = GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.y * GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.z;
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.xy.x = subgroup_base;
 GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizesubgroup_base.w = GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.xy.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.x = GLF_merged2_0_3_69_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizesubgroup_base.w;
  }
 else
  {
  }
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.x = GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.x;
 uint virtual_gid = _GLF_struct_replacement_19.workgroup_base + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.x + GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.z;
 GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y = virtual_gid;
 GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy.y = GLF_merged2_0_1_17_1_1_11subgroup_local_idvirtual_gid.y;
 GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.z = GLF_merged2_0_2_47_2_2_53GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gidGLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.xy.y;
 uint next_virtual_gid = _GLF_struct_replacement_19.workgroup_base + GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.x + ((GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.z + 1) % GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.xyz.z);
 GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.z = next_virtual_gid;
 GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.w = GLF_merged3_0_2_50_2_1_16_3_1_13GLF_merged2_0_1_13_1_1_12subgroup_baseworkgroup_idnext_virtual_gidnum_workgroup.z;
 uint read = atomicLoad(buf[GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.z], 4, 64, 2);
 GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.w = read;
 if((GLF_merged3_0_2_51_2_1_17_3_1_13GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_sizesubgroup_local_idsubgroup_size.z % 2) == 0)
  {
   subgroupAll(false);
   atomicStore(buf[GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.w], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[GLF_merged2_0_3_69_3_1_16GLF_merged3_0_1_13_1_1_11_2_1_13subgroup_basesubgroup_idsubgroup_sizenext_virtual_gid.w], uint(1), 4, 64, 4);
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   subgroupBarrier();
  }
 atomicStore(buf[GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.xyz.z], GLF_merged2_0_3_69_3_1_4GLF_merged3_0_1_13_1_1_13_2_1_11subgroup_basesubgroup_sizevirtual_gidread.w, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
