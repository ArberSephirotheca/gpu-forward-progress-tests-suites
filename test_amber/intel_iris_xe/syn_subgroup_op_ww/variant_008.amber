#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), false || (bool(true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))))), max(max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))))), _GLF_IDENTITY(max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))))), (true ? max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uint(gl_WorkGroupSize.x)))))) : _GLF_FUZZED(54950u))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-5503.7615), float(mat4x2(_GLF_IDENTITY(_GLF_FUZZED(-5503.7615), (_GLF_FUZZED(-5503.7615)) / _GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)))), _GLF_IDENTITY(bool(false), (bool(false)) || false))), injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))) | (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base + subgroup_local_id), 0u ^ (~ (workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), min(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))))) - (1u ^ 1u))))))), workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(subgroup_local_id))), subgroup_base)) + subgroup_local_id, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base + subgroup_local_id), 0u ^ (~ (_GLF_IDENTITY(workgroup_base, 1u * (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))) + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))))))), workgroup_base + _GLF_IDENTITY(subgroup_base, max(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u))) + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id)), (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base + subgroup_local_id), 0u ^ (~ (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size)))))))), workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))) >> 0u), _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), 0u ^ (~ (workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))))))))), workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u) + subgroup_local_id))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(! (false)), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(! (false), (! (false)) && true)), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(! (false), (! (false)) && true)), true, true)))))), _GLF_IDENTITY(false || (bool(! (false))), bool(bvec3(false || (bool(! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))) || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) * 1u), 1u)), ~ (~ (uint(uvec2(uint(1), 1u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, ~ (~ (1)))), (_GLF_IDENTITY(uint(1), uint(uvec4(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), clamp(uint(1), uint(1), uint(1)))), ((_GLF_IDENTITY(uint(1), clamp(uint(1), uint(1), uint(1))))) << ((0u >> _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(1u), uint(1u)))) / ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))), 0u, 0u, 0u)))) | (_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), (true ? uvec3(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), (0u) >> 0u), (true ? _GLF_IDENTITY(0u, (0u) >> 0u) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(subgroup_base))))), _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u))))) : _GLF_FUZZED(clamp(uvec3(40605u, 160343u, 79240u), workgroup_base, subgroup_local_id)))), (_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), (true ? uvec3(uint(1), _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id)))) >> 0u), (true ? _GLF_IDENTITY(0u, (0u) >> 0u) : _GLF_IDENTITY(_GLF_FUZZED(subgroup_base), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED((next_virtual_gid | subgroup_id))))))))), _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, 1u * (0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) : _GLF_FUZZED(clamp(uvec3(40605u, 160343u, 79240u), workgroup_base, subgroup_local_id))))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), min(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(uvec3(uint(1), _GLF_IDENTITY(0u, (0u) ^ 0u), 0u), (uvec3(uint(1), 0u, 0u)) | uvec3(0u, 0u, 0u)))), (true ? uvec3(_GLF_IDENTITY(uint(1), min(uint(1), uint(1))), 0u, 0u) : _GLF_FUZZED(clamp(uvec3(40605u, 160343u, 79240u), _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), subgroup_local_id)))))), 1u * ((uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1), 0u, 0u), min(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(uvec3(uint(1), 0u, 0u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(uint(1), 0u, 0u)), ((uvec3(uint(1), 0u, 0u))) * uvec3(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) | (1u)))), 1u, 1u)), clamp(_GLF_IDENTITY((uvec3(uint(1), 0u, 0u)), _GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(_GLF_IDENTITY(uint(1), uint(uvec4(_GLF_IDENTITY(uint(1), (uint(1)) | 0u), 0u, 1u, 0u))), 0u, 0u))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), clamp(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), _GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 0u, 0u)), (false ? _GLF_FUZZED(bitfieldExtract(uvec3(136131u, 46538u, 140663u), 51158, -63978)) : _GLF_IDENTITY((uvec3(_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), 0u, 0u)), min((uvec3(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | (uint(1)), (_GLF_IDENTITY((uint(1)), ((uint(1))) >> 0u) | (uint(1))) << 0u)), 0u, 0u)), (uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) - 0))))), (_GLF_IDENTITY(uint(1), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(1), 1u, 0u), (uvec3(uint(1), 1u, 0u)) ^ uvec3(0u, 0u, 0u))), ~ (_GLF_IDENTITY(~ (uint(_GLF_IDENTITY(uvec3(uint(1), 1u, 0u), (uvec3(uint(1), 1u, 0u)) ^ uvec3(0u, 0u, 0u)))), 0u | (~ (uint(_GLF_IDENTITY(uvec3(uint(1), 1u, 0u), (uvec3(uint(1), 1u, 0u)) ^ uvec3(0u, 0u, 0u)))))))))) | (uint(1))), 0u, 0u))))))), max(min((_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(1, (1) | 0)), 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u)), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u))), (true ? uvec3(uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u))) : _GLF_FUZZED(uvec3(136895u, 109412u, 64342u))))), (uvec3(_GLF_IDENTITY(uvec3(uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u))), (true ? uvec3(uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u))) : _GLF_FUZZED(uvec3(136895u, 109412u, 64342u)))))) << uvec3(0u, 0u, 0u))), (uvec3(uvec4(uvec3(uint(1), 0u, _GLF_IDENTITY(0u, 0u | (0u))), 0u))) << uvec3(0u, 0u, 0u))) ^ uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u)))), (uvec3(uint(1), 0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), (min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))) | (min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))))), (~ _GLF_IDENTITY((uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))), ((uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))))) - uvec3(0u, 0u, 0u))) | (~ (uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))))))))), min(_GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), (min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))) | (min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))))), (~ _GLF_IDENTITY((uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))), ((uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))))) - uvec3(0u, 0u, 0u))) | (~ (uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(_GLF_IDENTITY(uint(1), (uint(1)) ^ 0u), 0u, 0u))))))))))), _GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), uvec3(_GLF_IDENTITY(uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))), (min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))) | (min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))))), (~ _GLF_IDENTITY((uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u))))), ((uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))))) - uvec3(0u, 0u, 0u))) | (~ (uvec3(min((uvec3(uint(1), 0u, 0u)), (uvec3(uint(1), 0u, 0u)))))))))))))))))))), _GLF_IDENTITY((uvec3(uint(1), 0u, 0u)), ((uvec3(uint(_GLF_IDENTITY(1, int(ivec2(1, 0)))), 0u, 0u))) ^ uvec3(0u, 0u, 0u)), (uvec3(uint(1), 0u, 0u)))) | uvec3(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u)))), (true ? uvec3(_GLF_IDENTITY(uint(1), (uint(1)) | (_GLF_IDENTITY(uint(1), ~ (~ (_GLF_IDENTITY(uint(1), 0u | (uint(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))))), 0u, 0u) : _GLF_FUZZED(clamp(uvec3(40605u, _GLF_IDENTITY(160343u, (160343u) | 0u), 79240u), workgroup_base, subgroup_local_id)))))))) >> 0u)))), uint(1)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) | (clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), _GLF_IDENTITY(1u, max(1u, 1u))))), _GLF_IDENTITY((_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))), (false ? _GLF_FUZZED(packSnorm2x16(vec2(8193.9607, -5441.6006))) : _GLF_IDENTITY((_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))), max((_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))), (_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | 0), 1))), 1u)))))))) >> 0u), (false ? _GLF_FUZZED(usubBorrow(subgroup_id, subgroup_local_id, workgroup_size)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uvec2(uint(1), 1u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, min(1, 1))), 1u)))), (false ? _GLF_FUZZED(packSnorm2x16(vec2(8193.9607, -5441.6006))) : _GLF_IDENTITY((_GLF_IDENTITY(uint(1), uint(uvec2(uint(1), 1u)))), max((_GLF_IDENTITY(uint(1), uint(uvec2(uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))))))), 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u))), _GLF_IDENTITY((_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u)))) | (_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u)))), ((_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u)))) | (_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u))))) | ((_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), 1u)))) | (_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) - 0u), (false ? _GLF_FUZZED(83608u) : _GLF_IDENTITY(uint(1), (uint(1)) - 0u))), 1u)))))))) | 0u)))))) >> 0u))), _GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))), uint(1))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)) % 2) == 0, ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) * 1))), (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) * 1)))) | 0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
      barrier();
    }
   subgroupAll(_GLF_IDENTITY(true, bool(bool(true))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
  }
 else
  {
   subgroupAll(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), bool(_GLF_IDENTITY(bvec3(((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec3(((false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false) && true), false, false, true))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(true, true, true))), (! (bool(bvec3(true, true, true)))) && true)))) && (false))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(false, true && (false)))))), bool(bvec4(! (! (! (! (_GLF_IDENTITY(false, true && (false)))))), false, false, false))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) && true)) || false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), false || (! (! (_GLF_IDENTITY(false, true && (false))))))))), ((_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, true && (false)))), false || (! (! (_GLF_IDENTITY(false, true && (false)))))))))) && _GLF_IDENTITY(true, (true) || false))))))), (bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))))) || false)) && true), ! (! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true && (false))))))))))) || false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(false, true && (false)))))), false || (! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))))))) || false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(false, true && (false)))))), false || (! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))))))) || false)))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(false, true && (false)))))), false || (! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))))))) || false)))))), false), false)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))))) && true), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)))), _GLF_IDENTITY(! (! (! (! (_GLF_IDENTITY(false, true && (false)))))), false || (! (! (! (! (_GLF_IDENTITY(false, true && (false)))))))))))), (bool(bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (false)), true && (false)))), ! (! (! (! (_GLF_IDENTITY(false, true && (false))))))))))) || false)))))), false), false))))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(-63.88, -6.2)), (_GLF_FUZZED(vec2(-63.88, -6.2))) * mat2(1.0)))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, true && (true)) ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))).x, float(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))), (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))), (false ? _GLF_FUZZED(vec2(-3050.8527, 1983.0690)) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-63.88, -6.2)))))))).x, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0))) > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, true))), true && (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), false, true)))))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)) && (_GLF_DEAD(false))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), true, false))))))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true)))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-78.51)), float(injectionSwitch.y), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, exp(0.0), 0.0, 0.0, 1.0, sqrt(determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 1.0, length(vec2(0.0, 0.0)), 1.0, sqrt(0.0), 1.0, 1.0, exp(length(vec3(0.0, 0.0, 0.0))), 0.0)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-81.17, -939.369)))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))))), 1.0, cos(0.0), sqrt(1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), 1.0, 0.0, 0.0, 0.0)), 0.0 + (float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0))))), min(injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.7)), bool(false))))))), 0.0 + (float(mat4(injectionSwitch.y, sqrt(abs(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2236.8870) : 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.7)), bool(false))))))), 0.0 + (float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2236.8870) : 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)), (injectionSwitch) * mat2(1.0)).x), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(6805.3344))))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.7)), bool(false))))))), 0.0 + (float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2236.8870) : 1.0))))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(1.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, tan(0.0), 0.0), (mat2(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, tan(0.0), 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(2.7, max(2.7, 2.7)))), bool(false))))))), 0.0 + (float(mat4(injectionSwitch.y, sqrt(abs(1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, cos(0.0), sqrt(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2236.8870) : 1.0)))), (_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-2236.8870) : 1.0))))) - 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0))))))), min(injectionSwitch.y, injectionSwitch.y)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8.9)), vec2(_GLF_FUZZED(-892.004), (injectionSwitch)[1]), bvec2(false, true))).y)))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(39.12)), bool(false))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(54.35), _GLF_FUZZED(923.994)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) || false), true), true, false)))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false, true, false))))) && ((false))) || false), true), true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) ^ 0)))), 1 * (2))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), true)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec3(_GLF_DEAD(false), false, true)))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), true)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec3(_GLF_DEAD(false), false, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false))), true)), bool(bool(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), _GLF_IDENTITY(true, true && (true)))), false || (bool(bvec3(_GLF_DEAD(false), false, true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), true))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
          return;
         barrier();
        }
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(1591.6897)), bool(false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), false, true)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) / 1.0) > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
