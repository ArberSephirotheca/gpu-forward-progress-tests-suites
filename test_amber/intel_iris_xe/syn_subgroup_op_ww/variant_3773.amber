#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if((subgroup_local_id % 2) == 0)
  {
   switch(_GLF_SWITCH(0))
    {
     case 6:
     while(false)
      {
       mat3x2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v[96];
       ivec3(-35636, 63306, -56594);
       while(false)
        {
         switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
          {
           case 61:
           mat2x4(mat2x3(-37.41, 170.687, -517.551, -788.396, 6.8, -2.6));
           case 74:
           max(ivec3(81608, 40978, -97095), ivec3(52008, -80685, -8087));
           case 0:
           ivec2 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v;
           case 59:
           case 19:
           vec2(-0.5, 182.181);
           case 13:
           case 29:
           case 49:
           case 88:
           mat4 _GLF_SWITCH_0_4v;
           case 9:
           int _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v;
           case 62:
           {
            switch(_GLF_SWITCH(0))
             {
              case 4:
              mat2x4(9.9, 8497.8108, 2986.5300, -21.75, -20.13, 0.2, -2.7, -99.95);
              case 1:
              _GLF_SWITCH_0_2v;
              case 0:
              ivec4(-37889, -40880, 19677, 95004);
              case 19:
              case 26:
              ivec3(48477, -32108, 37174);
              case 98:
              ;
              vec4 _GLF_SWITCH_0_7v;
              case 83:
              51841;
              mat2x3 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v;
              case 92:
              (uvec3(180138u, 18349u, 50566u) + subgroup_size);
              break;
              case 65:
              mat3(338.471, 3767.4877, -58.65, 1217.7509, 5.6, -1500.8918, 78.99, -0.7, 483.289);
              case 55:
              mat2x4 _GLF_SWITCH_1_0v;
              default:
              1;
             }
           }
           (mat3(-2227.0946, 1.1, 4472.4695, 7.3, -91.93, 3820.7788, -22.85, -1.1, -5.9) - -5.2);
           for(           mat4x2(2.7, -192.207, -979.526, 4981.7206, -2.7, -8090.6474, -1953.4012, -8.3);
 false; uvec4(113096u, 58273u, 60427u, 90370u))
            {
             mat4x2(-5915.6881, -62.00, -0.3, -7102.4312, 8575.0469, 3.2, -115.790, 10.25);
            }
           break;
           case 8:
           ;
           case 3:
           sqrt(injectionSwitch);
           default:
           1;
          }
        }
       ;
       mat2x3 _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
      }
     case 39:
     (injectionSwitch * (81.19 + mat4x2(278.606, 9868.1338, 375.590, 5.2, -9.5, 427.067, -3182.2629, -3.0)))[2];
     case 0:
     subgroupAll(true);
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
