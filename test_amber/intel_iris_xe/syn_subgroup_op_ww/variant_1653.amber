#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)), injectionSwitch.x)) > injectionSwitch.y, true, true, false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true)), (bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))) || false))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.8) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(9995)))], injectionSwitch[1])).y)))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), true && (true))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(_GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, false)))) || false))))) || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))), ! (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))))))))))))) || false)) && true)) && true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))) ? injectionSwitch : _GLF_FUZZED(vec2(-4.0, 9.6)))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), max(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(20314u, max(20314u, 20314u))), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(20314u, _GLF_IDENTITY(max(20314u, 20314u), 0u + (_GLF_IDENTITY(max(20314u, 20314u), (max(20314u, 20314u)) << 0u))))))) : _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u, ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x))))) | 0u) * 1u)), 1u * (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(20314u, max(20314u, 20314u))), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(20314u, _GLF_IDENTITY(max(20314u, 20314u), 0u + (_GLF_IDENTITY(max(20314u, 20314u), (max(20314u, 20314u)) << 0u))))))) : _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u, ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x))))) | 0u) * 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u, ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)).x, 0u + (gl_NumWorkGroups.x))) | 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u))), min(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id)))))), ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))))) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(0u), uint(0u)))) | _GLF_IDENTITY(0u, (0u) * 1u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) | (gl_NumWorkGroups))) | (gl_NumWorkGroups)).x, (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u)) << 0u)), max(0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u)) << 0u)), 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u)) << 0u)))))) | 0u))))), max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec4(gl_NumWorkGroups, 0u)))))) << uvec3(0u, 0u, 0u)).x))) | 0u), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(20314u, max(20314u, 20314u))), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(20314u, max(20314u, 20314u))))) : _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u, ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))), (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id)))))) - 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))))) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(0u), uint(0u)))) | _GLF_IDENTITY(0u, (0u) * 1u)), _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) - 0u), 0u)) + (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u)) << 0u)))) | 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) - ((0u & 162366u) | 0u)), (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(20314u, max(20314u, 20314u))), 0u ^ (_GLF_FUZZED(_GLF_IDENTITY(20314u, max(20314u, 20314u))))) : _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x)), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u, _GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), (_GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), 0u ^ (_GLF_IDENTITY(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), max(((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u), ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u)))))) - (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) | ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (gl_NumWorkGroups.x))) | 0u))), min(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, uint(uvec2(gl_NumWorkGroups.x, 0u))), 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec3(gl_NumWorkGroups), max(uvec3(gl_NumWorkGroups), uvec3(gl_NumWorkGroups))))).x : _GLF_FUZZED(subgroup_id)))))), ((_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(subgroup_id))))))) << (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(0u), uint(0u)))) | _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), min((0u), (0u)))) + uint(_GLF_ZERO(0.0, injectionSwitch.x))) * 1u)), _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, 0u + (_GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u)) << 0u)))) | 0u)))))));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / 1u);
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))), true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))) && true), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(true, ! (! (true))) && ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false || (! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (false || _GLF_IDENTITY((! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))))))))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))) && true)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(118.616, 0.5)) : (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), (! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), true && ((false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), true && ((! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false), false)), false || (bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false), false)), false || (bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (false)) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y))))), ((! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ((false)) || false)) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y)))))) || false))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(118.616, 0.5)) : (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), (! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), true && ((false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), true && ((! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false), false)), false || (bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false), false)), false || (bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (false)) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y))))), ((! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ((false)) || false)) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y)))))) || false))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(118.616, 0.5)) : (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), (! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), true && ((false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), true && ((! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false), false)), false || (bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), true && ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false), false)), false || (bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), false || _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (false)) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y))))), ((! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ((false)) || false)) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), false || (! (_GLF_IDENTITY(false, (false) && true))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (injectionSwitch.x > injectionSwitch.y)))))) || false)))))))))) && true))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3329.8612)), bool(false))), (false ? _GLF_FUZZED(35.30) : _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3329.8612)), bool(false)))))), float(_GLF_FUZZED(50.41)), bool(false))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))).y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false)) || false))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-73.81)), bool(false))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, 0u)))), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), min(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u)))), 1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, clamp(2u, 2u, 2u))), uint(2u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))), uint(2u))) ^ 1u), _GLF_IDENTITY(0u, 1u * (0u)))) ^ uvec3(0u, 0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))))))) | (workgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size), min((workgroup_size), (workgroup_size))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((workgroup_size), (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u, (_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u, clamp(((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u))) ^ 0u)), 0u), (_GLF_IDENTITY(uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u)) | (uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u)) | (uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u)))), uvec3(1u, 1u, 1u) * (~ (_GLF_IDENTITY(uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u)) | (uvec3((workgroup_size), (((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(2u), uint(2u)), max(1u << _GLF_IDENTITY(uint(2u), uint(2u)), 1u << _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), max(uint(2u), uint(2u)))) << 0u), uint(2u))) ^ 1u), 0u))))))) - uvec3(0u, 0u, 0u))))) ^ uvec3(0u, 0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))))))) | (_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)), workgroup_size)), workgroup_size)))) | (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) | (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u))), (uvec3(_GLF_IDENTITY((workgroup_size), clamp(_GLF_IDENTITY((workgroup_size), uint(uvec4((workgroup_size), 0u, 1u, 1u))), (workgroup_size), _GLF_IDENTITY((workgroup_size), ((workgroup_size)) >> 0u))), (((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), min(_GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(uint(2u), uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))), ~ (~ (uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), ((_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(2u), uint(2u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(2u), uint(2u))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u)))) | ((1u << _GLF_IDENTITY(uint(2u), uint(2u)))))), (~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(2u), uint(2u))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u)))) | ((1u << _GLF_IDENTITY(uint(2u), uint(2u))))))) | (~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(2u), uint(2u))), ((1u << _GLF_IDENTITY(uint(2u), uint(2u)))) | ((1u << _GLF_IDENTITY(uint(2u), uint(2u)))))))))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), ~ (~ (uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u))))))))) | (workgroup_size), ~ (~ (_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (~ (uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))))), max(~ (~ (uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))))), ~ (~ (uint(_GLF_IDENTITY(uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u), (uvec3((workgroup_size), (((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))) ^ 1u), 0u)) ^ uvec3(0u, 0u, 0u))))))))) | (workgroup_size))))))) * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((true ? workgroup_id : _GLF_FUZZED(subgroup_id)), uint(_GLF_IDENTITY(uvec4((true ? workgroup_id : _GLF_FUZZED(subgroup_id)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u & 1u)), (uvec4((true ? workgroup_id : _GLF_FUZZED(subgroup_id)), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), (1u & 1u))) - uvec4(0u, 0u, 0u, 0u)))))) - 0u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec4((injectionSwitch.x < injectionSwitch.y), true, false, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ (0 | 0)))), (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) ^ (0 | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) * 1)))))) && true)); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))), ! (! (_GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(((injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), ! (! (((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false)))), false || (! (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), false))))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, 0 ^ (1))], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch[1] : _GLF_FUZZED(2047.9932))), _GLF_IDENTITY(injectionSwitch[1], (true ? injectionSwitch[1] : _GLF_FUZZED(-3163.7119))), injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec3(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.3))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-788.460)), bool(false))))), 0.0))), max(vec3(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), (true ? vec2(_GLF_IDENTITY(vec3(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.3))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-788.460)), bool(false))))), 0.0))), max(vec3(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec3(vec2(injectionSwitch.y, 0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))) : _GLF_FUZZED(injectionSwitch))))))))));
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(true, false)), bvec2(bvec2(bvec2(bvec2(true, false)))))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) && true, ! (! (((injectionSwitch.x > injectionSwitch.y)) && true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > injectionSwitch.y)))))), false, false, true)))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(8538) : 1))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], _GLF_IDENTITY(float(mat3x2(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], log(1.0), 1.0, 0.0, 1.0, sqrt(1.0))), 0.0 + (float(mat3x2(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], log(1.0), 1.0, 0.0, 1.0, sqrt(1.0)))))), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], _GLF_IDENTITY(float(mat3x2(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], log(1.0), 1.0, 0.0, 1.0, sqrt(1.0))), 0.0 + (float(mat3x2(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], log(1.0), 1.0, 0.0, 1.0, sqrt(1.0)))))), injectionSwitch[1])).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], _GLF_IDENTITY(float(mat3x2(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], log(1.0), 1.0, 0.0, 1.0, sqrt(1.0))), 0.0 + (float(mat3x2(injectionSwitch[_GLF_IDENTITY(0, (0) - _GLF_IDENTITY(0, 0 | (0)))], log(1.0), 1.0, 0.0, 1.0, sqrt(1.0)))))), injectionSwitch[1])).y) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))));
 for(int _injected_loop_counter = (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) << 0))), 1)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-85.72)), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)[0], _GLF_FUZZED(-85.72)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), (true ? vec2(mat3x2(vec2((injectionSwitch)[0], _GLF_FUZZED(-85.72)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)) : _GLF_FUZZED(max(vec2(-5.8, -543.527), 3.6))))), vec2(_GLF_FUZZED(-3.1), (injectionSwitch)[1]), bvec2(false, true)))))) - vec2(0.0, 0.0)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-85.72)), _GLF_IDENTITY(vec2(mat3x2(vec2((injectionSwitch)[0], _GLF_FUZZED(-85.72)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)), (true ? vec2(mat3x2(vec2((injectionSwitch)[0], _GLF_FUZZED(-85.72)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0)) : _GLF_FUZZED(max(vec2(-5.8, -543.527), 3.6))))), vec2(_GLF_FUZZED(-3.1), (injectionSwitch)[1]), bvec2(false, true)))))) - vec2(0.0, 0.0)).y))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(933.705)))))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch.x : _GLF_FUZZED(9.5))) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(302.213), _GLF_FUZZED(-596.452)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y), ! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y), true, false))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), (injectionSwitch.y) * _GLF_IDENTITY(1.0, (1.0) - 0.0)) : _GLF_FUZZED(-1.7)))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, sqrt(1.0), sin(0.0)), mat2(mat4(mat2(injectionSwitch.x, 1.0, sqrt(1.0), sin(0.0))))))))) > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (_GLF_IDENTITY(true, true && (true)))))))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false)))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(1.0, (1.0) / 1.0)))), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), mix(float(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-4.1)), bool(false))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), true))))))
                barrier();
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3382.7561))), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y)))), (int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(int(5), (int(5)) | (1 ^ 1))), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))), max((int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)), clamp(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)), _GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)), _GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))), (int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))) | (1 ^ 1), max(_GLF_IDENTITY((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))), max((int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1))) * (5)))), (int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))) | (1 ^ 1), _GLF_IDENTITY((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))), max((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-35538) : 5)))))), (int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))) | (1 ^ 1)))))) / 1))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0, int(ivec2(_GLF_IDENTITY((int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0, min((int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0, (int(ivec2(_GLF_IDENTITY(5, clamp(5, 5, _GLF_IDENTITY(5, (5) ^ 0))), int(_GLF_ONE(1.0, injectionSwitch.y))))) << 0)), 0)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (1 ^ 1)), (_GLF_IDENTITY(int(5), (int(5)) | (1 ^ 1))) << 0)), ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))), max((int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)), clamp(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)), _GLF_IDENTITY(5, int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), min(float(float(1.0)), float(float(1.0))))), injectionSwitch.y)) * (5)), _GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))), (int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))) | (1 ^ 1), max(_GLF_IDENTITY((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))), max((int(_GLF_IDENTITY(5, _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) / 1))) * (5)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)), 1 * (_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))))))) | (1 ^ 1), _GLF_IDENTITY((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (5)))), max((int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(5, (false ? _GLF_FUZZED(-35538) : 5)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-942.150)), vec2(_GLF_FUZZED(float(true)), (injectionSwitch)[1]), bvec2(false, true))).y)) * (5))), (int(_GLF_IDENTITY(5, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-942.150)), vec2(_GLF_FUZZED(float(true)), (injectionSwitch)[1]), bvec2(false, true))).y)) * (5)))) / 1)))) | (1 ^ 1)))))) / 1)))) || false); _GLF_IDENTITY(_injected_loop_counter ++, 0 | (_injected_loop_counter ++)))
  {
   if((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(floor(injectionSwitch)))).x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : int(int(0))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(floor(injectionSwitch)))).x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : int(int(0)))) | 0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(int(0))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(0), (int(0)) << 0), _GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (int(0))), (_GLF_IDENTITY((~ (int(0))), max((~ (int(0))), (~ (int(0)))))) * 1)), int(0)), (clamp(_GLF_IDENTITY(int(0), (int(0)) << 0), _GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (int(0))), (_GLF_IDENTITY((~ (int(0))), max((~ (int(0))), (~ (int(0)))))) * 1)), int(0))) ^ 0)))))), max(~ (~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(0), int(0))))) * 1)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(0), int(0))))) * 1)), (int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(0), int(0))))) * 1))) >> 0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(0), int(0))))) * 1)), 0 | (int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(0), int(0))))) * 1)))))), clamp(int(_GLF_IDENTITY(0, (0) / 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(true, (true) && true) ? 0 : _GLF_FUZZED(_injected_loop_counter)))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(0, (0) >> 0))), (_GLF_IDENTITY((int(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) | 0))))), int(ivec4((int(0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), int(_GLF_IDENTITY(ivec2((1 << _GLF_IDENTITY(int(6), int(6))), (0 ^ 1)), ~ (~ (ivec2((1 << _GLF_IDENTITY(int(6), int(6))), (0 ^ 1)))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))), 1, 1)))) | ((int(0)))))), int(0))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0)))))), max(~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0)))))), ~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0))))))))), (~ (~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), ~ (~ _GLF_IDENTITY((int(0)), ((int(0))) + 0))), int(0)))))))) >> 0), ~ (~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0)))))))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) && (false))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           subgroupAll(true);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec4(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false, true, true)))), bool(bool(injectionSwitch.x > injectionSwitch.y)))))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       do
        {
         do
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) >> ((61449 & 0) >> _GLF_IDENTITY(int(6), int(6)))), (_GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(((61449 & 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(44532) : _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(int(6), int(6))))), 0 + (((61449 & _GLF_IDENTITY(0, (0) >> 0)) >> _GLF_IDENTITY(int(6), int(6))))))) / 1)), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ (0 | 0)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false)))))))), true, false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)))))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
                  barrier();
                 for(int _injected_loop_counter = ((0 ^ _GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), (! (! (_GLF_DEAD(false)))) || false)))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(9.1))), min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), true && ((injectionSwitch.x > injectionSwitch.y))))))
              barrier();
             for(int _injected_loop_counter = (99842 & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))) << 0) < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), int(_GLF_IDENTITY(ivec3(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1), ivec3(0, 0, 0) + (ivec3(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), 0, 1)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-342.617) : 1.0)), sin(0.0), tan(0.0)), _GLF_IDENTITY(mat3x2(mat4x2(mat3x2(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-342.617) : 1.0)), sin(0.0), tan(0.0)))), (mat3x2(mat4x2(mat3x2(injectionSwitch.y, 1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-342.617) : 1.0)), sin(0.0), tan(0.0))))) - mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             subgroupAll(false);
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat2(1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0), transpose(transpose(mat2x4(injectionSwitch, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0))), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat2(1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 0.0)))))).y))));
            }
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sqrt(0.0)))) < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true))) && true))))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (4) << 0), 64, 4);
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false)))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))
              barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch)).y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9879.0425), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.4)), bvec2(true, false))), injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), _GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), clamp(_GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), ((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))))))) / vec2(1.0, 1.0)), injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch)).y)))))), (_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9879.0425), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.4)), bvec2(true, false))), injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), _GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), clamp(_GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), ((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))))))) / vec2(1.0, 1.0)), injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch)).y)))))), (_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9879.0425), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.4)), bvec2(true, false))), injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), _GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), clamp(_GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), ((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))))))) / vec2(1.0, 1.0)), injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch)).y)))))), bool(bvec3((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9879.0425), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(0.4)), bvec2(true, false))), injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), _GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), clamp(_GLF_IDENTITY((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), ((true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))) * mat2(1.0)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))))))) / vec2(1.0, 1.0)), injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(1.0, 1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (true ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch)))), injectionSwitch)).y)))))), true, true)))) || false)) && true)))));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0)), dot(vec2(0.0, 1.0), vec2(sqrt(0.0), 1.0))))))), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), (_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), (true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-4.0)), bool(false)))), 1.0)) : _GLF_FUZZED(injectionSwitch)))) - vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(float(mat2x3((injectionSwitch)[0], 1.0, abs(1.0), 1.0, 1.0, 0.0)), min(float(mat2x3((injectionSwitch)[0], 1.0, abs(1.0), 1.0, 1.0, 0.0)), float(mat2x3((injectionSwitch)[0], 1.0, abs(1.0), 1.0, 1.0, 0.0))))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(-44344)), _GLF_FUZZED((1468.4840))), bvec2(false, false))).y)) ? injectionSwitch : _GLF_FUZZED(vec2(_GLF_IDENTITY(-1.0, 0.0 + (_GLF_IDENTITY(-1.0, min(-1.0, -1.0)))), -309.082)))).y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0, 1.0, 0.0))), sqrt(1.0), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 1.0, 1.0, sqrt(1.0), 1.0, 0.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(46.89) : 0.0)))), exp(0.0), 0.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 1.0)))), mix(vec3((normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 1.0)))))[0], _GLF_FUZZED(7.4), (normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 1.0)))))[2]), vec3(_GLF_FUZZED(280.563), (normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0))), 1.0)))))[1], _GLF_FUZZED(4.4)), bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), mix(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), float(_GLF_FUZZED(-398.694)), bool(false))), dot(vec4(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0))), round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), sqrt(1.0), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) ? _GLF_FUZZED(max(vec4(447.248, 5.4, -48.79, 89.76), vec4(-720.775, -3093.0573, 9.3, -59.25))) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), (vec4(0.0, 0.0, 0.0, 1.0))[3]), bvec4(false, false, false, true)), (mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.4))), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(157.538)), float(0.0), bool(true))))), 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), _GLF_IDENTITY((vec4(0.0, 0.0, 0.0, 1.0))[3], mix(float((vec4(0.0, 0.0, 0.0, 1.0))[3]), float(_GLF_FUZZED(-3220.9795)), bool(false)))), bvec4(false, false, false, true))) - vec4(0.0, 0.0, 0.0, 0.0))))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), _GLF_IDENTITY((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), vec2(mat2x4((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), 1.0, 1.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0))))), (_GLF_IDENTITY((_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) ? _GLF_FUZZED(max(vec4(447.248, 5.4, -48.79, 89.76), vec4(-720.775, -3093.0573, 9.3, -59.25))) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), (vec4(0.0, 0.0, 0.0, 1.0))[3]), bvec4(false, false, false, true)), (mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.4))), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(157.538)), float(0.0), bool(true))))), 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), _GLF_IDENTITY((vec4(0.0, 0.0, 0.0, 1.0))[3], mix(float((vec4(0.0, 0.0, 0.0, 1.0))[3]), float(_GLF_FUZZED(-3220.9795)), bool(false)))), bvec4(false, false, false, true))) - vec4(0.0, 0.0, 0.0, 0.0))))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), _GLF_IDENTITY((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), vec2(mat2x4((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), 1.0, 1.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0))))), clamp((_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) ? _GLF_FUZZED(max(vec4(447.248, 5.4, -48.79, 89.76), vec4(-720.775, -3093.0573, 9.3, -59.25))) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), (vec4(0.0, 0.0, 0.0, 1.0))[3]), bvec4(false, false, false, true)), (mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.4))), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(157.538)), float(0.0), bool(true))))), 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), _GLF_IDENTITY((vec4(0.0, 0.0, 0.0, 1.0))[3], mix(float((vec4(0.0, 0.0, 0.0, 1.0))[3]), float(_GLF_FUZZED(-3220.9795)), bool(false)))), bvec4(false, false, false, true))) - vec4(0.0, 0.0, 0.0, 0.0))))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), _GLF_IDENTITY((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), vec2(mat2x4((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), 1.0, 1.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0))))), (_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) ? _GLF_FUZZED(max(vec4(447.248, 5.4, -48.79, 89.76), vec4(-720.775, -3093.0573, 9.3, -59.25))) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), (vec4(0.0, 0.0, 0.0, 1.0))[3]), bvec4(false, false, false, true)), (mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.4))), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(157.538)), float(0.0), bool(true))))), 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), _GLF_IDENTITY((vec4(0.0, 0.0, 0.0, 1.0))[3], mix(float((vec4(0.0, 0.0, 0.0, 1.0))[3]), float(_GLF_FUZZED(-3220.9795)), bool(false)))), bvec4(false, false, false, true))) - vec4(0.0, 0.0, 0.0, 0.0))))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), _GLF_IDENTITY((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), vec2(mat2x4((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), 1.0, 1.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0))))), (_GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))) ? _GLF_FUZZED(max(vec4(447.248, 5.4, -48.79, 89.76), vec4(-720.775, -3093.0573, 9.3, -59.25))) : _GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), _GLF_IDENTITY(mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(0.0, 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), (vec4(0.0, 0.0, 0.0, 1.0))[3]), bvec4(false, false, false, true)), (mix(vec4((vec4(0.0, 0.0, 0.0, 1.0))[0], (vec4(0.0, 0.0, 0.0, 1.0))[1], (vec4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(8.4))), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(157.538)), float(0.0), bool(true))))), 0.0, 0.0, 1.0))[2], _GLF_FUZZED(vec4(5689.4211, -3.3, 478.584, 0.8).q)), vec4(_GLF_FUZZED(-5.2), _GLF_FUZZED(-4.2), _GLF_FUZZED(4029.3523), _GLF_IDENTITY((vec4(0.0, 0.0, 0.0, 1.0))[3], mix(float((vec4(0.0, 0.0, 0.0, 1.0))[3]), float(_GLF_FUZZED(-3220.9795)), bool(false)))), bvec4(false, false, false, true))) - vec4(0.0, 0.0, 0.0, 0.0))))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)), _GLF_IDENTITY((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), vec2(mat2x4((true ? vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), sqrt(1.0), 0.0, exp(0.0), 0.0, round(length(normalize(vec3(1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) + 0.0, clamp((1.0) + 0.0, (1.0) + 0.0, (1.0) + 0.0))))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, sqrt(0.0), 0.0, cos(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), determinant(mat2(1.0, 0.0, sqrt(0.0), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), sqrt(1.0), 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, sqrt(1.0), 1.0)) : _GLF_FUZZED(injectionSwitch)), 1.0, 1.0, 1.0, 0.0, abs(_GLF_ONE(1.0, injectionSwitch.y)), 0.0)))))))) / cos(vec2(0.0, 0.0))) - vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-1.0, -309.082)))).y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), (false ? _GLF_FUZZED((_injected_loop_counter)) : _GLF_IDENTITY((1 | 1), (false ? _GLF_FUZZED(-78981) : (1 | 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * int(_GLF_ONE(1.0, injectionSwitch.y))) > (0 | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, (1) | (1)))), ! (! (_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, (1) | (1)))))))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), bool(bvec3(bool(bvec3(_GLF_DEAD(false), true, false)), false, true)))))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch))) / vec2(1.0, 1.0)).y))))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! (_GLF_IDENTITY(false, true && (false)))) && true))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
