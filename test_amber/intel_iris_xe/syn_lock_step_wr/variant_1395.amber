#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true), false, true, false))) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-49.58))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))) && true))), true && (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))) && true))))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) + _GLF_ZERO(0.0, injectionSwitch.x))), float(_GLF_FUZZED(-84.35)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            break;
           for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, 1.0 * (0.0)), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) || false)), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))), ! (! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))))))))), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true), (injectionSwitch.x > injectionSwitch.y))) || false)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), true), false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))) || false)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))) || false)), true)))))), true), bvec2(bvec4(bvec2(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))) || false)), bool(bvec2(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))) || false)), true)))))), true), true, true))), false)))))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((-0.9 + 7759.6024))), bool(false))) > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))) && true))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (! ((_GLF_IDENTITY(! (false), ! (! (! (false)))))))), ((_GLF_IDENTITY(! (false), ! (! (! (false)))))) && true))))))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = ((1 | 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize.x), (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))))).x))), _GLF_IDENTITY((~ (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x)), (false ? _GLF_FUZZED(atomicCompSwap(subgroup_id, subgroup_local_id, num_workgroup)) : (~ (_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))).x)))) | 0u)) * 1u)), (~ (~ (gl_WorkGroupSize.x))) << 0u));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (workgroup_size)) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) / 1u), (0u << _GLF_IDENTITY(uint(3u), uint(3u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          break;
                         return;
                        }
                      }
                     return;
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))));
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               break;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ _GLF_IDENTITY((~ (subgroup_local_id)), min((_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u)), (~ (subgroup_local_id)))))))) + 1) % subgroup_size), 0u ^ (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))) + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))), (_GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false)))) && true) && true), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, abs(1.0) * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(42.83)), float(injectionSwitch.y), bool(true))))))))), true, true))), (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))) || false))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(vec2(867.828, 99.45).g), (_GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), (_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))) - vec2(0.0, 0.0))).g) : _GLF_FUZZED(-1218.6219), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), mat2(1.0) * (vec2(867.828, 99.45))), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), clamp(vec2(867.828, 99.45), vec2(867.828, 99.45), _GLF_IDENTITY(vec2(867.828, 99.45), (false ? _GLF_FUZZED(vec2(-671.362, -57.86)) : vec2(867.828, 99.45))))), vec2(mat3x2(vec2(867.828, _GLF_IDENTITY(99.45, (99.45) + abs(0.0))), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec4(-8.9, -160.823, 9.7, 9.0).q)), float(0.0), bool(true)))), float(_GLF_FUZZED(-118.216)), bool(false))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), max(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), min(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219))), float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), mat2(1.0) * (vec2(867.828, 99.45))), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), clamp(vec2(867.828, 99.45), vec2(867.828, 99.45), _GLF_IDENTITY(vec2(867.828, 99.45), (false ? _GLF_FUZZED(vec2(-671.362, -57.86)) : vec2(867.828, 99.45))))), vec2(mat3x2(vec2(867.828, _GLF_IDENTITY(99.45, (99.45) + abs(0.0))), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec4(-8.9, -160.823, 9.7, 9.0).q)), float(0.0), bool(true)))), float(_GLF_FUZZED(-118.216)), bool(false))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), max(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), min(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219))), 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat3(_GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), mat2(1.0) * (vec2(867.828, 99.45))), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), clamp(vec2(867.828, 99.45), vec2(867.828, 99.45), _GLF_IDENTITY(vec2(867.828, 99.45), (false ? _GLF_FUZZED(vec2(-671.362, -57.86)) : vec2(867.828, 99.45))))), vec2(mat3x2(vec2(867.828, _GLF_IDENTITY(99.45, (99.45) + abs(0.0))), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec4(-8.9, -160.823, 9.7, 9.0).q)), float(0.0), bool(true)))), float(_GLF_FUZZED(-118.216)), bool(false))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), max(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), min(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219))), 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0)))))), clamp(_GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), _GLF_IDENTITY(min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0)), mix(vec2(_GLF_FUZZED(-4907.4240), (min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0)))[1]), vec2((min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0)))[0], _GLF_FUZZED(-4.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), max(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), _GLF_IDENTITY(min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0)), clamp(min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0)), _GLF_IDENTITY(min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0)), (min((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), (vec2(867.828, 99.45)) / vec2(1.0, 1.0)), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))) - vec2(0.0, 0.0)), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-173.281)), float(1.0), bool(true))), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, (1.0) / 1.0))), abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))), mix(vec2(_GLF_FUZZED(-3.5), _GLF_FUZZED(float(true))), vec2(((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))[0], ((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))[1]), bvec2(true, true))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219))), _GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(2.3)), bool(false))), 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, _GLF_IDENTITY(99.45, (99.45) - 0.0)), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), max(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(1.0, 1.0) * ((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))), vec2(0.0, 0.0) + (mat2(1.0) * (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) - tan(0.0)), 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219))), _GLF_IDENTITY(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(_GLF_IDENTITY(867.828, float(vec4(_GLF_IDENTITY(867.828, (false ? _GLF_FUZZED(1799.0085) : 867.828)), _GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, determinant(mat2(0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 0.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 0.0))), 1.0, 1.0))), 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3(233.960, -1.1, -767.725, -9.6, 2.2, -7321.9796, 8870.2482, -1.0, 2.7))))), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5065.8442))), 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), max(true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, _GLF_IDENTITY(99.45, clamp(99.45, 99.45, _GLF_IDENTITY(99.45, mix(float(_GLF_FUZZED(12.46)), float(99.45), bool(true)))))), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), max(vec2(867.828, 99.45), _GLF_IDENTITY(vec2(867.828, 99.45), max(vec2(867.828, 99.45), vec2(867.828, 99.45))))), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), _GLF_IDENTITY(vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)), mix(vec2((vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))[0], _GLF_IDENTITY(_GLF_FUZZED(23.76), float(mat2x3(_GLF_FUZZED(23.76), 1.0, 1.0, 0.0, abs(1.0), 0.0)))), vec2(_GLF_FUZZED(2.8), (vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) * mat2(1.0), min((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_FUZZED(-1218.6219))))), true ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(867.828, max(867.828, 867.828)), 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0), vec2(mat3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), max(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), max(_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0))), _GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))))))) * mat2(1.0), min(_GLF_IDENTITY((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? _GLF_IDENTITY(abs(0.0), float(mat4x2(abs(0.0), 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.1))), 1.0)))), ((_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, _GLF_IDENTITY(abs(0.0), (true ? _GLF_IDENTITY(abs(0.0), float(mat4x2(abs(0.0), 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) : _GLF_FUZZED(-3.1))), 1.0))))) - vec2(0.0, 0.0)) * mat2(1.0), (_GLF_IDENTITY(vec2(867.828, 99.45), vec2(mat3x2(vec2(867.828, 99.45), 1.0, 1.0, abs(0.0), 1.0)))) * mat2(1.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))).g) : _GLF_IDENTITY(_GLF_FUZZED(-1218.6219), mix(float(_GLF_FUZZED(9.9)), float(_GLF_FUZZED(-1218.6219)), bool(true)))))))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       break;
                      }
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), ! (! (_GLF_IDENTITY(! (! (! (false))), true && (! (! (! (false)))))))))))))
                continue;
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
                  return;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
                      return;
                     return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       continue;
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           for(int _injected_loop_counter = ((0 | (0 >> _GLF_IDENTITY(int(7), int(7)))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(mat2x4(mat2x4(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0), vec4(0.0, _GLF_IDENTITY(0.0, (0.0) - determinant(mat2(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0)))))), mat4(1.0) * (mat2x4(mat2x4(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-5.3)), float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), bool(true))), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))))))))).x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) << 0))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, (4) | (4)));
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(68834))))), 2);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))))))
      continue;
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), (1 ^ 0), 1, 1))))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), (1 & 1)))), _injected_loop_counter, _injected_loop_counter)) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
                      break;
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + sin(vec2(0.0, 0.0))).y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, false, false)))))))
  return;
 do
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2626.3396)), float(injectionSwitch.y), bool(true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7324.2709), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(5.0)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false, true))))
          return;
        }
       return;
      }
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y)))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), true && (_GLF_IDENTITY(false, (false) && true)))))
      continue;
     break;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       subgroupBarrier();
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), ! (! (bool(_GLF_IDENTITY(bool(false), true && (bool(false))))))))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), min(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) | 0), _GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(30284) : int(6))), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0)) >> _GLF_IDENTITY(0, min(0, 0))))
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
