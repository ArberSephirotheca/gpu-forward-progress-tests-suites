#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 int _f0;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 mat4 _f1;
 mat3 _f2;
 ivec4 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_9 {
 mat4x3 _f0;
 bvec3 _f1;
 vec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_12 {
 float _f0;
 mat4x2 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_11 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 mat4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 mat2x4 _f1;
 _GLF_struct_7 _f2;
} ;

struct _GLF_struct_5 {
 bvec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_3 {
 float _f0;
 uvec2 _f1;
 ivec2 _f2;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 float _f1;
 int _f2;
 ivec4 _f3;
 _GLF_struct_3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 ivec3 _f1;
 ivec3 _f2;
 ivec2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_0 {
 int _f0;
 int _f1;
 uvec4 _f2;
 bvec3 _f3;
 mat4 _f4;
 mat3x2 _f5;
 int _f6;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_13 {
 _GLF_struct_2 _f0;
 _GLF_struct_4 _f1;
 vec4 _f2;
 _GLF_struct_5 _f3;
 _GLF_struct_8 _f4;
 mat3x4 _f5;
 uint subgroup_local_id;
 _GLF_struct_12 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.3)), bool(false))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-2529.5653))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.3)), bool(false))))))), true)))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.3)), bool(false)))))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.3)), bool(false)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.3)), bool(false))))))) && true)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-2529.5653))), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(3.3)), (float(_GLF_FUZZED(3.3))) + determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), bool(false))))))), true)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_2(_GLF_struct_0(1, 1, _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) * uvec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))), bvec3(true), mat4(1.0), mat3x2(1.0), 1), _GLF_struct_1(mat2(1.0), ivec3(1), ivec3(1), ivec2(1), _GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true))))), _GLF_IDENTITY(mat2(1.0), (true ? mat2(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(71.60)), bool(false))), exp(0.0), 0.0, abs(0.0), log(1.0), 1.0)))) : _GLF_FUZZED(mat2(mat4(114.459, -6409.6826, -299.740, -19.96, -4.4, -3003.8749, 2680.1590, 8858.0398, -4.8, -118.193, -341.401, -9.6, _GLF_IDENTITY(-6.1, min(-6.1, -6.1)), 5275.7203, -5.2, 4.1)))))), _GLF_struct_4(uvec3(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), 0u ^ (~ (1u)))))), 1.0, 1, ivec4(1), _GLF_struct_3(1.0, uvec2(1u), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), _GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), max(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), _GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))))))), 1)), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), _GLF_IDENTITY((min(1, 1)), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) | (0 << _GLF_IDENTITY(int(1), int(1))))), 0 ^ ((min(1, 1))))), (true ? _GLF_IDENTITY(0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) | (0 << _GLF_IDENTITY(int(1), int(1))))), 0 ^ ((min(1, 1))))), clamp(0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) | (0 << _GLF_IDENTITY(int(1), int(1))))), 0 ^ ((min(1, 1))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) | (0 << _GLF_IDENTITY(int(1), int(1))))), 0 ^ ((min(1, 1))))), _GLF_IDENTITY(0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) | (0 << _GLF_IDENTITY(int(1), int(1))))), 0 ^ ((min(1, 1))))), (true ? 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) | (min(1, 1)))) | (0 << _GLF_IDENTITY(int(1), int(1))))), 0 ^ ((min(1, 1))))) : _GLF_FUZZED(93967))))) : _GLF_FUZZED(-55358)))) - (0 >> _GLF_IDENTITY(int(3), int(3))))), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1), int(int(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (int(1)) - 0))), min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1))))))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec2(0, 0), ivec2(_GLF_IDENTITY(ivec2(ivec2(0, 0)), (ivec2(ivec2(0, 0))) / ivec2(1, 1)))) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))), 1 * (_GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653))))))) | (_GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(23653)) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (0 ^ 0))), 1))), (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(23653)) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (0 ^ 0))), 1)))) ^ 0)), _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))), int(int(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)))))))))), max(_GLF_IDENTITY(ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))), (_GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653))))) << 0) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(_GLF_IDENTITY(23653, (_GLF_IDENTITY(23653, (23653) | (23653))) >> 0))) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (0 ^ 0))), 1)))), _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)), int(ivec4(1, 0, 0, 1)))))), int(int(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, min(1, 1)), 1)), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, 0 | (23653))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)))))))))), min(ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (true ? min(_GLF_IDENTITY(1, min(1, 1)), 1) : _GLF_FUZZED(19140))), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(23653)) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (_GLF_IDENTITY(min(1, 1), (min(1, 1)) << 0)) | (0 ^ 0))), 1)))), _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))), int(int(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)))))))))), ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (1 | (1 & 1)) * (_GLF_IDENTITY(min(1, 1), int(int(min(1, 1))))))), 1), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(23653)) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (_GLF_IDENTITY(0, 0 | (0)) ^ 0))), 1), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(23653)) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (0 ^ 0))), 1)) * 1)))), _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))), int(int(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)))))))))))), ivec2(0, 0) | (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)), 0 | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)))), _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, min(1, 1)))), 1), (false ? _GLF_FUZZED(_GLF_IDENTITY(23653, ~ (~ (23653)))) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1))))))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(23653), (_GLF_FUZZED(23653)) >> 0), (_GLF_FUZZED(23653)) | (_GLF_FUZZED(23653))) : min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, 1), (min(1, 1)) | (0 ^ 0))), 1)))), _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))), int(int(min(_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), 1), (false ? _GLF_FUZZED(23653) : min(_GLF_IDENTITY(1, min(1, 1)), 1)))), 1)))))))))))))), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(_GLF_IDENTITY(bvec3(true), _GLF_IDENTITY(bvec3(bvec3(bvec3(true))), bvec3(bvec3(bvec3(bvec3(bvec3(true)))))))))), _GLF_IDENTITY(true, ! (! (true))))))), vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_struct_5(bvec2(true), ivec3(1)), _GLF_struct_8(_GLF_struct_6(mat4x2(1.0), mat4(1.0), bvec2(true)), mat2x4(1.0), _GLF_struct_7(mat4x2(1.0))), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), gl_SubgroupInvocationID, _GLF_struct_12(1.0, mat4x2(1.0), _GLF_struct_9(mat4x3(1.0), bvec3(true), vec4(1.0), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) >> 0u), ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) << (34390u & _GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), 0u | (_GLF_FUZZED(subgroup_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u), uint(uvec2((3u), 0u))) / 1u)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))) << 0u, uint(_GLF_IDENTITY(uvec4((_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))) << 0u, 0u, 0u, 0u), ~ (~ (uvec4((_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))) << 0u, 0u, 0u, 0u))))))), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), clamp(uint(7u), _GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (uint(7u)) << 0u)) | (uint(7u))), uint(7u))), uint(7u))), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))) << 0u), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))) / uvec3(1u, 1u, 1u))), uint(uvec2(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, uint(_GLF_IDENTITY(uint(3u), max(uint(3u), _GLF_IDENTITY(uint(3u), ~ (~ (uint(3u))))))))) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))) << 0u), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))) << 0u), ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, min(_GLF_IDENTITY(7u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 7u : _GLF_FUZZED((subgroup_id ^ subgroup_size)))), _GLF_IDENTITY(7u, uint(uvec2(7u, 1u)))))), uint(7u))), uint(_GLF_ONE(1.0, injectionSwitch.y)))) / uvec3(1u, 1u, 1u))), 1u)))), 0u, 0u, 0u))))), clamp(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), (uint(_GLF_IDENTITY(3u, (3u) / 1u))) << 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u) / 1u, min((3u) / 1u, (3u) / 1u)))), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u) / 1u, min((_GLF_IDENTITY(3u, uint(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, clamp(3u, 3u, 3u))) >> 0u))))) / 1u, (3u) / 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u) / 1u, min((3u) / 1u, (3u) / 1u)))), _GLF_IDENTITY(0u, max(0u, 0u)) | (uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u) / 1u, min((3u) / 1u, (3u) / 1u)))))), uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u) / 1u, min((3u) / 1u, (3u) / 1u)))))))), _GLF_IDENTITY(0u ^ (uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (3u) / 1u), 0u | (_GLF_IDENTITY(3u, (3u) / 1u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), uint(uvec3(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))), 1u))) ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))))), 0u, 0u, 0u))))), (uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), ~ (~ (uint(_GLF_IDENTITY(3u, (3u) / 1u))))), 0u ^ (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), (uint(_GLF_IDENTITY(3u, (3u) / 1u))) - 0u)) | 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (0u))) << 0u), 0u, 0u)))))) | (uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(3u, (true ? 3u : _GLF_FUZZED(subgroup_id))), (3u) / 1u)), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, 0u ^ (_GLF_IDENTITY(3u, max(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u) | 0u, ((3u) | 0u) / 1u)), 3u))))) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), 0u, 0u, 0u))))))), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((_GLF_IDENTITY(3u, 0u | (3u))) / 1u, _GLF_IDENTITY(((3u) / 1u) | ((3u) / 1u), clamp(_GLF_IDENTITY(((3u) / 1u) | ((3u) / 1u), (false ? _GLF_FUZZED(4550u) : ((3u) / 1u) | ((3u) / 1u))), ((3u) / 1u) | (_GLF_IDENTITY((3u) / 1u, ((3u) / 1u) | (_GLF_IDENTITY((3u) / 1u, (_GLF_IDENTITY((3u) / 1u, max((3u) / 1u, (3u) / 1u))) * 1u)))), ((3u) / 1u) | ((3u) / 1u)))))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, _GLF_IDENTITY((3u), (false ? _GLF_FUZZED(floatBitsToUint(1085.7946)) : (3u))) / 1u))))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (_GLF_IDENTITY(3u, uint(uint(3u)))) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))))), _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u, 0u))))), uint(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) / 1u)), 0u ^ (uint(_GLF_IDENTITY(3u, (3u) / 1u)))), 0u, 0u, 0u)))))))), ~ (~ _GLF_IDENTITY((uint(3u)), 0u | (_GLF_IDENTITY((uint(3u)), 1u * ((uint(3u)))))))))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), (uint(3u)) - 0u))) * (1u)))), _GLF_struct_10(mat4x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-8809.2602)), float(1.0), bool(true)))), mat4(1.0), mat3(1.0), ivec4(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) ^ 0))))), mat4x2(1.0)), _GLF_struct_11(_GLF_IDENTITY(1, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), clamp(min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0 * (injectionSwitch.x), max(1.0 * (injectionSwitch.x), 1.0 * (injectionSwitch.x)))), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED(-698.156)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)))) * _GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((_GLF_IDENTITY(17.70 * -8.4, min(17.70 * -8.4, 17.70 * -8.4))))), bool(false)))) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-96.06)))) - 0.0), float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-96.06)))) - 0.0), 0.0, 0.0, length(0.0), sqrt(0.0), sqrt(1.0))))))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)), cos(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))) * (_GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)), max(mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)))))))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), min(min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x))))), float(_GLF_FUZZED((17.70 * -8.4))), bool(false)))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))))), min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))), float(_GLF_FUZZED((17.70 * -8.4))), bool(_GLF_IDENTITY(false, (false) && true))))) * 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ (810.634 / -6871.4814)))), float(injectionSwitch.x), bool(true))))))))))))) > injectionSwitch.y)) ? _GLF_FUZZED(max(bitfieldInsert(-99480, 10888, -71841, -973), -85776)) : _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))))), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY((1.0) / 1.0, float(float((1.0) / 1.0))), clamp(_GLF_IDENTITY((1.0) / 1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(983.786), min(_GLF_FUZZED(983.786), _GLF_IDENTITY(_GLF_FUZZED(983.786), float(mat3x4(_GLF_FUZZED(983.786), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0)))))), float((1.0) / 1.0), bool(true))), (1.0) / 1.0, (1.0) / 1.0))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), true && (bool(bvec4(false, false, false, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, true, true)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), false))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false)))))), true)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false))), true)))))), false)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, _GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false))), true)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false), false))), true, false))), true)))))), false)))))), false, false)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), true, false))), false, false)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bvec3(bool(false), true, false), bvec3(bvec3(bvec3(bool(false), true, false)))))))), bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false)))))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false)))))), true, true))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, _GLF_IDENTITY(true, (true) || false), false)))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), ! (! (bool(bvec3(false, true, false)))))), _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), false)))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), true), false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))), (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))) < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))) : _GLF_FUZZED(subgroup_id), clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))) : _GLF_FUZZED(subgroup_id), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))) : _GLF_FUZZED(subgroup_id), max(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))) : _GLF_FUZZED(subgroup_id), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))) : _GLF_FUZZED(subgroup_id))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u))) : _GLF_FUZZED(subgroup_id)))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), false || (! ((! (false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_struct_replacement_13.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_struct_replacement_13.subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)), ! (! (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) || false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y)))), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) || false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true, false)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec2((false) || false, true))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))) && true))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), bool(bvec3((false), true, true))), false, false, true))) || false))))))))) || false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false)))), (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false)), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), true && (bool(false)))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false)), false, false)))))) && true))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(false, (false) || false))), ! (! (true && (bool(_GLF_IDENTITY(false, (false) || false)))))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false)))), (bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))) || false)), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))) || false))), ! (! (false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), true && (bool(false))))), ! (! ((bool(_GLF_IDENTITY(bool(false), true && (bool(_GLF_IDENTITY(false, (false) || false))))))))) || false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(false, _GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y))))) || false)))))))))) && true))), true, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))) * 1.0)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))) || false))))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) - 0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false, ((_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false) || false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
