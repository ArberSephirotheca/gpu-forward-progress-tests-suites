#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec2 GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base;
 uvec4 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-77.08 * -61.00))), float(1.0), bool(true))), injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > injectionSwitch.y))) && true))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true)), bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true))), ! (! (bool((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true))))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(178.686), _GLF_FUZZED(4.2)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true)), bool(_GLF_IDENTITY(bool((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true))), ! (! (bool((! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) && true)))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y = subgroup_size;
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0)), clamp(_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0)), (_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0))) | (_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0)), (_GLF_IDENTITY(0, (0) + 0) ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816)))), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-62816))))) + 0))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bool(false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), max(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (vec3(injectionSwitch.x, 1.0, 0.0)) * vec3(1.0, 1.0, 1.0)), vec3(injectionSwitch.x, 1.0, 0.0))))) > injectionSwitch.y))))))) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false), true, false)))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(2878.0537)), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(max(gl_WorkGroupSize.x, gl_WorkGroupSize.x), _GLF_IDENTITY((max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)) + 0u, uint(_GLF_IDENTITY(uvec4((max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)) + 0u, 0u, 1u, 1u), min(uvec4((max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)) + 0u, 0u, 1u, 1u), uvec4((max(gl_WorkGroupSize.x, gl_WorkGroupSize.x)) + 0u, 0u, 1u, 1u)))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true))))))), (bool(bool(! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) && true)))))))) || false)))) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))) && true), (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
  }
 GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.w = workgroup_id;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(53.54), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-5.3)), bool(false))), _GLF_FUZZED(94.52)), bvec2(true, false))).y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))))), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)), false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), false)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), false, true)))))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), false, true))))))))))), false))), (! (bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(false, (false) || false), true)), false)))) && true))))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true), true, false))))) || false)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 ^ 1), (_GLF_IDENTITY((0 ^ 1), int(ivec4((0 ^ 1), 1, 0, 1)))) - 0)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(false, false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(9087.3008), _GLF_FUZZED(-820.309)), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(true, true)))).x < injectionSwitch.y))))) || false))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.w;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(mat3x2(558.864, -291.113, 8.3, 636.197, -930.561, 1750.0685)) : mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6077.1680))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0), (mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(abs(exp(0.0)), float(mat3x4(abs(exp(0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), sqrt(0.0), 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0))), 1.0, sqrt(0.0), 0.0, 0.0)))), mix(vec2(_GLF_FUZZED(9421.1856), _GLF_FUZZED(-687.975)), vec2((vec2(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(mat3x2(558.864, -291.113, 8.3, 636.197, -930.561, 1750.0685)) : mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6077.1680))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0), (mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(abs(exp(0.0)), float(mat3x4(abs(exp(0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), sqrt(0.0), 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0))), 1.0, sqrt(0.0), 0.0, 0.0)))))[0], _GLF_IDENTITY((vec2(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(mat3x2(558.864, -291.113, 8.3, 636.197, -930.561, 1750.0685)) : mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6077.1680))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0), (mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(abs(exp(0.0)), float(mat3x4(abs(exp(0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), sqrt(0.0), 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0))), 1.0, sqrt(0.0), 0.0, 0.0)))))[1], (true ? (vec2(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)), (false ? _GLF_FUZZED(mat3x2(558.864, -291.113, 8.3, 636.197, -930.561, 1750.0685)) : mat3x2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, sqrt(0.0)))))), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(6077.1680))))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0), (mat2x3(1.0, exp(0.0), 1.0, 0.0, 1.0, 1.0)) + mat2x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))), dot(vec4(0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, log(1.0), 0.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(abs(exp(0.0)), float(mat3x4(abs(exp(0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, cos(0.0), sqrt(0.0), 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0))), 1.0, sqrt(0.0), 0.0, 0.0)))))[1] : _GLF_FUZZED(86.02)))), bvec2(true, true)))).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -5853.1707))), float(injectionSwitch.y), bool(true)))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y = workgroup_base;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
              barrier();
            }
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.x * _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, (uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(floatBitsToUint(-9.1)))), 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))) << _GLF_IDENTITY(_GLF_IDENTITY(uvec4(7u), uvec4(7u)), (_GLF_IDENTITY(uvec4(7u), uvec4(7u))) ^ uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[_GLF_IDENTITY(1, 0 ^ (1))], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[_GLF_IDENTITY(_GLF_IDENTITY(2, 1 * (2)), (_GLF_IDENTITY(2, 1 * (2))) ^ 0)], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[3])))).y, max(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, (uvec4(0u, 0u, 0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec4(7u), (uvec4(7u)) | (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(4u), uvec4(4u)))), _GLF_IDENTITY(uvec4(7u), (uvec4(7u)) / uvec4(1u, 1u, 1u, 1u)))) | (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(uvec4((++ GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base), 126402u, workgroup_id)) : _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id) << uvec4(0u, 0u, 0u, 0u))))[_GLF_IDENTITY(0, 0 ^ (0))], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[2], _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, min(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id))[3])))).y, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, (uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, (0u) / 1u)) << _GLF_IDENTITY(uvec4(7u), uvec4(7u))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]) << 0u), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]) ^ 0u))), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[3])), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]) << 0u), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]) ^ 0u))), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[3])))))), ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, (uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) / 1u, 1u * (_GLF_IDENTITY((0u) / 1u, uint(uvec2((0u) / 1u, 0u))))))) << _GLF_IDENTITY(uvec4(_GLF_IDENTITY(7u, min(7u, 7u))), uvec4(7u))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], _GLF_IDENTITY((GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]), ((GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0])) / 1u) << 0u), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[_GLF_IDENTITY(0, (0) + (0 >> _GLF_IDENTITY(int(6), int(6))))]) ^ 0u))), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[3])), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], clamp(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]) << 0u), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0], (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[0]) ^ 0u))), GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[1], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[2], GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id[3]))))))))).y));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true))))))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y)))) || false, ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false) || _GLF_IDENTITY(false, false || (false))))) && true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)).y, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)) + subgroup_base + _GLF_IDENTITY(subgroup_local_id, ~ (~ (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))))), clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) + subgroup_local_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, min(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, clamp(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, max(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y))))), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) / 1u))) + subgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) + subgroup_local_id), clamp(uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u)), uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, uint(uvec4(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) - 0u) + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) - 0u) + subgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) - 0u) + subgroup_base) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) - 0u) + subgroup_base))) / 1u), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) + subgroup_local_id), uint(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)) + subgroup_base, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-8.6)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))))), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)) + subgroup_base, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-8.6)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))))), ~ (~ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)) + subgroup_base, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base)), 1u, 0u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-8.6)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))))))))) << 0u)) + subgroup_local_id)))))) | _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base + subgroup_local_id), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u)) - uvec2(0u, 0u))) / uvec2(1u, 1u)))))))), (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u)))))))) | (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u))))))))))) + subgroup_base + subgroup_local_id, uint(uvec3(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, uint(_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), _GLF_IDENTITY((_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)), 0u)) - uvec2(0u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)), 0u)) - uvec2(0u, 0u))), clamp((_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)), 0u)) - uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)), 0u)) - uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u), (uvec2(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)), 0u)) - uvec2(0u, 0u)))))) | uvec2(0u, 0u)) / uvec2(1u, 1u)))))))), (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u)))))))) | (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, uint(uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, 0u))))))))))) + subgroup_base + subgroup_local_id, 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), _GLF_IDENTITY(1.0, min(1.0, 1.0)))), injectionSwitch.y)))))))))), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, _GLF_IDENTITY(uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, 0u, 0u)), ~ (~ (uvec2(uvec4(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, 0u, 0u)))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base), clamp(clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base), clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base), clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)))), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))))), uvec2(0u, 0u) ^ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (true ? _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(0u, 0u) | (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base)) : _GLF_FUZZED(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))) | (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, clamp(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, uvec2(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[0], GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base[1])), GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base))))))))).y, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base) + uvec2(0u, 0u)).y, GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y)) + subgroup_base + _GLF_IDENTITY(subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id)), ~ (~ (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base + subgroup_local_id)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((- 53.39))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x = _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ~ (~ (_GLF_IDENTITY((virtual_gid), 0u | ((virtual_gid)))))) - 0u);
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true), true, false)), bool(bool(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true), true, false))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(1), int(1)), min(0 >> _GLF_IDENTITY(int(1), int(1)), 0 >> _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(findMSB(-98584)) : int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))) || false, true && ((! ((injectionSwitch.x > injectionSwitch.y))) || false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 & 18555); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.z = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x, (GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.z = GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.x) ^ 0u);
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, (_injected_loop_counter != 0) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), false)))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (injectionSwitch.x < injectionSwitch.y)) && (false))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, ! (! (false))), false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false)))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + subgroup_base, (GLF_merged2_0_1_11_1_1_14virtual_gidworkgroup_base.y + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((subgroup_base) | (_GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), ~ (~ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(subgroup_size))))), (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(usubBorrow(workgroup_id, num_workgroup, virtual_gid)))) << _GLF_IDENTITY(uint(2u), uint(2u))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)))))))))))), (false ? _GLF_FUZZED(workgroup_size) : (subgroup_base) | (_GLF_IDENTITY(subgroup_base, (subgroup_base) >> (_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) << 0u), ~ (~ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (true ? 2u : _GLF_FUZZED(subgroup_size))))), (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(usubBorrow(workgroup_id, num_workgroup, virtual_gid)))) << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, 0u ^ (2u))) >> 0u)), uint(2u))) | (_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(0u, 0u + (0u)) << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, ~ (~ (2u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)))), 0u ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (2u) | (2u)))), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)))))), _GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)))), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u))))) | (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(2u), uint(2u)), clamp(0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)), 0u << _GLF_IDENTITY(uint(2u), uint(2u)))))))))))))))))))) * 1u) + (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y, _GLF_IDENTITY(1u, 0u ^ (1u)) * (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_FUZZED(subgroup_id)))) : (subgroup_local_id + 1) % GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.y)))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))
  {
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), (false ? _GLF_FUZZED(-52872) : _GLF_IDENTITY(4, 1 * (4)))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.z], _GLF_IDENTITY(4, _GLF_IDENTITY(1, int(ivec2(1, 0))) * _GLF_IDENTITY((_GLF_IDENTITY(4, (4) | 0)), clamp((_GLF_IDENTITY(4, (4) | 0)), (_GLF_IDENTITY(4, (4) | 0)), (_GLF_IDENTITY(4, (4) | 0))))), 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2), clamp((2), _GLF_IDENTITY((2), ~ (~ ((2)))), (2))) >> 0));
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), (bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))) && true)))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), (mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y)))) && true), false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       atomicStore(checker[GLF_merged4_0_1_11_1_1_13_2_1_11_3_1_12subgroup_idsubgroup_sizevirtual_gidworkgroup_id.z], read, 4, 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(4), int(4)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(-13600)))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
