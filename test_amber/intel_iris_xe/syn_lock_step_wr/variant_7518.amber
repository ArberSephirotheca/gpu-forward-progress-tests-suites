#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) >> 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1 & 1, (_GLF_IDENTITY(1 & 1, ~ (~ (1 & 1)))) | 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED((_injected_loop_counter | 65236)) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), false || (false || (_GLF_IDENTITY(false, false || (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           do
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (uvec3(gl_WorkGroupSize))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), (_GLF_IDENTITY(~ (gl_WorkGroupSize), ~ (~ (~ _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) ^ uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * exp(0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0)))) - 0.0))))))) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(0u), _GLF_IDENTITY(uvec3(0u), (uvec3(0u)) | (uvec3(0u))))))), uvec3(uvec4(~ (~ (gl_WorkGroupSize)), 0u)))), ~ (~ (gl_WorkGroupSize))), gl_WorkGroupSize)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) ? _GLF_FUZZED(subgroup_id) : workgroup_base + subgroup_base)), (false ? _GLF_IDENTITY(_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))) | (_GLF_IDENTITY(_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))) | 0u))) : workgroup_base + subgroup_base)) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))) && true)))) ? _GLF_FUZZED(subgroup_id) : workgroup_base + subgroup_base)), (false ? _GLF_IDENTITY(_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))) | (_GLF_IDENTITY(_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u))), (_GLF_FUZZED((subgroup_size + _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))) | 0u))) : workgroup_base + subgroup_base)) + subgroup_local_id) + _GLF_IDENTITY(0u, 1u * (0u)));
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) % subgroup_size), 0u ^ (((subgroup_local_id + 1) % subgroup_size))), uint(uvec3(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) % subgroup_size), 0u ^ (((subgroup_local_id + 1) % subgroup_size))), 0u, 0u))))), (((subgroup_local_id + 1) % subgroup_size)) - 0u);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0)))) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), (int(1)) + 0)))), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | (1))))), (int(1)) + 0)))), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0)), max(_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 1 * (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(1), int(1))))) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (int(1)) + 0)), (int(_GLF_IDENTITY(int(1), (int(1)) + 0))) - 0))), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0)), max((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 1 * (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(1), int(1))))) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (int(1)) + 0)), (int(_GLF_IDENTITY(int(1), (int(1)) + 0))) - 0))), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), min(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 1 * (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(1), int(1))))) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(1), (int(1)) + 0)), (int(_GLF_IDENTITY(int(1), (int(1)) + 0))) - 0))), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY(int(1), int(1)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(1), int(1))))) << 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), ~ (~ (int(1)))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), int(int(_GLF_IDENTITY(int(1), (int(1)) + 0)))), int(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1)))), _GLF_IDENTITY(int(1), int(1))))) << 0)))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(_GLF_IDENTITY(5, _GLF_IDENTITY((5) | (5), clamp((5) | (5), (5) | (5), (5) | (5)))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_IDENTITY(5, (5) | (5)) : _GLF_FUZZED(_injected_loop_counter)))) ^ 0)), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(7.8) : _GLF_ZERO(0.0, injectionSwitch.x)))) | (5))), int(5), _GLF_IDENTITY(int(5), int(int(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), max(int(5), int(5))))))))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_injected_loop_counter ++), ~ (~ (_GLF_IDENTITY((_injected_loop_counter ++), (false ? _GLF_FUZZED(-23695) : (_injected_loop_counter ++)))))), ((_injected_loop_counter ++)) - 0)))) / 1))
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(8), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(8), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))))), 0 + (~ (_GLF_IDENTITY(int(8), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))))))), ~ (_GLF_IDENTITY(int(8), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), clamp(min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))), min(_GLF_IDENTITY(int(8), 0 ^ (int(8))), int(8)))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))) != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / (_GLF_IDENTITY(1u ^ _GLF_IDENTITY(0u, (0u) - 0u), 0u | (1u ^ _GLF_IDENTITY(0u, (0u) - 0u))))), _GLF_IDENTITY(4, (4) >> 0), 64, 2), uint(uvec2(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / _GLF_IDENTITY((1u ^ 0u), clamp((1u ^ 0u), (1u ^ 0u), (1u ^ 0u)))), 4, 64, 2), 0u)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, (0) / int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 | (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(6)) << 0), 0, 0, 1)))), ~ (~ (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0)), ~ (~ (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ (_GLF_IDENTITY((6), ((6)) >> (0 | 0)) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, 0 | (5))), (int(5)) + 0), int(5))), 0)), _GLF_IDENTITY(int(ivec2(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(int(5), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0)), 0)), _GLF_IDENTITY(int(ivec4(int(ivec2(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0)), (int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0))) | 0)) ^ 0), 0)), 1, 1, 1)), (int(ivec4(int(ivec2(_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0)), (_GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0)), (int(ivec3(_GLF_IDENTITY(6, _GLF_IDENTITY((6) * 1, ~ (~ ((6) * 1)))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, ~ (_GLF_IDENTITY(~ (5), clamp(~ (5), ~ (5), ~ (5)))))), (int(5)) / 1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) + 0), int(5))), 0))) | 0)) ^ 0), 0)), 1, 1, 1))) / 1))))))))))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1)))))))))), min((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, int(ivec2(1, 1))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), _GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter)))), 0, 0, 1)))), ~ (~ (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0)))))), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(_GLF_IDENTITY(51205, min(51205, 51205))))) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) - 0), 1, 1), clamp(ivec3(_GLF_IDENTITY(1, (1) - 0), 1, 1), ivec3(_GLF_IDENTITY(1, (1) - 0), 1, 1), ivec3(_GLF_IDENTITY(1, (1) - 0), 1, 1)))))) | (1)))))))))))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), (int(6)) << 0), 0, 0, 1)))), ~ (~ (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))))), (true ? ~ (int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(_GLF_IDENTITY(6, 1 * (6)), max(_GLF_IDENTITY(6, 1 * (6)), _GLF_IDENTITY(6, 1 * (6)))))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))))) : _GLF_FUZZED(_injected_loop_counter))), (~ (int(ivec4(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(_GLF_IDENTITY(6, 1 * (6)))), (_GLF_IDENTITY((int(_GLF_IDENTITY(6, 1 * (6)))), clamp((int(_GLF_IDENTITY(6, 1 * (6)))), (int(_GLF_IDENTITY(6, 1 * (6)))), (int(_GLF_IDENTITY(6, 1 * (6))))))) << 0) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, _GLF_IDENTITY(bitCount(51205), (bitCount(51205)) | (_GLF_IDENTITY(bitCount(51205), (true ? bitCount(51205) : _GLF_FUZZED(_injected_loop_counter))))))) : 1)))))) >> 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, 1 * (6))), 0 | (int(_GLF_IDENTITY(6, 1 * (6)))))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))))), max(_GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : _GLF_IDENTITY(1, (1) - 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, _GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(1, (_GLF_IDENTITY(false, false || (false)) ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))))), (_GLF_IDENTITY(int(6), int(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1)))))) >> 0))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec3(bvec3((false), true, true)))))) || false), true, true))) ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(_GLF_IDENTITY(51205, min(_GLF_IDENTITY(51205, (_GLF_IDENTITY(51205, int(ivec4(51205, 0, 0, 1)))) | (51205)), 51205))))) : 1))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(1, (1) >> 0) * (6)))) << 0), 0, _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : _GLF_IDENTITY(1, int(ivec3(1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0)))))), (true ? ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))) : _GLF_FUZZED(ivec4(-54261, -83743, -55501, 47045))))) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), clamp(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))))), (0 | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))))), int(_GLF_IDENTITY(ivec3(int(ivec2(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec3(bvec3((false), true, true)))))) || false), true, true))) ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(_GLF_IDENTITY(51205, min(_GLF_IDENTITY(51205, (_GLF_IDENTITY(51205, int(ivec4(51205, 0, 0, 1)))) | (51205)), 51205))))) : 1))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(1, (1) >> 0) * (6)))) << 0), 0, _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : _GLF_IDENTITY(1, int(ivec3(1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0)))))), (true ? ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))) : _GLF_FUZZED(ivec4(-54261, -83743, -55501, 47045))))) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), clamp(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))))), (0 | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))))), 0, 1), ivec3(0, 0, 0) | (ivec3(int(ivec2(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, true), bvec3(bvec3(bvec3((false), true, true)))))) || false), true, true))) ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(_GLF_IDENTITY(51205, min(_GLF_IDENTITY(51205, (_GLF_IDENTITY(51205, int(ivec4(51205, 0, 0, 1)))) | (51205)), 51205))))) : 1))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, _GLF_IDENTITY(1, (1) >> 0) * (6)))) << 0), 0, _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : _GLF_IDENTITY(1, int(ivec3(1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), 0)))))), (true ? ivec4(_GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 1 * (6)))) << 0), 0, 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(-78956, -73268, bitCount(51205))) : 1))) : _GLF_FUZZED(ivec4(-54261, -83743, -55501, 47045))))) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), clamp(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))))), (0 | _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 0)))))))), 0, 1))))))) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (6) ^ (0 << _GLF_IDENTITY(int(0), int(0)))))) | 0)))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) << 0))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))))))))), 0, 1)), ~ (~ (int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(6, 6, 6), 1 * (_GLF_IDENTITY(clamp(6, 6, 6), (clamp(6, 6, 6)) * (0 ^ 1)))))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), min(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0))))))))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 1 * (~ (_GLF_IDENTITY(int(6), min(int(6), int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6)))))))))))))), 0, 1))))))), clamp((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) << 0))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))))))))), 0, 1)), ~ (~ (int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(6, 6, 6), 1 * (_GLF_IDENTITY(clamp(6, 6, 6), (clamp(6, 6, 6)) * (0 ^ 1)))))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), min(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0))))))))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 1 * (~ (_GLF_IDENTITY(int(6), min(int(6), int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6)))))))))))))), 0, 1))))))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) << 0))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))))))))), 0, 1)), ~ (~ (int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(6, 6, 6), 1 * (_GLF_IDENTITY(clamp(6, 6, 6), (clamp(6, 6, 6)) * (0 ^ 1)))))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), min(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0))))))))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 1 * (~ (_GLF_IDENTITY(int(6), min(int(6), int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6)))))))))))))), 0, 1))))))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), min(int(6), int(6)))), ((_GLF_IDENTITY(int(6), min(int(6), int(6))))) << 0))), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))))))))), 0, 1)), ~ (~ (int(ivec3(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, _GLF_IDENTITY(clamp(6, 6, 6), 1 * (_GLF_IDENTITY(clamp(6, 6, 6), (clamp(6, 6, 6)) * (0 ^ 1)))))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), min(int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0)))), int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, clamp(6, 6, 6))), (~ (_GLF_IDENTITY(6, clamp(6, 6, 6)))) >> 0))))))))), (~ (_GLF_IDENTITY(int(6), min(int(6), int(6))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), clamp(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))))), ~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), min(int(6), int(6)))), 1 * (~ (_GLF_IDENTITY(int(6), min(int(6), int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6)))))))))))))), 0, 1))))))))), _GLF_IDENTITY(1, (1) << 0), _GLF_IDENTITY(1, 0 + (1))))) - 0), int(6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, 1 * (1))) | (int(6))))), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1))), (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1)))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1), int(6))), int(6))), max(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, 0 | (6)))) - 0), int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, (6) + (0 << _GLF_IDENTITY(int(0), int(0)))), 6))))), _GLF_IDENTITY(int(6), 0 | (int(6))))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), clamp(int(_GLF_IDENTITY(6, (6) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) / 1)) + _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), int(2)))) | ((0 << _GLF_IDENTITY(int(2), int(2))))), (true ? _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(2), int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2))))))))) | ((0 << _GLF_IDENTITY(int(2), int(2))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), int(2)))) >> 0), (0 << _GLF_IDENTITY(int(2), int(2))))))), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), _GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), (0) >> 0)))) ^ 0)) - (0 & 38053)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, 0 | (6))), 1 * (~ (_GLF_IDENTITY(6, 0 | (6))))))), _GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-88801) : 6)), 6, 6)), 6)))))), int(6))))), _GLF_IDENTITY(max(min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), int(6)), _GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), max(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0)), _GLF_IDENTITY(int(6), int(6)))), max(max(min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), int(ivec4(int(6), 1, 1, 0))), int(6))), clamp(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, (6) - 0))) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | _GLF_IDENTITY((int(6)), ((int(6))) / (1 ^ 0))))), int(6)), _GLF_IDENTITY(int(6), int(6))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0), max(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0)))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(_injected_loop_counter) : 6))), int(6)))), max(min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6)))), (clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), int(int(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(int(6), 0), max(ivec2(int(6), 0), ivec2(int(6), 0)))))))))))) + 0)), int(6)), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | 0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), (_GLF_IDENTITY(int(6), (int(6)) - 0)) | 0)), _GLF_IDENTITY(int(6), int(6))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(84782))), clamp(int(6), _GLF_IDENTITY(int(6), clamp(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), (int(6)) - 0), int(6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, (0) | 0)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), (int(_GLF_IDENTITY(6, max(6, 6)))) | (int(_GLF_IDENTITY(6, max(6, 6))))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), 0 ^ (int(_GLF_IDENTITY(6, max(6, 6))))))))))), int(6)), _GLF_IDENTITY(int(6), int(6))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter > 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-2.0)), bool(false)))))))))); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) * 1.0) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.5)), bool(false))), min(1.0, 1.0))), 1.0)), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, 1.0, log(1.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), 1.0), vec2(log(1.0), 1.0)), (_GLF_IDENTITY(true ? dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)) : _GLF_FUZZED(-63.76), (true ? dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)) : _GLF_FUZZED(-63.76)) - tan(0.0)))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && _GLF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))))), (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), (_GLF_IDENTITY(true ? dot(vec2(0.0, 1.0), vec2(log(1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(17.04)))) / 1.0))) : _GLF_FUZZED(-63.76), (true ? dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)) : _GLF_FUZZED(-63.76)) - tan(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.7) : 0.0)))))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)), (_GLF_IDENTITY(true ? dot(vec2(0.0, 1.0), vec2(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(656.140)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), 1.0)) : _GLF_FUZZED(-63.76), (true ? dot(vec2(0.0, 1.0), vec2(log(1.0), 1.0)) : _GLF_FUZZED(-63.76)) - tan(0.0)))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), ! (! ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))))))) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))))) && true)) && true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true)), true && (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), false, false, true))))))), true, true))))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))), ! (_GLF_IDENTITY(! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))) && (false)))))), _GLF_IDENTITY(bool(bvec3(! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))) && (false)))))), true, false)), (bool(bvec3(! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))) && (false)))))), true, false))) || false)))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))), ! _GLF_IDENTITY((! (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))))))))))))), true && ((! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, true))))), true && (false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), true, false))))))))))))))))))))))))))
            {
            }
           else
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false)))))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (! (_GLF_IDENTITY(false, (false) || false))))))))))))), false, _GLF_IDENTITY(false, (false) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false))))))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false)))))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (! (_GLF_IDENTITY(false, (false) || false))))))))))))), false, _GLF_IDENTITY(false, (false) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false))))))))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false)))))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (! (_GLF_IDENTITY(false, (false) || false))))))))))))), false, _GLF_IDENTITY(false, (false) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))), false, false))))))))))))), true, true), true)))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   do
    {
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)))], read, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), true)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, max(1, 1)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
