#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))), true))), true, false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), injectionSwitch))) / sqrt(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(475.195))), injectionSwitch.y)))).y))), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-502.374))))))), ! (! (false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))), (_GLF_IDENTITY(false || (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))), ! (! (false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true)))), true)))))), ! _GLF_IDENTITY((! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(acos(vec2(-840.739, -4.8))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(870.495)), bool(false))), max(injectionSwitch.y, injectionSwitch.y)))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), false))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(acos(vec2(-840.739, -4.8))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(870.495)), bool(false))), max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-26.94)), float((injectionSwitch.y)), bool(true))), _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))))) * 1.0))), false)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(-26.94)), float((injectionSwitch.y)), bool(true))), _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), (injectionSwitch.y))))) * 1.0))), false))) && true))))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false)))))))), false || (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false))))))))))), ((! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sqrt(0.0), 1.0, 1.0, 1.0))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), bool(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))))))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false)))))))), false || (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false))))))))))), ((! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sqrt(0.0), 1.0, 1.0, 1.0))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), bool(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))))))) || false)), bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false)))))))), false || (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false))))), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, false)))))) || false))))))))))), ((! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, sqrt(0.0), 1.0, 1.0, 1.0))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! ((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), bool(bool(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))))))) || false))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, false, true)))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.z = subgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false)))))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944)))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944)))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))), clamp((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))), min((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, _GLF_IDENTITY(-8285.9944, min(-8285.9944, -8285.9944))))), (true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))))), (true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944)))))).x > injectionSwitch.y)) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))), vec2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))), mix(vec2((vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[0], (vec2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), vec2(_GLF_FUZZED(-8781.5914), _GLF_FUZZED(222.200)), bvec2(false, false))))).x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))), vec2(mat2x3((true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944))), 0.0, 0.0, 0.0, 0.0)))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(7.4, -8285.9944)))).x > injectionSwitch.y)) && true))), false)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y = subgroup_size;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.y = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.2) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))), float(_GLF_FUZZED(-47.62)), bool(false))) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, true && (false))), bool(bvec2(bool(false), true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || ((false)))))))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-81.38)), float(1.0), bool(true))))), injectionSwitch.y), _GLF_IDENTITY(round(length(normalize(vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), mix(float(_GLF_FUZZED(-92.50)), float(round(length(normalize(vec2(1.0, 1.0))))), bool(true))), 1.0, 1.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.7) : 0.0)), 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)))))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)))))).y), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 0.0, 1.0, 0.0, 0.0, cos(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 1.0, 0.0))))) && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-8552.1398)))), vec2(0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uintBitsToFloat(bitfieldExtract(num_workgroup, -29181, 95378))) : 1.0)))), dot(vec2(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(5.2), mix(float(_GLF_FUZZED(vec3(0.5, 2804.1484, 672.677).y)), float(_GLF_FUZZED(5.2)), bool(true))) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3054.0359)), float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, 1.0 * (0.0)) : _GLF_FUZZED(8713.6747))), 0.0 + (0.0))), bool(true)))))), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(-5185.3554, 8.2))))) / vec2(1.0, 1.0))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), _GLF_IDENTITY(tan(0.0), (tan(0.0)) / 1.0))), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0)))), 1.0, 1.0)))))).y)))))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), mix(float(_GLF_FUZZED(-92.50)), float(round(length(normalize(vec2(1.0, 1.0))))), bool(true))), 1.0, 1.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-384.707)), float(1.0), bool(true)))))), 1.0, tan(0.0), 0.0, length(vec3(0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 0.0))), 0.0)), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 0.0, 1.0)))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)))))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, abs(1.0), 1.0)))), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), _GLF_IDENTITY(0.0, (0.0) * 1.0), length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) - vec2(_GLF_IDENTITY(0.0, float(mat4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0, tan(0.0), 1.0, sqrt(0.0), 1.0, abs(1.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, exp(0.0))), dot(vec4(sin(0.0), 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, exp(0.0)))), 1.0))), 0.0))))), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0)))))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uintBitsToFloat(bitfieldExtract(num_workgroup, -29181, 95378))) : 1.0)))), dot(vec2(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5.2) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3054.0359)), float(_GLF_IDENTITY(0.0, 0.0 + (0.0))), bool(true)))))), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0), mat3x4(mat3x4(mat3x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, tan(0.0), 0.0, length(vec3(0.0, 0.0, 0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(round(length(normalize(vec2(1.0, 1.0)))), mix(float(_GLF_FUZZED(-4844.7655)), float(round(length(normalize(vec2(1.0, 1.0))))), bool(true))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))))).y))))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), ! (! ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))), clamp(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) >> 0u) * workgroup_id, (workgroup_size * workgroup_id) | 0u), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) >> 0u) * workgroup_id, (workgroup_size * workgroup_id) | 0u))), (false ? _GLF_FUZZED(atomicMin(subgroup_size, subgroup_id)) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) >> 0u, (false ? _GLF_FUZZED(workgroup_id) : (_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u)) >> 0u))) * workgroup_id, (workgroup_size * workgroup_id) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(_GLF_IDENTITY(uvec2(workgroup_size * workgroup_id, 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, ~ (_GLF_IDENTITY(~ (workgroup_size), (~ (workgroup_size)) | (~ (workgroup_size))))), _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u)) | 0u), _GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(workgroup_id))))) * workgroup_id, 1u), (_GLF_IDENTITY(uvec2(workgroup_size * workgroup_id, 1u), (uvec2(_GLF_IDENTITY(workgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)))).y)) ? workgroup_size : _GLF_FUZZED(atomicExchange(subgroup_local_id, 77529u)))) * workgroup_id, 1u)) >> uvec2(0u, 0u))) >> uvec2(0u, 0u))) | (uvec2(workgroup_size * workgroup_id, 1u))))), (workgroup_size * workgroup_id) * 1u)))));
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7763.8875) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (injectionSwitch.x) + 0.0), injectionSwitch.x))))) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid)), min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid) + (uvec4(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), 0u | (uint(uint(0u))))), ~ (~ (0u))), 0u)))) | 0u), 0u) ^ uvec4(0u, 0u, 0u, 0u))), uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid, uvec4(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) + 0u)) * 1u), 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid, uvec4(_GLF_IDENTITY(0u, 0u + (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, 0u + (0u)), 0u)))), 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid))) << uvec4(0u, 0u, 0u, 0u)))).z * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_base, uint(_GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + _GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base)), 0u, 1u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-63.17, (-63.17) * _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), min(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-43.75)))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))), float(0.0), bool(_GLF_IDENTITY(true, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))))), true, false, true))), (injectionSwitch.x < injectionSwitch.y)) && (true))))), injectionSwitch.x))), (uvec4(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_base, 0u, 1u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-63.17, (-63.17) * _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0))))), min(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))))))), float(0.0), bool(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))), injectionSwitch.x)))) ^ (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(7u), uvec4(7u))))))) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_base)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.w = virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec3((false), true, false)))) || false)))) && true), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.z = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.w;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_base + ((subgroup_local_id + 1) % GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.y);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) || false)))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), true, false, true)))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x = next_virtual_gid;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.x = GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_11next_virtual_gidnum_workgroupsubgroup_idvirtual_gid.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bvec2(_GLF_IDENTITY(true, (true) && true), true))), true)), (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, (true) && true), true))) && true)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(250.180, -7679.6212)))))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(250.180, -7679.6212)))))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(250.180, -7679.6212)))))).x > injectionSwitch.y) || false)) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base, uvec4(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (true ? _GLF_IDENTITY((~ (0u)), (false ? _GLF_FUZZED(17451u) : (~ (0u)))) : _GLF_FUZZED(virtual_gid)))), 0u)), 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base)).z], _GLF_IDENTITY(4, (4) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 2);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.x], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y)))), false))))))) || _GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))) || _GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), bool(bvec2(false, true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY(true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))))), false || ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bvec2(_GLF_DEAD(false), false)))))))), true && (true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))))))), false || _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), false))))))))))))), bool(bvec4(((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), false))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_DEAD(false), false), true, true)), false))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, false || (true)) ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-4745.3473))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(checker[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_14next_virtual_gidsubgroup_sizevirtual_gidworkgroup_base.z], read, 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) || false))) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.6)), float(_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 0.0)))), _GLF_IDENTITY(bool(true), (bool(true)) && true)))), float(_GLF_FUZZED(44.16)), bool(false))) < injectionSwitch.y) || false))), false, false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
