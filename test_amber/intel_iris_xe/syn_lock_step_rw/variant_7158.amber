#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) && true))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, true && (false)), true, false)))))))) || false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0)) ^ 0))
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-19677), (_GLF_FUZZED(-19677)) * 1) : _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) > 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) ^ 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(int(subgroup_size)))))))) ^ 0)) | _GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ 0), (_GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) | ((0 ^ 0)))) | ((0 ^ 0)))) | (_GLF_IDENTITY((0 ^ 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0)))), int(ivec3(_GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0)))), 0, (0 ^ 1))))))))), 0 ^ ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), 0 ^ (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))) | (_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(66516) : int(1))))) : _GLF_FUZZED(int(subgroup_size)))))))) ^ 0)) | (0 ^ 0))))); _injected_loop_counter --)
        {
         barrier();
        }
       for(int _injected_loop_counter = (-48938 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec4(false || (_GLF_IDENTITY(false, false || (false))), false, false, false))), true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) + 0.0))).y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
        }
      }
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_WRAPPED_IF_FALSE(false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)))))))
          barrier();
        }
       else
        {
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false))), true, true, false)))))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * subgroup_size)));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(1u * (uint(workgroup_base)), 0u ^ (1u * (uint(workgroup_base))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), (true ? (uint(workgroup_base)) : _GLF_FUZZED(subgroup_base)))))), max(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))), max(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(1u, (1u) ^ 0u) * (uint(workgroup_base))), _GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), min(_GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_base), (0u & 130452u) | (uint(workgroup_base)))), ((uint(workgroup_base))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base)))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u), ((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)) >> 0u))), uint(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))))))) : _GLF_FUZZED(subgroup_local_id), min(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), (true ? (uint(workgroup_base)) : _GLF_FUZZED(subgroup_base)))))), max(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))), max(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(1u, (1u) ^ 0u) * (uint(workgroup_base))), _GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), min(_GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_base), (0u & 130452u) | (uint(workgroup_base)))), ((uint(workgroup_base))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base)))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u), ((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)) >> 0u))), uint(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))))))) : _GLF_FUZZED(subgroup_local_id), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), (true ? (uint(workgroup_base)) : _GLF_FUZZED(subgroup_base)))))), max(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))), max(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(1u, (1u) ^ 0u) * (uint(workgroup_base))), _GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), min(_GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_base), (0u & 130452u) | (uint(workgroup_base)))), ((uint(workgroup_base))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base)))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u), ((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)) >> 0u))), uint(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))))))) : _GLF_FUZZED(subgroup_local_id)) ^ 0u), true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), (true ? (uint(workgroup_base)) : _GLF_FUZZED(subgroup_base)))))), max(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))), max(_GLF_IDENTITY(uint(workgroup_base), _GLF_IDENTITY(1u, (1u) ^ 0u) * (uint(workgroup_base))), _GLF_IDENTITY(uint(workgroup_base), 1u * _GLF_IDENTITY((uint(workgroup_base)), min(_GLF_IDENTITY((_GLF_IDENTITY(uint(workgroup_base), (0u & 130452u) | (uint(workgroup_base)))), ((uint(workgroup_base))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base)))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((uint(workgroup_base)), 0u + ((uint(workgroup_base))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)))), _GLF_IDENTITY((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u), ((_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u)), (uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))), 1u * (min(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) * 1u, min((workgroup_base) * 1u, (workgroup_base) * 1u))), _GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), 0u))))))) + (uint(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1u)) >> 0u))), uint(_GLF_IDENTITY(uint(workgroup_base), 1u * (uint(workgroup_base))))))) : _GLF_FUZZED(subgroup_local_id))))), workgroup_base)) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || false), false, false), false)))))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), false || (! (_injected_loop_counter != 1))))))), (true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), false || (! (_injected_loop_counter != 1))))))), ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec4(_injected_loop_counter != 1, true, false, false))), ! (_GLF_IDENTITY(! (_injected_loop_counter != 1), false || (! (_injected_loop_counter != 1)))))))) || false)) && true)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, (true) && true)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), 0 + (1 << _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-39020 & 0)); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || false))
                      barrier();
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-56.45) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0, 1.0))), injectionSwitch)).y))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false, false)))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))))))))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec3(bool(bool(false)), false, true)), (bool(bvec3(bool(bool(false)), false, true))) || false)))))))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id)) | (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id)))) << 0u))) % subgroup_size) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u)))) | 0u)) ^ 0u) : _GLF_FUZZED(num_workgroup))))), (false ? _GLF_FUZZED(subgroup_size) : (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u)))) | 0u)) ^ 0u) : _GLF_FUZZED(num_workgroup))))))), ((_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id), (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id)) | (true ? (subgroup_local_id + 1) : _GLF_FUZZED(subgroup_local_id)))) << 0u))) % subgroup_size) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u)))) | 0u)) ^ 0u) : _GLF_FUZZED(num_workgroup))))), (false ? _GLF_FUZZED(subgroup_size) : (0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u))), (_GLF_IDENTITY(uint(8u), clamp(uint(8u), uint(8u), uint(8u)))) | 0u)) ^ 0u) : _GLF_FUZZED(num_workgroup)))))))) ^ 0u)));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ (~ (_GLF_IDENTITY(uint(1), (uint(1)) << 0u)))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(97809) : 4)), max(4, 4)), ~ (~ (_GLF_IDENTITY(4, max(4, 4))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), round(length(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (normalize(_GLF_ONE(1.0, injectionSwitch.y))) + 0.0), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (normalize(_GLF_ONE(1.0, injectionSwitch.y))) + 0.0), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (normalize(_GLF_ONE(1.0, injectionSwitch.y))) + 0.0), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))), (true ? _GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (normalize(_GLF_ONE(1.0, injectionSwitch.y))) + 0.0), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED(-9674.0657))), _GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (normalize(_GLF_ONE(1.0, injectionSwitch.y))) + 0.0), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1.0, 1.0, 1.0), _GLF_IDENTITY((mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), ((mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(234.572), _GLF_FUZZED(-329.479)), bvec2(false, false))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-68.56)))), 1.0, sqrt(0.0), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 1.0)) - mat3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-54.92)), bool(false))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((3.6))))) * 1.0), 0.0, 0.0, 0.0, 0.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).x))), clamp((0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), clamp(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), ((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))) + 0.0), _GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), max((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)))), 0.0, 1.0, 0.0), (mat2(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), max((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)))), 0.0, 1.0, 0.0)) * mat2(1.0)))), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))))), normalize(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9888.6165) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))), min(round(length(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), clamp(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), ((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))) + 0.0), _GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), max((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)))), 0.0, 1.0, 0.0), (mat2(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), max((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)))), 0.0, 1.0, 0.0)) * mat2(1.0)))), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))))), normalize(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9888.6165) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))), round(length(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), clamp(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), ((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))) + 0.0), _GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), max((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)))), 0.0, 1.0, 0.0), (mat2(_GLF_IDENTITY((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), max((true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1)))), 0.0, 1.0, 0.0)) * mat2(1.0)))), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))))), normalize(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9888.6165) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))))))), 1.0, 1.0, 1.0), (mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED((-3917.7085 + 0.3))), bool(false)))), round(length(normalize(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))), 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x))), (0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(290.322) : 0.0))), round(length(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), min(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))))), 1.0, 1.0, 1.0), (mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x))), (0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), round(length(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), max(normalize(_GLF_ONE(1.0, injectionSwitch.y)), normalize(_GLF_ONE(1.0, injectionSwitch.y))))) + sin(0.0)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y))), min(_GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), max(normalize(_GLF_ONE(1.0, injectionSwitch.y)), normalize(_GLF_ONE(1.0, injectionSwitch.y))))) + sin(0.0)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y))), mix(float(_GLF_FUZZED(-1.3)), float(min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), max(normalize(_GLF_ONE(1.0, injectionSwitch.y)), normalize(_GLF_ONE(1.0, injectionSwitch.y))))) + sin(0.0)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))), bool(true))), min(_GLF_IDENTITY(_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(normalize(_GLF_ONE(1.0, injectionSwitch.y)), max(normalize(_GLF_ONE(1.0, injectionSwitch.y)), normalize(_GLF_ONE(1.0, injectionSwitch.y))))) + sin(0.0)), (true ? normalize(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(-1.1))), normalize(_GLF_ONE(1.0, injectionSwitch.y)))))))), 1.0, 1.0, 1.0), (mat3(injectionSwitch, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sqrt(0.0), round(length(normalize(_GLF_ONE(1.0, injectionSwitch.y)))), 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, int(ivec4(1, 1, 1, 0)))); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), float(vec2(_GLF_IDENTITY(sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), clamp(sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))), sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))))), 1.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))), mix(float(_GLF_FUZZED(56.52)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 1.0 * (_GLF_ONE(1.0, injectionSwitch.y)))) / 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) | (4))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) | (0 >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(4), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(4), max(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ _GLF_IDENTITY((4), ((4)) >> (1 ^ 1)))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), min(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), (1 | 0) * (((_GLF_IDENTITY(int(4), max(int(4), int(4))))))))) | ((_GLF_IDENTITY(int(4), max(int(4), int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))), 0)) | (int(4)))) << 0), int(ivec2(int(4), 1))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))) ? int(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), (_GLF_IDENTITY(4, min(4, 4))) | (_GLF_IDENTITY(4, min(4, 4))))) : _GLF_FUZZED(65898))))), 0 ^ ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) | (4))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) | (0 >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(4), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(4), max(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ _GLF_IDENTITY((4), ((4)) >> (1 ^ 1)))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), min(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), (1 | 0) * (((_GLF_IDENTITY(int(4), max(int(4), int(4))))))))) | ((_GLF_IDENTITY(int(4), max(int(4), int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))), 0)) | (int(4)))) << 0), int(ivec2(int(4), 1))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))) ? int(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), (_GLF_IDENTITY(4, min(4, 4))) | (_GLF_IDENTITY(4, min(4, 4))))) : _GLF_FUZZED(65898))))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), 0 ^ (4)))))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) | _GLF_IDENTITY((4), (_GLF_IDENTITY((4), 0 ^ ((4)))) << 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) | (0 >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(4), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(4), max(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) | 0)), 0 ^ (~ _GLF_IDENTITY((4), ((4)) >> (1 ^ 1)))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), min(((_GLF_IDENTITY(int(4), max(int(_GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(4, clamp(4, 4, 4))))), int(4))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), (1 | 0) * (((_GLF_IDENTITY(int(4), max(int(4), int(4))))))))) | ((_GLF_IDENTITY(int(4), max(int(4), int(4)))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 1 * (_GLF_IDENTITY(0, ~ (~ (0))))))), 0)) | _GLF_IDENTITY((int(4)), ((int(4))) | 0))) << 0), int(ivec2(int(4), 1))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))) ? int(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), (_GLF_IDENTITY(4, min(4, 4))) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(25082) : 4)), 4))))) : _GLF_FUZZED(65898))))), 0 ^ ((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) | (4))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) | (0 >> _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(int(4), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(int(4), max(int(4), int(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), 0 ^ (~ _GLF_IDENTITY((4), ((4)) >> (1 ^ 1)))))))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), min(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), _GLF_IDENTITY(((_GLF_IDENTITY(int(4), max(int(4), int(4))))), (1 | 0) * (((_GLF_IDENTITY(int(4), max(int(4), int(4))))))))) | ((_GLF_IDENTITY(int(4), max(int(4), _GLF_IDENTITY(int(4), 0 ^ (_GLF_IDENTITY(int(4), min(int(4), int(4)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, ~ (~ (0))))), 0)) | (int(4)))) << 0), int(ivec2(int(4), 1))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, true && (true)))) ? int(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), (_GLF_IDENTITY(4, min(4, 4))) | (_GLF_IDENTITY(4, min(4, 4))))) : _GLF_FUZZED(65898))))))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), 0 ^ (4))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))), false || (! (! (_GLF_DEAD(false)))))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0))))), (true ? clamp(1.0, 1.0, 1.0) : _GLF_FUZZED(7392.4491)))), injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * 1))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = (1 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), int(int(_GLF_IDENTITY(0 | (1), (0 | (1)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, int(ivec2(2, int(_GLF_ONE(1.0, injectionSwitch.y))))))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, false, false)))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(int(int(6)))))))))); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = (-34722 & ((0 << _GLF_IDENTITY(int(2), int(2))) ^ (0 << _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)), (true ? (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), true)), true && (bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))), true)))))))))))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))), _GLF_IDENTITY(true && (true), (true && (true)) && true))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, bool(bool(false)))) && true))), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))), true, false)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_IDENTITY(_GLF_FUZZED(-3.5), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-3.5), (true ? _GLF_FUZZED(-3.5) : _GLF_FUZZED(-9.0)))), float(_GLF_FUZZED(1.9)), bool(false))) : injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(29.55)), bool(false))))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
    }
   else
    {
    }
  }
 atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(uint(uvec4(read, 0u, 0u, 1u)), min(uint(uvec4(read, 0u, 0u, 1u)), uint(uvec4(read, 0u, 0u, 1u))))), 4, 64, 4);
 for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), clamp((1 | 1), (1 | 1), (1 | 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec3(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 + (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), false, false))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-843.825)), mix(float(_GLF_FUZZED(-82.84)), float(_GLF_IDENTITY(float(_GLF_FUZZED(-843.825)), float(vec2(float(_GLF_FUZZED(-843.825)), 1.0)))), bool(true))), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(38.25) : injectionSwitch.y))), bool(true)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) || false), true, false), true)))))))) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
