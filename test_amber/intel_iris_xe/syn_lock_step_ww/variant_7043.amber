#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 ivec2 _f0;
 bvec3 _f1;
 vec4 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_9 {
 bvec3 _f0;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 mat3 _f3;
 bvec4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 mat2x4 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_11 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 mat4x2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
} ;

struct _GLF_struct_3 {
 uint _f0;
 float _f1;
} ;

struct _GLF_struct_2 {
 int _f0;
 vec4 _f1;
 ivec3 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_1 {
 mat4x3 _f0;
 mat4 _f1;
 mat3 _f2;
 mat2x4 _f3;
 ivec2 _f4;
 uint _f5;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 uvec2 _f3;
 bool _f4;
 uvec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 mat2x3 _f3;
 _GLF_struct_3 _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_12 {
 mat2 _f0;
 uint num_workgroup;
 mat2x3 _f1;
 _GLF_struct_4 _f2;
 mat3x4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_11 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), int(4))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0), (ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0)) << ivec3(0, 0, 0))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0), (ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0)) << ivec3(0, 0, 0))), min(int(_GLF_IDENTITY(ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0), (ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0)) << ivec3(0, 0, 0))), int(_GLF_IDENTITY(ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0), (ivec3((0 >> _GLF_IDENTITY(int(4), int(4))), 1, 0)) << ivec3(0, 0, 0)))))) << 0))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) ^ 0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))) | 0) | ((_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY((6), (_GLF_IDENTITY((6), ((6)) | ((6)))) | (_GLF_IDENTITY((6), clamp(_GLF_IDENTITY((6), int(ivec4((6), 0, 0, 0))), (6), (6))))) | (6))))) | 0))), clamp((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0), min(((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0), ~ (_GLF_IDENTITY(~ (((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(6))), int(6))) | 0)), int(int(~ (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(6), int(6))) | 0), clamp(((0 << _GLF_IDENTITY(int(6), int(6))) | 0), ((0 << _GLF_IDENTITY(int(6), int(6))) | 0), ((0 << _GLF_IDENTITY(int(6), int(6))) | 0))) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec2(_GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(4), int(4)))))), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), int(ivec2(_GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 ^ (int(4))), _GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (int(4)) | (int(4)))) | 0))))))) - 0)) | 0, ((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (0) | (0)) << _GLF_IDENTITY(int(6), int(6))) | 0) | ((_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(6), int(6))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, _GLF_IDENTITY(0, int(ivec2(0, 1)))))) << 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0)), _GLF_IDENTITY(max(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0))), 0 ^ (max(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(6), int(6))) | 0))))))), ((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), int(6))) | 0, ((0 << _GLF_IDENTITY(int(6), int(6))) | 0) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(-92835) : 6))), int(6))) | 0)))) ^ 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | ((_injected_loop_counter))) | (0 ^ 0)), _injected_loop_counter)) < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x) + _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, 0.0)))))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(9304.8776), _GLF_FUZZED(33.59)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x))), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x) + _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, 0.0)))))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(9304.8776), _GLF_FUZZED(33.59)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x) + _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 1.0, sin(0.0), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 0.0, 0.0)))))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(9304.8776), _GLF_FUZZED(33.59)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x))))) * 1.0) > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true)) && true), false, true, false)))), bool(bvec4(bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), (bool((injectionSwitch.x > injectionSwitch.y))) && true), false, true, false)))), true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), true)))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), true, true)))))) && (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (_GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), true && (! (! (_GLF_IDENTITY(false, false || (false))))))) && true))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), false))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     do
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(mat2(1.0), gl_NumWorkGroups.x, mat2x3(1.0), _GLF_struct_4(_GLF_struct_0(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) << uvec2(0u, 0u)))), bvec3(true), bvec4(true), uvec2(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * 1u)), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * 1u)))))))) / 1u, 1u * (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (uint(1u)) | (_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * _GLF_IDENTITY(1u, 0u + (1u)))), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (uint(1u)) | (_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * _GLF_IDENTITY(1u, 0u + (1u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (uint(1u)) | (_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * _GLF_IDENTITY(1u, 0u + (1u)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (uint(1u)) | (_GLF_IDENTITY(uint(1u), max(uint(1u), uint(1u)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * _GLF_IDENTITY(1u, 0u + (1u)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)), max(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uint(1u)), 0u ^ (_GLF_IDENTITY(uint(uint(1u)), min(uint(uint(1u)), uint(uint(1u)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uint(1u), (false ? _GLF_FUZZED(57156u) : uint(1u))))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))) * 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(uint(1u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u)))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(1u, uint(uint(1u)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u), min(_GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u), _GLF_IDENTITY(~ ((_GLF_IDENTITY(1u, uint(uint(1u))))), (~ ((_GLF_IDENTITY(1u, uint(uint(1u)))))) | 0u))))))) * 1u)))))))) / 1u)))))), true, uvec4(1u), ivec2(1)), _GLF_struct_1(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(75.07))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-206.956) : 1.0)), _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, sqrt(sqrt(1.0)), 1.0, cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))), (mat3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-206.956) : 1.0)), _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, sqrt(sqrt(1.0)), 1.0, cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), (true ? float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-206.956) : 1.0)), _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, sqrt(sqrt(1.0)), 1.0, cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0))), (mat3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-206.956) : 1.0)), _GLF_IDENTITY(1.0, float(mat3x4(1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), 1.0, sqrt(sqrt(1.0)), 1.0, cos(0.0), 0.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) : _GLF_FUZZED(-2.1)))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(75.07), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(75.07)) * 1.0))), _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(75.07))), _GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(75.07)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(true))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 1.0)) : _GLF_FUZZED(75.07))) - 0.0))))), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, sqrt(1.0))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, sqrt(_GLF_IDENTITY(1.0, (1.0) / sqrt(1.0)))), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, sqrt(1.0))))), min(float(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5557.2454)), float(1.0), bool(true)))), float(_GLF_FUZZED(87.13)), bool(false))))), (false ? _GLF_FUZZED(-93.66) : 1.0)), sqrt(1.0))))), float(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, _GLF_IDENTITY(8910.9543, max(8910.9543, 8910.9543)))) : vec2(1.0, sqrt(1.0))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, _GLF_IDENTITY(sqrt(1.0), _GLF_ONE(1.0, injectionSwitch.y) * (sqrt(1.0))))))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, sqrt(1.0)))), _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, sqrt(1.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))), (true ? vec2(vec4(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (false ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, sqrt(1.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(smoothstep(-7.4, 7.2, vec2(783.296, 978.838))))))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, float(mat2x4(1.0, cos(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), sqrt(1.0)), clamp(vec2(1.0, sqrt(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (vec2(1.0, sqrt(1.0))) * mat2(1.0)), (_GLF_IDENTITY(vec2(1.0, sqrt(1.0)), (vec2(1.0, sqrt(1.0))) * mat2(1.0))) * mat2(1.0)), vec2(1.0, sqrt(1.0)))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))) ? _GLF_FUZZED(vec2(4.2, 8910.9543)) : vec2(1.0, sqrt(1.0))))))))))), mat3(1.0), mat2x4(1.0), ivec2(1), 1u), _GLF_struct_2(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(17361)))) >> 0) | 0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), mix(float(_GLF_FUZZED(-2.8)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), float(mat2(_GLF_IDENTITY(1.0, (1.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, 1.0)))), bool(true)))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, 1, 1))))), min(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))))), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(ivec3(-38042, -49350, 3434)) : _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))))), min(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) ^ 0)))))), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) ^ 0), 1, 1)))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(ivec3(-38042, -49350, 3434)) : _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))))), min(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) ^ 0)))))), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) ^ 0), 1, 1)))))))), ~ (~ (false ? _GLF_FUZZED(ivec3(-38042, -49350, 3434)) : _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, 1))))), min(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) ^ 0)))))), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) ^ 0), 1, 1)))))))))))) - ivec3(0, 0, 0)))), _GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0))) - vec4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))))), mat2x3(1.0), _GLF_struct_3(1u, 1.0), mat2x3(_GLF_IDENTITY(1.0, (1.0) * 1.0))), mat3x4(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_struct_5(uvec4(_GLF_IDENTITY(1u, (1u) * 1u))), _GLF_struct_11(_GLF_struct_6(uvec2(1u), bvec4(true)), _GLF_struct_7(uvec3(1u), mat2x4(1.0), ivec4(1)), _GLF_struct_8(uvec3(1u), mat4x2(1.0), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (! (! ((_GLF_IDENTITY(! (true), _GLF_IDENTITY(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), _GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(! _GLF_IDENTITY((! (! (true))), ! (! (_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) || false))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), bool(bvec2(! (true), false))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true))))))), ! (! ((_GLF_IDENTITY((! (! (true))), bool(bool((! (! (true)))))))))))))))))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec4(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), true, true, false)))))) || false)), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))), bool(bool(_GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), true && (! (bool(true)))))))))))), ! (! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))), bool(bool(_GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), true && (! (bool(true))))))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), false, false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))), (bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))) && true), (bool(bool(true))) || false)), ! (! (bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))))), true && ((_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false)), ! (! (bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))))))) || false))))), ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), false, false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))), (bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))) && true), (bool(bool(true))) || false)), ! (! (bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))))), true && ((_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false)), ! (! (bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))))))) || false)))))) || false) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), ! (! (_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))))))) && true), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bool(bool(bool(true))), false || (_GLF_IDENTITY(bool(bool(bool(true))), ! (! (bool(bool(bool(true))))))))), ! (! (_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) || false))), true))))))) && true))), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, (true) && true)))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))), bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), true))) || false)), true, false, true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true))))))), bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false)))), false, false))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false)))), false, false))))), true && ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false)))), bool(bvec3(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), bool(bvec2(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), false)))), false, false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), true, false))))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))), (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))))) || false)))) && true), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, (true) && true))))))))) && true), true))) || _GLF_IDENTITY(false, false || (false)))), true, false, true))), true)), bool(_GLF_IDENTITY(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), ! (! (bool(bool(bool(true)))))))) || false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true)), bool(bool(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))))) && true)), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && _GLF_IDENTITY(true, false || (true))), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))))) && true), true))) || false)), true, false, true))), _GLF_IDENTITY(false, bool(bvec2(false, true))) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), ! (! (bool(bool(bool(true)))))))) || false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true)), bool(bool(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))))) && true)), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && _GLF_IDENTITY(true, false || (true))), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))))) && true), true))) || false)), true, false, true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), ! (! (bool(bool(bool(true)))))))) || false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true)), bool(bool(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))))) && true)), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && _GLF_IDENTITY(true, false || (true))), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))))) && true), true))) || false)), true, false, true))), false, false, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))))))) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! ((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))), (_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), ! (! (bool(bool(bool(true)))))))) || false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, _GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true)), bool(bool(bool(bvec2((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true, true))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))))))))) && true)), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && _GLF_IDENTITY(true, false || (true))), true)), (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))))))))) && true), true))) || false)), true, false, true))), false, false, false))) && true)))), true)), true), bvec2(bvec3(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), false || (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))), false || ((! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), false)))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), false)))))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), ! (! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))))))) || false), false))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), bool(bvec4(bool(bool(bool(true))), false, true, false)))))))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), bool(bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))), false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))))), false))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))))) && true)))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true))))))), (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), true)), (bool(bvec2(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)))))), bool(bvec3((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(_GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)))))), true, false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), true && (bool(true)))), ! (! (bool(_GLF_IDENTITY(bool(true), true && (bool(true)))))))), bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))) && true), true))) || false)), true, _GLF_IDENTITY(false, false || (false)), true))), true)), true), true))))))))), mat3(1.0), bvec4(true), bvec2(true)), _GLF_struct_9(bvec3(true)), _GLF_struct_10(_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(ivec2(1), (ivec2(_GLF_IDENTITY(1, int(int(1))))) / ivec2(1, 1))) | (_GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(34.22)), float(injectionSwitch.x), bool(true))))) : _GLF_FUZZED(-3378.4978)))) - 0.0) > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(34.22)), float(injectionSwitch.x), bool(true))))) : _GLF_FUZZED(-3378.4978)))) - 0.0) > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.7)), bool(false))), determinant(mat4(1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)), 0.0, 0.0), transpose(transpose(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)), 0.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), bool(false))), injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(34.22)), float(injectionSwitch.x), bool(true))))) : _GLF_FUZZED(-3378.4978)))) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.7)), bool(false))), determinant(mat4(1.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)), 0.0, 0.0), transpose(transpose(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0))), 0.0)), 0.0, 0.0))))), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.9)), bool(false))), injectionSwitch.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, determinant(mat4(1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - tan(0.0)), 0.0, 0.0, 0.0, 1.0)) * (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(34.22)), float(injectionSwitch.x), bool(true))))) : _GLF_FUZZED(-3378.4978)))) - 0.0) > injectionSwitch.y))))))))) ? _GLF_FUZZED(_GLF_IDENTITY(ivec2(70842, _GLF_IDENTITY(-37449, clamp(-37449, -37449, _GLF_IDENTITY(-37449, clamp(-37449, -37449, -37449))))), max(ivec2(_GLF_IDENTITY(70842, min(70842, 70842)), -37449), ivec2(70842, -37449)))) : ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, 0 | ((1) | 0)))))))), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), false || (bool(bvec2(true, false)))))), vec4(1.0), uvec4(1u)), mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(698.058), (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, true), true))), true))))) ? _GLF_FUZZED(-473.010) : _GLF_IDENTITY(_GLF_FUZZED(698.058), (true ? _GLF_FUZZED(698.058) : _GLF_FUZZED(-926.713)))))), float(1.0), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-83.21)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6500.9911)), bool(_GLF_IDENTITY(false, (false) || false)))))))))))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-83.21)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6500.9911)), bool(_GLF_IDENTITY(false, (false) || false)))))))))))))))))))))), mat3x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) / vec2(1.0, 1.0)).x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-4843.5566)), (true ? float(_GLF_FUZZED(-4843.5566)) : _GLF_FUZZED(-775.169))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true))))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec4((false) || false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), bool(bvec2(bool(bvec4((false) || false, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)), true))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, false || (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), false || (! (! (_GLF_IDENTITY(false, (false) || false)))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), min(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), int(ivec4(int(0), 0, 1, 0)))) | (int(0)))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), bool(bvec4(false, false, false, true)))))
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false))))
                    barrier();
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
                barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(50079) : int(_GLF_ONE(1.0, injectionSwitch.y)))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) ? _GLF_FUZZED((_injected_loop_counter)) : 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), min(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-9293.0791)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY((float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0))), max((float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0))), (float(mat3x2(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0))))) - 0.0)), injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.1) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) : _GLF_FUZZED(-8.1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)) || false))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))) && true)))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7861.4254) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (47167 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) >> 0)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))))))
              barrier();
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         for(int _injected_loop_counter = (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * cos(0.0))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0, (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0 : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(ivec3(0, 1, 0))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0, true, true)))); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, (true) && true))))), true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, 0.0))))), injectionSwitch.x)) > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.0)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))) && true))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4047.1219)), vec2(_GLF_FUZZED(-8.9), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))) && true)), false, true)), (bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), false, true))) || false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), false, true)), (bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), false, true))) || false)), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))))) || false), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_IDENTITY(true, bool(bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(true, (true) && true))))), false, true)), (bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, true), true, false)))), false, false, false))))))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))), false, true))) || false))) || false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-492.618)), vec2(_GLF_FUZZED(-1377.1608), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(-8218.4305)), float((injectionSwitch)[1]), bool(true)))), bvec2(false, true))).x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false, _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, (true) && true))))))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (0 & 58049); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true)), bool(bvec4(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true)), false, false, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))), false, false)), ! (! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false))), ((bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false)))) || false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true)), bool(bvec4(bool(bvec2(bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false)), true)), false, false, false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)))))), false, false)), ! (! _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false))), ((bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (bool(bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), false, false)))) || false))))))))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    barrier();
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter --)))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  break;
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) - 0))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             break;
                            }
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(false, true)))))
                            return;
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             return;
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                break;
                               if(_GLF_DEAD(false))
                                break;
                               barrier();
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                                return;
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec3(sin(0.0), 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(sin(0.0), 0.0, 0.0), vec3(1.0, 1.0, 1.0))), sqrt(1.0), length(vec3(0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))))))), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false))))))))))))))))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             barrier();
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 1.0, 0.0))) > injectionSwitch.y))))
                          barrier();
                         break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))))))))))))
                            barrier();
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          break;
                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(0), int(0))) | 0)); _injected_loop_counter --)
                          {
                           do
                            {
                             for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             return;
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                break;
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))))));
                          }
                         if(_GLF_DEAD(false))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            return;
                           if(_GLF_DEAD(false))
                            continue;
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           continue;
                          }
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) && true)))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                      break;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  break;
                }
               else
                {
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bvec3(_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false))))), true, false)))))), (bool(_GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), bool(bvec3(! (bool(false)), true, false))))))) && true))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), false))))
      barrier();
     return;
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base))) | 0u)) | (workgroup_base)), workgroup_base)) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)))))) % subgroup_size)) | (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), (true ? _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + _GLF_IDENTITY(1, (1) - 0)) % subgroup_size)) : _GLF_FUZZED((workgroup_size --))))))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) ^ 0u), ((subgroup_local_id + 1) % subgroup_size)))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y)), min((_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base))) | 0u)) | (workgroup_base)), workgroup_base)) + subgroup_base + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))) | (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), ~ (~ (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) ^ 0u), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) - 0u)))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base))) | 0u)) | (workgroup_base)), workgroup_base), clamp(max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base))) | 0u)) | (workgroup_base)), workgroup_base), max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base))) | 0u)) | (workgroup_base)), workgroup_base), max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(1u, min(1u, 1u)) * (workgroup_base))) | 0u)) | (workgroup_base)), workgroup_base)))) + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u) + 1) % subgroup_size)) | (workgroup_base + subgroup_base + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), min((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (subgroup_local_id + 1))) % subgroup_size))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, (true ? _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u) : _GLF_FUZZED(workgroup_size)))) % subgroup_size), max(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))), ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (true ? (subgroup_local_id + 1) % subgroup_size : _GLF_FUZZED(subgroup_size))))) ^ 0u), ((subgroup_local_id + 1) % subgroup_size)))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true)))))))
            {
             do
              {
               atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, min(1, 1))), 4, 64, _GLF_IDENTITY(4, (4) << 0));
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bool((false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
         if(_GLF_DEAD(false))
          break;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false)))))), (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, false))))))) && true)))), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).y)))))))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))
                  barrier();
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), (2) - (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4)), (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(4), int(4))) << 0)))), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, true))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
