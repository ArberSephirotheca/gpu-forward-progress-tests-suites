#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val;
 uvec2 GLF_merged2_0_1_13_1_1_8num_workgroupread_val;
 _GLF_IDENTITY(GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy = GLF_merged2_0_1_13_1_1_8num_workgroupread_val, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy = GLF_merged2_0_1_13_1_1_8num_workgroupread_val, (false ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_8num_workgroupread_val) : GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy = GLF_merged2_0_1_13_1_1_8num_workgroupread_val)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy = GLF_merged2_0_1_13_1_1_8num_workgroupread_val, (false ? _GLF_FUZZED(GLF_merged2_0_1_13_1_1_8num_workgroupread_val) : GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy = GLF_merged2_0_1_13_1_1_8num_workgroupread_val)) : _GLF_FUZZED(GLF_merged2_0_1_13_1_1_8num_workgroupread_val)))) - uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)));
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, max(gl_NumWorkGroups, gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups, gl_NumWorkGroups)).x;
 GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.z = num_workgroup;
 GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy.x = GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.z;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID.x, (true ? gl_WorkGroupID.x : _GLF_FUZZED(subgroup_size)))) << 0u);
 uint workgroup_base = workgroup_size * workgroup_id;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)) | (subgroup_size));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base + subgroup_base, 0u, 1u)), (_GLF_IDENTITY(uint(uvec3(workgroup_base + subgroup_base, 0u, 1u)), (uint(uvec3(workgroup_base + subgroup_base, 0u, 1u))) >> 0u)) / 1u)) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 4);
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.w = read_val;
 GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy.y = GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.w;
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy.y, (_GLF_IDENTITY(GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy.y, (GLF_merged3_0_2_45_2_1_13_3_1_8GLF_merged2_0_1_13_1_1_8num_workgroupread_valnum_workgroupread_val.xy.y) ^ 0u)) ^ 0u)));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
