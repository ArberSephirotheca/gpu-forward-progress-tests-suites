#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat3x2 _f0;
 ivec2 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_5 {
 float _f0;
 ivec3 _f1;
 bvec4 _f2;
 uint subgroup_local_id;
 mat4x3 _f3;
 mat3x2 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 _GLF_struct_5 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
 _GLF_struct_6 _f1;
 bvec3 _f2;
 vec3 _f3;
 bool _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_4 {
 uint read_1;
 mat4 _f0;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
 float _f1;
 vec2 _f2;
 mat3x4 _f3;
 mat3x2 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_0 {
 int _f0;
 uint num_workgroup;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w = subgroup_id;
uint subgroup_size = 16;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(bvec4(true), _GLF_struct_6(mat3(1.0), _GLF_struct_5(1.0, ivec3(1), bvec4(true), gl_SubgroupInvocationID, mat4x3(1.0), mat3x2(1.0), vec3(1.0)), ivec4(1)), bvec3(true), vec3(1.0), true, _GLF_struct_7(mat3x2(1.0), ivec2(1), vec4(1.0)));
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_0(1, gl_NumWorkGroups.x), _GLF_struct_2(_GLF_struct_1(bvec2(true), 1.0, vec2(1.0), mat3x4(1.0), mat3x2(1.0), ivec3(1)), bvec3(true)));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + _GLF_struct_replacement_8._f1._f1.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.w * subgroup_size + ((_GLF_struct_replacement_8._f1._f1.subgroup_local_id + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x = next_virtual_gid;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(atomicLoad(buf[virtual_gid], 4, 64, 0), mat4(1.0));
 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y = _GLF_struct_replacement_4.read_1;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z = read_2;
 if(_GLF_struct_replacement_8._f1._f1.subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1 == GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.x], uint(GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.y + 1 == GLF_merged4_0_1_16_1_1_6_2_1_6_3_1_11next_virtual_gidread_1read_2subgroup_id.z) + 1, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
