#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 uint workgroup_id;
 bool _f0;
 ivec3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(false))), vec2(_GLF_FUZZED(-514.829), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec4 GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(42328) : 0), 0 | ((false ? _GLF_FUZZED(42328) : 0))))))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy = GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gid;
  }
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size;
 uvec4 GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 uvec4 GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size;
 uvec3 GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false)))))))) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.xyz = GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_size;
 do
  {
   GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz = _GLF_IDENTITY(GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1, (GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1) | uvec4(0u, 0u, 0u, 0u)).xyz;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), false || (_GLF_WRAPPED_IF_FALSE(false)))))))), false || ((bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), false || (_GLF_WRAPPED_IF_FALSE(false))))))))))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.w;
uint subgroup_size = 16;
 GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.w = subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((false)) && true), false || (! (false)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))
      {
       GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.x = GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.w;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.1) : injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.1) : injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.1) : injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.1) : injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(2.1) : injectionSwitch.y)))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       _GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w = GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.x, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w = GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.x, 0u | (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w = GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.x)))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))), true))))), true && (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))), true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.z = _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6159.7841)), vec2(_GLF_FUZZED(-693.736), (injectionSwitch)[1]), bvec2(false, true))).x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (1))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.x = GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.z;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_WRAPPED_LOOP(false))));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))), false, false)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true)), true && (bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, false || (true)) && (_GLF_WRAPPED_IF_TRUE(true)))), bool(bvec4((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, false || (true)) && (_GLF_WRAPPED_IF_TRUE(true)))), false, false, false)))), false, false)), true)))), _GLF_IDENTITY((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), _GLF_IDENTITY(false, ! (! (false))), false)), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true))), bool(bvec4((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true))), false, false, true)))), bool(bvec2(! (_GLF_IDENTITY((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true))), ! (! ((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, (true) && true) && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true))))))), false))))) || false), false || (_GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true)), _GLF_IDENTITY((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true) && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true))) || false, bool(bvec4((bool(bvec2(bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))), false, false)), true))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))) || false), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.x;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.x = num_workgroup;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, false || ((_GLF_DEAD(false)) || false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, true), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true, false, true)))) && true)))))))))) || false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
  }
 for(int _injected_loop_counter = (1 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false))))), (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))), 0)))], (injectionSwitch)[1]), vec2(_GLF_FUZZED(2435.5066), _GLF_FUZZED(-2.0)), bvec2(false, false))), injectionSwitch)).y))), true && (bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)))))))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.x;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z = workgroup_size;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.z = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.z;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec3(gl_WorkGroupID), clamp(uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID), uvec3(gl_WorkGroupID))))).x, true, ivec3(1));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) << (0 >> _GLF_IDENTITY(int(1), int(1)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false)))
  return;
 uint workgroup_base = GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.z * _GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_id, clamp(_GLF_struct_replacement_0.workgroup_id, _GLF_struct_replacement_0.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_id, (false ? _GLF_FUZZED(167746u) : _GLF_struct_replacement_0.workgroup_id))));
 GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y = workgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(false, false || (false)))))) && true))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))) || false))
    continue;
   GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.y = GLF_merged3_0_1_13_1_1_14_2_1_14num_workgroupworkgroup_baseworkgroup_size.y;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.y + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w;
 GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.y = _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u | (_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid)))), min(0u | (virtual_gid), _GLF_IDENTITY(0u | (virtual_gid), ~ (~ (0u | (virtual_gid)))))))) | 0u);
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.y + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z)) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, _GLF_IDENTITY((GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size), ((GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size)) + uvec4(0u, 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size) | uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u)), GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size)).w)))) >> 0u) * _GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u) + ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[0], (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[0]) + 0u), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[1], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[2], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[3])).w + 1) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), 0u ^ (_GLF_IDENTITY(uint(4u), (uint(4u)) / 1u))), (true ? uint(4u) : _GLF_FUZZED(num_workgroup)))) | (uint(4u))), uint(4u))))) % GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w), (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.xyz.y + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z)) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, _GLF_IDENTITY((GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size), ((GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size)) + uvec4(0u, 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size) | uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u)), GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size)).w)))) >> 0u) * _GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u), ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, (true ? _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z)) : _GLF_FUZZED(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, _GLF_IDENTITY((GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size), ((GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size)) + uvec4(0u, 0u, 0u, 0u)) | uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size) | uvec4(0u, 0u, 0u, 0u))) ^ uvec4(0u, 0u, 0u, 0u)), GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size)).w)))) >> 0u) * _GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u, 0u | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u, max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u, max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, (_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size, uvec4(0u, 0u, 0u, 0u) + (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))).w, (GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w) ^ 0u)) / 1u)))))))))) + ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (1) >> 0), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id, uvec4(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[0], (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[0]) + 0u), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[1], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[2], GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id[3])).w + _GLF_IDENTITY(1, (1) - 0)) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (uint(4u)) | (_GLF_IDENTITY(uint(4u), (uint(4u)) << 0u))), (true ? uint(4u) : _GLF_FUZZED(num_workgroup)))) | (uint(4u))), uint(4u))))) % GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w)) | 0u);
 GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.x = next_virtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch)).y))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
  }
 else
  {
  }
 GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.z = GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) && true)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    break;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, _GLF_IDENTITY((_GLF_IDENTITY(7, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 7 : _GLF_FUZZED(99440)))), 0 | ((_GLF_IDENTITY(7, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 7 : _GLF_FUZZED(99440)))))) ^ _GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY(int(7), 0 + (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), int(ivec2(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))) != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(-5724.7293)))), float(_GLF_IDENTITY(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), sin(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), sin(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(-5724.7293))))), mix(float(_GLF_FUZZED(-0.2)), float(_GLF_IDENTITY(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * _GLF_IDENTITY(1.0, min(1.0, 1.0))) : _GLF_FUZZED(-5724.7293))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(731.260), mix(float(_GLF_FUZZED(-6.6)), float(_GLF_FUZZED(731.260)), bool(true)))), float(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(_GLF_IDENTITY(-5724.7293, float(mat4(-5724.7293, _GLF_IDENTITY(dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), vec4(0.0, 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))))))))))))), bool(true)))), bool(true)))))))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(-5724.7293)))), float(_GLF_IDENTITY(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), sin(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), sin(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(-5724.7293))))), mix(float(_GLF_FUZZED(-0.2)), float(_GLF_IDENTITY(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * _GLF_IDENTITY(1.0, min(1.0, 1.0))) : _GLF_FUZZED(-5724.7293))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(731.260), mix(float(_GLF_FUZZED(-6.6)), float(_GLF_FUZZED(731.260)), bool(true)))), float(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(_GLF_IDENTITY(-5724.7293, float(mat4(-5724.7293, _GLF_IDENTITY(dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), vec4(0.0, 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))))))))))))), bool(true)))), bool(true)))))))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(-5724.7293)))), float(_GLF_IDENTITY(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) / determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), sin(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0), (mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0), sin(0.0), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_FUZZED(-5724.7293))))), mix(float(_GLF_FUZZED(-0.2)), float(_GLF_IDENTITY(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * _GLF_IDENTITY(1.0, min(1.0, 1.0))) : _GLF_FUZZED(-5724.7293))))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(731.260), mix(float(_GLF_FUZZED(-6.6)), float(_GLF_FUZZED(731.260)), bool(true)))), float(float(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, 1.0), min(clamp(1.0, 1.0, 1.0), clamp(1.0, 1.0, 1.0)))))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y) * 1.0) : _GLF_FUZZED(_GLF_IDENTITY(-5724.7293, float(mat4(-5724.7293, _GLF_IDENTITY(dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), vec4(0.0, 1.0, 0.0, 0.0))), _GLF_ZERO(0.0, injectionSwitch.x), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))), dot(vec2(0.0, 0.0), vec2(1.0, sqrt(1.0))))))))))))), bool(true)))), bool(true))))))))) + 0)) / 1)) / 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.z, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, clamp(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, (GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id) | (GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id)))).z) ^ 0u, min((_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, clamp(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, (GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id) | (GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id)))).z) ^ 0u, (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, clamp(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id, (GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id) | (GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id)))).z) ^ 0u)));
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint read_1 = atomicLoad(buf[GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.y], 4, 64, 0);
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.y = read_1, 0u | (GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.y = read_1));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.y, ~ (~ (GLF_merged4_0_1_16_1_1_6_2_1_17_3_1_13next_virtual_gidread_1subgroup_local_idsubgroup_size.y)));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), clamp(float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), float(float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true, false)))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (int(3)) - 0)) ^ 0), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(98.23, 4.7))))) - tan(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 1.0, sin(0.0), 0.0)))))));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), false))), (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w, clamp(GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w, GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w, GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w)) + 1), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-5.7, -988.785, 7554.0034).p), _GLF_FUZZED(_GLF_IDENTITY(((197438u < 67962u) ? 21.23 : 76.33), max(_GLF_IDENTITY(((197438u < 67962u) ? 21.23 : 76.33), clamp(((197438u < 67962u) ? 21.23 : 76.33), _GLF_IDENTITY(((197438u < 67962u) ? 21.23 : 76.33), mix(float(_GLF_FUZZED(-7930.8450)), float(((197438u < 67962u) ? 21.23 : 76.33)), bool(true))), ((197438u < 67962u) ? 21.23 : 76.33))), ((197438u < 67962u) ? 21.23 : 76.33))))), bvec2(false, false))).y))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-5.7, -988.785, 7554.0034).p), _GLF_FUZZED(((197438u < 67962u) ? 21.23 : 76.33))), bvec2(false, false))).y))), true, true)), bool(bvec2(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-5.7, -988.785, 7554.0034).p), _GLF_FUZZED(((197438u < 67962u) ? 21.23 : 76.33))), bvec2(false, false))).y))), true, true)), false))), (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-5.7, -988.785, 7554.0034).p), _GLF_FUZZED(((197438u < 67962u) ? 21.23 : 76.33))), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(vec3(-5.7, -988.785, 7554.0034).p), _GLF_FUZZED(((197438u < 67962u) ? 21.23 : 76.33))), bvec2(false, false)))) * mat2(1.0)).y))), true, true))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))) && true))) && true)))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            return;
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true) && true)), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true) && true)))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   return;
                  }
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((true), _GLF_IDENTITY(bool(bvec4((true), true, true, false)), true && (bool(bvec4((true), true, true, false))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                     return;
                    }
                  }
                 return;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    return;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))))
              return;
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(86.05)), bool(false)))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.y], (buf[GLF_merged3_0_2_49_2_1_16_3_1_11GLF_merged2_0_1_13_1_1_11subgroup_sizevirtual_gidnext_virtual_gidsubgroup_id.xy.y]) / _GLF_IDENTITY(1u, (1u) | (84202u & 0u))), 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(0, (0 | 0) | (0)) | 0) + (1)), _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), 0 + (int(1))))), 0))) < GLF_merged2_0_3_77_3_1_13GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizesubgroup_size.w)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0, max((_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0, min(_GLF_IDENTITY((_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0, ((_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0) / 1.0), (_GLF_IDENTITY(0.0, 0.0 + (0.0))) - 0.0))))))), injectionSwitch.x)), min(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 1 * _GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y))), int(int((int(_GLF_ONE(1.0, injectionSwitch.y))))))) / 1)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7015.9391))))) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, exp(0.0), 1.0, 1.0))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7015.9391))))) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y), 1.0, 0.0, exp(0.0), 1.0, 1.0))).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7015.9391))))) > injectionSwitch.y) && true)), true)))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, false)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(mix(injectionSwitch, injectionSwitch, 1.3)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), bool(bool(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (! (false)) && true)))))))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(6), int(6)), (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, ~ (~ (6)))), _GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 0))))) + 0)) - 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), (true ? clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y) : _GLF_FUZZED(-4.8)))), injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), (true ? clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y) : _GLF_FUZZED(-4.8)))), injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), (true ? clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y) : _GLF_FUZZED(-4.8)))), injectionSwitch.y)))))), true, false, true))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     int i = _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, (_GLF_IDENTITY((0) ^ 0, 0 ^ ((0) ^ 0))) >> 0)), (0) ^ 0)), max(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, (_GLF_IDENTITY((0) ^ 0, 0 ^ ((0) ^ 0))) >> 0)), (0) ^ 0)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, (_GLF_IDENTITY((0) ^ 0, 0 ^ ((0) ^ 0))) >> 0)), (0) ^ 0)), int(int(max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (0) ^ 0)) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY((0) ^ 0, (_GLF_IDENTITY((0) ^ 0, 0 ^ ((0) ^ 0))) >> 0)), (0) ^ 0))))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(_GLF_IDENTITY(GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w, 1u * (GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w)) + 1 == _GLF_IDENTITY(read_2, 0u ^ (read_2))) + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (_GLF_IDENTITY(4, (4) << 0)) / 1), (_GLF_IDENTITY(4, _GLF_IDENTITY(clamp(4, 4, 4), (clamp(4, 4, 4)) * (1 | 0)))) + 0), 64, 4);
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && true)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (_GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) && true)) || false)))
        {
         for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true))))))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(10.53) : _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 1.0, abs(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, exp(0.0), 0.0, exp(0.0)))), max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-37.14)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(45.27)), bool(false))))))) > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) + 0)), 0 ^ ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1)) | (1)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((_GLF_IDENTITY(int(1), max(int(1), int(1)))) + 0)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (_GLF_IDENTITY(~ ((int(1)) + 0), ~ (_GLF_IDENTITY(~ (~ ((int(1)) + 0)), (false ? _GLF_FUZZED((-30711)) : _GLF_IDENTITY(~ (~ ((int(1)) + 0)), 0 | (~ (~ ((int(1)) + 0))))))))))), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0))))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(_GLF_IDENTITY(1, max(1, 1)))) + 0, ~ (~ ((int(1)) + 0)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0))))))), int(ivec3(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY((int(1)) + 0, ((int(1)) + 0) - (0 >> _GLF_IDENTITY(int(1), int(1)))), ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0))))))), 1, 1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), clamp(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, ~ (~ ((int(1)) + 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec3(int(1), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY((int(1)), ((int(1))) | 0) + 0, ~ (~ (_GLF_IDENTITY((int(1)), max((int(1)), (int(1)))) + 0)))))))))))))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
            break;
           return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x], uint(GLF_merged2_0_3_77_3_1_6GLF_merged3_0_1_17_1_1_14_2_1_14subgroup_local_idworkgroup_baseworkgroup_sizeread_1.w + 1 == read_2) + 1, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(int(64)))) << 0), int(int(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(int(64)))) << 0)))), 4);
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), (injectionSwitch))) - vec2(0.0, 0.0), max((injectionSwitch) - vec2(0.0, 0.0), (injectionSwitch) - vec2(0.0, 0.0)))))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, mix(float(_GLF_FUZZED(70.26)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), clamp(_GLF_IDENTITY(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), (vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))) * vec2(1.0, 1.0)), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))), vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))))))).x), bool(true))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(mix(5442.7691, -8.5, true)) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4(1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, length(cross(vec3(7.3, 114.053, -5292.5733), vec3(7.3, 114.053, -5292.5733))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))) - 0.0))), injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat3x2(((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 0.0, 0.0, 0.0)))) - vec2(0.0, 0.0)))).x, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))) - vec2(0.0, 0.0)))).x)))) > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
