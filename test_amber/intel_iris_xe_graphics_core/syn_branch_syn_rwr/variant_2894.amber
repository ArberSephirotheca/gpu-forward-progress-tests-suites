#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) >> 0)], injectionSwitch[1])).y, _GLF_IDENTITY(abs(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), (_GLF_IDENTITY(abs(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), (true ? abs(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x2(561.562, -7.1, 6153.2157, -369.354, 467.836, -6.2, -126.629, -8.7))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x2(561.562, -7.1, 6153.2157, -369.354, 467.836, -6.2, -126.629, -8.7))))), mix(float(_GLF_FUZZED(-5347.0612)), float(float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x2(561.562, -7.1, 6153.2157, -369.354, 467.836, -6.2, -126.629, -8.7)))))), bool(true))), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x2(561.562, -7.1, 6153.2157, -369.354, 467.836, -6.2, -126.629, -8.7))))), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0), (true ? mat4x2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0) : _GLF_FUZZED(mat4x2(561.562, -7.1, 6153.2157, -369.354, 467.836, -6.2, -126.629, -8.7)))))))), 1.0, 0.0))), vec2(injectionSwitch[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0))], injectionSwitch[1])).y) : _GLF_FUZZED(float(false))))) / 1.0))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false, _GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))), false, false)))))))))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true)))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7)))))); _injected_loop_counter --)
      {
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(-5.0))) > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true && _GLF_IDENTITY((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))), (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false))), ! (! ((bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))), false || ((bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - length(vec4(0.0, 0.0, 0.0, 0.0))) > injectionSwitch.y, false, _GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false)))))) || false)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), false || (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u)))) ^ 0u) * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id)));
 do
  {
   for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(2, clamp(2, 2, 2)), 0 + (_GLF_IDENTITY(2, clamp(2, 2, 2))))), int(2))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(~ (~ (int(0))), (~ (~ (int(0)))) | (~ (~ (int(0)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(9800))), _GLF_IDENTITY(int(0), (int(0)) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(false)) && true)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)).x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, 0.0)), (true ? 0.0 : _GLF_FUZZED(inversesqrt(59.77)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 ^ 0)))))), (true ? _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 ^ 0)))))), (((0 >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), _GLF_IDENTITY(int(4), (int(4)) << (0 ^ 0))))))) << 0) : _GLF_FUZZED(-52131))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((- 718.634))), float(injectionSwitch.y), bool(true)))))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(1.0, length(vec2(0.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, length(vec2(0.0, 0.0))), vec2(1.0, 0.0))) * (_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), (! (_injected_loop_counter > 0)) || false)))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-4.9)), float(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (vec2(vec2(injectionSwitch))) / vec2(1.0, 1.0))).y), bool(true))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ (_injected_loop_counter)), (~ (~ (_injected_loop_counter))) << (0 >> _GLF_IDENTITY(int(8), int(8))))))), 0, 1), (_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0), _injected_loop_counter)))))), ~ (~ ((false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))))))), 0, 1), max(ivec3(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), min(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) ^ 0))))))), _GLF_IDENTITY(0, (0) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 1), ivec3(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), ~ (~ (_GLF_FUZZED(_injected_loop_counter)))) : _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), 0, 1)))) | (ivec3(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))), 0, 1))))) != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-915.788))), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) || false)) && (! (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false));
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9865.8053)), vec2(_GLF_FUZZED(230.771), _GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]))), bvec2(false, true))).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9865.8053)), vec2(_GLF_FUZZED(230.771), _GLF_IDENTITY((injectionSwitch)[1], _GLF_IDENTITY(min(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]), (_GLF_IDENTITY(min(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1]), (min(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1])) + 0.0)) / 1.0))), bvec2(false, true))).y) * determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(false)), _GLF_FUZZED(2.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y) || false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
            barrier();
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(875.193)), vec2(_GLF_FUZZED(1.1), (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(875.193)), _GLF_IDENTITY(vec2(_GLF_FUZZED(1.1), (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), vec2(mat4x2(_GLF_IDENTITY(vec2(_GLF_FUZZED(1.1), (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (_GLF_IDENTITY(1, 0 ^ (1))) >> 0), _GLF_IDENTITY(1, 0 ^ (1)), _GLF_IDENTITY(1, 0 ^ (1))))]), max(vec2(_GLF_FUZZED(1.1), (injectionSwitch)[_GLF_IDENTITY(1, 0 ^ (1))]), vec2(_GLF_FUZZED(1.1), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(817.268)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))[_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (false ? _GLF_FUZZED(-88237) : _GLF_IDENTITY(1, 0 ^ (1))))]))), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) * vec2(1.0, 1.0))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-6061.2911) : injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (false ? _GLF_FUZZED(min(subgroup_size, num_workgroup)) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, (true ? (uint(uvec2(subgroup_id, 1u))) / 1u : _GLF_FUZZED(subgroup_size))))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) - 0u), clamp(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), 0u | (uint(uvec2(subgroup_id, 1u))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), (_GLF_FUZZED(num_workgroup)) >> 0u) : uint(uvec2(subgroup_id, 1u)))))), uint(uvec2(subgroup_id, 1u))))) / 1u))) >> 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, (true ? (uint(uvec2(subgroup_id, 1u))) / 1u : _GLF_FUZZED(workgroup_base))))), ((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, (true ? (uint(uvec2(subgroup_id, 1u))) / 1u : _GLF_FUZZED(workgroup_base)))))) | ((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, (true ? (uint(uvec2(subgroup_id, 1u))) / 1u : _GLF_FUZZED(workgroup_base))))))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))), uint(uvec3((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))), 1u, 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), 1u * (uint(uvec2(subgroup_id, 1u)))), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), clamp(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), clamp((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))), 0u + (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), clamp((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), min((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) << 0u))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), min(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base))) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, clamp(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), subgroup_id, subgroup_id))) >> 0u), _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), clamp((_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, false || (true))))) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), 0u ^ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u)))), (false ? _GLF_FUZZED(workgroup_size) : (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), 0u ^ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))), uint(_GLF_IDENTITY(uvec2((false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))), 0u), ~ (~ (uvec2((false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))), 0u)))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, clamp((uint(uvec2(subgroup_id, 1u))) / 1u, (uint(uvec2(subgroup_id, 1u))) / 1u, _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, ((uint(uvec2(subgroup_id, 1u))) / 1u) >> 0u))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), min((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))), min(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, clamp((uint(uvec2(subgroup_id, 1u))) / 1u, (uint(uvec2(subgroup_id, 1u))) / 1u, _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, ((uint(uvec2(subgroup_id, 1u))) / 1u) >> 0u))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), min((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))), false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, clamp((uint(uvec2(subgroup_id, 1u))) / 1u, (uint(uvec2(subgroup_id, 1u))) / 1u, _GLF_IDENTITY((uint(uvec2(subgroup_id, 1u))) / 1u, ((uint(uvec2(subgroup_id, 1u))) / 1u) >> 0u))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), min((~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, _GLF_IDENTITY(1u, 1u * (1u)))), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), min(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))) * 1u)))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / _GLF_IDENTITY(1u, min(1u, 1u)))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)) ^ 0u), _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), max(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u), _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))) - 0u)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) | 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), max(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), ~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), clamp(uint(uvec2(subgroup_id, 1u)), uint(uvec2(subgroup_id, 1u)), uint(uvec2(subgroup_id, 1u)))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), clamp(uint(uvec2(subgroup_id, 1u)), uint(uvec2(subgroup_id, 1u)), uint(uvec2(subgroup_id, 1u))))))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)), uint(_GLF_IDENTITY(uint(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))), (uint(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))) | (uint(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))) / 1u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u))))))))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), uint(uvec3(_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) ^ (0u | 0u)), 0u, 1u))), (uint(uvec2(subgroup_id, 1u))) / _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u)))))))) >> 0u)))))))))))) / ((uint(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), (true ? uint(5u) : _GLF_FUZZED(virtual_gid))))) >> _GLF_IDENTITY(uint(5u), uint(5u)))) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u)), (~ (_GLF_IDENTITY(uint(uvec2(subgroup_id, 1u)), (uint(uvec2(subgroup_id, 1u))) / 1u))) >> 0u)))))))))) * subgroup_size, (_GLF_IDENTITY(workgroup_base, 1u * (workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size))) << 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(usubBorrow(num_workgroup, next_virtual_gid, workgroup_base)) : next_virtual_gid)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, 0u | _GLF_IDENTITY((next_virtual_gid), ~ (~ ((next_virtual_gid))))), next_virtual_gid)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u)), uint(uint(uint(uvec3(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, 0u | (next_virtual_gid)), next_virtual_gid)), uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(log2(-7.3)) : _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), injectionSwitch.x)))), 0u))))))], uint(read_1 + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, ~ (~ (1)))))), _GLF_IDENTITY(4, max(4, 4)), 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))));
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(8), int(8))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) / 1)); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), 0 ^ ((1 | ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))), false || (bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))) || false)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)), dot(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0))), abs(0.0), 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, exp(0.0), round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0), (true ? mat4(0.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0)), dot(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(round(length(normalize(vec2(1.0, 1.0)))), 0.0, 0.0))), abs(0.0), 1.0, 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, exp(0.0), round(length(normalize(vec2(1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0) : _GLF_FUZZED(mat4(-671.743, 7.8, -774.466, 689.642, -5.3, 403.909, -689.721, 164.917, 4.6, 4.7, 37.86, 3.4, -3.7, 4.9, 9207.2871, 498.916)))))), injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), true && (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, sqrt(1.0), 1.0, 1.0, 0.0))).x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), (bool(bvec2(true, true))) || false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
              }
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-792.874), _GLF_FUZZED(-872.571)), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), max(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec3(83477, -74191, -20567)[0])))))], float(vec3((injectionSwitch)[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(ivec3(0, 1, 1))), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec3(83477, -74191, -20567)[0])))))], 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, length(vec3(0.0, 0.0, 0.0)))))))), (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[0], float(vec3((injectionSwitch)[0], 0.0, 0.0))))), (injectionSwitch)[1]), bvec2(true, true))).y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(590.828, 18.59)) : injectionSwitch)))).x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false, false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), int(7)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((1 ^ 1) >> _GLF_IDENTITY(int(7), int(7)), 0 ^ ((1 ^ 1) >> _GLF_IDENTITY(int(7), int(7)))))))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)))))))).x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true)), (bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch)))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch)))))).x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y)))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = ((1 | 0) ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false))), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false))), true, true))), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, false)))), true, true))))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9039.2669) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.2) : injectionSwitch.y)))), false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(0.0))), _GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(7.5) : (injectionSwitch)[0])))), _GLF_FUZZED(4489.5644)), vec2(_GLF_FUZZED(float(35610)), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(2.9, sinh(42.41), false)) : injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) + 0u, (_GLF_IDENTITY((buf[virtual_gid]) + 0u, ~ (~ ((buf[virtual_gid]) + 0u)))) | ((buf[virtual_gid]) + 0u))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) - 0), 1 * (4)), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true))))))) || false)))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     int i = 0;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0)) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(19.87)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))))
            barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), read_1)) + 1 == read_2), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == _GLF_IDENTITY(read_2, ~ (~ (read_2))))) - 0u))))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), read_1)) + 1 == read_2), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == _GLF_IDENTITY(read_2, ~ (~ (read_2))))) - 0u))))))) / 1u), uint(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), read_1)) + 1 == read_2), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == _GLF_IDENTITY(read_2, ~ (~ (read_2))))) - 0u))))))) / 1u), 1u, 1u)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(_GLF_IDENTITY(read_1, max(read_1, read_1)), 1u, 1u)))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), read_1)) + 1 == read_2), ~ (~ (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == read_2), (uint(_GLF_IDENTITY(read_1, min(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 1u, 1u))), read_1)) + 1 == _GLF_IDENTITY(read_2, ~ (~ (read_2))))) - 0u))))))) / 1u))) + 1, 4, _GLF_IDENTITY(64, max(64, 64)), 4);
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(22.39)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-8.4) : injectionSwitch.y)))))))), _GLF_IDENTITY(true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < injectionSwitch.y)), ((true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2273.7127) : injectionSwitch.y))) / 1.0)) + determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, log(1.0), exp(0.0), 0.0, 0.0, 0.0, 0.0)))))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (read_1) ^ 0u) + 1 == read_2) + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(93782) : _GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(4, (4) - 0), 64, 4);
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(1), 1, 1, 0), max(ivec4(int(1), 1, 1, 0), ivec4(int(1), 1, 1, 0)))), (int(_GLF_IDENTITY(ivec4(int(1), 1, 1, 0), max(ivec4(int(1), 1, 1, 0), ivec4(int(1), 1, 1, 0))))) + 0)), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
