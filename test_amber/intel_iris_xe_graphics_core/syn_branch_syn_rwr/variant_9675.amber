#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 mat4 _f0;
 mat3x4 _f1;
 bvec3 _f2;
 ivec3 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_13 {
 mat4x3 _f0;
 uvec4 _f1;
 mat4x3 _f2;
 ivec4 _f3;
 bool _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_12 {
 mat3x4 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
 vec4 _f3;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 mat2x4 _f3;
 _GLF_struct_14 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 mat3x2 _f1;
 mat3x4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_9 {
 bool _f0;
 uvec4 _f1;
 uvec2 _f2;
 mat3x2 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_8 {
 float _f0;
 bool _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 uint read_1;
 mat4 _f1;
 ivec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_11 {
 float _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
 _GLF_struct_10 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_16 {
 mat2 _f0;
 uint _f1;
 _GLF_struct_11 _f2;
 mat3x4 _f3;
 mat2x4 _f4;
 ivec4 _f5;
 _GLF_struct_15 _f6;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_3 {
 mat4x3 _f0;
 uvec4 _f1;
 mat2x3 _f2;
 mat3x4 _f3;
 mat3x2 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 vec4 _f1;
 bvec4 _f2;
 mat4x3 _f3;
 ivec2 _f4;
 uvec4 _f5;
 mat2x4 _f6;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 uint _f1;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 mat3x4 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uint workgroup_id;
 ivec2 _f1;
 bool _f2;
} ;

struct _GLF_struct_6 {
 uvec2 _f0;
 _GLF_struct_0 _f1;
 vec4 _f2;
 ivec2 _f3;
 vec3 _f4;
 _GLF_struct_5 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) || false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), true))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), (clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0)))))) * mat2(1.0))).y), true, true, true))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2]))) | uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(uvec2(1u), _GLF_struct_0(bvec3(true), gl_WorkGroupID.x, ivec2(1), true), vec4(1.0), ivec2(1), vec3(1.0), _GLF_struct_5(_GLF_struct_1(mat3(1.0), 1u), _GLF_struct_2(mat2x4(1.0), vec4(1.0), bvec4(true), mat4x3(1.0), ivec2(1), uvec4(1u), mat2x4(1.0)), mat3x4(1.0), _GLF_struct_3(mat4x3(1.0), uvec4(1u), mat2x3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (1.0) / 1.0), 1.0))), mat3x4(1.0), mat3x2(1.0), mat3x2(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.8))), determinant(mat4(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-67.95) : 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0), min(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(87.76)), float(1.0), bool(true))))), 1.0), vec2(0.0, 0.0))))), 0.0)))), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], (vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED(249.131), _GLF_FUZZED((true ? -4762.8418 : -1874.4328))), bvec2(false, false))))[0], _GLF_FUZZED(3137.3940)), vec2(_GLF_FUZZED((9628.7608)), (vec2(0.0, 0.0))[1]), bvec2(false, true))), vec2(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)))), min(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (true ? dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))) : _GLF_FUZZED(38.22))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0), mix(vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(14.20)), vec2((vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), min(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.3)), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))), bool(true)))), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.8)), float(1.0), bool(true)))), vec2(0.0, 0.0))))), 0.0))[0], (vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0))[1]), bvec2(true, true)))))), 1.0 * (float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, (1.0) - sqrt(0.0)), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(mix(-74.89, 5.2, true)) : 1.0)), 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, float(float(0.0))), 0.0))))), _GLF_IDENTITY(0.0, max(0.0, 0.0))), min(vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, cos(0.0) * (1.0)), 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0 + (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), 0.0))))))), float(_GLF_FUZZED(1.7)), bool(false)))), 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))), _GLF_struct_4(mat4x3(1.0), uvec3(1u), mat3x4(1.0), _GLF_IDENTITY(vec3(1.0), mix(vec3(_GLF_IDENTITY((vec3(1.0)), vec3(mat4x2((vec3(1.0)), log(1.0), sqrt(cos(0.0)), 1.0, 0.0, 1.0)))[0], (vec3(1.0))[_GLF_IDENTITY(1, (1) >> 0)], _GLF_FUZZED(-4.6)), vec3(_GLF_FUZZED(-63.99), _GLF_FUZZED((3.5 + 2349.3155)), (vec3(1.0))[2]), bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true))) || false), _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, false || (true))))), mat3(1.0))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_6._f1.workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size))) - 0u))) : _GLF_IDENTITY(_GLF_struct_replacement_6._f1.workgroup_id, max(_GLF_struct_replacement_6._f1.workgroup_id, _GLF_struct_replacement_6._f1.workgroup_id)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_6._f1.workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size))) - 0u), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size))) - 0u)))))) : _GLF_struct_replacement_6._f1.workgroup_id)))), (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_6._f1.workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_FUZZED(_GLF_IDENTITY(atomicAdd(workgroup_size, workgroup_size), 0u ^ (_GLF_IDENTITY(atomicAdd(workgroup_size, workgroup_size), (0u & 10850u) | (atomicAdd(workgroup_size, workgroup_size))))))) - 0u))) : _GLF_struct_replacement_6._f1.workgroup_id)))), (~ (~ (_GLF_IDENTITY(_GLF_struct_replacement_6._f1.workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size))) - 0u))) : _GLF_struct_replacement_6._f1.workgroup_id))))) | 0u)) >> 0u)), (workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_6._f1.workgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size)), (_GLF_FUZZED(atomicAdd(workgroup_size, workgroup_size))) - 0u))) : _GLF_struct_replacement_6._f1.workgroup_id))) >> 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-76.95)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), min(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(59.58) : injectionSwitch.y)))), 0.0, 1.0, 0.0))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), min(_GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), clamp(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0))))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(_GLF_IDENTITY(mat4(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(44.71)), bool(false))), 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-76.95)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, max(0.0, 0.0)), sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), min(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(59.58) : injectionSwitch.y)))), 0.0, 1.0, 0.0))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 0.0))), 1.0, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(_GLF_IDENTITY(mat4(0.0, 0.0, _GLF_IDENTITY(0.0, determinant(mat3(1.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)) * (0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-76.95)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), min(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, float(mat3(0.0, sqrt(1.0), 1.0, round(length(normalize(1.0))), 0.0, 1.0, 0.0, cos(0.0), 1.0)))), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(59.58) : injectionSwitch.y)))), 0.0, 1.0, 0.0))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), 0.0, 1.0)), _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.3)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), injectionSwitch.x)), 0.0, 1.0)), (true ? float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(5.3)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)))), injectionSwitch.x)), 0.0, 1.0)) : _GLF_FUZZED(-63.66))), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-76.95)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-926.725)), float(0.0), bool(true))), 1.0, 0.0)))), log(1.0))), min(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(59.58) : injectionSwitch.y)))), 0.0, 1.0, 0.0))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), min(sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)))), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), (false ? _GLF_FUZZED(8.0) : float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(_GLF_IDENTITY(mat4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(9.4)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-76.95)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), min(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(59.58) : injectionSwitch.y)))), 0.0, 1.0, 0.0))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0), mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(_GLF_IDENTITY(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))), 1.0, _GLF_IDENTITY(sin(_GLF_ZERO(0.0, injectionSwitch.x)), (sin(_GLF_ZERO(0.0, injectionSwitch.x))) / 1.0), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-76.95)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), min(float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0))), float(mat4x3(0.0, sqrt(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), log(1.0)))))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, abs(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(59.58) : injectionSwitch.y)))), 0.0, 1.0, 0.0))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_ZERO(0.0, injectionSwitch.x)), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0)), float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, exp(0.0), 0.0, sin(determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 1.0, sin(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-77.88)), bool(false))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0)), 0.0)), injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x)))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 1.0))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))))))), 1.0, 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))) / 1.0) > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec3((_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false)), ! (! (bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), false))))))), true))) && true) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
            barrier();
           barrier();
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(116.274)))))))))).x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(116.274)))))))))).x > injectionSwitch.y)), true, true, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(116.274)))))))))).x > injectionSwitch.y)), true, true, true)))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(float(0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(116.274)))))))))).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), false, false))), true)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, false, true)))))))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(mat2(1.0), 1u, _GLF_struct_11(1.0, _GLF_struct_7(bvec2(true), atomicLoad(buf[virtual_gid], 4, 64, 0), mat4(1.0), _GLF_IDENTITY(ivec3(1), _GLF_IDENTITY((ivec3(1)), ivec3(ivec3(_GLF_IDENTITY((ivec3(1)), ((ivec3(1))) ^ ivec3(0, _GLF_IDENTITY(0, (false ? _GLF_IDENTITY(_GLF_FUZZED(88092), max(_GLF_IDENTITY(_GLF_FUZZED(88092), min(_GLF_FUZZED(88092), _GLF_FUZZED(88092))), _GLF_FUZZED(88092))) : 0)), 0))))) << ivec3(0, 0, 0)), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), min(1.0, 1.0)))), _GLF_struct_8(1.0, true, mat3x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0))))), _GLF_struct_9(true, uvec4(1u), uvec2(1u), mat3x2(1.0), ivec4(1)), _GLF_struct_10(vec2(1.0), mat3x2(1.0), mat3x4(1.0), vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)))), ivec2(1)), mat3x4(1.0), mat2x4(1.0), ivec4(1), _GLF_struct_15(mat2x3(1.0), _GLF_struct_12(mat3x4(1.0), mat2x4(1.0), mat4x2(1.0), vec4(1.0)), _GLF_struct_13(mat4x3(1.0), uvec4(1u), mat4x3(1.0), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(15535 & 0, (15535 & 0) >> 0)) ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 0), ivec3(0, 0, 0) + (ivec3(1, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) / 1))))), (int(_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) - ivec3(0, 0, 0)) + (_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, ~ (~ (1))), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), 1)), _GLF_IDENTITY(0, ~ (~ (0))), 0))), _GLF_IDENTITY((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))), ~ (~ ((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))))))))), clamp(_GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) - ivec3(0, 0, 0)) + (_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, ~ (~ (1))), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), 1)), _GLF_IDENTITY(0, ~ (~ (0))), 0))), _GLF_IDENTITY((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))), ~ (~ ((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))))))))), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) - ivec3(0, 0, 0)) + (_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, ~ (~ (1))), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), 1)), _GLF_IDENTITY(0, ~ (~ (0))), 0))), _GLF_IDENTITY((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))), ~ (~ ((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))))))))), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, 0)) - ivec3(0, 0, 0)) + (_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, ~ (~ (1))), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), 1)), _GLF_IDENTITY(0, ~ (~ (0))), 0))), _GLF_IDENTITY((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138))), ~ (~ ((true ? ivec3(_GLF_IDENTITY(ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (ivec3(ivec3(1, _GLF_IDENTITY(0, ~ (~ (0))), 0))) << ivec3(0, 0, 0))) : _GLF_FUZZED(ivec3(62141, 89783, 24138)))))))))))))) << 0))))), _GLF_IDENTITY(true, ! (! (true))), mat4x2(1.0)), mat2x4(1.0), _GLF_struct_14(mat4(1.0), mat3x4(1.0), bvec3(true), ivec3(1), uvec2(1u)), mat2(1.0)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1), _GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1), _GLF_IDENTITY(0u + (uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1)), ~ (~ (0u + (uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1))))))) / 1u, uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1), 0u + (uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1)))) / 1u, ((_GLF_IDENTITY(uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1), 0u + (uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1)))) / 1u) >> 0u), 0u)))), _GLF_IDENTITY(4, (4) | 0), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), false || ((injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))))), true, false)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), false), bvec2(bvec3(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false), false))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), false), bvec2(bvec3(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false), false)))))), false || (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), false), bvec2(bvec3(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false), false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, false)))), false, true)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), sin(0.0), 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), sin(0.0), 0.0))))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), sin(0.0), 0.0)), vec2(1.0, 1.0) * _GLF_IDENTITY((vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0)), sin(0.0), 0.0))), (true ? (vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, determinant(mat2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0)), sin(0.0), 0.0))) : _GLF_FUZZED((-938.989 - injectionSwitch)))))).x > injectionSwitch.y))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))) && true))) && true)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), transpose(transpose(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))))), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || false)))), true, true, true))) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), transpose(transpose(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))))), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || false)))), true, true, true))) || false))), ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), transpose(transpose(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))))), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || false)))), true, true, true))) || false)))) || false)), (! (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), transpose(transpose(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))))), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || false)))), true, true, true))) || false))), ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), transpose(transpose(mat4x3(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))))), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) || false)))), true, true, true))) || false)))) || false))) && true))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(_GLF_IDENTITY(8.0, min(8.0, 8.0))) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), true, true, true))) || false)))), ! (_GLF_IDENTITY(! (bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) && true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false || ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))), true, true, true))) || false))))), (! (bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (_GLF_IDENTITY(false ? _GLF_FUZZED(8.0) : injectionSwitch.x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x) / 1.0))), injectionSwitch.x)) > injectionSwitch.y), true, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-157.044) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x))) / 1.0))) > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-157.044) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x))) / 1.0))), float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-157.044) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sqrt(sqrt(vec2(1.0, 1.0))) * (injectionSwitch)).x, (false ? _GLF_FUZZED(8.0) : injectionSwitch.x)), injectionSwitch.x))) / 1.0))), 0.0, log(1.0), 1.0, 0.0, 0.0, 0.0, 1.0))) > injectionSwitch.y)))) && true), true, true, true))) || false)))))) && true)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(bool(false), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(bool(false), true), bvec2(bvec2(bvec2(bool(false), true)))))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-121.961))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(faceforward(vec2(-3723.4674, 2223.4096), vec2(-0.5, 118.398), injectionSwitch)) : injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat4x3(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) + mat2(0.0, 0.0, 0.0, 0.0))))) * (injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-7.9)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))))), mix(float(_GLF_FUZZED(vec2(1526.4183, 513.395).g)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(ceil(injectionSwitch)) : injectionSwitch)).x > injectionSwitch.y))))))))), false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_16._f2._f1.read_1 + 1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid))], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, uint(uvec4(_GLF_struct_replacement_16._f2._f1.read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) >> 0u), 0u, 0u))), 0u))))) == _GLF_IDENTITY(read_2, (read_2) | (read_2))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, uint(uvec4(_GLF_struct_replacement_16._f2._f1.read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) >> 0u), 0u, 0u))), 0u))))) == _GLF_IDENTITY(read_2, (read_2) | (read_2))), (uint(_GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, uint(uvec2(_GLF_IDENTITY(_GLF_struct_replacement_16._f2._f1.read_1 + 1, uint(uvec4(_GLF_struct_replacement_16._f2._f1.read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), (_GLF_IDENTITY(0u, max(0u, 0u))) >> 0u), 0u, 0u))), 0u))))) == _GLF_IDENTITY(read_2, (read_2) | (read_2)))) * 1u)) * (1u | (1u & 1u))) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (false ? _GLF_FUZZED(305.488) : injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(cos(0.0)))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, injectionSwitch.x)) > injectionSwitch.y)), (bool((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 0.0))).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))) && true))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (bool((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 0.0))).x, min(injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 0.0))).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 0.0))).x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), sin(0.0), 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, exp(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), sin(0.0), 0.0, 0.0))).x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))) && true)))))) && true))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch)))).y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y, injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(4.0)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), false || (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), true, true))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
