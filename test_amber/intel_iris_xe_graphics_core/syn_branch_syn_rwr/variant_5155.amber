#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0))))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))))))))); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (1 | (1 | 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) ^ uvec3(0u, 0u, 0u)))))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), clamp((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))), (workgroup_base + subgroup_id * subgroup_size), (workgroup_base + subgroup_id * subgroup_size))), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))))), (~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(_GLF_IDENTITY(uvec4(workgroup_base + subgroup_id * subgroup_size, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), (1u ^ 1u)), ~ (~ (uvec4(workgroup_base + subgroup_id * subgroup_size, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), (1u ^ 1u)))))))), ~ (~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))))))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | 0u)), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), clamp(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), _GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), (uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))) | (uint(uvec2(_GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), (true ? (~ ((workgroup_base + subgroup_id * subgroup_size))) : _GLF_FUZZED(workgroup_id))), 0u)))), uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))))))), min(~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), clamp(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), _GLF_IDENTITY(uint(uvec2((~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | ((workgroup_base + subgroup_id * subgroup_size))))), 0u)), (uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))) | (uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)))), uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))))))), ~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), clamp(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), _GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), (uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))) | (uint(uvec2(_GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * ((~ ((workgroup_base + subgroup_id * subgroup_size))))), 0u)))), uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))))))))), (~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY(~ (~ ((workgroup_base + subgroup_id * subgroup_size))), 1u * (_GLF_IDENTITY(~ (~ ((workgroup_base + subgroup_id * subgroup_size))), 0u | (_GLF_IDENTITY(~ (~ ((workgroup_base + subgroup_id * subgroup_size))), clamp(~ (~ ((workgroup_base + subgroup_id * subgroup_size))), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))), ~ (~ ((workgroup_base + subgroup_id * subgroup_size)))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))))), max(~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))))), ~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * subgroup_size)))), 0u + (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), max((~ ((workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), clamp((~ ((workgroup_base + subgroup_id * subgroup_size))), (~ ((workgroup_base + subgroup_id * subgroup_size))), (~ ((workgroup_base + subgroup_id * subgroup_size))))))))))), (~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))))) | (~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + subgroup_id * subgroup_size)))))))) ^ 0u))), 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), clamp((_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))) | (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))))), (workgroup_base + subgroup_id * subgroup_size), (workgroup_base + _GLF_IDENTITY(subgroup_id, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(4u), uint(4u))) ^ (subgroup_id)) * subgroup_size))), ~ (~ ((workgroup_base + subgroup_id * subgroup_size))))), (~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) >> 0u))))))), 0u ^ ((~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))) >> 0u)))))))))))) | (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), min(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ((workgroup_base + subgroup_id * subgroup_size)) | (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (workgroup_base + subgroup_id * subgroup_size))), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)))))) >> 0u) * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), min(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))))))), (_GLF_IDENTITY((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))))), min((_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))))), (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ (~ ((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)))))))))) ^ 0u))), uint(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), ~ _GLF_IDENTITY((~ ((workgroup_base + subgroup_id * subgroup_size))), _GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), clamp(uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u)), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size)), ~ (~ (~ ((workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size)))))), 0u)), (uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))) | (_GLF_IDENTITY(uint(uvec2((~ ((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u)))))))), 0u)), ~ (~ (uint(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))))))), uint(_GLF_IDENTITY(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u), max(_GLF_IDENTITY(uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u), uvec2(1u, 1u) * (uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))), uvec2((~ ((workgroup_base + subgroup_id * subgroup_size))), 0u))))))))), (~ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), _GLF_IDENTITY(~ (~ ((workgroup_base + subgroup_id * subgroup_size))), ~ (~ (~ (~ ((workgroup_base + subgroup_id * subgroup_size))))))))) | (~ (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ 0u)), ~ (~ ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base))))) >> 0u) + subgroup_id * subgroup_size))))))), 0u))))))) * ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY((_GLF_IDENTITY(uint(6u), (uint(6u)) ^ (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))), clamp((_GLF_IDENTITY(uint(6u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(6u), min(uint(6u), _GLF_IDENTITY(uint(6u), (uint(6u)) - 0u))) : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY((uint(6u)), 0u | ((uint(6u)))), (uint(6u))))), (_GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY((uint(6u)), clamp((uint(6u)), _GLF_IDENTITY((uint(6u)), 0u | ((uint(6u)))), (uint(6u)))))) - 0u)), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : 6u))), 0u | _GLF_IDENTITY((uint(_GLF_IDENTITY(6u, (6u) << 0u))), clamp((uint(6u)), _GLF_IDENTITY((uint(6u)), 0u | ((uint(6u)))), (uint(6u)))))), ~ (~ (_GLF_IDENTITY(1u, (1u) << 0u) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uint(6u), uint(uvec4(uint(6u), 0u, 0u, 0u)))), clamp(_GLF_IDENTITY((uint(6u)), ((uint(6u))) / ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), min(uint(2u), uint(2u)))))), _GLF_IDENTITY((uint(6u)), _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), (true ? _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), clamp(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))))) : _GLF_FUZZED(workgroup_id)))), (uint(6u)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, min(6u, 6u))) / 1u)), uint(uvec4(uint(6u), 0u, 0u, 0u)))), clamp((uint(6u)), _GLF_IDENTITY((uint(6u)), _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), (true ? _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), clamp(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))))) : _GLF_FUZZED(workgroup_id)))), (uint(_GLF_IDENTITY(6u, (6u) ^ 0u))))), 1u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(uint(6u), uint(uvec4(uint(6u), 0u, 0u, 0u)))), clamp((uint(6u)), _GLF_IDENTITY((uint(6u)), _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), (true ? _GLF_IDENTITY(0u | _GLF_IDENTITY(((uint(_GLF_IDENTITY(6u, 0u | (6u))))), (((uint(_GLF_IDENTITY(6u, 0u | (6u)))))) ^ 0u), clamp(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))))) : _GLF_FUZZED(workgroup_id)))), (uint(6u)))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(uint(6u), uint(uvec4(uint(6u), 0u, 0u, 0u)))), clamp((uint(6u)), _GLF_IDENTITY((uint(6u)), _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), (true ? _GLF_IDENTITY(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), clamp(0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), 0u | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))), _GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, min(0u, 0u)))) | ((uint(_GLF_IDENTITY(6u, 0u | (6u))))))) : _GLF_FUZZED(workgroup_id)))), (uint(6u)))), 1u))) : _GLF_FUZZED(num_workgroup)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), (1u) << 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY((uint(_GLF_IDENTITY(6u, min(6u, 6u)))), clamp((_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))), _GLF_IDENTITY((uint(6u)), 0u | ((uint(6u)))), (uint(6u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY((uint(_GLF_IDENTITY(6u, min(6u, 6u)))), clamp((_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))), _GLF_IDENTITY((uint(6u)), _GLF_IDENTITY(0u | ((uint(6u))), (_GLF_IDENTITY(0u | ((uint(6u))), ~ (~ (_GLF_IDENTITY(0u | ((uint(6u))), (0u | ((uint(6u)))) | (0u | ((uint(6u))))))))) >> (0u << _GLF_IDENTITY(uint(6u), uint(6u))))), (uint(6u)))))), (_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY((uint(_GLF_IDENTITY(6u, min(6u, 6u)))), clamp((_GLF_IDENTITY(uint(6u), ~ (~ (uint(6u))))), _GLF_IDENTITY((uint(6u)), 0u | _GLF_IDENTITY((_GLF_IDENTITY((uint(6u)), (false ? _GLF_FUZZED(subgroup_size) : (uint(6u))))), (_GLF_IDENTITY((_GLF_IDENTITY((uint(6u)), (false ? _GLF_FUZZED(subgroup_size) : (uint(6u))))), (false ? _GLF_FUZZED(atomicCompSwap(num_workgroup, subgroup_id, subgroup_id)) : (_GLF_IDENTITY((uint(6u)), (false ? _GLF_FUZZED(subgroup_size) : (uint(6u)))))))) >> 0u)), (uint(6u))))))) << 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ (_GLF_IDENTITY(1u, (1u) << 0u) << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), 0u | _GLF_IDENTITY((uint(6u)), clamp((_GLF_IDENTITY(uint(6u), (uint(6u)) ^ _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY((uint(6u)), min((uint(6u)), (uint(6u)))), 0u | ((uint(6u)))), (uint(6u)))))))))))) >> _GLF_IDENTITY(uint(6u), uint(6u)))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(max((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), 1u * (max(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2((subgroup_local_id + 1) % subgroup_size, 0u), (uvec2((subgroup_local_id + 1) % subgroup_size, 0u)) | (uvec2((subgroup_local_id + 1) % subgroup_size, 0u))), min(_GLF_IDENTITY(uvec2((subgroup_local_id + 1) % subgroup_size, 0u), (uvec2(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u) % subgroup_size, 0u)) / uvec2(1u, 1u)), uvec2((subgroup_local_id + _GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-78159)))))) % subgroup_size, 0u))))), (subgroup_local_id + 1) % subgroup_size)))));
 uint read_1 = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY((buf[virtual_gid]), ~ (~ ((buf[virtual_gid]))))) | _GLF_IDENTITY(((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))))))), ~ (~ (((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))))))))))) | 0u)) / 1u), max(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), (_GLF_IDENTITY((buf[virtual_gid]), ~ (~ ((buf[virtual_gid]))))) | ((buf[virtual_gid]))) / 1u), _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), clamp((buf[virtual_gid]), (buf[virtual_gid]), (buf[virtual_gid]))), (_GLF_IDENTITY((buf[virtual_gid]), ~ (~ ((buf[virtual_gid]))))) | ((buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))]))) / 1u))), 4, 64, 0);
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               continue;
              }
             do
              {
               do
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))))).x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)], uint(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, (1) ^ 0), 1), (false ? _GLF_FUZZED(int(false)) : _GLF_IDENTITY(max(_GLF_IDENTITY(1, (1) ^ 0), 1), int(ivec3(max(_GLF_IDENTITY(1, (1) ^ 0), 1), 0, 0))))))) | (_GLF_IDENTITY(1, (1) | (1))))), 4, 64, 4);
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) >> 0)))); _injected_loop_counter --)
                      {
                       return;
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))))))))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY((_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x), min(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), min(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))), max((_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x), min(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), min(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))), (_GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x), min(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), min(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))))) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))) / 1.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1)))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
     else
      {
      }
    }
  }
 uint read_2 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))))))], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY((64), (_GLF_IDENTITY((64), max((64), (64)))) - 0) - 0)) | (64)), 0);
 for(int _injected_loop_counter = (48907 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-11.73) : injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false))))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1)) < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))) + tan(vec2(0.0, 0.0))).x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), vec2(_GLF_FUZZED(vec3(2094.0991, -1.5, 9.1).s), (injectionSwitch)[1]), bvec2(false, true))).x, float(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.7)), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec3(_GLF_IDENTITY(2094.0991, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(6567.8061), _GLF_FUZZED(-9.7)), bvec2(false, false))).y)) ? 2094.0991 : _GLF_FUZZED(6728.9862))), -1.5, 9.1), mat3(1.0) * (vec3(_GLF_IDENTITY(2094.0991, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 2094.0991 : _GLF_FUZZED(6728.9862))), -1.5, 9.1))).s), (injectionSwitch)[1]), bvec2(false, true))).x, _GLF_ONE(1.0, injectionSwitch.y), 1.0))) > injectionSwitch.y))), true, false, false))), false))))
            return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(int(_injected_loop_counter))) < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                         return;
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   return;
                  }
                }
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((+ -2169)) : _injected_loop_counter ++)))
                {
                 return;
                }
              }
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
              return;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x)))), mix(float(_GLF_FUZZED(-2573.5542)), float(_GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x)))), clamp(clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x)))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x)))), clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))))))), bool(true)))) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   int i = 0;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.5)), bool(false)))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), false))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), false))), false))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)), true && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (! (true))), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, bool(bool(_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), true, false)))))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y)) && (false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), false))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), false))), false))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)), true && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (! (true))), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, bool(bool(_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), true, false)))))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y)) && (false))))), true && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))), true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, _GLF_IDENTITY(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), false || (bool(bvec3(true, false, true)))))) && true) && (_GLF_IDENTITY(false, ! (! (false))))))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), false))), false)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((false) || false), ! (! (_GLF_IDENTITY(bool((false) || false), true && (bool((false) || false))))))), (bool(_GLF_IDENTITY(bool((false) || false), ! (! (_GLF_IDENTITY(bool((false) || false), true && (bool((false) || false)))))))) && true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))), true)), false))), false))))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), true, false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false)), true && (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, ! (! (true))), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(false, false || (false)))))))))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false, bool(bool(_GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))), true, false)))))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y)) && (false)))))))) || false))
        return;
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) || false)) && true), bool(bvec3((false) || false, true, true))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-2.8, -1963.6642))), (_GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-2.8, -1963.6642))), _GLF_IDENTITY(vec2(mat4((true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-2.8, -1963.6642))), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.7))) : _GLF_FUZZED(-4266.3439))), 1.0, 0.0, 1.0)), (vec2(mat4((true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-2.8, -1963.6642))), sqrt(1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 1.0))) * vec2(1.0, 1.0)))) / vec2(1.0, 1.0))))).y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec4((false), false, true, false)))) || false) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 0)), (int(ivec3(1, 0, 0))) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-36.37)), bool(false))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)), 0 | ((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0))) * 1), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY((_GLF_IDENTITY(int(4), int(4))), ((_GLF_IDENTITY(int(4), int(4)))) | ((_GLF_IDENTITY(int(4), int(4))))) ^ 0)))) >> 0))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(3), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(ivec3(int(3), 1, 1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(int(3), 1, 1), max(ivec3(int(3), 1, 1), ivec3(int(3), 1, 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1))), (_GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1)))) >> 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1))), min(_GLF_IDENTITY(int(3), int(ivec3(int(3), _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) | (1)))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(ivec3(_GLF_IDENTITY(int(3), 0 + (int(3))), 1, 1))), max(_GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1))), _GLF_IDENTITY(int(3), int(ivec3(int(3), 1, 1)))))))))) >> 0) : _GLF_FUZZED(_injected_loop_counter))), int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(i) : 3))))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(uvec3(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (uint(read_1 + 1 == read_2) + 1) >> 0u)) / 1u), 1u, 1u))), clamp(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(uvec3(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, 0u + (read_1)) + 1 == read_2) + 1, (uint(read_1 + 1 == read_2) + 1) >> 0u)) / 1u), 1u, 1u))), _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(uvec3(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY((uint(read_1 + 1 == read_2) + 1) >> 0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((uint(read_1 + 1 == read_2) + 1) >> 0u, 0u ^ ((uint(read_1 + 1 == read_2) + 1) >> 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), (uvec3(_GLF_IDENTITY((uint(read_1 + 1 == read_2) + 1) >> 0u, 0u ^ ((uint(read_1 + 1 == read_2) + 1) >> 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)) | uvec3(0u, 0u, 0u)))))) / 1u), 1u, 1u))), _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, uint(uvec3(_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (_GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, (uint(read_1 + 1 == read_2) + 1) >> 0u)) / 1u), 1u, 1u))))), 4, 64, 4);
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 1))))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, ~ (~ (1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) << 0)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(ivec3(_GLF_IDENTITY(1, (1) | (1)), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(ivec3(_GLF_IDENTITY(1, (1) | (1)), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1, (1) | (1)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(ivec3(_GLF_IDENTITY(1, (1) | (1)), 0, int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(1, (1) | (1))))) / 1)) | 0)), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), int(ivec3(_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))), 0, 1)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (-54406 & 0) + (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), clamp(_GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(1, (1) | (1))))))) | (_GLF_IDENTITY(1, (1) | (1)))))), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1)))))))))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6))), true && (_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))))) && true)); _injected_loop_counter --)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec3(false, true, true)))))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false)));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       for(int _injected_loop_counter = ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (1 | ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))), true))), true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (-36902 >> -57243))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
                  {
                   for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true), false), true)))))) || false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 | 0))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(uint(uvec4(next_virtual_gid, 1u, 1u, 1u)), 0u ^ (uint(_GLF_IDENTITY(uvec4(next_virtual_gid, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u, 1u), min(uvec4(next_virtual_gid, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u, 1u), _GLF_IDENTITY(uvec4(next_virtual_gid, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u, 1u), (uvec4(next_virtual_gid, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))))))], uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), int(_GLF_IDENTITY(ivec4(1, 0, 1, 0), max(_GLF_IDENTITY(ivec4(1, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec3((0), 1, 0))) << 0)), min(~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec3((0), 1, 0))) << 0)), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec3((0), 1, 0))) << 0)), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec3((0), 1, 0))) << 0))) + 0))))), 1, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(3815) : 0)), (0) | (0))) - 0))))), 1, 0), ~ (~ (ivec4(1, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0)))), 1, 0))))) ^ ivec4(0, 0, 0, 0)), ivec4(1, 0, _GLF_IDENTITY(1, min(1, 1)), 0))))) == read_2) + 1, 4, 64, 4);
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
