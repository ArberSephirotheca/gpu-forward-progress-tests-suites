#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_26 {
 mat2x4 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 bool _f3;
 int _f4;
} ;

struct _GLF_struct_27 {
 mat2 _f0;
 bool _f1;
 ivec4 _f2;
 _GLF_struct_26 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_24 {
 bvec4 _f0;
 mat2x4 _f1;
 mat3x4 _f2;
 bool _f3;
} ;

struct _GLF_struct_23 {
 uint _f0;
 float _f1;
} ;

struct _GLF_struct_25 {
 _GLF_struct_23 _f0;
 mat2x4 _f1;
 _GLF_struct_24 _f2;
 vec3 _f3;
 mat2x4 _f4;
 mat3x2 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_21 {
 ivec2 _f0;
 uvec4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_20 {
 mat4x2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_19 {
 uvec2 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_22 {
 mat3 _f0;
 mat3x2 _f1;
 ivec3 _f2;
 _GLF_struct_19 _f3;
 _GLF_struct_20 _f4;
 _GLF_struct_21 _f5;
} ;

struct _GLF_struct_17 {
 mat2x3 _f0;
 uint _f1;
} ;

struct _GLF_struct_16 {
 bvec4 _f0;
 uvec3 _f1;
 vec2 _f2;
 ivec3 _f3;
 mat3 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_15 {
 mat4x2 _f0;
 int _f1;
} ;

struct _GLF_struct_18 {
 _GLF_struct_15 _f0;
 mat3x4 _f1;
 bool _f2;
 _GLF_struct_16 _f3;
 mat3x2 _f4;
 ivec3 _f5;
 _GLF_struct_17 _f6;
} ;

struct _GLF_struct_28 {
 _GLF_struct_18 _f0;
 _GLF_struct_22 _f1;
 mat4x2 _f2;
 _GLF_struct_25 _f3;
 _GLF_struct_27 _f4;
 uint subgroup_size;
} ;

struct _GLF_struct_12 {
 bvec4 _f0;
 mat4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_11 {
 vec4 _f0;
 uvec3 _f1;
 mat3 _f2;
 mat3 _f3;
 bvec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
} ;

struct _GLF_struct_9 {
 int _f0;
 vec3 _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_14 {
 mat3 _f0;
 int _f1;
 mat4x2 _f2;
 _GLF_struct_10 _f3;
 uint workgroup_base;
 _GLF_struct_13 _f4;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
 bool _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 int _f1;
 float _f2;
 mat4 _f3;
 ivec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_6 {
 bool _f0;
 bvec4 _f1;
 ivec2 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_8 {
 uint num_workgroup;
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 vec4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_3 {
 uint subgroup_local_id;
 bvec2 _f0;
} ;

struct _GLF_struct_2 {
 uvec4 _f0;
} ;

struct _GLF_struct_4 {
 mat3x4 _f0;
 _GLF_struct_2 _f1;
 bvec4 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_1 {
 int i;
 ivec2 _f0;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 uint subgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat2x4(1.0), gl_SubgroupID);
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(_GLF_struct_18(_GLF_struct_15(mat4x2(1.0), 1), mat3x4(1.0), true, _GLF_struct_16(bvec4(true), uvec3(1u), vec2(1.0), ivec3(1), mat3(1.0), bvec2(true)), mat3x2(1.0), ivec3(1), _GLF_struct_17(mat2x3(1.0), 1u)), _GLF_struct_22(mat3(1.0), mat3x2(1.0), ivec3(1), _GLF_struct_19(uvec2(1u), bvec2(true)), _GLF_struct_20(mat4x2(1.0), bvec3(true)), _GLF_struct_21(ivec2(1), uvec4(1u), mat2x4(1.0))), mat4x2(1.0), _GLF_struct_25(_GLF_struct_23(1u, 1.0), mat2x4(1.0), _GLF_struct_24(bvec4(true), mat2x4(1.0), mat3x4(1.0), true), vec3(1.0), mat2x4(1.0), mat3x2(1.0), vec2(1.0)), _GLF_struct_27(mat2(1.0), true, ivec4(1), _GLF_struct_26(mat2x4(1.0), mat4x3(1.0), mat2x4(1.0), true, 1), mat3x2(1.0)), gl_SubgroupSize);
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(mat3x4(1.0), _GLF_struct_2(uvec4(1u)), bvec4(true), _GLF_struct_3(gl_SubgroupInvocationID, bvec2(true)));
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(gl_NumWorkGroups.x, _GLF_struct_6(true, bvec4(true), ivec2(1), _GLF_struct_5(vec2(1.0), 1, 1.0, mat4(1.0), ivec4(1), true)), _GLF_struct_7(bvec2(true), true, mat3x2(1.0)), vec4(1.0), mat3x2(1.0));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(mat3(1.0), 1, mat4x2(1.0), _GLF_struct_10(_GLF_struct_9(1, vec3(1.0))), workgroup_size * workgroup_id, _GLF_struct_13(_GLF_struct_11(vec4(1.0), uvec3(1u), mat3(1.0), mat3(1.0), bvec3(true), ivec2(1)), _GLF_struct_12(bvec4(true), mat4(1.0), bvec2(true))));
 uint virtual_gid = _GLF_struct_replacement_14.workgroup_base + _GLF_struct_replacement_0.subgroup_id * _GLF_struct_replacement_28.subgroup_size + _GLF_struct_replacement_4._f3.subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_14.workgroup_base + _GLF_struct_replacement_0.subgroup_id * _GLF_struct_replacement_28.subgroup_size + ((_GLF_struct_replacement_4._f3.subgroup_local_id + 1) % _GLF_struct_replacement_28.subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_struct_replacement_4._f3.subgroup_local_id + 1 < _GLF_struct_replacement_28.subgroup_size)
    {
     _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(0, ivec2(1));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
      }
     else
      {
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
