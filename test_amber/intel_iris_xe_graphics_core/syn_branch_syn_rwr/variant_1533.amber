#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_15 {
 uvec2 _f0;
 ivec4 _f1;
 int _f2;
 mat2 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_16 {
 _GLF_struct_15 _f0;
} ;

struct _GLF_struct_13 {
 vec2 _f0;
 uint _f1;
 float _f2;
 bvec4 _f3;
 bvec3 _f4;
 uint workgroup_id;
} ;

struct _GLF_struct_14 {
 float _f0;
 ivec2 _f1;
 _GLF_struct_13 _f2;
} ;

struct _GLF_struct_11 {
 mat3 _f0;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 vec2 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_12 _f0;
 uvec4 _f1;
 bvec4 _f2;
 _GLF_struct_14 _f3;
 _GLF_struct_16 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_7 {
 mat4x2 _f0;
 bvec4 _f1;
 mat4 _f2;
 vec4 _f3;
 bvec2 _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 vec4 _f1;
 ivec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 mat2x3 _f1;
 mat3x4 _f2;
 bool _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 int _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_3 {
 vec2 _f0;
 int _f1;
 uint _f2;
 uvec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat2x4 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_2 _f0;
 ivec2 _f1;
 _GLF_struct_3 _f2;
 mat2 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 uvec3 _f1;
 _GLF_struct_0 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 vec2 _f1;
 bvec2 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_8 _f4;
 uint subgroup_id;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), (true && (_GLF_DEAD(false))) || false))))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(_GLF_IDENTITY(bvec3(true), bvec3(_GLF_IDENTITY(bvec3(bvec3(true)), bvec3(bvec4(bvec3(bvec3(true)), false))))), uvec3(1u), _GLF_struct_0(uvec2(1u), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec2(bvec2(true))), bvec2(bvec4(bvec2(bvec2(bvec2(true))), false, false))))), mat2x4(1.0)), vec2(1.0), bvec2(true), _GLF_struct_4(_GLF_struct_2(mat2x3(1.0), mat2x4(1.0), uvec4(1u)), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), _GLF_struct_3(vec2(1.0), 1, _GLF_IDENTITY(1u, 1u * (1u)), uvec4(1u), vec4(1.0)), mat2(1.0), mat2(1.0)), _GLF_struct_8(_GLF_struct_5(ivec3(1), mat2x3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(2874.4504) : 1.0))), mat3x4(1.0), true, ivec2(1)), 1, _GLF_struct_6(mat2x4(1.0), vec4(1.0), _GLF_IDENTITY(ivec2(1), ~ (~ _GLF_IDENTITY((ivec2(1)), min((ivec2(1)), _GLF_IDENTITY((ivec2(1)), max((ivec2(1)), _GLF_IDENTITY((ivec2(1)), clamp((ivec2(1)), (ivec2(1)), (ivec2(1)))))))))), ivec3(1)), _GLF_struct_7(mat4x2(1.0), bvec4(true), mat4(1.0), vec4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0)))), bvec2(true), mat3x2(1.0))), gl_SubgroupID);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, true && ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))), false, false)), _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec3((! (_GLF_DEAD(false))), false, false), bvec3(bvec3(bvec3((! (_GLF_DEAD(false))), false, false))))))) || false))) || false), false, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))) && true)) && true)) && true)), _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)))), false, false)))) && true, bool(bvec4((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, true, true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false)))), false, false)))) && true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec3((! (_GLF_DEAD(false))), false, false), bvec3(bvec3(bvec3((! (_GLF_DEAD(false))), false, false))))))) || false))) || false), false, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))) && true)) && true)) && true)), _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)))), false, false)))) && true, bool(bvec4((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, true, true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false)))), false, false)))) && true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bool(! (_GLF_IDENTITY(! _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), (_GLF_IDENTITY((! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec3((! (_GLF_DEAD(false))), false, false), bvec3(bvec3(bvec3((! (_GLF_DEAD(false))), false, false))))))) || false))) || false), false, false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || false))), (! (_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), _GLF_IDENTITY(bool(bvec3(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))), false, false)), (bool(bvec3(_GLF_IDENTITY(! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false)))), ! (! (! ((bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), false, false))))))), false, false))) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))) && true)) && true)) && true)), _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false)))), false, false)))) && true, bool(bvec4((! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false, true, true)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false))))) || false)))), false, false)))) && true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) || false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(6), int(6))) & 78647)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)))), false, false), false)))))) && true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_17 _GLF_struct_replacement_17 = _GLF_struct_17(_GLF_struct_12(_GLF_struct_10(bvec4(true), vec2(1.0), mat3x2(1.0)), _GLF_struct_11(mat3(1.0))), uvec4(_GLF_IDENTITY(1u, (1u) >> 0u)), bvec4(true), _GLF_struct_14(1.0, ivec2(1), _GLF_struct_13(vec2(1.0), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), (false ? _GLF_FUZZED(subgroup_local_id) : (1u))) / (_GLF_IDENTITY(0u | 1u, max(_GLF_IDENTITY(0u | 1u, max(0u | 1u, 0u | 1u)), 0u | 1u)))))), 1.0, bvec4(true), bvec3(true), gl_WorkGroupID.x)), _GLF_struct_16(_GLF_struct_15(uvec2(1u), ivec4(1), 1, mat2(1.0), mat4x3(1.0))), uvec3(1u));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) || false))))))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false || (_GLF_IDENTITY(true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), bool(bvec3(true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), true, true))))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (bool(bool(false)))))))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))), false))) || false)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (_GLF_IDENTITY(0, (0) | (0))) * 1)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY((-10350 & (0 & 92723)), max((-10350 & (0 & 92723)), (-10350 & (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, 1, 0), ivec4(0, 0, 0, 0) ^ (ivec4(0, 1, 1, 0))))))) & 92723)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true, true, true))) && true))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))), true))), true, true, true))) && true)))) || false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, bool(bool(false))), false, true))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-51.91) : injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-51.91) : injectionSwitch.y)))), (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-51.91) : injectionSwitch.y))))) && true)), (bool(_GLF_IDENTITY(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-51.91) : injectionSwitch.y)))), (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-51.91) : injectionSwitch.y))))) && true))) || false)))))));
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_17._f3._f2.workgroup_id, max(_GLF_struct_replacement_17._f3._f2.workgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_17._f3._f2.workgroup_id, (_GLF_struct_replacement_17._f3._f2.workgroup_id) | 0u)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + _GLF_struct_replacement_9.subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id, clamp(_GLF_struct_replacement_9.subgroup_id, _GLF_struct_replacement_9.subgroup_id, _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id, (_GLF_struct_replacement_9.subgroup_id) >> 0u))) * subgroup_size, _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id * subgroup_size, max(_GLF_struct_replacement_9.subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(workgroup_base) : subgroup_size)), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), 0u + (~ (subgroup_size))))))), _GLF_IDENTITY(_GLF_struct_replacement_9.subgroup_id * subgroup_size, clamp(_GLF_struct_replacement_9.subgroup_id * subgroup_size, _GLF_struct_replacement_9.subgroup_id * subgroup_size, _GLF_struct_replacement_9.subgroup_id * subgroup_size)))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(_GLF_IDENTITY(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))), (false ? _GLF_FUZZED(mat2(7.3, -5018.0514, -5.8, 1.8)) : mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))))) > injectionSwitch.y))))))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y)))))), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(injectionSwitch))).y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y))))))) || false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))))))), (bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y))))))))))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))))))), (bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y))))))))))))) && true)))))))))), false)))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y)))))), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(injectionSwitch))).y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y))))))) || false))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(1.0))))))) > injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))))))), (bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y))))))))))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))))))), (bool(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y)))))))), bool(bool((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(1.6, 423.809)))).y)))), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), vec4(mat2(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0), (vec4(injectionSwitch.x, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)) * mat4(_GLF_IDENTITY(1.0, (1.0) / abs(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))))))) > injectionSwitch.y))))))))))))) && true)))))))))), false)))))))), true)))) || false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 | 0, (0 | 0) - 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.7)), bool(false))) > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, determinant(mat2(1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0)))))))
          barrier();
         barrier();
        }
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), true && (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(bool(bool(false)), false)), (_GLF_IDENTITY(bool(bvec2(bool(bool(false)), false)), ! (! (bool(bvec2(bool(bool(false)), false)))))) && true)))), true && (_GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(true && (bool(bool(false))), (true && (bool(bool(false)))) || false)))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0) | 0))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, min(read_1, read_1))) | 0u) + 1, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(read_1, (read_1) | 0u) + 1, 0u, 1u, 1u)), (false ? _GLF_FUZZED(virtual_gid) : uint(uvec4(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, 0u | (_GLF_IDENTITY(read_1, (read_1) << 0u)))) | 0u) + 1, 0u, _GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u)))))), 4, 64, 4);
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat4x2((injectionSwitch) * mat2(1.0), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0)))).y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, false))))), true, true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), false || (false || (! (false))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), false, true), false))))))), ! (! (bool(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_DEAD(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (_GLF_DEAD(false)))))), true && (_GLF_IDENTITY(! (! (! (_GLF_DEAD(false)))), bool(bool(! (! _GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false)))))))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true)))), (! (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true))))) || false)))))))), ! (! (! (_GLF_DEAD(false)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true)))), (! (_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec2((_GLF_DEAD(false)), true))))) || false)))))))), ! (! (! (_GLF_DEAD(false)))))))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(90853) : 1)), _GLF_IDENTITY(1, _GLF_IDENTITY((1), 0 + ((1))) | 0), 1))), int(1))), ((1 << _GLF_IDENTITY(int(1), int(1)))) | ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), int(ivec2(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) + 0), 0)))), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), int(ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0))), min(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), int(ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0))), _GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), int(ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0))), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))), int(ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0)))) >> 0)))), ~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) - (_GLF_IDENTITY(0, max(0, 0)) >> _GLF_IDENTITY(int(5), int(5))))), int(1)), int(_GLF_IDENTITY(ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0), (ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0)) | (ivec2(1 << _GLF_IDENTITY(int(1), int(1)), 0)))))))))))))) ^ 0) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))) | 0)) + int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))) | 0), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))) | 0), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))) | 0)))) + int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(sign(_injected_loop_counter)))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), uint(uvec3((buf[virtual_gid]), 1u, 1u))) | _GLF_IDENTITY(_GLF_IDENTITY((buf[virtual_gid]), clamp((buf[virtual_gid]), (buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), ~ (~ ((buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), clamp(~ (virtual_gid), _GLF_IDENTITY(~ (virtual_gid), (~ (virtual_gid)) ^ 0u), ~ (virtual_gid)))))])))))), clamp((buf[virtual_gid]), (buf[virtual_gid]), (buf[virtual_gid])))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false || (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 0.0, 1.0, 1.0)), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, 0.0, 1.0, 1.0))), float(_GLF_FUZZED(-8.1)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED((36.92 + (-354.521 * -93.79)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-8.8, mix(float(-8.8), float(_GLF_FUZZED(-25.62)), bool(false)))), _GLF_FUZZED((36.92 + (-354.521 * _GLF_IDENTITY(-93.79, clamp(-93.79, _GLF_IDENTITY(-93.79, float(vec3(_GLF_IDENTITY(-93.79, mix(float(-93.79), float(_GLF_FUZZED(332.893)), bool(false))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), -93.79)))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(361.658), _GLF_FUZZED(-81.45)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), clamp((next_virtual_gid), (next_virtual_gid), (next_virtual_gid))) | _GLF_IDENTITY((next_virtual_gid), ~ (~ ((next_virtual_gid)))))], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY((uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(int(1))), 1)), _GLF_IDENTITY((1) << 0, min((1) << 0, _GLF_IDENTITY((1) << 0, int(ivec3((1) << 0, 0, 1)))))) == read_2) + 1), _GLF_IDENTITY(0u, 0u + (0u)) ^ (_GLF_IDENTITY((uint(read_1 + _GLF_IDENTITY(1, (1) << 0) == read_2) + 1), ((uint(read_1 + _GLF_IDENTITY(1, (1) << 0) == read_2) + 1)) >> 0u))) | (uint(read_1 + 1 == read_2) + 1)), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), (_GLF_IDENTITY(4, (4) * 1)) >> 0), 64, _GLF_IDENTITY(4, min(4, 4)));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), true && (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, (true) && true), false))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0)), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), ((injectionSwitch) / vec2(1.0, 1.0)) / vec2(1.0, 1.0))), exp(0.0), 0.0, 0.0, 1.0, 1.0, 1.0))) / cos(vec2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0))))) - 0.0), 0.0)))).x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.9))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.9))) > injectionSwitch.y)), true, false)))))
          barrier();
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u) == read_2) + 1, 4, 64, _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) | (4)))), 4)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((14.68))), bool(false))) > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (false))))), true, true)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false), true, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false), true, true))))))))))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)));
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, true)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), ! (! (bool(bvec3(_GLF_DEAD(false), false, false)))))))
      return;
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false)))), max(_GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false)))), ((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false))))) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false)))), max(_GLF_IDENTITY((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false)))), ((_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false))))) * 1.0), (_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), mix(float(_GLF_IDENTITY(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), _GLF_IDENTITY(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), max(float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))), float(mat4x2(true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(2635.4111), 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, exp(0.0))))))), float(_GLF_FUZZED(-9.8)), bool(false)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.6) : injectionSwitch.y)), injectionSwitch.y)))))), min(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.6) : injectionSwitch.y)), injectionSwitch.y)))))), int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.6) : injectionSwitch.y)), injectionSwitch.y))))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-64.18, max(-64.18, -64.18))) : injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
