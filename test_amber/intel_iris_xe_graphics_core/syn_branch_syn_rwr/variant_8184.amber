#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base;
 uvec3 GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base;
 uvec4 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id;
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy = GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w = subgroup_id;
uint subgroup_size = 16;
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.y = subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x = GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.y;
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.w * workgroup_id;
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.w = workgroup_base;
 GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.z = GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.w;
 uint virtual_gid = GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.z + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x;
 GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.z = virtual_gid;
 for(int _injected_loop_counter = (1 ^ ((1 ^ 1) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.z = GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.z;
  }
 uint next_virtual_gid = GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.z + GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.w * GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y + ((GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1) % GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y);
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-44146 & 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.z], 4, 64, 0);
 GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z = read_1;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.x], uint(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z + 1), 4, 64, 4);
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.z], 4, 64, 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.y = read_2;
  }
 GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.x = GLF_merged4_0_1_13_1_1_6_2_1_11_3_1_14num_workgroupread_2virtual_gidworkgroup_base.y;
 GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.y = GLF_merged3_0_1_6_1_1_17_2_1_14read_2subgroup_local_idworkgroup_base.x;
 do
  {
   if(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.x + 1 < GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.xy.y)
    {
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.x], uint(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z + 1 == GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.y) + 1, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.x], uint(GLF_merged3_0_2_55_2_1_6_3_1_11GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_sizeread_1subgroup_id.z + 1 == GLF_merged4_0_1_16_1_1_6_2_1_11_3_1_14next_virtual_gidread_2virtual_gidworkgroup_size.y) + 1, 4, 64, 4);
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
