#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))))
            return;
           if(_GLF_DEAD(false))
            break;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, 0, 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))))))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))))))) && true)))
      return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))), true, false))), (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, false, false, true)), false || (bool(bvec4((false) && true, false, false, true))))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, true), true)))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false)))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     return;
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, clamp(1, 1, 1)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))));
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
    continue;
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(min(gl_WorkGroupSize, gl_WorkGroupSize), uvec3(uvec4(min(gl_WorkGroupSize, gl_WorkGroupSize), 0u)))).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size, 0u + _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size), 0u | ((workgroup_base + subgroup_id * subgroup_size)))) + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))))))) - 0u), 0u ^ (_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)))) % subgroup_size) >> 0u), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u ^ (_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (false ? _GLF_FUZZED(workgroup_id) : uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u))))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))))) - 0u), 0u ^ (_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)))) % subgroup_size) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u), (_GLF_IDENTITY(uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec3((subgroup_local_id + 1), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0u)) - 0u)))) % subgroup_size) >> 0u))), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)) | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), 0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x))), _GLF_IDENTITY((uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && (_GLF_IDENTITY((true) || false, _GLF_IDENTITY(false, (false) || false) || (_GLF_IDENTITY((true), bool(bvec2(_GLF_IDENTITY((true), _GLF_IDENTITY(((true)), true && (((true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))) || false)))))) && true), true, false, false))) ? (uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(67772u, clamp(67772u, 67772u, 67772u)), 170435u, 48921u), (uvec3(67772u, 170435u, 48921u)) >> (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))))) | uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), 0u, uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), ((uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, true && (_GLF_IDENTITY((true) || false, false || (_GLF_IDENTITY((true), bool(bvec2(_GLF_IDENTITY((true), ((true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))) || false)))))) && true), true, false, false))) ? (_GLF_IDENTITY(uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? uvec3(0u | ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(uvec3(60275u, 97325u, 184520u))))) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(67772u, 170435u, 48921u), (uvec3(67772u, 170435u, 48921u)) >> (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)))))) | uvec3(0u, 0u, 0u)))) << 0u))), (subgroup_local_id + 1) % subgroup_size))) / 1u), uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (subgroup_local_id + 1), min(~ (subgroup_local_id + 1), ~ (subgroup_local_id + 1)))))) % subgroup_size) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)), 0u | ((subgroup_local_id + 1) % subgroup_size)), _GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))) / 1u), 1u))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))) / (_GLF_IDENTITY((((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, _GLF_IDENTITY((_GLF_IDENTITY((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u), (false ? _GLF_FUZZED(num_workgroup) : (7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : 0u), min(_GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : 0u), min((false ? _GLF_FUZZED(virtual_gid) : 0u), (false ? _GLF_FUZZED(virtual_gid) : 0u))), (false ? _GLF_FUZZED(virtual_gid) : 0u))))) >> 0u)))), min(_GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)), 0u + ((_GLF_IDENTITY((7u), ~ (~ ((7u)))) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)))), ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)))) >> 0u))), uint(7u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))) >> _GLF_IDENTITY(uint(0u), uint(0u)), uint(uint((((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (uint(7u)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) << 0u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)) >> 0u))), uint(7u))) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), 0u + (_GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), clamp(_GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY(uint(0u), uint(0u)))))))), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))) >> _GLF_IDENTITY(uint(0u), uint(0u)))))))], clamp(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, (7u) | (_GLF_IDENTITY(7u, (7u) - 0u)))), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY(_GLF_IDENTITY((7u), ((7u)) | ((7u))) << 0u, _GLF_IDENTITY(_GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> _GLF_IDENTITY(0u, (0u) | (0u)))), 0u ^ (((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> _GLF_IDENTITY(0u, (0u) | (0u)))))) >> 0u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> _GLF_IDENTITY(0u, (0u) | (0u)))), 0u ^ (((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> _GLF_IDENTITY(0u, (0u) | (0u)))))) >> 0u))))), uint(7u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))], buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, _GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) : 0u))))) >> 0u)) >> 0u, uint(uvec4(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))))) >> 0u)) >> 0u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(7u))), uint(uvec4(((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, _GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)) : 0u))))) >> 0u)) >> 0u, uint(uvec4(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))))) >> 0u)) >> 0u, 1u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))), uint(7u))), 0u, 1u, 1u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))], _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / (_GLF_IDENTITY((_GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : 0u), ((false ? _GLF_FUZZED(virtual_gid) : 0u)) + 0u))) >> 0u)) >> 0u))), uint(_GLF_IDENTITY(7u, max(7u, 7u))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u))), min(((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : 0u), ((false ? _GLF_FUZZED(virtual_gid) : 0u)) + 0u))) >> 0u)) >> 0u))), uint(_GLF_IDENTITY(7u, max(7u, 7u))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u))), ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : 0u), ((false ? _GLF_FUZZED(virtual_gid) : 0u)) + 0u))) >> 0u)) >> 0u))), uint(_GLF_IDENTITY(7u, max(7u, 7u))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))))), ((((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((false ? _GLF_FUZZED(virtual_gid) : 0u), ((false ? _GLF_FUZZED(virtual_gid) : 0u)) + 0u))) >> 0u)) >> 0u))), uint(_GLF_IDENTITY(7u, max(7u, 7u))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u))))) | ((((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(workgroup_base))), 0u, (0u ^ 1u))), (uint(uvec3(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(workgroup_base))), 0u, (0u ^ 1u)))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(workgroup_base))), 0u, (0u ^ 1u))), ~ (~ (uint(uvec3(_GLF_IDENTITY(7u, (true ? 7u : _GLF_FUZZED(workgroup_base))), 0u, (0u ^ 1u)))))))))))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false) ? _GLF_FUZZED(virtual_gid) : 0u), ((false ? _GLF_FUZZED(virtual_gid) : 0u)) + 0u))) >> 0u)) >> 0u))), uint(_GLF_IDENTITY(7u, max(7u, 7u))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) >> 0u), _GLF_IDENTITY(0u, min(0u, 0u))))), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))))) >> _GLF_IDENTITY(uint(0u), uint(0u))))], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)) >> 0u))), uint(7u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) ^ 0u)), uint(0u)), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)), (uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)), min(uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))))))) >> _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, (0u) ^ 0u)))))]) | (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / ((((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u) << 0u, _GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u, clamp((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u, ~ (~ ((_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u))))))), (((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u))) | (_GLF_IDENTITY(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)), min(((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)), ((7u) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u))) >> 0u)))))) >> _GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, min(0u, 0u))))))) / 1u)))))), uint(7u))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec3(_GLF_IDENTITY(uint(0u), uint(0u)), 0u, 0u)))) >> _GLF_IDENTITY(uint(0u), uint(0u))))])))), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ((! (_GLF_IDENTITY(true, ! (! (true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) || false)))))), true, false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ((! (_GLF_IDENTITY(true, ! (! (true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))), (bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) || false)))))), true, false)))))), true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ((! (_GLF_IDENTITY(true, ! (! (true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false)))))), (bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))))) || false)))))), true, false))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ((! (_GLF_IDENTITY(true, ! (! (true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false)))))), (bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))))) || false)))))), true, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (true)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(true, ! (! (true))))), ((! (_GLF_IDENTITY(true, ! (! (true)))))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec4(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), false)))))), (bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ((! (true))) || false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec3(bvec3(bvec3(bvec3(! (! (_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))))))) || false)))))), true, false)))))) || false)) && true))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(1.0))), _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)))), max(vec2(_GLF_IDENTITY(mat3x4((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)))), vec2(_GLF_IDENTITY(mat3x4((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3x4((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, 1.0, length(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0, abs(1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)))))))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((injectionSwitch[0]), min((injectionSwitch[0]), (injectionSwitch[0]))) - 0.0), injectionSwitch[1]))) : injectionSwitch)).x > injectionSwitch.y)) && true))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - (0 | 0)) + (0))); _injected_loop_counter --)
                    {
                     return;
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               if(_GLF_DEAD(false))
                break;
              }
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           break;
                          }
                         continue;
                        }
                       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), _GLF_IDENTITY(uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)), (uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u))) * uvec2(1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-70522) : 1)), (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(uvec3(read_1, 0u, 1u), (true ? uvec3(read_1, 0u, 1u) : _GLF_FUZZED(uvec3(33991u, 194200u, 110058u))))))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, _GLF_IDENTITY(1u, (1u) + 0u)), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + _GLF_IDENTITY(1, (1) | (1))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 1u, 0u, 1u)), (uint(uvec4(0u, 1u, 0u, 1u))) * 1u)), 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u), max(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u), ~ (~ (uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u)))))), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u), max(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u), ~ (~ (uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), clamp(_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u))), _GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))))), 1u)))))), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) >> 0u)) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) << 0u))), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(true, false || (true)) ? read_1 : _GLF_FUZZED((7088u / uint(true))))), 1u), _GLF_IDENTITY(uvec2(uvec4(uvec2(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(true, false || (true)) ? read_1 : _GLF_FUZZED((7088u / uint(true))))), 1u), 1u, 1u)), (uvec2(uvec4(uvec2(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(true, false || (true)) ? read_1 : _GLF_FUZZED((7088u / uint(true))))), 1u), 1u, 1u))) << uvec2(0u, 0u))), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) + _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> _GLF_IDENTITY(uvec2(0u, 0u), ~ (~ (_GLF_IDENTITY(uvec2(0u, 0u), uvec2(uvec4(uvec2(0u, 0u), 0u, (0u | 0u)))))))))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1)) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1)))))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, ~ (~ (_GLF_IDENTITY(read_1, uint(uvec3(read_1, 0u, 1u)))))), 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), min(_GLF_IDENTITY(uvec2(read_1, 1u), (_GLF_IDENTITY(uvec2(read_1, 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(read_1, 1u), (uvec2(read_1, 1u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(read_1, (read_1) + 0u), 1u), uvec2(uvec4(uvec2(read_1, 1u), 1u, 1u)))) >> uvec2(0u, 0u)))))) + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(84907) : 1)))), (false ? _GLF_FUZZED(workgroup_base) : read_1 + 1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 4, 64, 4);
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                            }
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
                    return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2162.8860), _GLF_FUZZED((-0.5 - 3093.4714))), bvec2(false, false))).y))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) / vec2(1.0, 1.0)))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))) / vec2(1.0, 1.0)))).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))) / vec2(1.0, 1.0)))).y))))) && true), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, false)), bool(bvec3(bool(bvec3(_GLF_DEAD(false), false, false)), true, true)))))
            break;
           do
            {
             return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(subgroup_local_id + 1 < subgroup_size)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, _GLF_IDENTITY(false, (false) && true)))) && true))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) || false)))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       continue;
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       break;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (false)), (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             int i = 0;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   break;
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                      return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-3.0) : (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-10.64), _GLF_FUZZED(-7005.6838)), bvec2(false, false))).x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           return;
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) >> 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) >> 0)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) >> 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) >> 0)) * int(_GLF_ONE(1.0, injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) >> 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, 1 * (_injected_loop_counter ++))) >> 0)) * int(_GLF_ONE(1.0, injectionSwitch.y))))) | 0) : _GLF_FUZZED(_injected_loop_counter))) * (1 ^ 0)))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), (injectionSwitch.x), (injectionSwitch.x)))) > injectionSwitch.y))))
                      break;
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) || false)), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))) || (_GLF_WRAPPED_IF_FALSE(false))), false))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))) && true)))))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                          break;
                         return;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), false, true)))))), false)))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           break;
                          }
                         continue;
                        }
                       continue;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), ~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), min(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4))))))), _GLF_IDENTITY(4, ~ (~ (4))))), 64, 4);
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               do
                {
                 for(int _injected_loop_counter = (-16084 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false, true, false)))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w, min(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, _GLF_IDENTITY(0, min(0, 0))), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, _GLF_IDENTITY(28383, ~ (~ (28383))), 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, _GLF_IDENTITY(54028, (54028) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, _GLF_IDENTITY(0, 0 | (0)), 0))) ^ ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 0, 0))) - ivec4(0, 0, 0, 0)).w, 0 | (_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, _GLF_IDENTITY(28383, (false ? _GLF_FUZZED(_injected_loop_counter) : 28383)), 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w))))))) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w, min(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, _GLF_IDENTITY(0, min(0, 0))), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, _GLF_IDENTITY(28383, ~ (~ (28383))), 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, _GLF_IDENTITY(54028, (54028) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, _GLF_IDENTITY(0, 0 | (0)), 0))) ^ ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 0, 0))) - ivec4(0, 0, 0, 0)).w, 0 | (_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, _GLF_IDENTITY(28383, (false ? _GLF_FUZZED(_injected_loop_counter) : 28383)), 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w))))))) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), true)), (bool(bvec2(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w, min(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, _GLF_IDENTITY(0, min(0, 0))), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, _GLF_IDENTITY(28383, ~ (~ (28383))), 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, _GLF_IDENTITY(54028, (54028) | int(_GLF_ZERO(0.0, injectionSwitch.x))), 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, _GLF_IDENTITY(0, 0 | (0)), 0))) ^ ivec4(_GLF_IDENTITY(0, max(0, 0)), 0, 0, 0))) - ivec4(0, 0, 0, 0)).w, 0 | (_GLF_IDENTITY(_GLF_IDENTITY((ivec4(82950, 54028, _GLF_IDENTITY(28383, (false ? _GLF_FUZZED(_injected_loop_counter) : 28383)), 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, 0, 0)) ^ ivec4(0, 0, 0, 0))), (_GLF_IDENTITY((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter), ((ivec4(82950, 54028, 28383, 55159) ^ _injected_loop_counter)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0)).w))))))) != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), true))) || false))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         continue;
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
