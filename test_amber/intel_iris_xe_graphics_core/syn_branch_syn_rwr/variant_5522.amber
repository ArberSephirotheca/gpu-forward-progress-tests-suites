#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), false))))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID))))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * workgroup_id), ((_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))) | ((workgroup_size * workgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | ((workgroup_size * workgroup_id)))) | 0u, ((_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | ((workgroup_size * workgroup_id)))) | 0u) / (0u ^ 1u)))), uint(_GLF_IDENTITY(uvec2((~ (workgroup_size * workgroup_id)), 1u), _GLF_IDENTITY((uvec2((~ (workgroup_size * workgroup_id)), 1u)), ((uvec2((~ (workgroup_size * workgroup_id)), 1u))) ^ (uvec2(180414u, 46790u) & uvec2(0u, 0u))) << uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))))) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) - (0 >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ (1 ^ 1)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec3(subgroup_id, 1u, 0u), min(uvec3(subgroup_id, 1u, 0u), _GLF_IDENTITY(uvec3(subgroup_id, 1u, 0u), ~ (~ (uvec3(subgroup_id, 1u, 0u)))))))) * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), min(_GLF_IDENTITY((1), (true ? _GLF_IDENTITY((1), ((1)) / 1) : _GLF_FUZZED((-14837 / -56778)))), (1))) ^ (0 & -14139))) % subgroup_size), 0u ^ (_GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ (0 & -14139))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) ^ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)) & _GLF_IDENTITY(-14139, 0 | (-14139)), ~ (~ (0 & -14139)))))) % subgroup_size)) | 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(4.3))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-1.2, mix(float(_GLF_IDENTITY(-1.2, max(-1.2, -1.2))), float(_GLF_FUZZED(-8.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), float(injectionSwitch.y), bool(true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.6, 6698.3053)))).y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))))), (injectionSwitch.x > injectionSwitch.y)), true, false)))) || false)))
        continue;
       if(_GLF_DEAD(false))
        break;
       break;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-204.850)), bool(false)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false, false)))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), clamp(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2((injectionSwitch)[0], (injectionSwitch)[1]))), vec2(_GLF_FUZZED(-1.6), _GLF_IDENTITY(_GLF_FUZZED(-6.7), min(_GLF_IDENTITY(_GLF_FUZZED(-6.7), clamp(_GLF_FUZZED(-6.7), _GLF_FUZZED(-6.7), _GLF_FUZZED(-6.7))), _GLF_FUZZED(-6.7)))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.6), _GLF_FUZZED(-6.7)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.6), _GLF_FUZZED(-6.7)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec3(6.1, -304.926, 5.3).p)), bool(false))), injectionSwitch.x), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))), max(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) - vec2(0.0, 0.0))), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))))), _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-79.71))), 0.0, 0.0)), 1.0), vec2(1.0, 0.0))))), (vec2(mat2x4(injectionSwitch, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-50.15)))), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0)))))) - vec2(0.0, 0.0))))).y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), (! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))) && true))))))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), bool(bool(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false)))))))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED((151.679 + -7.9))), bool(false))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(buf[_GLF_IDENTITY(virtual_gid, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))))], _GLF_IDENTITY(0u, (0u) * 1u), 1u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), 0u | ((~ (0u)))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (uvec3(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), 0u, 1u)) | (uvec3(buf[virtual_gid], 0u, 1u)))) | (_GLF_IDENTITY(uvec3(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / uint(_GLF_ONE(1.0, injectionSwitch.y)))], 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u))))), uvec3(0u, 0u, 0u) | (uvec3(buf[virtual_gid], 0u, 1u))))), (_GLF_IDENTITY(uvec3(buf[_GLF_IDENTITY(virtual_gid, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))))], 0u, 1u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ (0u)), (_GLF_IDENTITY((~ (0u)), max((~ (0u)), (~ (0u))))) << 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (uvec3(buf[virtual_gid], _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) / (1u | 1u)), 1u)) | _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(151111u, 173539u, 164447u)) : _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)), ((uvec3(buf[virtual_gid], 0u, 1u))) ^ uvec3(0u, 0u, 0u)))))) | (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) | (0u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)), min(uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)), uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u))))))), uvec3(0u, 0u, 0u) | (uvec3(buf[virtual_gid], 0u, 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (uvec3(buf[virtual_gid], _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) / (1u | 1u)), 1u)) | _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(151111u, 173539u, 164447u)) : _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)), ((uvec3(buf[virtual_gid], 0u, 1u))) ^ uvec3(0u, 0u, 0u)))))) | (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) | (0u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)), min(uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)), uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u))))))), uvec3(0u, 0u, 0u) | (uvec3(buf[virtual_gid], 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (uvec3(buf[virtual_gid], _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) / (1u | 1u)), 1u)) | _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(151111u, 173539u, 164447u)) : _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)), ((uvec3(buf[virtual_gid], 0u, 1u))) ^ uvec3(0u, 0u, 0u)))))) | (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) | (0u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)), min(uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)), uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u))))))), uvec3(0u, 0u, 0u) | (uvec3(buf[virtual_gid], 0u, 1u)))))))) | (_GLF_IDENTITY(uvec3(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(1u), uint(1u))), min((0u << _GLF_IDENTITY(uint(1u), uint(1u))), (0u << _GLF_IDENTITY(uint(1u), uint(1u))))) | (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(0u ^ (virtual_gid), (false ? _GLF_FUZZED(read_1) : 0u ^ (virtual_gid))))))], 0u, 1u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (uvec3(buf[virtual_gid], 0u, 1u)) | (uvec3(buf[virtual_gid], 0u, 1u)))) | (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u))))), ~ (~ (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), (_GLF_IDENTITY(uvec3(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)], 0u, 1u), _GLF_IDENTITY((uvec3(buf[virtual_gid], 0u, 1u)) | (uvec3(buf[virtual_gid], 0u, 1u)), ((uvec3(buf[virtual_gid], 0u, 1u)) | (uvec3(buf[virtual_gid], 0u, 1u))) / uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(buf[virtual_gid], 0u, 1u), uvec3(0u, 0u, 0u) ^ (uvec3(buf[virtual_gid], 0u, 1u)))))))), uvec3(0u, 0u, 0u) | (uvec3(buf[virtual_gid], 0u, 1u))))))))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))))), false), true, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec3(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false, true))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false), true, true))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   int i = 0;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5985.2761))) > _GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 0.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9676.2893) : 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y))))))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), max((read_1), (read_1))) * 1u), (read_1) << 0u) + 1, read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u) + 1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(i)))) | (1))) + 0u))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u))), 0u + ((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) + 1) + 0u))), 0u + ((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) / 1u))) ^ (read_1 + 1))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1)))), uint(_GLF_IDENTITY(uint(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | (read_1))) ^ 0u) + 1, 0u ^ (read_1 + 1))))), min(uint(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1))))), uint(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1))))))))))))))) == _GLF_IDENTITY(read_2, ~ (~ (_GLF_IDENTITY(read_2, (read_2) | _GLF_IDENTITY((read_2), (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ ((read_2))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), max((read_1), (read_1))) * 1u), (read_1) << 0u) + 1, read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u) + 1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(i)))) | (1))) + 0u))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u))), 0u + ((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) + 1) + 0u))), 0u + ((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) / 1u))) ^ (read_1 + 1))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1)))), uint(_GLF_IDENTITY(uint(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | (read_1))) ^ 0u) + 1, 0u ^ (read_1 + 1))))), min(uint(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1))))), uint(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1))))))))))))))) == _GLF_IDENTITY(read_2, ~ (~ (_GLF_IDENTITY(read_2, (read_2) | _GLF_IDENTITY((read_2), (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ ((read_2))))))), bool(bvec3(_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), max((read_1), (read_1))) * 1u), (read_1) << 0u) + 1, read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1, (read_1) / 1u) + 1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(i)))) | (1))) + 0u))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u))), 0u + ((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), max(uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uvec4(read_1, 1u, (0u & 104275u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) + 1) + 0u))), 0u + ((~ (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) + 0u)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) / 1u))) ^ (read_1 + 1))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1)))), uint(_GLF_IDENTITY(uint(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (read_1) | (read_1))) ^ 0u) + 1, 0u ^ (read_1 + 1))))), min(uint(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1))))), uint(~ (~ (_GLF_IDENTITY(read_1 + 1, 0u ^ (read_1 + 1))))))))))))))) == _GLF_IDENTITY(read_2, ~ (~ (_GLF_IDENTITY(read_2, (read_2) | _GLF_IDENTITY((read_2), (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ ((read_2))))))), true, true)))))) + 1, 4, _GLF_IDENTITY(64, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), max(_GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), (true ? _GLF_IDENTITY(64, max(64, 64)) : _GLF_FUZZED(i))), _GLF_IDENTITY(64, max(64, 64))))), min((_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, (64) - (0 << _GLF_IDENTITY(int(7), int(7))))))), _GLF_IDENTITY((_GLF_IDENTITY(64, max(64, 64))), 0 + ((_GLF_IDENTITY(64, max(64, 64))))))))), 4);
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(int(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 0, 0), _GLF_IDENTITY((ivec3(1, 0, 0)), _GLF_IDENTITY(ivec3(0, 0, 0) ^ ((ivec3(1, _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(56055))))), 0, 0, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), 0))), ivec3(ivec3(ivec3(0, 0, 0) ^ ((ivec3(1, 0, 0))))))) - ivec3(0, 0, 0)))), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 0), (ivec3(1, 0, 0)) - ivec3(0, 0, 0))), (int(_GLF_IDENTITY(ivec3(1, 0, 0), (ivec3(1, 0, 0)) - ivec3(0, 0, 0)))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 0), (ivec3(1, 0, 0)) - ivec3(0, 0, 0))), int(ivec2(int(_GLF_IDENTITY(ivec3(1, 0, _GLF_IDENTITY(0, ~ (~ (0)))), (ivec3(1, 0, 0)) - ivec3(0, 0, 0))), 1))))))))) | 0))), _GLF_IDENTITY(0, min(0, 0)) ^ (int(ivec3(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), (1 | 0)))))) == read_2) + 1, 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, max(64, 64))) * 1), 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9345.4133)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.5) : injectionSwitch.y)), mix(float(_GLF_FUZZED(-695.101)), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.5) : injectionSwitch.y))), bool(true))))), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.5) : injectionSwitch.y)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-695.101), (false ? _GLF_FUZZED(-7.0) : _GLF_IDENTITY(_GLF_FUZZED(-695.101), max(_GLF_FUZZED(-695.101), _GLF_FUZZED(-695.101)))))), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.5) : injectionSwitch.y))), bool(true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
