#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_21 {
 uint next_virtual_gid;
 uvec3 _f0;
} ;

struct _GLF_struct_22 {
 mat3x4 _f0;
 _GLF_struct_21 _f1;
} ;

struct _GLF_struct_18 {
 bool _f0;
 bool _f1;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 _GLF_struct_18 _f1;
 mat2x3 _f2;
 mat2x3 _f3;
 mat3x2 _f4;
 bvec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_16 {
 ivec4 _f0;
 float _f1;
 mat4 _f2;
 uint _f3;
 uvec2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_15 {
 mat3x4 _f0;
} ;

struct _GLF_struct_17 {
 _GLF_struct_15 _f0;
 vec2 _f1;
 vec4 _f2;
 _GLF_struct_16 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_20 {
 uint workgroup_base;
 bvec4 _f0;
 _GLF_struct_17 _f1;
 mat2x4 _f2;
 ivec4 _f3;
 _GLF_struct_19 _f4;
} ;

struct _GLF_struct_12 {
 vec2 _f0;
 bvec3 _f1;
 ivec3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_11 {
 bvec2 _f0;
 int _f1;
 float _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
 ivec2 _f1;
 ivec2 _f2;
 mat2x4 _f3;
 uint _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_13 {
 mat4x2 _f0;
 uint read_2;
 _GLF_struct_10 _f1;
 vec2 _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_8 {
 mat4 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_7 {
 mat2x4 _f0;
 float _f1;
 uvec4 _f2;
 uvec2 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_6 {
 uint _f0;
 uvec4 _f1;
 uint _f2;
 uvec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_5 {
 vec4 _f0;
 vec2 _f1;
 mat4 _f2;
 ivec4 _f3;
 uvec4 _f4;
 ivec4 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 ivec2 _f1;
 ivec3 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
} ;

struct _GLF_struct_3 {
 float _f0;
 mat4x3 _f1;
 bvec2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 ivec2 _f1;
 mat4x2 _f2;
 ivec4 _f3;
 uvec3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_1 {
 int _f0;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 bool _f1;
 mat4x3 _f2;
 mat3 _f3;
 mat4x2 _f4;
 mat3x4 _f5;
 uint _f6;
} ;

struct _GLF_struct_4 {
 bool _f0;
 _GLF_struct_0 _f1;
 ivec2 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_14 {
 _GLF_struct_4 _f0;
 mat2 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_13 _f3;
 mat2 _f4;
 mat2x3 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(asin(4.1)) : injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], float(float((injectionSwitch)[1]))) : _GLF_FUZZED(-791.511)))), vec2(_GLF_FUZZED((8.0 / 76.42)), _GLF_FUZZED(-3.7)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).y) + 0.0)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, abs(0.0), 0.0, abs(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, sin(0.0), 1.0, 1.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, abs(0.0), 0.0, abs(1.0), 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), determinant(mat4(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0)), 0.0, sin(0.0), 1.0, 1.0)))))) > injectionSwitch.y)))) && true))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ (_GLF_IDENTITY(0 ^ 0, ~ (~ (_GLF_IDENTITY(0 ^ 0, 0 | (0 ^ 0)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
uint subgroup_size = 16;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_IDENTITY(true, false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false))))))) || false), true, false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_IDENTITY(true, false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false))))))) || false), true, false))))))))), false || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)) || false), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)), false)))))))), (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && _GLF_IDENTITY(true, false || (true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true))))))))) && true)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ((! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! ((! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! ((! (_GLF_DEAD(false)))), (! ((! (_GLF_DEAD(false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(! (! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) || false)) || false))))))) || false), true, false)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-671.692)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0 & -79618) | (_GLF_IDENTITY(0, min(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           for(int _injected_loop_counter = ((-42226 & 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.5), _GLF_FUZZED(68.64)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.5), _GLF_FUZZED(68.64)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x > injectionSwitch.y))) || false), false)))))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-568.852)), bool(false)))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), (true ? dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)) : _GLF_FUZZED(-7892.8727)))), 0.0, 1.0, abs(log(1.0)), 0.0, sin(0.0), 0.0, 1.0))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(uintBitsToFloat(uvec2(199117u, 70322u)))))) / vec2(1.0, 1.0)).y)), false, false, false)))))));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY((false), ((false)) && true))) && true), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY((false), ((false)) && true))) && true), true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! _GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(((false)), true), bvec2(bvec3(bvec2(((false)), true), false)))), (bool(_GLF_IDENTITY(bvec2(((false)), true), bvec2(bvec3(bvec2(((false)), true), false))))) && true)))), false || (_GLF_IDENTITY((false), ((false)) && true))) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY((false), ((false)) && true))) && true), true)))), true, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || (_GLF_IDENTITY((false), ((false)) && true))) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), false || _GLF_IDENTITY((_GLF_IDENTITY((false), ((false)) && true)), true && ((_GLF_IDENTITY((false), ((false)) && true))))) && true), true)))), true, false)), false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, true))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), 0u | (~ (~ (1u)))))))) * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))))) * workgroup_id, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))))) * workgroup_id, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) ^ 0u)))), 0u | (uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), ((~ (1u))) ^ 0u))))))) * workgroup_id, (_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))))) * workgroup_id) * 1u), 0u)), uint(uvec3(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u))))), 0u | (uint(_GLF_IDENTITY(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u))))) | (_GLF_IDENTITY(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))), (_GLF_IDENTITY(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))), (uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u))))) / uvec2(1u, 1u))) | uvec2(0u, 0u)))))))) * workgroup_id, (_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))))) * workgroup_id) * 1u), 0u)), 0u, (0u & 44417u))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))))) * workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u))))), (uint(uvec2(workgroup_size, _GLF_IDENTITY(1u, ~ (~ (1u)))))) ^ 0u)) * workgroup_id)))), bvec4(true), _GLF_struct_17(_GLF_struct_15(mat3x4(1.0)), vec2(1.0), vec4(1.0), _GLF_struct_16(ivec4(_GLF_IDENTITY(1, (1) / 1)), 1.0, _GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), (true ? mat4(1.0) : _GLF_FUZZED(mat4(85.80, -8.1, -2.4, -6634.4272, 837.406, 6136.7614, -6.4, 913.983, 306.213, -63.58, -6.0, -2.1, 10.99, 8010.2905, 4.4, 5.6))))) * mat4(_GLF_ONE(1.0, injectionSwitch.y))), 1u, uvec2(1u), vec2(1.0)), mat4x2(1.0)), mat2x4(1.0), ivec4(1), _GLF_struct_19(vec2(1.0), _GLF_struct_18(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), true), mat2x3(1.0), mat2x3(1.0), mat3x2(1.0), bvec3(true), bvec2(true)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, true && (_GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(8), int(8))) & 48745); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-589.205)), bool(false)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))) : _GLF_FUZZED(tan(-22.70)))) < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(82305u))), float(injectionSwitch.y), bool(true)))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(82305u))), float(injectionSwitch.y), bool(true))))))) && true))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = ((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))), 0 + (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_struct_replacement_20.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), max((_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))), (_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))) >> 0u)) ^ 0u), _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size))), (~ (subgroup_size)) * 1u))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(-1.0)))), 0u ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 1u)))), max((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), (uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)) | (uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), (uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)) | (uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))))), _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u), (uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)) | (uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)))))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u)), (uint(uvec3(subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u))) - 0u))))), 1u * (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * 1u)))))) | (1u ^ 1u)), uint(uvec4(subgroup_id * subgroup_size, 1u, 1u, 1u)))) | (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))), _GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))), min(_GLF_IDENTITY((subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))), ((subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))) | ((subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)))))), (subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uint(subgroup_size)), 0u + (_GLF_IDENTITY(uint(uint(subgroup_size)), clamp(uint(uint(subgroup_size)), uint(uint(subgroup_size)), uint(uint(subgroup_size)))))))))) + (123703u & _GLF_IDENTITY(0u, (0u) - 0u))))) + subgroup_local_id;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat3x4(1.0), _GLF_struct_21(_GLF_IDENTITY(_GLF_struct_replacement_20.workgroup_base, (_GLF_struct_replacement_20.workgroup_base) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), min(((subgroup_local_id + 1) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size))))), uvec3(1u)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter))), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter))), (_GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))) * 1)) >> 0) : _injected_loop_counter --)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false)), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))), false, true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), false)), (bool(bvec2(false, false))) || false)), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false)))), false, true, false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), buf[virtual_gid], buf[virtual_gid])), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec3((! (false)), false, false), bvec3(bvec4(bvec3((! (false)), false, false), false))))))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(clamp(injectionSwitch, injectionSwitch, injectionSwitch), _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (true ? clamp(injectionSwitch, injectionSwitch, injectionSwitch) : _GLF_FUZZED(vec2(-896.094, 7.2)))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 atomicStore(buf[_GLF_struct_replacement_22._f1.next_virtual_gid], uint(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) + 0))) >> _GLF_IDENTITY(int(0), int(0))) * (~ _GLF_IDENTITY((1), max((1), (1))))), (~ (1)) * 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(1, max(1, 1)), 1), (_GLF_IDENTITY(max(_GLF_IDENTITY(1, max(1, 1)), 1), (max(_GLF_IDENTITY(1, max(1, 1)), 1)) - (0 >> _GLF_IDENTITY(int(1), int(1))))) / 1))), 4, 64, 4);
 do
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - (0 << _GLF_IDENTITY(int(1), int(1))))), int(2)))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true), false, true, true))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
              {
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - 0.0), injectionSwitch.x), _GLF_IDENTITY(float(vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), mix(float(_GLF_FUZZED(3989.3210)), float(float(vec2(_GLF_ZERO(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 1.0, length(vec2(0.0, 0.0))))), injectionSwitch.x), 1.0))), bool(true))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             barrier();
                            }
                          }
                         barrier();
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) + 0)); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y)))), false)), ! (! (bool(bvec4(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.y)))), false))))))))
                                barrier();
                              }
                             for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)), _GLF_IDENTITY(0, (0) - 0)))); _injected_loop_counter --)
                              {
                               barrier();
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
                            {
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                  }
                 else
                  {
                  }
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)) || false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, ((true) || false) || false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))), true))), bvec2(bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))), true))))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_4(true, _GLF_struct_0(mat2x4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(9.0, 1.0 * (9.0))))), 1.0))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), mat4x3(1.0), mat3(1.0), mat4x2(1.0), mat3x4(1.0), 1u), ivec2(1), _GLF_struct_1(1), _GLF_struct_2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), clamp(_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), vec3(1.0), vec3(1.0))), min(_GLF_IDENTITY(vec3(1.0), clamp(_GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))), vec3(1.0), vec3(1.0))), _GLF_IDENTITY(vec3(1.0), clamp(_GLF_IDENTITY(vec3(1.0), min(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(vec3(mat4(_GLF_IDENTITY(vec3(1.0), mix(vec3((vec3(1.0))[0], _GLF_FUZZED(7297.2518), (vec3(1.0))[2]), vec3(_GLF_FUZZED(-1852.3376), (vec3(1.0))[1], _GLF_FUZZED(-0.7)), bvec3(false, true, false))), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, exp(0.0), 1.0, tan(0.0), 0.0, sqrt(1.0), 0.0, sqrt(0.0))), (vec3(mat4(_GLF_IDENTITY(vec3(1.0), mix(vec3((vec3(1.0))[0], _GLF_FUZZED(7297.2518), (vec3(1.0))[2]), vec3(_GLF_FUZZED(-1852.3376), (vec3(1.0))[1], _GLF_FUZZED(-0.7)), bvec3(false, true, false))), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, exp(0.0), 1.0, tan(0.0), 0.0, sqrt(1.0), 0.0, sqrt(0.0)))) * mat3(1.0))), vec3(1.0))), vec3(1.0), vec3(1.0))))), _GLF_IDENTITY(ivec2(1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)))), ivec2(0, 0) | (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), max(_GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0)), _GLF_IDENTITY(ivec2(1), (ivec2(1)) | ivec2(0, 0))))))) | _GLF_IDENTITY((ivec2(1)), (true ? (ivec2(1)) : _GLF_FUZZED(ivec2(74954, 74318))))), mat4x2(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec4(1.0, sin(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 0.0, 0.0), vec4(abs(0.0), 1.0, 1.0, 1.0)), dot(vec4(1.0, sin(0.0), 0.0, 0.0), vec4(abs(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 1.0, 1.0, 1.0))) + (1.0)))), ivec4(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, 0 + (1)) : _GLF_FUZZED(-76026))), _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))))), uvec3(1u), ivec2(1)), _GLF_struct_3(1.0, mat4x3(1.0), bvec2(true), uvec2(1u)), bvec4(true)), _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0)))), _GLF_struct_9(_GLF_struct_5(vec4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-491.703)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-491.703)), _GLF_IDENTITY((float(_GLF_IDENTITY(_GLF_FUZZED(-491.703), (false ? _GLF_FUZZED(length(vec4(4.3, -6243.6718, -958.797, -2.4))) : _GLF_FUZZED(-491.703))))) + 0.0, min((float(_GLF_IDENTITY(_GLF_FUZZED(-491.703), (false ? _GLF_FUZZED(length(vec4(4.3, -6243.6718, -958.797, -2.4))) : _GLF_FUZZED(-491.703))))) + 0.0, _GLF_IDENTITY((float(_GLF_IDENTITY(_GLF_FUZZED(-491.703), (false ? _GLF_FUZZED(length(vec4(4.3, -6243.6718, -958.797, -2.4))) : _GLF_FUZZED(-491.703))))) + 0.0, mix(float((float(_GLF_IDENTITY(_GLF_FUZZED(-491.703), (false ? _GLF_FUZZED(length(vec4(4.3, -6243.6718, -958.797, -2.4))) : _GLF_FUZZED(-491.703))))) + 0.0), float(_GLF_FUZZED(99.07)), bool(false)))))), _GLF_IDENTITY(float(_GLF_FUZZED(-491.703)), mix(float(_GLF_FUZZED(4263.3197)), float(float(_GLF_FUZZED(-491.703))), bool(true))))), float(1.0), bool(true))), _GLF_IDENTITY(1.0, (1.0) * round(length(normalize(exp(vec3(0.0, 0.0, 0.0)))))), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))))), vec2(1.0), mat4(1.0), ivec4(1), uvec4(1u), ivec4(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) << 0))))), mat3x2(1.0)), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))) / 1))))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-35709) : 0)) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) * 1)) - 0))), int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))) / 1))))) >> _GLF_IDENTITY(0, 0 | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0))))))), min((_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0))))))), (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) << 0))))))))), (_GLF_IDENTITY((0), _GLF_IDENTITY(((0)) * 1, clamp(_GLF_IDENTITY(((0)) * 1, (((0)) * 1) | 0), ((0)) * 1, _GLF_IDENTITY(((0)) * 1, (((0)) * 1) - 0))))) - 0))))))), (ivec2(0, 0) | ivec2(0, 0)) ^ (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))) / 1))))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-47327)))), int(int(~ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-47327))))))))) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) * 1)) - 0))), int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))) / 1))))) >> _GLF_IDENTITY(0, _GLF_IDENTITY(0, int(int(0))) | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), _GLF_IDENTITY(((0)) * 1, clamp(_GLF_IDENTITY(((0)) * 1, (((0)) * 1) | 0), ((0)) * 1, _GLF_IDENTITY(((0)) * 1, (((0)) * 1) - 0))))) - 0))))))), min(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))) / 1))))) >> _GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) * 1)) - 0))), int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))), (false ? _GLF_FUZZED(-79745) : _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))))) / 1))))) >> _GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), _GLF_IDENTITY(((0)) * 1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(((0)) * 1, 0 | (((0)) * 1)), (((0)) * 1) | 0), ((0)) * 1, _GLF_IDENTITY(((0)) * 1, (((0)) * 1) - 0))))) - 0))))))), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (_GLF_IDENTITY(1, 0 ^ (1))), (1))))) / 1))))) >> _GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), ((0)) * 1)) - 0))), int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))) / 1))))) >> _GLF_IDENTITY(0, 0 | _GLF_IDENTITY((0), (_GLF_IDENTITY((0), _GLF_IDENTITY(((0)) * 1, clamp(_GLF_IDENTITY(((0)) * 1, (((0)) * 1) | 0), ((0)) * 1, _GLF_IDENTITY(((0)) * 1, (((0)) * _GLF_IDENTITY(1, (1) << 0)) - 0))))) - 0))))))))))), ivec3(1), _GLF_struct_6(1u, uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? 1u : _GLF_FUZZED(subgroup_size)))), 1u, uvec3(1u), vec2(1.0)), _GLF_struct_7(mat2x4(1.0), 1.0, uvec4(1u), uvec2(1u), uvec3(1u)), _GLF_struct_8(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))), uvec2(1u))), _GLF_struct_13(mat4x2(1.0), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (0u >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(5u, 0u + (5u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u)], clamp(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u), (_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid) | (virtual_gid), max(_GLF_IDENTITY((virtual_gid) | (virtual_gid), ((virtual_gid) | (virtual_gid)) >> 0u), _GLF_IDENTITY((virtual_gid) | (virtual_gid), ((virtual_gid) | (virtual_gid)) << 0u))))) * 1u)], buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u)], _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u)], _GLF_IDENTITY((buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u)]), 1u * ((buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u)]))) | (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), uint(4u))) ^ ((0u ^ 0u) << _GLF_IDENTITY(uint(7u), uint(7u)))))))), max(buf[virtual_gid], buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(min(virtual_gid, virtual_gid), (min(virtual_gid, virtual_gid)) | (min(virtual_gid, virtual_gid))))))])))), _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(4, 1)), max(int(ivec2(4, 1)), int(ivec2(4, 1))))), 64, 0), _GLF_struct_10(bvec4(true), ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED((+ 26436)) : _GLF_IDENTITY(1, (1) | (1)), ~ (~ (false ? _GLF_FUZZED((+ 26436)) : _GLF_IDENTITY(1, (1) | (1)))))))) - 0)), ivec2(1), mat2x4(1.0), 1u, bvec3(true)), vec2(1.0), _GLF_struct_11(bvec2(true), 1, 1.0, mat3x4(1.0)), _GLF_struct_12(vec2(1.0), bvec3(true), ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) | (1), _GLF_IDENTITY(0 | (_GLF_IDENTITY(_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))), (_GLF_IDENTITY((1) | (1), 0 | ((1) | (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))), 0 | (_GLF_IDENTITY((1) | (1), 0 | ((1) | (1)))))))), ~ (~ (0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))), (_GLF_IDENTITY((1) | (1), 0 | ((1) | (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))), 0 | (_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))))))), (_GLF_IDENTITY(_GLF_IDENTITY((1) | _GLF_IDENTITY((1), ((1)) / 1), 0 | ((1) | (1))), (_GLF_IDENTITY((1) | (1), _GLF_IDENTITY(0 | ((1) | (1)), int(_GLF_IDENTITY(int(0 | ((1) | (1))), max(int(0 | ((1) | (1))), int(0 | ((1) | (1))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((1) | (1), 0 | ((1) | (1))), 0 | (_GLF_IDENTITY((1) | (1), 0 | ((1) | (1)))))))) - 0)))))))) * 1)), vec3(1.0))), mat2(1.0), mat2x3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), true), true, false))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), _GLF_IDENTITY(true && (false), bool(_GLF_IDENTITY(bool(true && (false)), ! (! (bool(true && (false))))))))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), min(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))), max(_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), min(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), min(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
  {
   do
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[_GLF_struct_replacement_22._f1.next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == _GLF_struct_replacement_14._f3.read_2), (uint(read_1 + 1 == _GLF_struct_replacement_14._f3.read_2)) - 0u) + 1, 4, 64, 4);
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))), false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))));
       for(int _injected_loop_counter = _GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(7, ~ (~ (7))), _GLF_IDENTITY(7, min(7, 7))))), (int(7)) | 0)), (true ? _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) >> 0), (int(7)) | 0)) : _GLF_IDENTITY(_GLF_FUZZED(17704), max(_GLF_FUZZED(17704), _GLF_FUZZED(17704)))))), (_GLF_IDENTITY((_GLF_IDENTITY((0 | 0), min((_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 >> _GLF_IDENTITY(int(2), int(2))) | (0 | 0))) - 0)), (0 | 0))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), clamp((int(7)), (int(7)), (int(7)))) | 0))), min(((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)), (true ? int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)) : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)), (true ? int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)) : _GLF_FUZZED(_injected_loop_counter))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)), (true ? int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)) : _GLF_FUZZED(_injected_loop_counter))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)), (true ? int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)) : _GLF_FUZZED(_injected_loop_counter))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)), (true ? int(ivec3(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)), min((int(7)), (int(7)))) | 0)), 0, 1)) : _GLF_FUZZED(_injected_loop_counter)))))))) << 0)))), ((0 | 0) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), (int(7)) | 0)) * 1), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(63062)))) | 0)), clamp(max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), (int(7)) | 0)) * 1), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(63062)))) | 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), (int(7)) | 0)) * 1), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(63062)))) | 0)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), (int(7)) | 0)) * 1), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(63062)))) | 0)), (max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), (int(7)) | 0)) * 1), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(63062)))) | 0))) + 0))))))))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-99939) : _GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))) != _GLF_IDENTITY((0 ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1)), 0)), 1 * (int(ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1)), 0))))), (false ? _GLF_FUZZED(-32502) : _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))))), 1, 1)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1)), 0)), 1 * (int(ivec2(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1))), (_GLF_IDENTITY((false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1))), ((false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))) << 0)) >> 0)), 1, 1)), 0)))))))), int(_GLF_IDENTITY(int((0 ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))), 1, 1)))), clamp(int((0 ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) / 1))), 1, 1)))), int((0 ^ _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), 0 + (clamp(1, 1, 1)))))), 1, 1), min(clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), 0 + (clamp(1, 1, 1)))))), 1, 1), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), 0 + (clamp(1, 1, 1)))))), 1, 1)))))), _GLF_IDENTITY(int((0 ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 ^ (1)), 1)))), (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), 1, 1)))), min(int((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1 ^ 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), clamp(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) | (1)))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0))))), 0), (true ? ivec3(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) | (1)))), ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0))))), 0) : _GLF_FUZZED(ivec3(-91018, -4594, -54394)))))), 1))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, 1, 1)), (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, 1, 1))) - 0))))), 0 ^ (~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))))))))))), 1, 1)), ~ (~ (0 ^ _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1 ^ 1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)), clamp(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) | (1)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (0 ^ 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, int(ivec3(0, 0, (0 ^ 1)))), _GLF_IDENTITY(0, 0 | (0))))), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0))))), 0), (true ? ivec3(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) | (1)))), ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 + (0)), _GLF_IDENTITY(0, int(ivec3(0, 1, 1))))), 0)))), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(_injected_loop_counter) : int(0))))), 0) : _GLF_FUZZED(ivec3(-91018, -4594, -54394)))))), 1))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(1, 1, 1)), (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) >> 0)) / 1)))), clamp(1, 1, 1))) - 0))))), 0 ^ (~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(31443) : _GLF_IDENTITY(1, clamp(1, 1, 1)))))))))))), 1, 1))))))), int((0 ^ _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(31443, max(31443, 31443))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(int(1)))) >> 0)) >> (0 | 0)), int(int(1))), clamp(1, 1, 1)))), 1, 1))))))))))); _injected_loop_counter ++)
        {
         do
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-327.935) : 0.0)), injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, 0 | (1)))) ^ 1)); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec4(_injected_loop_counter > 0, false, false, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (false ? _GLF_FUZZED(87.45) : injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
            }
          }
         atomicStore(buf[_GLF_struct_replacement_22._f1.next_virtual_gid], uint(read_1 + 1 == _GLF_struct_replacement_14._f3.read_2) + _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(4, (4) | (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))), 64, 4);
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED((-510.440 / length(vec4(8826.9182, _GLF_IDENTITY(93.47, float(mat2x4(93.47, 1.0, tan(0.0), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0))), -7.0, 8.0)))) : 1.0)), 1.0) * (injectionSwitch)).x, (false ? _GLF_FUZZED(_GLF_IDENTITY(-5.4, (_GLF_IDENTITY(-5.4, clamp(-5.4, -5.4, -5.4))) - 0.0)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x) / 1.0))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), ((false) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, (false ? _GLF_FUZZED(-5.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), vec2(1.0, 1.0) * (injectionSwitch)).x) / 1.0))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0))))).y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, (false ? _GLF_FUZZED(-5.4) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 1.0))) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch)))) / vec2(1.0, 1.0))).x) / 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0)), 1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch))), max(_GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch))), min(_GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch))), _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch))))), _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch)))))) / vec2(1.0, 1.0))).x) / 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (_GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), min(vec2(1.0, 1.0) * (injectionSwitch), vec2(1.0, 1.0) * (injectionSwitch)))) / vec2(1.0, 1.0))).x) / 1.0) : _GLF_FUZZED(-7.4)))) - 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], max(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))))).y, false, true, true)))))) || false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true))) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) - vec2(0.0, 0.0)).x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((0 ^ _GLF_IDENTITY(1, (1) / 1)) & 1))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = ((((_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) ^ 0))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (6))), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec2(6, 1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(ivec2(6, 1)), (int(ivec2(6, 1))) | 0) : _GLF_FUZZED(-14999))))), 1, 0, 1)) / ivec4(1, 1, 1, 1)))) | _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), clamp(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))) ^ 0), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))))), int(ivec2(~ (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))))), 0)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (6))), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec2(6, 1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(ivec2(6, 1)), (int(ivec2(6, 1))) | 0) : _GLF_FUZZED(-14999))))), 1, 0, 1)) / ivec4(1, 1, 1, 1)))) | _GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), clamp(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))) ^ 0), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))))), int(ivec2(~ (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))))), 0)))))))))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(_GLF_IDENTITY(6, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (6))), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(_GLF_IDENTITY(6, _GLF_IDENTITY(int(ivec2(6, 1)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(int(ivec2(6, 1)), (int(ivec2(6, 1))) | 0) : _GLF_FUZZED(-14999))))), 1, 0, 1)) / ivec4(1, 1, 1, 1)))) | _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, _GLF_IDENTITY(0, (0) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), ((int(_GLF_IDENTITY(ivec4(int(6), 1, _GLF_IDENTITY(0, (0) | (0 >> _GLF_IDENTITY(int(3), int(3)))), 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))) + ((65420 & 0) >> _GLF_IDENTITY(int(5), int(5)))))) ^ 0), (int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), _GLF_IDENTITY((ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1), ((ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)) | ((ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), (1 & 1) * ((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))))), int(ivec2(~ (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)))), _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1)))) >> 0) * ((int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)), clamp(_GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1)), _GLF_IDENTITY(ivec4(int(6), 1, 0, 1), (ivec4(int(6), 1, 0, 1)) / ivec4(1, 1, 1, 1))))))))), 0)))))))))) : _GLF_FUZZED(-11491)))) - 0)))) ^ 0) | _GLF_IDENTITY(0, clamp(0, 0, 0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.9) : _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.9) : _GLF_ZERO(0.0, injectionSwitch.x))))) - 0)), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.9) : _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.9) : _GLF_ZERO(0.0, injectionSwitch.x))))) - 0)), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.9) : _GLF_ZERO(0.0, injectionSwitch.x)))), (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-0.9) : _GLF_ZERO(0.0, injectionSwitch.x))))) - 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
              {
               barrier();
              }
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0), 0.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0), mat3x2(mat3x4(mat3x2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0), 0.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))))))))
          barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) - 0.0), injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bool(true && (false)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
