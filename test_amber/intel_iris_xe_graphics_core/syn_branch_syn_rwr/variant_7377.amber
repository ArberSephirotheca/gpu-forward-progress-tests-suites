#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base;
 uvec4 GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2;
 uvec2 GLF_merged2_0_1_6_1_1_6read_1read_2;
 GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id.xy = GLF_merged2_0_1_6_1_1_6read_1read_2;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy = GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id.xy;
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id.w = subgroup_id;
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.y = GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id.w;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id.z = num_workgroup;
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.x = GLF_merged3_0_2_35_2_1_13_3_1_11GLF_merged2_0_1_6_1_1_6read_1read_2num_workgroupsubgroup_id.z;
 GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.y = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.w = workgroup_base;
 uint virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.y * subgroup_size + GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.z = virtual_gid;
  }
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.w + GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.y * subgroup_size + ((GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x = next_virtual_gid;
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.z], 4, 64, 0);
 GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.z = read_1;
 GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.x = GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x], uint(GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.x + 1), 4, 64, 4);
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_11_3_1_14num_workgroupsubgroup_idvirtual_gidworkgroup_base.z], 4, 64, 0);
 GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.w = read_2;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.y = GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.w;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.z + 1 < subgroup_size)
  {
   int i = 0;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x], uint(GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.x + 1 == GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.y) + 1, 4, 64, 4);
    }
  }
 else
  {
   atomicStore(buf[GLF_merged3_0_1_16_1_1_13_2_1_17next_virtual_gidnum_workgroupsubgroup_local_id.x], uint(GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.x + 1 == GLF_merged3_0_2_35_2_1_6_3_1_6GLF_merged2_0_1_6_1_1_6read_1read_2read_1read_2.xy.y) + 1, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
