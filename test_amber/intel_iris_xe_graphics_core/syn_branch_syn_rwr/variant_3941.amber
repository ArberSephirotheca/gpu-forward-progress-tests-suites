#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), min((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x) / 1.0) > injectionSwitch.y))));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ((! (false))) && true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), true && (! (false)))), ! (! (! (_GLF_IDENTITY(! (false), true && (! (false)))))))))))))), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((false)) || false), ! (! (! (false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ! (! ((false))))))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))), false || ((! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! _GLF_IDENTITY((false), ! (! ((false))))))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true))))))) || false)))))))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) && true)), (false) && true)));
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 uvec4 GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true, true))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(true, (true) && true))), ((! (_GLF_IDENTITY(true, (true) && true)))) || false)) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))))))) ? 0 : _GLF_FUZZED(-57490))), _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(92818) : 0)), 0)), (_GLF_IDENTITY(0, 0 | (0))) - 0), (0) << 0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), bool(bvec4(! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), false, true, false)))))))))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), injectionSwitch)).x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))) && true, false || ((false) && true)))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) : _GLF_FUZZED(6894.7081)))), float(_GLF_FUZZED(7374.4829)), bool(false))) > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.z = workgroup_id;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))), true, false)))))), (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
      barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(0u, 0u, 0u, 0u), ((_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec3(bool(bool(true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u, 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(0u, 0u, 0u, 0u), ((_GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(0u, 0u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))))).w * _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, ~ (~ (GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))).z, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(0u, 0u, 0u, 0u))))), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(0u, 0u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), min(_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, (true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size))), _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size, _GLF_IDENTITY((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), (_GLF_IDENTITY((_GLF_IDENTITY(true, true && (true)) ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)), ~ (~ ((true ? GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size : _GLF_FUZZED(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size)))))) >> uvec4(0u, 0u, 0u, 0u)))))) | uvec4(0u, 0u, 0u, 0u)))).w * GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.z) ^ 0u);
 GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y = workgroup_base;
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_id * subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_id * subgroup_size, (_GLF_IDENTITY(GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_id * subgroup_size, (GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_id * subgroup_size) / 1u)) ^ 0u)) / 1u) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.x = virtual_gid;
  }
 uint next_virtual_gid = GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.y + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) - 0), 0, 1), ~ (~ (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (1) | (1))), (~ (_GLF_IDENTITY(1, (1) | (1)))) << 0))), 1))) - 0), 0, 1))))), int(_GLF_IDENTITY(int(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) - 0), 0, 1), ~ (~ (ivec3(_GLF_IDENTITY(1, (1) - 0), 0, 1)))))), (true ? int(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (1) - 0), 0, 1), ~ (~ (ivec3(_GLF_IDENTITY(1, (1) - 0), 0, _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-25511))))))))) : _GLF_FUZZED(-97763))))))) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u))), ((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u)))) ^ 0u)))) / (1u & 1u))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)))), (_GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))))) >> (0u ^ 0u))))))) >> 0u), max(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / _GLF_IDENTITY(1u, (1u) * 1u)) | ((subgroup_size) / 1u))), 1u, 0u, 1u)))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), min(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) >> 0u), _GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u)))) | ((subgroup_size))) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_size))), (false ? _GLF_FUZZED(subgroup_size) : 0u))))))))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) / (1 | 1))) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u)))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), (bool(bool((injectionSwitch.x > injectionSwitch.y)))) || false))) ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)))), (_GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))))) / ((((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))))) >> 0u), (_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (1) / 1))), (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(atomicExchange(virtual_gid, subgroup_id)) : subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))))) - 0u), 1u)))))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u)), (uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u))) << (0u << _GLF_IDENTITY(uint(2u), uint(2u)))))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)))), ~ (~ (_GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))) ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)))))))))))) >> 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) ^ 0), 1))) * 1)) - 0u), 1u)))))), 0u ^ ((_GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), min(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) - 0u), 1u), uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) ^ 0), 1))) * 1)) - 0u), 1u)))))))) % _GLF_IDENTITY(subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, ((subgroup_size) / 1u) | ((subgroup_size) / 1u))), 1u, 0u, 1u)))), ((_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ? _GLF_FUZZED(subgroup_size) : (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), min((subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), (subgroup_size) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))))))))) >> 0u)))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) && true)), false || (! (_GLF_IDENTITY(! (false), (! (false)) && true)))))))
    {
     do
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), 1, 1)), max(int(ivec4(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), 1, 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), 1, 1)), clamp(int(ivec4(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), 1, 1)), int(ivec4(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), 1, 1)), int(ivec4(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) / 1))), _GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), 1, 1)))))))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))) / 1))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY((0 | (int(0))), (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) / 1)) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | (int(0)), max(0 | (int(0)), 0 | (int(0))))), ((0 | (int(0)))) ^ 0)))))) - 0) / 1))), ~ (~ ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0)))))) - 0) / 1))))))) | ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)) | (int(0)), _GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))) / 1)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, min(0, 0))))), 0)), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(sign(20111), ~ (_GLF_IDENTITY(~ (sign(20111)), min(~ (sign(20111)), _GLF_IDENTITY(~ (sign(20111)), (false ? _GLF_FUZZED(63991) : ~ (sign(20111)))))))), (sign(20111)) / 1)) : _GLF_IDENTITY(0, max(0, 0))))), int(0))), 0 + (((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-3085))), _GLF_IDENTITY(0, (0) / 1))), (0 | 0), 1, 1)))), 0 ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0)))) | (int(0)))) ^ 0))) / 1))), (_GLF_IDENTITY((_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 | (int(0)), (true ? 0 | (int(0)) : _GLF_FUZZED(72510)))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY((0 | (int(0))), ((_GLF_IDENTITY(0, (0) ^ 0) | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0)))))) - 0) / 1))), ~ (~ ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) * 1) : _GLF_FUZZED(int(next_virtual_gid))))) | (0)) | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))), (_GLF_IDENTITY((0 | (int(0))), (_GLF_IDENTITY((0 | (int(0))), (true ? (0 | (int(0))) : _GLF_FUZZED(-69717)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0)))) | _GLF_IDENTITY((_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) | (int(0))), ((0 | (int(0)))) ^ 0)))), clamp((_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) | (int(0))), ((0 | (int(0)))) ^ 0)))), (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) | (int(0))), ((0 | (int(0)))) ^ 0)))), _GLF_IDENTITY((_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) | (int(0))), ((0 | (int(0)))) ^ 0)))), ~ (~ ((_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) | (0)) | (int(0))), ((0 | (int(0)))) ^ 0))))))))))) - 0) / 1))))))) | ((_GLF_IDENTITY(int(0), _GLF_IDENTITY(0 | (int(0)), _GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) | (_GLF_IDENTITY((0 | (int(0))), ((0 | (int(0)))) ^ 0))) / 1)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(sign(20111), (sign(20111)) / 1)) : _GLF_IDENTITY(0, max(0, 0))))), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec4(1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), (0 | 0), 0))) ^ 1)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 1))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false))))));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), (_GLF_IDENTITY((~ (0)), ~ (~ (_GLF_IDENTITY((~ (0)), ((~ (0))) + 0))))) | ((~ (0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 | 1), ! (! (_injected_loop_counter < (1 | 1))))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 uint read_1 = atomicLoad(buf[GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.x], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, max(read_1, read_1))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + 1), (uint(read_1 + 1)) | 0u), 0u, ((_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) * 1u) << _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, 0u + (3u))), uint(3u))) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(_GLF_IDENTITY((uint(3u)) * 1u, ((uint(3u)) * 1u) / 1u), (true ? (uint(3u)) * 1u : _GLF_FUZZED(subgroup_local_id)))))), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (~ (4)) ^ 0)))) * 1), _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) >> 0)) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(1, 0, 1, 0), (_GLF_IDENTITY(ivec4(1, 0, 1, 0), (ivec4(1, 0, 1, 0)) >> ivec4(0, 0, 0, 0))) ^ ivec4(0, 0, 0, 0))))) | (_GLF_IDENTITY(1, (1) | (1))))), 4);
 uint read_2 = atomicLoad(buf[GLF_merged4_0_1_11_1_1_14_2_1_12_3_1_14virtual_gidworkgroup_baseworkgroup_idworkgroup_size.x], _GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (4), max(_GLF_IDENTITY(~ (4), (~ (4)) + 0), _GLF_IDENTITY(~ (4), (~ (4)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), (~ (4)) | (~ (4)))), min((_GLF_IDENTITY(_GLF_IDENTITY(~ (4), max(_GLF_IDENTITY(~ (4), (~ (4)) + 0), _GLF_IDENTITY(~ (4), (~ (4)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), (~ (4)) | (~ (4)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), max(_GLF_IDENTITY(~ (4), (~ (4)) + 0), _GLF_IDENTITY(~ (4), (~ (4)) - int(_GLF_ZERO(0.0, injectionSwitch.x))))), (~ (4)) | (~ (4))))))), _GLF_IDENTITY(64, _GLF_IDENTITY(min(_GLF_IDENTITY(64, _GLF_IDENTITY((64) | (64), (_GLF_IDENTITY((64) | (64), ((64) | (64)) + (-30368 & 0))) + int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) / 1.0))))), 64), max(min(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, 64))) + 0), ~ (~ (64)))) | (64)), 64), _GLF_IDENTITY(min(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(50580))))), 64), max(min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, _GLF_IDENTITY(min(64, _GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | 0)) | 0), 64))))), min(min(64, _GLF_IDENTITY(_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, max(64, 64)))), (1 & 1) * (_GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), max(64, 64))))))), min(64, _GLF_IDENTITY(64, clamp(64, 64, _GLF_IDENTITY(64, max(64, 64))))))))) | (64)), 64), min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, ~ (~ (64)))) | (64)), 64)))))), 0);
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-62192) : 1)))), min(1, _GLF_IDENTITY(1, ~ (~ (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1)) / 1))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false || (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))) + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)) < subgroup_size)
  {
   int i = 0;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true), false, true)))), bool(bvec4(! _GLF_IDENTITY((_GLF_WRAPPED_IF_FALSE(false)), _GLF_IDENTITY(bool(bvec2((_GLF_WRAPPED_IF_FALSE(false)), false)), (_GLF_IDENTITY(bool(bvec2((_GLF_WRAPPED_IF_FALSE(false)), false)), ! (! (bool(bvec2((_GLF_WRAPPED_IF_FALSE(false)), false)))))) || false)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false)))) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-2.7)), float(injectionSwitch.y), bool(true))))) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), true, true, true))), bool(bool((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))) && _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), true, true, true))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), true, true, true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), true, true, true))), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(-163.874, 7.6)))))).x < injectionSwitch.y)), true, true, true)))))), true, true))))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false || (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.0, -397.373)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(7.0, -397.373)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(7.0, -397.373)) : injectionSwitch, (false ? _GLF_FUZZED(vec2(7.0, -397.373)) : injectionSwitch) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, float(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) + 0.0), 1.0, log(1.0))))))))) && true)) && true))))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))), true && (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))))))) || false))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || _GLF_IDENTITY((bool(injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(((bool(injectionSwitch.x > injectionSwitch.y))) && true, true && (((bool(injectionSwitch.x > injectionSwitch.y))) && true))))))) || false)))))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, int(_GLF_ONE(1.0, injectionSwitch.y)) * ((1) >> _GLF_IDENTITY(0, (0) << 0)))))) == read_2) + 1, 4, 64, 4);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! (_GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), true && (! ((false) || false))))))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), ! (! (! (_GLF_WRAPPED_IF_TRUE(true))))))))
                    {
                     for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))))))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                barrier();
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         else
                          {
                          }
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x)), sqrt(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0), max(injectionSwitch.x, injectionSwitch.x)))) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, _GLF_IDENTITY(float(vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y) / 1.0, 0.0)), _GLF_IDENTITY((false ? _GLF_FUZZED(3.4) : _GLF_IDENTITY(float(vec2((injectionSwitch.y) / 1.0, 0.0)), mix(float(_GLF_FUZZED(-624.386)), float(float(vec2((injectionSwitch.y) / 1.0, 0.0))), bool(true)))), max((false ? _GLF_FUZZED(3.4) : float(vec2((injectionSwitch.y) / 1.0, 0.0))), (false ? _GLF_FUZZED(3.4) : float(vec2((injectionSwitch.y) / 1.0, 0.0)))))))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7485.1904)), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.4))), max(injectionSwitch.x, injectionSwitch.x)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(87.73)), bool(false))), max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7485.1904)), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(_GLF_IDENTITY(-2.2, 1.0 * (-2.2)))))), float(_GLF_FUZZED(7485.1904)), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0), max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7485.1904)), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7485.1904)), bool(false))), sqrt(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(30.36) : 1.0))) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) * mat3(1.0)))), injectionSwitch.x))), ((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) / 1.0), 1.0))))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat3x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) * mat3(1.0)))), injectionSwitch.x)))) * cos(0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(float(_GLF_FUZZED(7485.1904)), (true ? float(_GLF_FUZZED(7485.1904)) : _GLF_FUZZED(exp(-9111.1034)))), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), min(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) - 0.0), _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0)), min(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0)), float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2x4(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))), 0.0)), 0.0, 0.0, sqrt(1.0), 1.0, 1.0, 0.0, abs(1.0), 1.0, 0.0, 1.0, 0.0))))), max(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7485.1904)), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, max(injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), _GLF_IDENTITY(float(_GLF_FUZZED(7485.1904)), (float(_GLF_FUZZED(7485.1904))) + 0.0), bool(false))), sqrt(1.0) * (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (true ? max(injectionSwitch.x, injectionSwitch.x) : _GLF_FUZZED(-2.4)))))))) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))), ! (! (_GLF_IDENTITY(false, false || (false))))) ? 34.13 : -659.968))), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y))) && true)))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(false))
                              {
                               do
                                {
                                 do
                                  {
                                   barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(0)), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(0))), 0 | (~ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, 0u | (read_1)) + 1 == read_2) + 1, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
