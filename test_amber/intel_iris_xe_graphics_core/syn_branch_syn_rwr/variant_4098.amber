#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-55.58), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.6)), bvec2(true, false))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), mix(vec2(_GLF_FUZZED(-26.47), _GLF_FUZZED(531.234)), vec2((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))) - vec2(0.0, 0.0), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))), _GLF_IDENTITY(vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))), (vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718), float(vec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0))))))), mix(vec2(_GLF_FUZZED(-26.47), _GLF_FUZZED(531.234)), vec2((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-8194.8718))))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))) - vec2(0.0, 0.0) : _GLF_FUZZED(vec2(-98.72, -1852.9368)))))).x, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), mix(vec2(_GLF_FUZZED(-26.47), _GLF_FUZZED(531.234)), vec2((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))) - vec2(0.0, 0.0), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))), _GLF_IDENTITY(vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))), (vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718), float(vec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0))))))), mix(vec2(_GLF_FUZZED(-26.47), _GLF_FUZZED(531.234)), vec2((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-8194.8718))))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))) - vec2(0.0, 0.0) : _GLF_FUZZED(vec2(-98.72, -1852.9368)))))).x, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), (mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), mix(vec2(_GLF_FUZZED(-26.47), _GLF_FUZZED(531.234)), vec2((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))) - vec2(0.0, 0.0), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))), _GLF_IDENTITY(vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))), (vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))))) * mat2(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718), float(vec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0))))))), mix(vec2(_GLF_FUZZED(-26.47), _GLF_FUZZED(531.234)), vec2((_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) : _GLF_FUZZED(-8194.8718))))))[0], (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718))))))[1]), bvec2(true, true))), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0), (((vec2(mat2x3(injectionSwitch, 1.0, 1.0, 1.0, 1.0)))) * mat2(1.0)) * mat2(1.0))) / vec2(1.0, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-8194.8718)))))))) - vec2(0.0, 0.0) : _GLF_FUZZED(vec2(-98.72, -1852.9368)))))).x, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 0u, 0u)));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, true))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1245.8272), _GLF_FUZZED(-7341.0215)), bvec2(false, false))))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(1245.8272), _GLF_FUZZED(-7341.0215)), bvec2(false, false))))).y)))))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), uint(uint(((subgroup_local_id + 1) % subgroup_size)))), max(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | 0u)));
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), (false ? _GLF_FUZZED(vec2(82.60, -2.2)) : vec2(injectionSwitch.x, 1.0))))) > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)), true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)), true, true, true))), true && (! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true)), true, true, true)))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (false) || false), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))) && true))))), false, false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), (uint(read_1 + 1)) ^ 0u), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), clamp(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), _GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), (clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size)) | (clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size)))))), 0u ^ (~ (_GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), clamp(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), _GLF_IDENTITY(clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size), (clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size)) | (clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), subgroup_size))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), min(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), ~ (~ ((1)))))))), clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(i) : 4)), 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), false))))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, (_GLF_IDENTITY(read_1, clamp(read_1, read_1, read_1))) / 1u) + 1 == read_2) + _GLF_IDENTITY(1, max(1, 1)), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.0)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
