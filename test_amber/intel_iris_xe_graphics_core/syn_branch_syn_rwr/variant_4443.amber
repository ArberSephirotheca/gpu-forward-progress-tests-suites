#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_4 {
 bvec4 _f0;
 uint virtual_gid;
 bool _f1;
} ;

struct _GLF_struct_1 {
 mat4 _f0;
 float _f1;
 float _f2;
} ;

struct _GLF_struct_0 {
 int _f0;
 vec2 _f1;
 uvec2 _f2;
 mat4 _f3;
 uint _f4;
 vec3 _f5;
} ;

struct _GLF_struct_2 {
 float _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 uint workgroup_id;
 mat2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.y = subgroup_id;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(1.0, _GLF_struct_0(1, vec2(1.0), uvec2(1u), mat4(1.0), 1u, vec3(1.0)), _GLF_struct_1(mat4(1.0), 1.0, 1.0)), gl_WorkGroupID.x, mat2(1.0));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_3.workgroup_id;
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.w = workgroup_base;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(bvec4(true), GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.w + GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.y * subgroup_size + GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.z, true);
 uint next_virtual_gid = GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.w + GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.y * subgroup_size + ((GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.z + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[_GLF_struct_replacement_4.virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.x = read_1;
 atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.x + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[_GLF_struct_replacement_4.virtual_gid], 4, 64, 0);
 if(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.z + 1 < subgroup_size)
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.x + 1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_11_2_1_17_3_1_14read_1subgroup_idsubgroup_local_idworkgroup_base.x + 1 == read_2) + 1, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
