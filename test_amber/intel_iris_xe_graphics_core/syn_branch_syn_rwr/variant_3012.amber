#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_26 {
 uint workgroup_id;
 mat4x2 _f0;
} ;

struct _GLF_struct_23 {
 mat4x3 _f0;
} ;

struct _GLF_struct_22 {
 vec2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_21 {
 bool _f0;
 mat3x2 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_20 {
 uvec2 _f0;
} ;

struct _GLF_struct_24 {
 _GLF_struct_20 _f0;
 _GLF_struct_21 _f1;
 mat2x4 _f2;
 mat2x3 _f3;
 _GLF_struct_22 _f4;
 _GLF_struct_23 _f5;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 bvec3 _f1;
 uvec4 _f2;
 mat4x3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_19 {
 uint _f0;
 mat3x4 _f1;
 ivec2 _f2;
 uvec4 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_16 {
 uint _f0;
 int _f1;
 ivec2 _f2;
 vec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_15 {
 mat2x3 _f0;
 mat4x3 _f1;
 vec3 _f2;
 uvec2 _f3;
 mat2x3 _f4;
 mat3x2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_14 {
 mat3x2 _f0;
} ;

struct _GLF_struct_17 {
 _GLF_struct_14 _f0;
 ivec4 _f1;
 vec2 _f2;
 _GLF_struct_15 _f3;
 uvec4 _f4;
 _GLF_struct_16 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
 mat3x2 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
} ;

struct _GLF_struct_25 {
 _GLF_struct_13 _f0;
 _GLF_struct_17 _f1;
 uint subgroup_local_id;
 _GLF_struct_19 _f2;
 _GLF_struct_24 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_10 {
 mat4x3 _f0;
 vec2 _f1;
 mat4x3 _f2;
 mat4 _f3;
 vec3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_9 {
 vec2 _f0;
 uvec4 _f1;
 vec2 _f2;
 mat3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_8 {
 mat2x3 _f0;
 vec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 vec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_6 {
 uint _f0;
 bvec2 _f1;
 float _f2;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 bool _f3;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 uint _f1;
 bool _f2;
 int _f3;
 vec3 _f4;
 ivec3 _f5;
 uint subgroup_size;
 uvec3 _f6;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 mat3 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 int _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_12 {
 bool _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_7 _f3;
 _GLF_struct_11 _f4;
 int _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / sqrt(abs(vec2(1.0, 1.0)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(62.62)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(62.62)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(62.62)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) / 1.0)) / 1.0)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false)))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, int(int(1)))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0), (_injected_loop_counter ++) | (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) | (_GLF_IDENTITY(2, clamp(2, 2, _GLF_IDENTITY(2, (false ? _GLF_FUZZED(_injected_loop_counter) : 2))))))), int(2)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))) && true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, true, true)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(_GLF_IDENTITY(3, max(3, 3))), int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), max(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))), _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3)))))))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))) || false); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((0 & 40815) & 1966); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) << 0)); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ _GLF_IDENTITY((_injected_loop_counter ++), ~ (~ ((_injected_loop_counter ++))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, exp(0.0), 0.0)), min(float(vec4(injectionSwitch.x, 1.0, exp(0.0), 0.0)), float(vec4(injectionSwitch.x, 1.0, exp(0.0), 0.0))))) < injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec4(false, true, false, true))) || ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 1.0, exp(0.0), 0.0)), min(float(vec4(injectionSwitch.x, 1.0, exp(0.0), 0.0)), float(vec4(injectionSwitch.x, 1.0, exp(0.0), 0.0))))) < injectionSwitch.y))))))
                {
                 barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) || false)), (bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, false, false)))) || false))) || false)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((injectionSwitch - -3020.1772)) : injectionSwitch)))).x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false))))) && true)), bool(bvec2(false, false)))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, true, false)))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), bool(bool(false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(true, _GLF_struct_1(_GLF_struct_0(mat4x3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1, _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec2(1u)) | (_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(7u), uvec2(7u)), (_GLF_IDENTITY(uvec2(7u), uvec2(7u))) << uvec2(0u, 0u)), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))), ~ _GLF_IDENTITY((~ ((uvec2(1u)) | (_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))))), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((~ ((uvec2(1u)) | (_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))))), ~ (~ ((~ ((uvec2(1u)) | (_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))))))))))), ~ (~ (_GLF_IDENTITY((uvec2(1u)) | _GLF_IDENTITY((_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(7u), uvec2(7u)), (true ? _GLF_IDENTITY(uvec2(7u), uvec2(7u)) : _GLF_FUZZED(uvec2(74557u, 169897u)))), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(_GLF_IDENTITY(6u, clamp(6u, _GLF_IDENTITY(6u, (6u) | (6u)), 6u))))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(6u), ~ (~ (uvec2(6u)))), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(6u, min(6u, 6u))), max(uvec2(6u), uvec2(6u)))) / (uvec2(1u, 1u) ^ uvec2(0u, 0u))), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))), max((_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(6u), (_GLF_IDENTITY(uvec2(6u), max(uvec2(6u), uvec2(6u)))) / (uvec2(1u, 1u) ^ uvec2(0u, 0u))), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))), (_GLF_IDENTITY((uvec2(0u, _GLF_IDENTITY(0u, (0u) ^ 0u)) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(6u), (_GLF_IDENTITY(uvec2(6u), max(uvec2(6u), uvec2(6u)))) / (uvec2(1u, 1u) ^ uvec2(0u, 0u))), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))))), ~ (~ ((uvec2(1u)) | (_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(7u), uvec2(7u)), (_GLF_IDENTITY(uvec2(7u), uvec2(_GLF_IDENTITY(7u, (7u) | (0u ^ 0u))))) / (uvec2(1u, 1u) | uvec2(0u, 0u))), max((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(_GLF_IDENTITY(6u, (6u) >> 0u)))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (_GLF_IDENTITY(uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) ^ uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)))))))))))), (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) | (_GLF_IDENTITY((uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), max((_GLF_IDENTITY(uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(6u), uvec2(0u, 0u) + (_GLF_IDENTITY(uvec2(6u), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(6u), (uvec2(6u)) - uvec2(0u, 0u)), 1u, (0u ^ 0u)), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(uvec2(6u), (uvec2(6u)) - uvec2(0u, 0u)), 1u, (0u ^ 0u)))))))), uvec2(_GLF_IDENTITY(6u, (6u) ^ 0u))), (true ? uvec2(0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(6u), uvec2(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u | (0u)))), 0u) + (_GLF_IDENTITY(uvec2(6u), uvec2(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(6u, clamp(_GLF_IDENTITY(6u, max(_GLF_IDENTITY(6u, max(6u, _GLF_IDENTITY(6u, clamp(6u, 6u, 6u)))), 6u)), 6u, 6u))), (uvec2(6u)) - uvec2(0u, 0u)), 1u, (0u ^ 0u)), uvec4(0u, 0u, 0u, 0u) | (uvec4(_GLF_IDENTITY(uvec2(6u), (uvec2(6u)) - uvec2(0u, 0u)), 1u, (0u ^ 0u)))))))), uvec2(6u)) : _GLF_FUZZED((uvec2(88300u, _GLF_IDENTITY(105026u, (105026u) ^ 0u)) % subgroup_id))))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u)), (uvec2(0u, 0u) >> _GLF_IDENTITY(uvec2(6u), uvec2(6u))) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))))))) - uvec2(0u, 0u)))), _GLF_struct_3(bvec2(true), mat3(1.0), _GLF_struct_2(mat3x2(1.0), 1u, true, 1, _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(vec3(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.3)), float(0.0), bool(true))), 0.0, 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0))), (mat2x4(vec3(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2463.7456))), 1.0)))))), 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(vec3(_GLF_FUZZED(808.226), _GLF_FUZZED(0.1), (vec3(_GLF_IDENTITY(mat2x4(vec3(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0), (mat2x4(vec3(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0)), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[2]), vec3((vec3(_GLF_IDENTITY(mat2x4(vec3(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))))), 1.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED((- 0.6))), float(0.0), bool(true)), max(mix(float(_GLF_FUZZED((- 0.6))), float(0.0), bool(true)), mix(float(_GLF_FUZZED((- 0.6))), float(0.0), bool(true)))))), (mat2x4(vec3(1.0), 1.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0), (mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)) * mat3(1.0))), 1.0, determinant(mat3(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[0], (vec3(_GLF_IDENTITY(mat2x4(vec3(1.0), 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), 1.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0), (mat2x4(vec3(1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))) + 0.0), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 1.0))), determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), 0.0, 0.0)), 1.0)), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[1], _GLF_FUZZED(-466.014)), bvec3(true, true, false)))))), ivec3(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) ^ 0))), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) ^ 0))))))))), gl_SubgroupSize, uvec3(1u))), _GLF_struct_7(_GLF_struct_4(bvec2(_GLF_IDENTITY(true, (true) || false))), _GLF_struct_5(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / 1.0), min(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-43.33)), bool(false))), _GLF_IDENTITY(1.0, (1.0) * 1.0))))), _GLF_struct_6(1u, bvec2(true), 1.0), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), bool(bvec2((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, true))) && _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true))) || (true)))), _GLF_struct_11(_GLF_struct_8(mat2x3(1.0), vec4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(1.0, sqrt(0.0), 0.0, sin(0.0))), clamp(float(mat2(1.0, sqrt(0.0), 0.0, sin(0.0))), float(mat2(1.0, sqrt(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), min(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), (_GLF_IDENTITY(float(vec4(0.0, 0.0, 0.0, 1.0)), clamp(_GLF_IDENTITY(float(vec4(0.0, 0.0, 0.0, 1.0)), clamp(float(vec4(0.0, 0.0, 0.0, 1.0)), float(vec4(0.0, 0.0, 0.0, 1.0)), float(vec4(0.0, 0.0, 0.0, 1.0)))), float(vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(vec4(0.0, 0.0, 0.0, 1.0)), (true ? float(vec4(0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(5.7)))))) / 1.0))), 0.0, sin(0.0))), _GLF_IDENTITY(float(mat2(1.0, sqrt(0.0), 0.0, sin(0.0))), (float(mat2(1.0, sqrt(0.0), 0.0, sin(0.0)))) / 1.0))))), mat3(1.0)), _GLF_struct_9(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(asin(-704.833)) : 1.0))), uvec4(1u), vec2(1.0), mat3(1.0), mat2(1.0)), _GLF_struct_10(mat4x3(1.0), vec2(1.0), mat4x3(1.0), mat4(1.0), vec3(1.0), ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0))), 0)), 0 + (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), max(_GLF_IDENTITY(1, (1) - 0), _GLF_IDENTITY(1, (1) - 0))), 0))))))), vec4(1.0), uvec4(1u)), 1);
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false || (_GLF_DEAD(false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_13(_GLF_IDENTITY(uvec2(1u), ~ (~ (_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u)))))), mat3x2(1.0), mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(49.40, _GLF_IDENTITY(float(float(49.40)), mix(float(float(float(49.40))), float(_GLF_FUZZED(45.29)), bool(false)))))))), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(740.545))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, float(mat2(1.0, sqrt(1.0), 0.0, 0.0)))) - determinant(mat3(0.0, round(length(normalize(1.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 0.0, 0.0)), ((_GLF_IDENTITY(1.0, float(mat2(1.0, sqrt(1.0), 0.0, 0.0)))) - determinant(mat3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7.8)), float(0.0), bool(true))), round(length(normalize(1.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 1.0, 0.0)))) - 0.0), (1.0) + 0.0), 0.0, 0.0, 0.0))) - 0.0)))), _GLF_struct_17(_GLF_struct_14(mat3x2(1.0)), ivec4(1), vec2(1.0), _GLF_struct_15(mat2x3(1.0), mat4x3(1.0), vec3(1.0), uvec2(1u), mat2x3(1.0), mat3x2(_GLF_IDENTITY(1.0, (1.0) * 1.0)), ivec4(1)), uvec4(1u), _GLF_struct_16(1u, 1, ivec2(1), vec3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, sin(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, abs(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0))), 1.0, 1.0))), mat4x2(1.0)), mat2(1.0)), gl_SubgroupInvocationID, _GLF_struct_19(1u, mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_IDENTITY(_GLF_FUZZED(-9008.2299), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9008.2299), (_GLF_FUZZED(-9008.2299)) + 0.0)), float(_GLF_FUZZED(-8.7)), bool(false))) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, cos(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(570.439)))), 0.0, _GLF_IDENTITY(abs(0.0), 1.0 * (_GLF_IDENTITY(abs(0.0), _GLF_IDENTITY(0.0 + (abs(0.0)), float(mat4x3(_GLF_IDENTITY(0.0 + (abs(0.0)), mix(float(_GLF_FUZZED(9.7)), float(_GLF_IDENTITY(0.0 + (abs(0.0)), min(0.0 + (abs(0.0)), _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (abs(0.0))))), bool(true))), abs(0.0), 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), mix(float(_GLF_FUZZED(-9.2)), float(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (false ? _GLF_FUZZED(8.4) : dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), min(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))))), bool(true)))), 1.0, length(0.0), 1.0, 0.0, 1.0)))))), cos(0.0), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0), mat3(mat4x3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, cos(0.0), 0.0, abs(0.0), cos(0.0), 1.0, 1.0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), (false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, cos(0.0), 0.0, abs(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(71.44)), bool(false)))) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0), vec3(0.0, 1.0, 0.0))))))), cos(0.0), 1.0, 1.0), mat3(mat4x3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, cos(0.0), 0.0, abs(0.0), cos(0.0), 1.0, 1.0)))), (_GLF_IDENTITY(_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2123.7560))), 1.0)), min(1.0, 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), min(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(0.8) : false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))), 0.0, 1.0, cos(0.0), 0.0, abs(0.0), cos(0.0), 1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-55.28) : _GLF_IDENTITY(1.0, (1.0) - 0.0)))), mat3(mat4x3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 1.0, cos(0.0), 0.0, abs(0.0), cos(0.0), 1.0, 1.0)))), mat3(1.0) * (_GLF_IDENTITY(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), min(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(0.8) : false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))))), mix(float(_GLF_FUZZED(6461.4962)), float(_GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), min(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), (false ? _GLF_FUZZED(0.8) : false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)), false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0))))))), bool(true))))), 0.0, 1.0, cos(0.0), 0.0, abs(0.0), cos(0.0), 1.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-55.28) : _GLF_IDENTITY(1.0, (1.0) - 0.0)))), mat3(mat4x3(mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY((false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0))), max(_GLF_IDENTITY((false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0))), mix(float(_GLF_FUZZED(6069.8716)), float((false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), bool(true))), _GLF_IDENTITY((false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0))), mix(float(_GLF_FUZZED(0.2)), float((false ? _GLF_FUZZED(-9008.2299) : _GLF_IDENTITY(1.0, min(1.0, 1.0)))), bool(true)))))), 0.0, 1.0, cos(0.0), 0.0, abs(0.0), cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), 1.0, 1.0))))))) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * _GLF_ONE(1.0, injectionSwitch.y)), 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat3(0.7, -126.455, -4.0, 4680.0123, 3289.2015, -6.4, -5641.9449, 50.87, -461.341))))))), ivec2(1), uvec4(1u), _GLF_struct_18(mat3x4(1.0), bvec3(_GLF_IDENTITY(true, ! (! (true)))), uvec4(1u), mat4x3(1.0), vec4(1.0))), _GLF_struct_24(_GLF_struct_20(uvec2(1u)), _GLF_struct_21(true, mat3x2(1.0), mat4(1.0)), mat2x4(1.0), mat2x3(1.0), _GLF_struct_22(_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY(max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(1.0), ((vec2(1.0)) * mat2(1.0)) * mat2(1.0)))), (_GLF_IDENTITY(max(vec2(1.0), _GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(1.0), _GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (_GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(4023.9361, -1.1)) : ((vec2(1.0)) * mat2(1.0))))) / vec2(1.0, 1.0)) * mat2(1.0)))), (false ? _GLF_FUZZED(vec2(830.664, -335.361)) : max(vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(1.0), _GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (_GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(4023.9361, -1.1)) : ((vec2(1.0)) * mat2(1.0))))) / vec2(1.0, 1.0)) * mat2(1.0))), mix(vec2(_GLF_FUZZED(-0.3), _GLF_FUZZED(-4.8)), vec2((_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(1.0), _GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (_GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(4023.9361, -1.1)) : ((vec2(1.0)) * mat2(1.0))))) / vec2(1.0, 1.0)) * mat2(1.0))))[0], (_GLF_IDENTITY(vec2(1.0), _GLF_IDENTITY((vec2(1.0)) * mat2(1.0), _GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (_GLF_IDENTITY(((vec2(1.0)) * mat2(1.0)), (false ? _GLF_FUZZED(vec2(4023.9361, -1.1)) : ((vec2(1.0)) * mat2(1.0))))) / vec2(1.0, 1.0)) * mat2(1.0))))[1]), bvec2(true, true))))))) - sin(vec2(0.0, 0.0)))), bvec3(true)), _GLF_struct_23(mat4x3(1.0))), mat3x2(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)), false || (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false)))))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) | (0))) / (1 ^ 0)) | 0), ! (_GLF_IDENTITY(! (_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) | (0))) / (1 ^ 0)) | 0)), true && (! (_injected_loop_counter != (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | 0)) | (0))) / (1 ^ 0)) | 0))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) || false), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) || false), true, true), true)))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch[1], injectionSwitch[1])))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-0.6)), vec2(_GLF_FUZZED(-3663.5273), (injectionSwitch)[1]), bvec2(false, true)))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], float(mat2x4(injectionSwitch[1], 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), injectionSwitch[1], injectionSwitch[1])))), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))), injectionSwitch)).y) && true)))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, ~ (~ (1)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(gl_WorkGroupID.x, mat4x2(1.0));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))))) | (_GLF_IDENTITY(1, (1) | (1)))), max(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))))) | (_GLF_IDENTITY(1, (1) | (1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))))) | (_GLF_IDENTITY(1, (1) | (1)))), int(ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(2200) : 1))))) | (_GLF_IDENTITY(1, (1) | (1)))), 1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))), dot(vec2(0.0, 1.0), vec2(0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), sin(_GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0))).x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))) || false))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-9.4)), bool(false))))), false)), false)))))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(74916u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), uint(uvec2(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), 0u))))), clamp(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u), workgroup_size)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u))), max(workgroup_size, workgroup_size))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(74916u) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), uint(uvec2(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), 0u))))), clamp(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u), workgroup_size)), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)), workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u))), max(workgroup_size, workgroup_size)))))))))) >> _GLF_IDENTITY(0u, 0u ^ (0u))) * _GLF_struct_replacement_26.workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, (true ? _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x : _GLF_FUZZED(9.2))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-577.001)), float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / 1.0)), bool(true))))) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x)))) > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(649.294, -813.149)))), injectionSwitch)).y))))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) - (0u << _GLF_IDENTITY(uint(1u), uint(1u))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (subgroup_id) - (0u << _GLF_IDENTITY(uint(1u), uint(1u))) : _GLF_FUZZED(33968u)))) * _GLF_struct_replacement_12._f2._f2.subgroup_size + _GLF_struct_replacement_25.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u) * _GLF_struct_replacement_12._f2._f2.subgroup_size + _GLF_IDENTITY(((_GLF_struct_replacement_25.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0))), 1 * (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0))))))))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1)))))) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0))))), max((1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0))))), (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))))))), 1))) % _GLF_struct_replacement_12._f2._f2.subgroup_size), max(((_GLF_struct_replacement_25.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1), int(int(_GLF_IDENTITY((1), 0 | ((1)))))) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) | (1)), _GLF_IDENTITY(1, (1) / 1)))) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))))))), 1))) % _GLF_struct_replacement_12._f2._f2.subgroup_size), ((_GLF_struct_replacement_25.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(findLSB(workgroup_base)) : ~ (0)))))), (_GLF_IDENTITY(1, (1) | 0)) | (_GLF_IDENTITY(1, (1) | 0)))))))) << 0), 1))) % _GLF_struct_replacement_12._f2._f2.subgroup_size)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), min(int(6), int(6)))) / 1)))) | 0), min(_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 ^ (6))), (int(6)) / 1))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))), ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) / 1, int(_GLF_IDENTITY(int((int(6)) / 1), max(_GLF_IDENTITY(int((int(6)) / 1), (false ? _GLF_FUZZED(_injected_loop_counter) : int((int(6)) / 1))), int((int(6)) / 1)))))))), ((_GLF_IDENTITY(0, 0 + (0)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0)))) | 0), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0, 0 | (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0, (((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0) / 1)))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, ~ (~ (6))))) / 1))), 0 | ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(_GLF_IDENTITY(6, ~ (~ (6))))) / 1))))), (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)) && true), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
    }
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, clamp(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(uvec3(read_1 + 1, 0u, 1u)), 0u | (uint(uvec3(read_1 + 1, 0u, 1u))))), _GLF_IDENTITY(read_1 + 1, (read_1 + _GLF_IDENTITY(1, clamp(1, 1, 1))) | 0u), read_1 + 1))), 4, _GLF_IDENTITY(64, 1 * (64)), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y)), true, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y)), true, true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y)), true, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - sqrt(sqrt(vec2(0.0, 0.0)))).x > injectionSwitch.y)), true, true))))))))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).y, (false ? _GLF_FUZZED(-8098.4822) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - sin(vec2(0.0, 0.0)), max(_GLF_IDENTITY((injectionSwitch) - sin(vec2(0.0, 0.0)), min((injectionSwitch) - sin(vec2(0.0, 0.0)), (injectionSwitch) - sin(vec2(0.0, 0.0)))), (injectionSwitch) - sin(vec2(0.0, 0.0))))).y)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) - sin(vec2(0.0, 0.0))).y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) - sin(vec2(0.0, 0.0))).y))))) && true)))
    {
    }
   else
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), true && (! (_GLF_WRAPPED_IF_FALSE(false)))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? -5.7 : vec2(4.6, 349.094).t)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.2)), bvec2(true, false))).y, (injectionSwitch.y) - 0.0)))))))
            barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool((_GLF_DEAD(false))), false || (_GLF_IDENTITY(bool((_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool((_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (! (bool((_GLF_DEAD(false))))), (! (! (bool((_GLF_DEAD(false)))))) || false)))))))))), (! (! _GLF_IDENTITY((_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool((_GLF_DEAD(false))), false || (_GLF_IDENTITY(bool((_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool((_GLF_DEAD(false)))), ! (! (! (bool((_GLF_DEAD(false))))))))))))))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true, true)))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))))))), ((! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)), cos(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     for(int _injected_loop_counter = ((0 | 0) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-6892) : int(_GLF_IDENTITY(3, min(_GLF_IDENTITY(3, (3) - 0), _GLF_IDENTITY(3, (3) | (3))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(11.43)), clamp((true ? injectionSwitch.y : _GLF_FUZZED(11.43)), _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(11.43)), mix(float((true ? injectionSwitch.y : _GLF_FUZZED(11.43))), float(_GLF_FUZZED(-695.724)), bool(false))), (true ? injectionSwitch.y : _GLF_FUZZED(11.43))))))), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-8223.1185)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))))), _GLF_ONE(1.0, injectionSwitch.y))))) | (int(_GLF_ONE(1.0, injectionSwitch.y)))))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y)))) && true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)))), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))) || false)))))))) || _GLF_IDENTITY(false, (false) || false)))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false, false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false, false)))), false)))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), true))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, true && (false)))), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, true && (false))))) || false))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(8552.9614)), bvec2(false, false))).y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, cos(0.0))), max(float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, cos(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4724.2708) : 0.0))))), float(mat4x3(injectionSwitch.y, 0.0, abs(1.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, cos(0.0))))))))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), bool(bvec3(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-9.2, -50.88)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(123.796))), mix(float(_GLF_FUZZED(7620.2977)), float(injectionSwitch.x), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), bool(bvec4(_GLF_IDENTITY((! (true)), ((! (true))) || false), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(3971.8350)))), vec2(_GLF_FUZZED(-2.2), _GLF_FUZZED(8996.1741)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0), mix(vec2((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[0], _GLF_FUZZED((0.0 + 352.983))), vec2(_GLF_FUZZED(-7372.5199), _GLF_IDENTITY((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1], ((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1]) * 1.0)), bvec2(false, true))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(3971.8350)))), vec2(_GLF_FUZZED(-2.2), _GLF_FUZZED(8996.1741)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0), mix(vec2((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[0], _GLF_FUZZED((0.0 + 352.983))), vec2(_GLF_FUZZED(-7372.5199), _GLF_IDENTITY((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1], ((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1]) * 1.0)), bvec2(false, true))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(3971.8350)))), vec2(_GLF_FUZZED(-2.2), _GLF_FUZZED(8996.1741)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0), mix(vec2((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[0], _GLF_FUZZED((0.0 + 352.983))), vec2(_GLF_FUZZED(-7372.5199), _GLF_IDENTITY((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1], ((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1]) * 1.0)), bvec2(false, true))))), (false ? _GLF_FUZZED(vec2(-339.510, 2.8)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(3971.8350)))), vec2(_GLF_FUZZED(-2.2), _GLF_FUZZED(8996.1741)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0), mix(vec2((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[0], _GLF_FUZZED((0.0 + 352.983))), vec2(_GLF_FUZZED(-7372.5199), _GLF_IDENTITY((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1], ((((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))[1]) * 1.0)), bvec2(false, true))))))))).x < injectionSwitch.y))))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_struct_replacement_25.subgroup_local_id + 1 < _GLF_struct_replacement_12._f2._f2.subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     int i = 0;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).y), _GLF_IDENTITY(false, (false) || false) || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) * 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(_GLF_IDENTITY((read_1) >> 0u, 0u + ((read_1) >> 0u)), ~ (_GLF_IDENTITY(~ ((read_1) >> 0u), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(~ ((read_1) >> 0u), (~ ((read_1) >> 0u)) | (~ ((read_1) >> 0u))), (~ ((read_1) >> 0u)) | (~ ((read_1) >> 0u))), 0u, 0u, 0u)))))) + 1 == read_2), (false ? _GLF_FUZZED(read_2) : uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, clamp(read_1, read_1, read_1)), (read_1) >> 0u) + 1 == read_2))) + 1, 4, 64, 4);
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3880.3673))), _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), max((injectionSwitch.y), _GLF_IDENTITY((injectionSwitch.y), clamp((injectionSwitch.y), (injectionSwitch.y), (injectionSwitch.y))))) * 1.0), injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, 1))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1, (read_1) * (1u ^ 0u)) + 1, read_1 + 1)) == read_2) + 1, 4, 64, _GLF_IDENTITY(4, 0 ^ (4)));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))), bool(_GLF_IDENTITY(bvec2((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
