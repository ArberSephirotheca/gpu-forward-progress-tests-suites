#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat3x4 _f0;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_5 {
 mat3x4 _f0;
 int _f1;
 uvec3 _f2;
 mat3x4 _f3;
 mat3 _f4;
 mat2x4 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 mat3x2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 uvec3 _f1;
 mat4x3 _f2;
 bvec4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 ivec4 _f1;
 uvec2 _f2;
 bool _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
} ;

struct _GLF_struct_1 {
 bool _f0;
 mat2x4 _f1;
 bvec2 _f2;
 bvec4 _f3;
 _GLF_struct_0 _f4;
} ;

struct _GLF_struct_9 {
 _GLF_struct_1 _f0;
 uint read_1;
 int _f1;
 _GLF_struct_4 _f2;
 mat2x3 _f3;
 mat4x2 _f4;
 _GLF_struct_8 _f5;
 ivec2 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) << 0u))) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_1(true, mat2x4(1.0), bvec2(true), bvec4(true), _GLF_struct_0(uvec4(1u))), atomicLoad(buf[virtual_gid], 4, 64, 0), 1, _GLF_struct_4(bvec2(true), ivec4(1), uvec2(1u), true, _GLF_struct_2(vec3(1.0), uvec3(1u), mat4x3(1.0), bvec4(true), mat2x3(1.0)), _GLF_struct_3(bvec2(true)), vec3(1.0)), mat2x3(1.0), mat4x2(1.0), _GLF_struct_8(_GLF_struct_5(mat3x4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1, uvec3(1u), mat3x4(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), mat3(1.0), mat2x4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(41.98)))), vec3(1.0)), mat3x2(1.0), _GLF_struct_6(vec2(1.0), bvec2(true)), _GLF_struct_7(mat3x4(1.0))), ivec2(1));
 atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_9.read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && _GLF_IDENTITY(true, bool(bvec2(true, true)))))
  {
   int i = 0;
   atomicStore(buf[next_virtual_gid], uint(_GLF_struct_replacement_9.read_1 + 1 == read_2) + 1, 4, 64, 4);
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_struct_replacement_9.read_1 + 1 == read_2, ! (! (_GLF_IDENTITY(_GLF_struct_replacement_9.read_1 + 1 == read_2, ! (! (_GLF_struct_replacement_9.read_1 + 1 == read_2))))))) + 1, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
