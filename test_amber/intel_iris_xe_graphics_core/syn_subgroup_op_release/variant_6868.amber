#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))) && _GLF_IDENTITY(true, ! (! (true)))))))
        return;
       return;
      }
    }
   else
    {
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + determinant(mat2(0.0, 0.0, 1.0, 0.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, cos(0.0), 0.0), mix(vec3(_GLF_FUZZED(860.718), _GLF_FUZZED(4000.7050), (vec3(injectionSwitch.x, cos(0.0), 0.0))[2]), vec3((vec3(injectionSwitch.x, cos(0.0), 0.0))[0], (vec3(injectionSwitch.x, cos(0.0), 0.0))[1], _GLF_FUZZED(1276.0158)), bvec3(true, true, false))))) > injectionSwitch.y))) && true)))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y)))))))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3784.2108)), float(injectionSwitch.y), bool(true)))))))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY((! (_GLF_DEAD(false))) && true, false || ((! (_GLF_DEAD(false))) && true))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), mix(vec4(_GLF_FUZZED(0.0), (vec4(0.0, 0.0, 0.0, 0.0))[1], (vec4(0.0, 0.0, 0.0, 0.0))[2], _GLF_FUZZED(float(-54582))), vec4((vec4(0.0, 0.0, 0.0, 0.0))[0], _GLF_FUZZED(-12.29), _GLF_FUZZED(7.0), (vec4(0.0, 0.0, 0.0, 0.0))[3]), bvec4(true, false, false, true))))), injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), bool(bvec4(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), true, false, true)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, false || (true)), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, ! (! (true))))))))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true))))) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, true, true)))))))) || false))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 0.0, 1.0, 1.0, 1.0, 0.0))), injectionSwitch.x)) > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              continue;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           continue;
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             return;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false) || false, false || ((false) || false)), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (((false) || false))), ! (! (! ((false) || false)))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), ! (! (! ((false) || false)))))), false, true), false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))) || false)));
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bool(_injected_loop_counter != 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), true, false, false))))), true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, (0.0) - 0.0) + (injectionSwitch.x)) > injectionSwitch.y), true && (! (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(20.05) : 0.0)) : _GLF_FUZZED(sign(-6.7)))) + (injectionSwitch.x)) > injectionSwitch.y)))))))));
     if(_GLF_DEAD(false))
      continue;
     barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), clamp((0), _GLF_IDENTITY((0), min((0), (0))), _GLF_IDENTITY((0), int(_GLF_IDENTITY(ivec3((0), 0, 0), (ivec3((0), 0, 0)) / ivec3(1, 1, 1)))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(matrixCompMult(mat2(167.600, -3.3, -6879.5474, -3268.7294), mat2(-6908.5583, 9.9, -0.3, -4695.1482))) : mat2(_GLF_ONE(1.0, injectionSwitch.y)))) * (injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? _GLF_IDENTITY(int(1), ~ (~ (int(1)))) : _GLF_FUZZED(77247)))))); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), int(5)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_injected_loop_counter --), (false ? _GLF_FUZZED(_injected_loop_counter) : (_injected_loop_counter --))), (~ (_injected_loop_counter --)) | 0))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))) || false), false || (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(130488u)), _GLF_FUZZED(1.9)), vec2((injectionSwitch)[_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | (0))))], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, true && (true)), true))).x > injectionSwitch.y))))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 & 1), (_GLF_IDENTITY((1 & 1), max(_GLF_IDENTITY((1 & 1), int(ivec4((1 & 1), 1, 0, 1))), (1 & 1)))) >> 0)); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     break;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(findMSB((-88425 << 5396)))))], injectionSwitch[1])).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(0.0)))).x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 & (1 & _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(true))), bool(false))))) > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8990.0663, 6491.2016)))).y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) << 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      break;
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false)) && true))))
              {
              }
             else
              {
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), ! (! (bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))))), (false) || false)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)) || false)), (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true, bool(bvec4(((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true, false, true, true))))) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) || false, bool(bool((_GLF_DEAD(false)) || false))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true)) && true)), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true)) && _GLF_IDENTITY(true, true && (true)))))))))))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))))))))))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(4), int(4)), (1 << _GLF_IDENTITY(int(4), int(4))) << 0)) >> _GLF_IDENTITY(int(4), int(4))) & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (true ? _GLF_IDENTITY(int(3), (int(3)) ^ 0) : _GLF_FUZZED(164))), int(3))) >> _GLF_IDENTITY(int(3), int(3))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                }
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, true)), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec2(bvec2(bvec2(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false)))))) && true, ((_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), abs(0.0), 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(9820.2283))), 1.0)), 1.0)), 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(-36386))), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-8.6)))), bool(true))) : _GLF_FUZZED(faceforward(sign(-665.915), 6.1, -6.1)))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 1.0, abs(1.0), abs(0.0), 0.0, abs(1.0), 0.0, 0.0)), float(mat3x4(float(mat4x2(1.0, 1.0, abs(1.0), abs(0.0), 0.0, abs(1.0), 0.0, 0.0)), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, exp(0.0)))))))) * _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / _GLF_IDENTITY(mat4(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0)))) + determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0), (false ? _GLF_FUZZED(mat4(63.13, 6.3, 9219.4394, -20.89, -855.940, 231.401, -602.292, -14.72, 395.869, 434.288, -4070.3726, -73.69, -777.748, -0.4, -2.1, -901.527)) : mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, abs(0.0)), transpose(transpose(mat4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), (_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(1.0 * (1.0), mix(float(_GLF_FUZZED(-37.12)), float(1.0 * (1.0)), bool(true)))), 1.0, 1.0), (vec4(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 1.0)), 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(679.665)), float(1.0), bool(true)))), max(_GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(679.665)), float(1.0), bool(true)))), max((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(679.665)), float(1.0), bool(true)))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(679.665)), float(1.0), bool(true)))), float(mat3x2((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(679.665)), float(1.0), bool(true)))), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-86.12))), 0.0, 0.0, 1.0))))), _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(679.665)), float(1.0), bool(true)))), float(mat2((_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(679.665, mix(float(_GLF_FUZZED(963.409)), float(679.665), bool(true))))), float(1.0), bool(true)))), 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))), 1.0, 1.0)) - sin(vec4(0.0, 0.0, 0.0, 0.0)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))).y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, log(1.0), 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0)), float(_GLF_FUZZED(((mat4x3(-2265.6835, 3964.0180, 664.522, -0.6, -4.3, 7.0, -393.127, 2.4, -8361.7295, -3.6, -4.5, -2823.3961) != mat4x3(515.973, 58.63, -5.4, 9855.0812, -3.1, 177.174, -0.2, 6140.1251, -7.7, -5.3, 9.0, 7.2)) ? 0.3 : 829.639))), bool(false)))))))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, abs(0.0))))))).x > injectionSwitch.y, true)), bool(bool(bool(bvec2(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), abs(0.0), 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), log(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), 0.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, abs(0.0)), transpose(transpose(mat4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), (vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)) - sin(vec4(0.0, 0.0, 0.0, 0.0)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)), mix(vec4(_GLF_FUZZED(36.28), ((_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), (vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)) - sin(vec4(0.0, 0.0, 0.0, 0.0)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))[1], _GLF_FUZZED(4460.9895), _GLF_FUZZED(5.4)), vec4(((_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), (vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)) - sin(vec4(0.0, 0.0, 0.0, 0.0)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_FUZZED(5.8), ((_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), (vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)) - sin(vec4(0.0, 0.0, 0.0, 0.0)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))[2], ((_GLF_IDENTITY(vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0), (vec4(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)) - sin(vec4(0.0, 0.0, 0.0, 0.0)))) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))[3]), bvec4(true, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0, abs(0.0))))))).x > injectionSwitch.y, true)))))) && true) || false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)), _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true))), true && (true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-5.5, 1.6).t)), float(injectionSwitch.y), bool(true)))) - abs(0.0)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec3(bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), true))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)), _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch)).y, float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))), injectionSwitch, injectionSwitch)).y)), 1.0, 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), _GLF_IDENTITY(false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), (bool(false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) && true)), bool(bvec3(bool(_GLF_IDENTITY(bool(false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), (bool(false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) && true)), true, true))))))), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true))), true && (true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)), _GLF_IDENTITY(true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.5), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_FUZZED(-9.8)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3.6, -4.8)))))).y, true)), (bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), true))) && true))), true && (true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)))))))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-9.3)), float(injectionSwitch.x), bool(true)))) / 1.0, mix(float(_GLF_FUZZED(-8197.3858)), float((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9.3), min(_GLF_IDENTITY(_GLF_FUZZED(-9.3), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(-7887.7099) : _GLF_FUZZED(-9.3))), _GLF_IDENTITY(_GLF_FUZZED(-9.3), clamp(_GLF_FUZZED(-9.3), _GLF_FUZZED(-9.3), _GLF_FUZZED(-9.3)))))), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), bool(true)))) / 1.0), bool(true)))))) > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(false))
            break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(max(int(0), int(0)), (max(int(0), int(0))) * 1)))) >> _GLF_IDENTITY(int(0), int(0)), (true ? (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(max(int(0), _GLF_IDENTITY(int(0), int(ivec4(_GLF_IDENTITY(int(0), max(_GLF_IDENTITY(int(0), (int(0)) / 1), int(0))), 1, 1, 1)))), (max(int(0), int(0))) * 1)))) >> _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), subgroup_id, subgroup_id), max(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(_GLF_IDENTITY(178186u, max(_GLF_IDENTITY(178186u, (178186u) ^ 0u), 178186u))) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, 0u | (0u)) ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))), (0u ^ (subgroup_id)) / 1u)))) >> 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))), (0u ^ (subgroup_id)) / 1u)))) >> 0u))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (~ ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))) >> 0u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (~ ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_id), 0u + ((subgroup_id))), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id))), _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(atomicAdd(num_workgroup, subgroup_local_id))))) | _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY(0u ^ (subgroup_id), min(0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) + (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), uint(_GLF_IDENTITY(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), 1u), uvec2(0u, 0u) + (uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), 1u))))) ^ 0u)) + (86559u & 0u)), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, 0u ^ (0u)) | (0u))) ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u) + ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 0u ^ (uint(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))) >> _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)))))))))))))) | (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), max((subgroup_id), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> 0u))))) | 0u)), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (0u ^ (subgroup_id)) / (1u & 1u)))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u))))))))), (1u | 1u), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), 0u ^ (uint(7u))), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, clamp(7u, 7u, 7u))), uint(7u)), ~ (~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, 0u | (7u)))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (uint(7u)) / 1u)) * 1u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) ^ 0u))))))), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (~ ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))) >> 0u))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))))), (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (~ ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))) >> 0u)))) ^ 0u))))), (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ _GLF_IDENTITY((subgroup_id), 0u + ((subgroup_id))), (_GLF_IDENTITY(0u ^ (subgroup_id), clamp(0u ^ (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id))), _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(atomicAdd(num_workgroup, subgroup_local_id))))) | _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY(0u ^ (subgroup_id), min(0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) + (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), uint(_GLF_IDENTITY(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), 1u), uvec2(0u, 0u) + (uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), 1u))))) ^ 0u)) + (86559u & 0u)), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, 0u ^ (0u)) | (0u))) ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u) + ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 0u ^ (uint(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), clamp(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), _GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))) >> _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_size) : 0u)))))))))))))) | (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), (_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), max((subgroup_id), _GLF_IDENTITY((subgroup_id), ((subgroup_id)) >> 0u))))) | 0u)), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (0u ^ (subgroup_id)) / (1u & 1u)))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u))))))))), (1u | 1u), (_GLF_IDENTITY((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), 0u ^ (uint(7u))), uint(7u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(7u, clamp(7u, 7u, 7u))), uint(7u)), ~ (~ (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, 0u | (7u)))), ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), (_GLF_IDENTITY(uint(7u), (uint(7u)) / 1u)) * 1u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u))) ^ 0u)))))))) << (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))), (uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), (_GLF_IDENTITY((subgroup_id), 0u + ((subgroup_id)))) - 0u)) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), min((0u), (0u)))) - 0u) / 1u) ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> _GLF_IDENTITY(0u, (0u) ^ 0u)))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)), 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u)) | 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (true ? (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) : _GLF_FUZZED(subgroup_id)))) >> 0u))))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, 0u)) ^ (subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u)) | 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (true ? (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, min(0u, 0u)))) ^ (subgroup_id))) : _GLF_FUZZED(subgroup_id)))) >> 0u))))) : _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))), (true ? (_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), 0u ^ ((subgroup_id))))) : _GLF_FUZZED(uvec3(133726u, 40759u, 133841u).x))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(uvec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, max((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u)))), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u ^ (max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u)))), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(uvec2(_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), 0u | ((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))), (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), min(uint(_GLF_ONE(1.0, injectionSwitch.y)), uint(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0u)) | (uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))))) >> 0u))) | ((_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))))))) ^ 0u))))) >> 0u, uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))))))) ^ 0u))))) >> 0u, uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))))))) ^ 0u))))) >> 0u, uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))), 0u | (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 1u, 1u, (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u))), (false ? _GLF_FUZZED(workgroup_id) : uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 1u, 0u), (false ? _GLF_FUZZED(uvec4(98159u, 51300u, 62919u, 36382u)) : uvec4(0u, 0u, 1u, 0u)))) / uvec4(1u, 1u, 1u, 1u)))))))) ^ 0u))))) >> 0u, uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))))))))))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(_GLF_IDENTITY(178186u, ~ (_GLF_IDENTITY(~ (178186u), min(~ (178186u), ~ (178186u)))))) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1u) ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), min(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) ^ 0u), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u)), (uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u))) + 0u))), _GLF_IDENTITY(0u, (0u) / 1u) ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : 0u)) ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), 0u | (_GLF_IDENTITY(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), max(max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), clamp(_GLF_IDENTITY(0u ^ (subgroup_id), ~ (~ (0u ^ (subgroup_id)))), 0u ^ (subgroup_id), 0u ^ (subgroup_id)))))) >> 0u, uint(uvec2((_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) - 0u)) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))) << 0u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(76539u) : subgroup_id)), 0u ^ (subgroup_id)))) >> 0u, uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), 0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_IDENTITY(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(uvec2(123478u, 62251u)))))))))))), (0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) ^ 0u), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), 0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_IDENTITY(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (true ? uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(uvec2(123478u, 62251u))))))))))))) + (0u << _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), ~ (~ (uint(5u))))))))) >> 0u))) | ((_GLF_IDENTITY(subgroup_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u) ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))), ~ (~ (uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 1u, 1u, (0u ^ 0u)))))))) >> 0u, min((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))))) >> _GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))))) >> 0u, ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))))) >> 0u) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 1u, 0u, 1u))))))), uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u) ^ (subgroup_id), (true ? 0u ^ (subgroup_id) : _GLF_FUZZED(workgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY(uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))), ~ (~ (uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 1u, 1u, (0u ^ 0u)))))))) >> 0u, min((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, 1u * (_GLF_IDENTITY(0u, (0u) | (0u)))) ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))))) >> _GLF_IDENTITY(0u, (0u) - 0u), _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))))) >> 0u, ((~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), uint(uvec4((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) ^ (subgroup_id))), 1u, 1u, (0u ^ 0u))))) >> 0u) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), uint(uvec4(_GLF_IDENTITY(uint(0u), uint(0u)), 1u, 0u, 1u))))))), uint(uvec2((~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))))))) << 0u)))))) ^ 0u))) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id))), min((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id))))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uint(0u))) ^ (subgroup_id))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), _GLF_IDENTITY((false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), 0u)) ^ (subgroup_id)))))), ((false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), 0u)) ^ (subgroup_id))))))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), 0u)) ^ (subgroup_id)))))), ((false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), 0u)) ^ (subgroup_id))))))) << 0u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u)))))))), ((_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), max(uint(0u), uint(0u))))) ^ (subgroup_id))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (false ? _GLF_FUZZED(178186u) : _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), max(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), ~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 1u * (0u)), 0u)) ^ (subgroup_id))))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))) >> 0u))))))))) ^ 0u)), (1u | _GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u, 1u)), (1u) | (1u))), (true ? _GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))), 1u * (clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))))) : _GLF_FUZZED(subgroup_id))))), ((1u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, 0u ^ (7u))))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))) << 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), uint(uint(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u)), (_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))) << 0u)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u)), (_GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))) << 0u)) | 0u)) / 1u)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), uint(uint(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id)))) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + (0u ^ 0u))))))))), (_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + (0u ^ 0u))))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + (0u ^ 0u))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u ^ 0u), 1u)), (true ? uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + (0u ^ 0u))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u ^ 0u), 1u)) : _GLF_FUZZED(workgroup_size))))))) * 1u), uint(uint(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (subgroup_id)) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))))))), uint(uint(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u ^ (subgroup_id), (_GLF_IDENTITY(0u, max(0u, 0u)) ^ (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) / (1u & 1u))), ~ (~ (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))))))))), subgroup_id, subgroup_id), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id)))))))), clamp((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id)))))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id)))))))), ((_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))))))))) - (0u | 0u)), (_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ (_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id)))))))))), (1u * (_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id)))), ((_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))))) | (_GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id)))), ((_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), ~ (subgroup_id))))) ^ 0u)))))))) + (uint(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(uint(6u), uint(6u))))), _GLF_IDENTITY(0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))), 0u | _GLF_IDENTITY((0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), clamp((0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), (0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))), (0u | (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)))))))), subgroup_id, subgroup_id)))) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(virtual_gid), min(_GLF_FUZZED(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (1u ^ 1u) ^ (virtual_gid))) | (virtual_gid))), _GLF_IDENTITY(_GLF_FUZZED(virtual_gid), (_GLF_FUZZED(virtual_gid)) | (_GLF_FUZZED(virtual_gid))))), (_GLF_FUZZED(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (virtual_gid), ~ (~ (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (virtual_gid), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (virtual_gid), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (virtual_gid))))))))) / _GLF_IDENTITY(1u, uint(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec2(1u, 1u)))) + 0u))))) : subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) + 0u) % subgroup_size);
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, max(7, 7))) >> 0)), _GLF_IDENTITY(int(7), (int(7)) ^ _GLF_IDENTITY(0, (0) + 0)))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-2.8, -1843.3372)))).x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           break;
          }
         continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), max(float(float(injectionSwitch.x)), float(float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x))))), max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), max(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), max(float(float(injectionSwitch.x)), float(float(injectionSwitch.x))))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0))))) | 0) / 1))), 0 + (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0))))) | 0) / 1))), ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0))))) | 0) / 1)))) | ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) / 1)), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1))), ((_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, ((6) / _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((1), _GLF_IDENTITY(int(ivec2((1), 1)), int(ivec4(int(ivec2((1), 1)), 1, 0, 1)))))) | (_GLF_IDENTITY(1, min(1, 1))))) / 1)))) | 0))))) | 0) / 1))))))))); _injected_loop_counter ++)
  {
   buf[virtual_gid] = 1;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(acos(vec2(4.7, _GLF_IDENTITY(-9.0, mix(float(-9.0), float(_GLF_FUZZED(-4.2)), bool(false))))))))) / vec2(1.0, 1.0)).y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.8))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, 1, 0), (ivec3(1, 1, 0)) << ivec3(0, 0, 0))))])).y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), bool(bvec3(bool(bvec3(true, false, false)), true, true)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), bool(bvec3(bool(bvec3(true, false, _GLF_IDENTITY(false, (false) && true))), true, true))))) || false), (true) || false)))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), ~ (~ (int(7))))))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((0 | 1), ((0 | 1)) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(7), int(7))) ^ (0 & -95999))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
              return;
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(bool(bvec4(false, true, true, true))))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), true))), false, true))))))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       subgroupAll(false);
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 & -94770); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)))))), true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))), ! (! ((! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))), ! (! ((! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! _GLF_IDENTITY((! (! (_GLF_IDENTITY(false, bool(bool(false)))))), ! (! ((! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))), false))))), false))))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(1 ^ 1, clamp(1 ^ 1, _GLF_IDENTITY(1 ^ 1, (1 ^ 1) << 0), 1 ^ 1))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
               if(_GLF_DEAD(false))
                break;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
            }
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          return;
        }
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(2), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), _GLF_IDENTITY(max(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(ivec2(0 << _GLF_IDENTITY(int(1), int(1)), 0)), (int(ivec2(0 << _GLF_IDENTITY(int(1), int(1)), 0))) | (int(ivec2(0 << _GLF_IDENTITY(int(1), int(1)), 0)))))), ~ (~ ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), int(ivec2(0 << _GLF_IDENTITY(int(1), int(1)), 0))))))) + (~ (4))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(int(0 << _GLF_IDENTITY(int(1), int(1)))), (false ? _GLF_FUZZED(-372) : int(int(0 << _GLF_IDENTITY(int(1), int(1)))))))) + (~ (4))), (true ? _GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + _GLF_IDENTITY((~ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, min(4, 4)), 4)), 4, 4)))), ((~ (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, min(4, 4)), 4)), 4, 4))))) | 0)) : _GLF_FUZZED(-78419))), 1)))) ^ 0)), _GLF_IDENTITY((max(_GLF_IDENTITY(~ _GLF_IDENTITY((4), ((4)) << (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0)) << 0), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0))))) + 0, ((max(_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(4, (4) - 0)), (_GLF_IDENTITY((4), clamp((4), (4), (4)))) << (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), max(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), _GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))))), 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), 0 | (int(1))), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0), max(_GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1))), (_GLF_IDENTITY(~ (4), int(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)))) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(~ (4), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), ivec2(1, 1) * (_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), (ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)) >> (ivec2(-45792, 25011) & ivec2(0, 0))))))), (_GLF_IDENTITY(~ (4), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), min(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), max(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), (ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)) * ivec2(1, 1)))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1), (ivec2(_GLF_IDENTITY(~ (4), (0 << _GLF_IDENTITY(int(1), int(1))) + (~ (4))), 1)) << ivec2(0, 0))))))) ^ 0))))) + 0) / 1))), 1, 0))))), 64, 4);
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  break;
                 return;
                }
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y))))))))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
              {
               return;
              }
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> _GLF_IDENTITY(0, min(0, 0))) != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              return;
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), (! (false)) && true)), ! (! ((_GLF_IDENTITY(! (false), (! (false)) && true))))))))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, true && (false)))))))
                  break;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), false || (true && (_GLF_DEAD(false))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true)))), ! (! (! (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))))))))))))))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.7)), vec2(_GLF_FUZZED(-35.72), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true))).x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                    return;
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true, false), true)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), true, false), true))))) && true))))
        return;
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), ! (_GLF_IDENTITY(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec4(! (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), true, true, true)))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (0 | 0)); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ((! (_GLF_IDENTITY(false, (false) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
                      {
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))) || false)), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0))) || false))) || false)) || false))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))) && true))))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       subgroupAll(true);
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1470.4575), _GLF_FUZZED(6980.9122)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, false || (true))))).y))))), _GLF_IDENTITY(false, (false) || false) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 0.0)) * mat2(1.0)))), injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, false)))), (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec3(bool(injectionSwitch.x > injectionSwitch.y), false, false))))) && true))))))
              return;
             break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           break;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             break;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(5080.0824)), vec2(_GLF_FUZZED(-4.8), _GLF_IDENTITY((injectionSwitch)[1], float(vec3(_GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1])), exp(0.0), 1.0)))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-59.86) : 0.0)), 0.0)), clamp(0.0, 0.0, 0.0)))), 0.0)), _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0))), 0.0, 0.0, abs(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))), injectionSwitch)).x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      continue;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, false, true)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 1))) != (ivec2(-67457, 33211).y & 0), _GLF_IDENTITY((_injected_loop_counter != (ivec2(-67457, 33211).y & 0)) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_injected_loop_counter != (ivec2(-67457, 33211).y & 0)) && true, true && ((_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, 33211).y & 0), ! (! (_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, 33211).y & 0), false || (_injected_loop_counter != (ivec2(-67457, 33211).y & 0))))))) && true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, 33211).y & 0), (_injected_loop_counter != (ivec2(-67457, 33211).y & _GLF_IDENTITY(0, (0) - 0))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, 33211).y & 0), (_injected_loop_counter != (ivec2(-67457, 33211).y & 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, _GLF_IDENTITY(33211, min(33211, _GLF_IDENTITY(33211, 0 ^ (33211))))).y & 0), (_injected_loop_counter != (ivec2(-67457, 33211).y & 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != (ivec2(-67457, 33211).y & 0), (_injected_loop_counter != (ivec2(-67457, 33211).y & _GLF_IDENTITY(0, (_GLF_IDENTITY(true, ! (! (true))) ? 0 : _GLF_FUZZED(-21952))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(ivec2(-67457, 33211).y, (ivec2(-67457, 33211).y) / 1) & 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), int(ivec3(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), 1, 0)))) : _GLF_FUZZED(36066))), 1 * (_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), int(ivec3(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), 1, 0)))) : _GLF_FUZZED(36066))))) != (ivec2(-67457, 33211).y & _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) + 0))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, 33211).y & 0), (_injected_loop_counter != (_GLF_IDENTITY(ivec2(-67457, 33211).y, (false ? _GLF_FUZZED((46362 % _injected_loop_counter)) : _GLF_IDENTITY(ivec2(-67457, 33211).y, (ivec2(-67457, 33211).y) | (_GLF_IDENTITY(ivec2(-67457, 33211).y, ~ (~ (ivec2(-67457, 33211).y))))))) & 0)) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), ! (! (! (! (_GLF_IDENTITY(_injected_loop_counter != (ivec2(-67457, 33211).y & 0), (_injected_loop_counter != (ivec2(-67457, 33211).y & 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 | (int(5)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
        {
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, (true) && true))), _GLF_IDENTITY(bool(bool(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))), false || (bool(bool(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true)))))))))
          return;
        }
       else
        {
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
