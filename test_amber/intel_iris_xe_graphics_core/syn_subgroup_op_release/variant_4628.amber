#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(false, true, true, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          barrier();
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(_GLF_IDENTITY((vec4(3960.4666, 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819)), vec2(0.0, 0.0) + ((vec4(3960.4666, 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819))))), (true ? true ? injectionSwitch : _GLF_FUZZED((vec4(3960.4666, 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819))) : _GLF_FUZZED(injectionSwitch))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, sqrt(0.0), 1.0, abs(1.0), 1.0, log(_GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, sqrt(0.0), 1.0, abs(1.0), 1.0, log(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(1.0, float(mat4x3(1.0, abs(0.0), 0.0, 0.0, 0.0, exp(0.0), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 1.0, 1.0, 0.0, 0.0, 1.0))), 1.0, 1.0)), vec2(mat4x2(vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, sqrt(0.0), 1.0, abs(1.0), 1.0, log(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(24.56)), bool(false)))) * sqrt(1.0)), 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 1.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))), vec2(mat4x3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[0], injectionSwitch[1]), mat2(1.0) * (vec2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))[0], injectionSwitch[1])))), 1.0, 0.0, sqrt(0.0), 1.0, abs(1.0), 1.0, log(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 1.0, 1.0))))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(vec2(621.460, -525.202), injectionSwitch, vec2(8.2, 9.3))) : injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(vec2(621.460, -525.202), injectionSwitch, vec2(8.2, 9.3))) : injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(vec2(621.460, -525.202), injectionSwitch, vec2(8.2, 9.3))) : injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(smoothstep(vec2(621.460, -525.202), injectionSwitch, vec2(8.2, 9.3))) : injectionSwitch))) + vec2(0.0, 0.0)))).y), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((vec4(3960.4666, 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819))), (_GLF_FUZZED((vec4(3960.4666, 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819)))) / vec2(1.0, 1.0)), max(_GLF_FUZZED((vec4(_GLF_IDENTITY(3960.4666, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-972.692)), float(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(float(_GLF_FUZZED(-972.692)), mix(float(_GLF_FUZZED(9422.7057)), float(float(_GLF_FUZZED(-972.692))), bool(true))), 1.0, 0.0, 0.0, 1.0, exp(0.0), 1.0, 0.0), (mat4x2(_GLF_IDENTITY(float(_GLF_FUZZED(-972.692)), mix(float(_GLF_FUZZED(9422.7057)), float(float(_GLF_FUZZED(-972.692))), bool(true))), 1.0, 0.0, 0.0, 1.0, exp(0.0), 1.0, 0.0)) * mat4(1.0)))), float(3960.4666), bool(true))), 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819))), _GLF_FUZZED((vec4(3960.4666, 6.2, 2.0, 5.6) * mat2x4(-2.8, 97.29, -4.8, -88.96, -57.92, 515.278, 43.74, -719.819))))))), injectionSwitch)).x > injectionSwitch.y)) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec3(bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), true)), true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(acosh(vec2(-7.1, 50.37))))).y))))
              barrier();
             return;
            }
           else
            {
            }
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec2((_GLF_IDENTITY(false, true && (false))), false))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec2((_GLF_IDENTITY(false, true && (false))), false))) && true), false, true)))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, clamp(_GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID))), gl_WorkGroupID)), gl_WorkGroupID, gl_WorkGroupID)).x, _GLF_IDENTITY((gl_WorkGroupID.x) | 0u, max((gl_WorkGroupID.x) | 0u, (gl_WorkGroupID.x) | 0u))), (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 0u))))) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupID)), clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x, (gl_WorkGroupID.x) | 0u)));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), clamp(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))))), max(min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))))), _GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))))), (_GLF_IDENTITY(min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))))), (min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), min(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), _GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)))))) | 0u)) * 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)), uint(uint(_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) << 0u) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(70920u) : _GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), (false ? _GLF_FUZZED(packSnorm2x16(intBitsToFloat(ivec2(46684, -33120)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), 0u ^ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u)))))))))))) >> 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), _GLF_IDENTITY(((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size) / 1u))) + subgroup_local_id)) << 0u, ~ (_GLF_IDENTITY(~ (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), 0u | (~ _GLF_IDENTITY((((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id)) << 0u), ((((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)) / 1u)))))) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) << 0u) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(70920u) : _GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), (false ? _GLF_FUZZED(packSnorm2x16(intBitsToFloat(ivec2(46684, -33120)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), 0u ^ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u)))))))))))) >> 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), _GLF_IDENTITY(((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size) / 1u))) + subgroup_local_id)) << 0u, ~ (_GLF_IDENTITY(~ (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), 0u | (~ _GLF_IDENTITY((((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id)) << 0u), ((((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)) / 1u)))))) - 0u)), min((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) << 0u) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(70920u) : _GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), (false ? _GLF_FUZZED(packSnorm2x16(intBitsToFloat(ivec2(46684, -33120)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), 0u ^ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u)))))))))))) >> 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), _GLF_IDENTITY(((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size) / 1u))) + subgroup_local_id)) << 0u, ~ (_GLF_IDENTITY(~ (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), 0u | (~ _GLF_IDENTITY((((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id)) << 0u), ((((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)) / 1u)))))) - 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) << 0u) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(70920u) : _GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), (false ? _GLF_FUZZED(packSnorm2x16(intBitsToFloat(ivec2(46684, -33120)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), 0u ^ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u)))))))))))) >> 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), _GLF_IDENTITY(((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size) / 1u))) + subgroup_local_id)) << 0u, ~ (_GLF_IDENTITY(~ (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), 0u | (~ _GLF_IDENTITY((((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id)) << 0u), ((((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)) / 1u)))))) - 0u)), min((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) << 0u) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(70920u) : _GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), (false ? _GLF_FUZZED(packSnorm2x16(intBitsToFloat(ivec2(46684, -33120)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), 0u ^ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u)))))))))))) >> 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), _GLF_IDENTITY(((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size) / 1u))) + subgroup_local_id)) << 0u, ~ (_GLF_IDENTITY(~ (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), 0u | (~ _GLF_IDENTITY((((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id)) << 0u), ((((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)) / 1u)))))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u)) << 0u) + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(70920u) : _GLF_IDENTITY(subgroup_id, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), (false ? _GLF_FUZZED(packSnorm2x16(intBitsToFloat(ivec2(46684, -33120)))) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u))), 0u ^ ((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u | (subgroup_id), (0u | (subgroup_id)) * 1u)))))))))))) >> 0u) * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) / 1u), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))), _GLF_IDENTITY(((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size, (_GLF_IDENTITY(subgroup_id, ~ (~ (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))))) * subgroup_size) / 1u))) + subgroup_local_id)) << 0u, ~ (_GLF_IDENTITY(~ (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) << 0u), 0u | (~ _GLF_IDENTITY((((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), uint(uint(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))), workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id)) << 0u), ((((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + subgroup_local_id)) << 0u)) / 1u)))))) - 0u))))))) / 1u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), max(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))) + 1) % subgroup_size), 0u | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, cos(0.0) * (injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
  barrier();
 buf[virtual_gid] = 1;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (((_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) >> _GLF_IDENTITY(int(7), int(7)), min((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (_GLF_IDENTITY(~ (7), (false ? _GLF_FUZZED(-56000) : _GLF_IDENTITY(~ (7), clamp(~ (7), ~ (7), ~ (7))))))))), (int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 ^ (_GLF_IDENTITY(int(7), 1 * (int(7))))))) >> _GLF_IDENTITY(int(7), int(7))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))), bool(bvec4(((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true))))), (_GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false)))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false))))))))))))), bool(bool(_GLF_DEAD(false))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false)))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false))))))))))))), bool(bool(_GLF_DEAD(false))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false)))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false))))))))))))), bool(bool(_GLF_DEAD(false))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false)))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, false))), bvec2(bvec2(bvec2(bvec2(bvec2(false, false))))))))))))), bool(bool(_GLF_DEAD(false)))))))))))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))) && true)))), bool(bvec3(bool((_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), true, true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), _GLF_IDENTITY(bool(bvec2(! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), true)), (_GLF_IDENTITY(bool(bvec2(! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), true)), bool(bvec4(bool(bvec2(! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))), true)), false, false, true)))) || false))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))), true && (_GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), bool(bool(_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), bool(bool(_GLF_DEAD(false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), bool(bvec3(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), true, true)))))), true, false, false))), _GLF_IDENTITY(true, bool(bvec2(true, true))), true)), true && (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec4(bool(bool(_GLF_DEAD(false))), false, true, false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), false, _GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), bool(bvec3(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), true, true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec4(bool(bool(_GLF_DEAD(false))), false, true, false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), false, _GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), bool(bvec3(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), true, true)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec4(bool(bool(_GLF_DEAD(false))), false, true, false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), false, _GLF_IDENTITY(true, true && (true)))), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), bool(bvec3(bool((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)), true && (bool(bvec4(bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true)), true, false, true)))))))), true, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))) || (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4(! (_GLF_DEAD(false)), false, true, false)), (bool(bvec4(! (_GLF_DEAD(false)), false, true, false))) || false)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), true && ((_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true))))), true, _GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))) || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true))))), true, true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))) || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), false, true, false))))))))), false, true))))), true, true))), true, true), true)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))) || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))) && true)))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true))))), true, true))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true))))), true, true))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))) || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))), false, true))))), true, true))), true))), true, true), true)))), false, false)))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) >> 0u), 0u)), 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u))))), 0u | (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))))))) / 1u)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / 1), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u), uint(uvec2(clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u), 0u))))))), (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))))) / 1u)) + _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u))))), (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))))) << 0u), (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))))) / 1u)) + 1) / 1u, min((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u))))), (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))))) / 1u)) + 1) / 1u, (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), min(_GLF_IDENTITY(0u, min(0u, 0u)), _GLF_IDENTITY(0u, min(0u, 0u)))), 0u, 0u))))), (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)))))) / 1u)) + 1) / 1u))), _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u))))), (_GLF_IDENTITY(uint(uint(subgroup_local_id)), uint(uvec3(uint(uint(subgroup_local_id)), 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, 0u)), ~ (~ (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, min(0u, 0u)), 0u, _GLF_IDENTITY(0u, 0u | (0u))))))))))) / 1u)) + 1)) < subgroup_size)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(! (! (bool(true))), ! (! (! (! (bool(true)))))))), ! (! (bool(_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((! (false))))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((- 0.0))), float(injectionSwitch.x), bool(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true)), (bool(bvec3((injectionSwitch.x < injectionSwitch.y), false, true))) && true))) || false))))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), false)))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), false))))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), false)))), (bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))), false))))) && true)))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-836.541)), bool(false))))))))))))
              return;
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (next_virtual_gid), uint(uint(~ (next_virtual_gid))))))], _GLF_IDENTITY(uint(2), _GLF_IDENTITY(min(_GLF_IDENTITY(uint(2), min(uint(2), uint(2))), _GLF_IDENTITY(uint(2), (uint(2)) | (uint(2)))), (min(_GLF_IDENTITY(uint(2), min(uint(2), uint(2))), _GLF_IDENTITY(uint(2), (uint(2)) | (uint(2))))) << (0u & 154081u))), _GLF_IDENTITY(4, 1 * (4)), 64, _GLF_IDENTITY(4, (4) ^ (-93130 & 0)));
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)), (bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     subgroupAll(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y) * 1.0), 0.0), max(_GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) * 1.0), 0.0)) * vec2(1.0, 1.0)), vec2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), 0.0)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))));
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (_GLF_IDENTITY(~ (next_virtual_gid), clamp(~ (next_virtual_gid), ~ (next_virtual_gid), _GLF_IDENTITY(~ (next_virtual_gid), clamp(~ (next_virtual_gid), ~ (next_virtual_gid), ~ (next_virtual_gid)))))))], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_ZERO(0.0, injectionSwitch.x))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true, true))))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, tan(0.0)))))).y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true, true)), ! (! (bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x) + 0.0)), float(_GLF_FUZZED(-95.89)), bool(false))) > injectionSwitch.y)), true, true))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = ((-5149 & 0) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
