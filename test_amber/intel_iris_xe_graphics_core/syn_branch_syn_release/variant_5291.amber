#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 uvec4 _f0;
 mat4x3 _f1;
 mat4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_19 {
 mat4x3 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_16 {
 mat3 _f0;
 mat3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_15 {
 bvec3 _GLF_SWITCH_0_56v;
 bvec2 _f0;
} ;

struct _GLF_struct_20 {
 _GLF_struct_15 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_19 _f2;
 mat3 _f3;
 mat2x3 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 mat3x2 _f1;
 mat4x3 _f2;
 bvec2 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_11 {
 bvec2 _f0;
} ;

struct _GLF_struct_10 {
 uvec3 _f0;
 ivec3 _f1;
 ivec3 _f2;
 mat4 _f3;
 mat4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_9 {
 ivec2 _f0;
 uvec4 _f1;
 uvec3 _f2;
} ;

struct _GLF_struct_8 {
 mat3x4 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 mat2x4 _f2;
 _GLF_struct_10 _f3;
 _GLF_struct_11 _f4;
 bvec3 _f5;
 _GLF_struct_12 _f6;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 mat2x3 _f1;
 ivec2 _f2;
 uvec3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
} ;

struct _GLF_struct_5 {
 mat2x3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_14 {
 _GLF_struct_5 _f0;
 mat3x2 _GLF_SWITCH_0_33v;
 uvec4 _f1;
 _GLF_struct_7 _f2;
 _GLF_struct_13 _f3;
} ;

struct _GLF_struct_2 {
 mat2x4 _f0;
 uint _f1;
 mat3x2 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 ivec4 _f1;
 bvec3 _f2;
 uint workgroup_size;
 vec4 _f3;
 int _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_0 {
 vec2 _f0;
 uint _f1;
 mat3 _f2;
 uint _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_4 {
 vec4 _f0;
 _GLF_struct_3 _f1;
 mat3x2 _f2;
 mat3x4 _f3;
 mat3x4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(vec4(1.0), _GLF_struct_3(_GLF_struct_0(vec2(1.0), 1u, mat3(1.0), 1u, mat2x4(1.0)), _GLF_struct_1(mat2x3(1.0), ivec4(1), bvec3(true), gl_WorkGroupSize.x, vec4(1.0), 1, ivec4(1)), _GLF_struct_2(mat2x4(1.0), 1u, mat3x2(1.0), mat2(1.0))), mat3x2(1.0), mat3x4(1.0), mat3x4(1.0));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_struct_replacement_4._f1._f1.workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 buf[virtual_gid] = 1;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 59:
     case 13:
     case 15:
     int i = 0;
     case 78:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     case 64:
     for(int _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v; true; mix(asin(vec4(-3616.0597, -9.7, 3.6, -61.06)), vec4(8.8, -687.548, -8.5, 2285.7536), 5.7))
      {
       float _GLF_SWITCH_0_3v[48];
       {
        vec4 _GLF_SWITCH_0_4v[58];
        mat3 _GLF_SWITCH_0_5v;
       }
       mat4x2 _GLF_SWITCH_0_6v[69];
       {
        mat4x2 _GLF_SWITCH_0_7v[40];
        vec3(-66.71, 4.5, 47.65);
        ivec4 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
        ;
        mat3x2(-9865.1184);
       }
       while(isinf(4.4))
        {
         for(mat2 _GLF_SWITCH_0_11v[79], _GLF_SWITCH_0_12v[46], _GLF_SWITCH_0_13v[53]; bool(num_workgroup); virtual_gid)
          {
          }
         for(mat2x4 _GLF_SWITCH_0_14v[36], _GLF_SWITCH_0_15v[50]; true; _GLF_SWITCH_0_1v)
          {
           vec3(4138.9035, 8708.4849, 19.95);
           ((mat3x2(-8.8, -2576.8851, -5400.9704, -8971.4469, -5875.1582, 4.3) + -3371.1190) - mat3x2(723.902, -4.8, -22.64, -4.6, 8370.5954, -68.94));
           mat3 _GLF_SWITCH_0_16v[31], _GLF_SWITCH_0_17v, _GLF_SWITCH_0_18v;
           mat2(-0.6, -710.101, -8781.8439, 878.742);
           mat4x2(mat4x3(-75.71, -611.475, -3135.6693, -401.075, 8.8, 1.5, -7.3, 17.27, 8031.8736, -216.225, 13.73, -924.257));
           66030u;
           mat2x3 _GLF_SWITCH_0_19v, _GLF_SWITCH_0_20v[25], _GLF_SWITCH_0_21v[95];
           (75805 > -68897);
           mat3 _GLF_SWITCH_0_22v;
          }
         (workgroup_base --);
         if((((mat4x2(-2414.0229, 5.5, -155.086, 9.9, 1.4, 1.9, 4.8, -9.2) - 47.70) - -428.599) != mat4x2(82.13, 8125.4188, 9.9, 9.3, 670.945, 6.7, -3.6, -2.3)))
          {
           uvec3(uvec4(54374u, 148638u, 65196u, 121205u));
           bvec3(false, false, true);
           uvec4 _GLF_SWITCH_0_23v;
           bool _GLF_SWITCH_0_24v[47], _GLF_SWITCH_0_25v, _GLF_SWITCH_0_26v;
           mat4x3(3.0);
           uvec2 _GLF_SWITCH_0_27v;
           int _GLF_SWITCH_0_28v[9], _GLF_SWITCH_0_29v[53], _GLF_SWITCH_0_30v;
           mat4x2(-496.608, 5500.3432, -338.135, -3.1, -751.352, -8.2, -879.246, 0.1);
          }
         bvec4 _GLF_SWITCH_0_31v[14], _GLF_SWITCH_0_32v;
         {
          (mat2x4(6.3, -580.391, -1.9, 642.269, 5718.4891, -1.1, -254.732, -300.212) - 916.289);
          mat4x2(-41.54, -7.0, 1911.4623, 224.097, 4.0, -462.187, 5.1, -6.5);
          -5760.4983;
         }
         _GLF_struct_14 _GLF_struct_replacement_14;
         mat3x4 _GLF_SWITCH_0_34v[49], _GLF_SWITCH_0_35v;
        }
      }
     case 73:
     for(mat2 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v; true; (i + ivec3(94938, -18807, 1958)))
      {
       ;
       mat2x4 _GLF_SWITCH_0_39v, _GLF_SWITCH_0_40v;
       bool _GLF_SWITCH_0_41v[85], _GLF_SWITCH_0_42v;
       for(mat2 _GLF_SWITCH_0_43v; (_GLF_struct_replacement_4._f1._f1.workgroup_size >= (workgroup_id ^ num_workgroup)); ((i - i) ^ ivec3(53053, 23585, 53224)))
        {
         (uvec3(139197u, 108719u, 66398u) % (num_workgroup --));
        }
       if(bvec2(false, false).t)
        {
         uvec4(48577u, 127768u, 146214u, 143395u);
         if(bool(4962.3468))
          {
           4556.9007;
           ivec2(-56397, -63566);
           mat2x3(mat4x2(-620.611, 7.6, 7.0, -2.0, -95.47, -9.9, 82.82, 7.0));
           -64231;
           mat3x2 _GLF_SWITCH_0_44v[57], _GLF_SWITCH_0_45v[90], _GLF_SWITCH_0_46v;
           vec2 _GLF_SWITCH_0_47v[6], _GLF_SWITCH_0_48v, _GLF_SWITCH_0_49v[65];
          }
         else
          {
           mat2x4 _GLF_SWITCH_0_50v[3], _GLF_SWITCH_0_51v[58];
           uvec3(27398u, 102504u, 19028u);
           uvec2(29214u, 127419u);
           (~ ivec2(i, i));
           uvec2(74253u, 184289u);
           mat4x2(-54.43, 519.696, 827.838, -7437.4437, 9.7, -6.9, 6.8, 976.497);
           ;
          }
         bool _GLF_SWITCH_0_52v;
         max(-4.2, 57.68);
         mat4x2 _GLF_SWITCH_0_53v, _GLF_SWITCH_0_54v[36], _GLF_SWITCH_0_55v;
         ;
        }
       else
        {
         (mat4x3(mat3x2(0.8, 4.7, 2.4, 31.70, -67.40, 7.6)) + mat4x3(-94.84, -40.30, 4794.1451, 72.91, -52.80, -5547.8948, -754.667, 93.05, 7.4, -4.2, -2.1, -6.6));
         uvec2(64528u, 52999u);
         ;
         _GLF_struct_20 _GLF_struct_replacement_20;
         mat2 _GLF_SWITCH_0_57v, _GLF_SWITCH_0_58v, _GLF_SWITCH_0_59v[83];
        }
      }
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 16:
     -1.9;
     case 59:
     ivec2 _GLF_SWITCH_1_0v;
     case 0:
     case 48:
     case 97:
     case 92:
     case 5:
     case 82:
     case 83:
     case 19:
     case 70:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
