#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
  return;
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]), mix(vec2(_GLF_IDENTITY((vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]))[0], min((vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]))[0], _GLF_IDENTITY((vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]))[0], min((vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]))[0], (vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]))[0])))), (vec2(_GLF_FUZZED(-493.308), (injectionSwitch)[1]))[1]), vec2(_GLF_FUZZED(-475.109), _GLF_FUZZED(3688.2330)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), vec2((injectionSwitch)[0], _GLF_FUZZED((-1133.6656 * -482.400))), bvec2(true, false)))[1])).y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 1u))))) * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, 1u, 1u, 0u)))))), subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     buf[virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) ^ 0))))) / 1, (((~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), _GLF_IDENTITY((int(int(1))) ^ 0, int(int((int(int(1))) ^ 0)))))))) / 1) / 1))), min(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)), clamp(_GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)), min(int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) ^ 0))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), min(int(1), int(1)))))))) / 1)), 0, 1, 1))))) >> 0)), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 0))))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), int(int(1)))))) / 1)), 0, 1, 1))))) >> _GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), min((_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, _GLF_IDENTITY(1, (1) + 0), 1)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), (false ? _GLF_FUZZED(37104) : _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), clamp((_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1))))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))))) >> 0), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), (false ? _GLF_FUZZED(37104) : _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), clamp((_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1))))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))))) >> 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), (false ? _GLF_FUZZED(37104) : _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), clamp((_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1))))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))))) >> 0) : _GLF_FUZZED(39149)))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), min(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0)), ~ (~ ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), (false ? _GLF_FUZZED(37104) : _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), clamp((_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1)))), (_GLF_IDENTITY(1, int(int(1))))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))))) >> 0)))) / 1)) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1), max(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-96318))))), 1, 1))), min(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1), max(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-96318))))), 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1), max(~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) >> 0)) | (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-96318))))), 1, 1)))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (1) >> 0))))), 0 + (_GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), ((_GLF_IDENTITY(1, int(int(1))))) << 0)))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(1, int(int(1))), min(_GLF_IDENTITY(1, int(int(1))), _GLF_IDENTITY(1, int(int(1))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), 0, 1, 1))))) >> 0)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(1, int(int(1)))), 1 * ((_GLF_IDENTITY(1, int(int(1)))))), (_GLF_IDENTITY(1, int(int(1)))))))) / 1)), int(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), clamp(_GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), min((~ (_GLF_IDENTITY(1, int(int(1))))), (~ (_GLF_IDENTITY(1, int(int(1))))))), _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) | (_GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), int(int((~ (_GLF_IDENTITY(1, int(int(1)))))))))), (~ (_GLF_IDENTITY(1, int(int(1))))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-96071, (-96071) ^ 0)) : 0)))), 1, 1)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(1)))))) / 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))) / 1)), 0, 1, 1), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))) / 1)), 0, 1, 1), (ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))) / 1)), 0, 1, 1)) * ivec4(1, 1, 1, 1)), ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(18074) : 1, max(false ? _GLF_FUZZED(18074) : 1, false ? _GLF_FUZZED(18074) : 1)))))))))) / 1)), 0, 1, 1), ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))), min(((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))))) / 1)), 0, 1, 1)))), (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))) / 1)), 0, 1, 1), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))) / 1)), 0, 1, 1), (ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))) / 1)), 0, 1, 1)) * ivec4(1, 1, 1, 1)), ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(18074) : 1, max(false ? _GLF_FUZZED(18074) : 1, false ? _GLF_FUZZED(18074) : 1)))))))))) / 1)), 0, 1, 1), ivec4(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, int(int(1))))), _GLF_IDENTITY(((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))), min(((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))), ((~ (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(18074) : 1)))))))))) / 1)), 0, 1, 1))))) | 0)))) >> 0)))))));
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     int i = 0;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec2((false), false))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && _GLF_IDENTITY(true, (true) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))), ! (! ((bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && _GLF_IDENTITY(true, (true) && true)), (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))) && true))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], (true ? _GLF_IDENTITY((injectionSwitch)[0], float(vec4((injectionSwitch)[0], 0.0, 1.0, 0.0))) : _GLF_FUZZED(-632.628))), (injectionSwitch)[0])), _GLF_FUZZED(float(false))), _GLF_IDENTITY(vec2(_GLF_FUZZED(6.4), (injectionSwitch)[1]), max(vec2(_GLF_FUZZED(6.4), (injectionSwitch)[1]), vec2(_GLF_FUZZED(6.4), (injectionSwitch)[1]))), bvec2(false, true))).y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 continue;
                }
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true)), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) && true)))))) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))), bvec2(bvec2(bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))))))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       do
        {
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)), true && (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         barrier();
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ ((1u & 1u) ^ 1u))], uint(2), 4, 64, 4);
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), false || ((_GLF_IDENTITY(false, (false) && true)))), ! (! ((_GLF_IDENTITY(false, (false) && true))))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          return;
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false)))))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bool(bool(bvec4(false, false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), (! (true)) && true)))))))))))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             else
                              {
                              }
                             do
                              {
                               return;
                               if(_GLF_DEAD(false))
                                break;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                            break;
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 | 0))); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))));
               if(_GLF_DEAD(false))
                return;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true)), (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, true))) && true))) && true), true))))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 ^ (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, max(4, 4))))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) << 0))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
