#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u);
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(subgroup_id * subgroup_size, 0u))), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(uvec4(176530u, 139114u, 85069u, 150629u)[0]) : subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u))) + ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   switch(_GLF_SWITCH(0))
    {
     case 65:
     uvec3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v[72];
     if(_GLF_DEAD(false))
      return;
     case 0:
     case 48:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 23:
     case 88:
     case 74:
     if(_GLF_DEAD(false))
      return;
     case 21:
     case 53:
     case 34:
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true))), true, false), true))))))))
      return;
     case 42:
     case 24:
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       buf[virtual_gid] = 1;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     break;
     default:
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       1;
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     switch(_GLF_SWITCH(0))
      {
       case 8:
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           mat4(_GLF_IDENTITY(-117.830, mix(float(_GLF_FUZZED(75.94)), _GLF_IDENTITY(float(_GLF_IDENTITY(-117.830, (-117.830) + 0.0)), 1.0 * (float(_GLF_IDENTITY(-117.830, (-117.830) + 0.0)))), bool(true))), 42.71, 9734.8857, -6.9, -21.31, -7.0, 87.51, -1349.8078, _GLF_IDENTITY(8522.0127, max(8522.0127, 8522.0127)), -8.6, -893.537, 0.2, _GLF_IDENTITY(714.379, clamp(714.379, _GLF_IDENTITY(714.379, mix(float(714.379), float(_GLF_FUZZED(7.3)), bool(false))), 714.379)), 8.2, -82.61, 7699.6289);
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       case 57:
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(float _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v; false; _GLF_IDENTITY((uvec3(173324u, 153385u, _GLF_IDENTITY(161158u, min(161158u, 161158u))) % uint(_GLF_SWITCH_0_1v)), ((_GLF_IDENTITY(uvec3(173324u, 153385u, 161158u) % uint(_GLF_SWITCH_0_1v), (uvec3(173324u, 153385u, 161158u) % uint(_GLF_SWITCH_0_1v)) + uvec3(0u, 0u, 0u)))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))
          {
           if(true)
            {
             {
              if(_GLF_DEAD(false))
               continue;
              switch(_GLF_SWITCH(0))
               {
                case 0:
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(false))
                 continue;
                mat2x4(75.48, -391.391, 7.5, -873.179, -51.84, 5097.2019, 6.2, 1.0);
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  break;
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                (mat3(-3.3, 2503.8729, 6073.0135, -7.7, _GLF_IDENTITY(-448.538, min(-448.538, -448.538)), -924.627, 6.2, _GLF_IDENTITY(-0.7, max(-0.7, -0.7)), 1.2) / mat3(8232.5057, -5.0, 32.78, _GLF_IDENTITY(_GLF_IDENTITY(969.662, (true ? 969.662 : _GLF_FUZZED(length(vec4(83.94, -4.1, 8.9, -3784.4879))))), float(float(969.662))), 5.6, -852.489, _GLF_IDENTITY(299.455, (299.455) / 1.0), 59.63, -2822.1074));
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    do
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    break;
                   }
                  break;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      return;
                     }
                    else
                     {
                     }
                   }
                 }
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(false))
                 break;
                mat3x4 _GLF_SWITCH_0_2v;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   {
                    do
                     {
                      return;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                  continue;
                 }
                (- (++ _GLF_SWITCH_0_2v));
                float _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v[12];
                if(_GLF_DEAD(false))
                 break;
                float _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v;
                if(_GLF_DEAD(false))
                 break;
                case 35:
                if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))
                 return;
                for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0))); _injected_loop_counter ++)
                 {
                  ;
                 }
                if(_GLF_DEAD(false))
                 break;
                case 86:
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                vec3 _GLF_SWITCH_0_8v;
                break;
                default:
                if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true))))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
                   continue;
                  if(_GLF_DEAD(false))
                   continue;
                  break;
                 }
                1;
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
                   break;
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  break;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
               }
              if(_GLF_DEAD(false))
               continue;
             }
             uvec4 _GLF_SWITCH_0_9v[57], _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false))), true, true, false)))) || false)))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   return;
                  }
                 continue;
                }
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                return;
               break;
              }
             {
              vec3 _GLF_SWITCH_0_12v, _GLF_SWITCH_0_13v, _GLF_SWITCH_0_14v;
              if(_GLF_DEAD(false))
               break;
              clamp(-69087, 74486, _GLF_IDENTITY(-78113, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(27352) : _GLF_IDENTITY(-78113, (-78113) ^ 0))));
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 break;
                return;
               }
              (mat3x4(-9916.7787, -85.09, 91.01, 91.91, -8663.2233, -4834.4093, -349.860, -1.4, 9316.2174, _GLF_IDENTITY(-290.867, _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_SWITCH_0_1v) : -290.867), min((_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_SWITCH_0_1v), 1.0 * (_GLF_FUZZED(_GLF_SWITCH_0_1v))) : -290.867, min(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_SWITCH_0_1v) : -290.867, (false ? _GLF_FUZZED(_GLF_SWITCH_0_1v) : -290.867) * 1.0), false ? _GLF_FUZZED(_GLF_SWITCH_0_1v) : -290.867))), (false ? _GLF_FUZZED(_GLF_SWITCH_0_1v) : -290.867)))), -6.6, 8004.8095) - mat3x4(5.1, 431.517, -8761.2736, _GLF_IDENTITY(66.95, float(_GLF_IDENTITY(mat2(66.95, 1.0, 1.0, tan(0.0)), mat2(mat2x4(mat2(66.95, 1.0, 1.0, tan(0.0))))))), 958.633, -7.8, -51.88, -0.5, _GLF_IDENTITY(_GLF_IDENTITY(499.172, (499.172) - log(1.0)), _GLF_IDENTITY((499.172) - 0.0, clamp((499.172) - 0.0, _GLF_IDENTITY((499.172) - 0.0, (false ? _GLF_FUZZED(_GLF_SWITCH_0_0v) : (499.172) - 0.0)), (499.172) - 0.0))), -9.8, 7138.8671, -827.451));
              mat4(-91.93, 0.2, 8.8, 824.140, 41.74, _GLF_IDENTITY(_GLF_IDENTITY(-6886.3159, min(-6886.3159, _GLF_IDENTITY(-6886.3159, float(float(-6886.3159))))), (_GLF_IDENTITY(-6886.3159, float(mat4x2(_GLF_IDENTITY(-6886.3159, (-6886.3159) / 1.0), 1.0, 1.0, cos(0.0), 1.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_SWITCH_0_1v))))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), clamp(float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0))))), 1.0), min(vec2(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), clamp(float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), max(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))) * 1.0)), float(_GLF_IDENTITY(float(dot(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 1.0), max(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0))))), 1.0), vec2(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), clamp(float(_GLF_IDENTITY(float(dot(vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-62.64)), bool(false))), 0.0)), 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0)), float(_GLF_IDENTITY(float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), (float(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))) * 1.0))))), 1.0))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))), 1.0)))) / round(length(normalize(1.0)))), 6746.7162, 6.6, -5156.8649, 5.8, 1595.6685, 66.63, 9.4, -6.8, 0.7, -39.31);
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (false) || false)))))))
               continue;
              if(_GLF_DEAD(false))
               break;
              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
               }
              else
               {
                ;
               }
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(false))
               break;
              mat2x4 _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v;
              bvec2(_GLF_IDENTITY((_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.8, float(vec3(1.8, 0.0, tan(0.0)))), -9624.6647, 40.53, -4910.8432) == vec4(-208.232, -1.8, -61.15, 386.484), bool(bvec2(vec4(1.8, -9624.6647, 40.53, -4910.8432) == vec4(-208.232, -1.8, -61.15, 386.484), true)))), true && ((_GLF_IDENTITY(vec4(1.8, -9624.6647, 40.53, -4910.8432) == vec4(-208.232, -1.8, -61.15, 386.484), bool(bvec2(vec4(1.8, -9624.6647, 40.53, -4910.8432) == vec4(-208.232, -1.8, -61.15, 386.484), true)))))), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), true))) && ((true))))));
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  continue;
                 }
                break;
               }
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 return;
                break;
               }
             }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             uvec4(179140u, 70642u, 55159u, 78679u);
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(mat3x4 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v; true; uvec4(101142u, _GLF_IDENTITY(17281u, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(subgroup_local_id) : 17281u)), 105956u, _GLF_IDENTITY(123356u, max(123356u, 123356u))).rara)
              {
               bvec4 _GLF_SWITCH_0_20v;
               if(_GLF_DEAD(false))
                return;
               mat4x2 _GLF_SWITCH_0_21v;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
           vec4 _GLF_SWITCH_0_22v;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           for(           (true ? (mat4x3(-2.1, 4.0, 1.0, -120.020, 3669.9821, 32.05, 57.21, -0.1, 4.7, _GLF_IDENTITY(-686.888, min(-686.888, _GLF_IDENTITY(-686.888, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.5)), float(1.0), bool(true)))))), transpose(transpose(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), clamp(float(_GLF_IDENTITY(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.5)), float(1.0), bool(true)))), transpose(transpose(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.5)), float(1.0), bool(true))))))))), transpose(transpose(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), float(_GLF_IDENTITY(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.5)), float(1.0), bool(true)))))), transpose(transpose(mat3(-686.888, 1.0, exp(0.0), sin(0.0), _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34))))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(_GLF_IDENTITY(-1108.1786, (-1108.1786) - 0.0), -63.74, 2919.0566, 92.34))))), mix(float(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_IDENTITY(_GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34)), (true ? _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34)) : _GLF_FUZZED(mat2(-894.559, 7.1, 16.28, 67.32)))))))), float(_GLF_FUZZED(-3.5)), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-32.87) : 1.0))), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34))))), min(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-32.87) : 1.0))), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34))))), float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-32.87) : 1.0))), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34))))), mix(float(_GLF_FUZZED(-1081.5971)), float(float(_GLF_IDENTITY(mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0), (true ? mat2(0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0)), dot(vec2(0.0, 1.0), vec2(round(length(normalize(vec2(1.0, 1.0)))), 0.0))), 0.0) : _GLF_FUZZED(mat2(-1108.1786, -63.74, 2919.0566, 92.34)))))), bool(true)))))), 0.0, 1.0))))))), float(_GLF_IDENTITY(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-3.5)), float(1.0), bool(true)))))), transpose(transpose(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))))), (float(_GLF_IDENTITY(mat3(-686.888, 1.0, exp(0.0), sin(0.0), 0.0, 0.0, 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 1.0, 1.0)), 0.0, 0.0, 1.0))), transpose(transpose(mat3(-686.888, 1.0, exp(0.0), _GLF_IDENTITY(sin(_GLF_IDENTITY(0.0, float(mat2x4(0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), (true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(-273.501)))), 1.0)))), (sin(_GLF_IDENTITY(0.0, float(mat2x4(0.0, sin(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, exp(0.0), 0.0, sqrt(0.0), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 0.0), vec2(1.0, 0.0)), (true ? dot(vec2(1.0, 0.0), vec2(1.0, 0.0)) : _GLF_FUZZED(-273.501)))), 1.0))))) / 1.0), 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) + 0.0), 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 1.0)))))))) / 1.0)))), _GLF_IDENTITY(-77.74, min(-77.74, -77.74)), 82.43) - mat4x3(5.4, _GLF_IDENTITY(-378.325, clamp(_GLF_IDENTITY(-378.325, _GLF_IDENTITY((_GLF_IDENTITY(-378.325, clamp(_GLF_IDENTITY(-378.325, min(-378.325, -378.325)), -378.325, -378.325))) - 0.0, clamp((_GLF_IDENTITY(-378.325, clamp(-378.325, -378.325, -378.325))) - 0.0, (_GLF_IDENTITY(-378.325, clamp(-378.325, -378.325, -378.325))) - 0.0, _GLF_IDENTITY((_GLF_IDENTITY(-378.325, clamp(-378.325, -378.325, -378.325))) - 0.0, ((_GLF_IDENTITY(-378.325, clamp(-378.325, -378.325, -378.325))) - 0.0) * 1.0)))), -378.325, -378.325)), -3.8, 11.90, _GLF_IDENTITY(-60.87, _GLF_IDENTITY(float(mat2(-60.87, 0.0, 0.0, 1.0)), max(float(mat2(-60.87, 0.0, 0.0, 1.0)), float(mat2(-60.87, 0.0, 0.0, 1.0))))), -5904.2543, 9851.3259, -664.443, _GLF_IDENTITY(1.8, 1.0 * (1.8)), 257.695, 0.3, 3.8)) : mat4x3(2277.4341, 19.00, -4.1, 211.465, -82.81, -23.68, -88.65, -9.4, 3.8, -4.8, -8.2, 0.5));
 (subgroup_size < (subgroup_local_id)); uvec2(171534u, 151467u))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   mat3 _GLF_SWITCH_0_23v, _GLF_SWITCH_0_24v[12], _GLF_SWITCH_0_25v;
                   if(_GLF_DEAD(false))
                    return;
                   ;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   mat4 _GLF_SWITCH_0_26v, _GLF_SWITCH_0_27v, _GLF_SWITCH_0_28v;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     (_GLF_SWITCH_0_0v + _GLF_SWITCH_0_0v);
                    }
                   else
                    {
                    }
                   mat4 _GLF_SWITCH_0_29v, _GLF_SWITCH_0_30v[12];
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     continue;
                     if(_GLF_DEAD(false))
                      return;
                    }
                   floatBitsToUint(-0.7);
                   if(_GLF_DEAD(false))
                    break;
                   any(bvec4(false, false, false, true));
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(false);
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
                 {
                  for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                   {
                    do
                     {
                      for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) ^ 1)); _injected_loop_counter ++)
                       {
                        if(_GLF_DEAD(false))
                         break;
                        return;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                   }
                 }
               }
              else
               {
               }
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 break;
                distance(_GLF_SWITCH_0_1v, _GLF_SWITCH_0_1v);
               }
              else
               {
               }
              uint _GLF_SWITCH_0_31v, _GLF_SWITCH_0_32v[38];
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                return;
                if(_GLF_DEAD(false))
                 return;
               }
              -95314;
              if(_GLF_DEAD(false))
               break;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 break;
                continue;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                break;
               }
              (workgroup_base * uvec3(150288u, 162673u, 44105u));
              if(_GLF_DEAD(false))
               continue;
              do
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  continue;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                uint(true);
               }
              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              mat2x3(-3.7, 3.5, 7.2, -0.1, 3.1, -43.74);
             }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   floatBitsToInt(-8.7);
                  }
                 else
                  {
                  }
                }
              }
             ivec2 _GLF_SWITCH_0_33v[81], _GLF_SWITCH_0_34v[46], _GLF_SWITCH_0_35v;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              continue;
             (mat2(-455.300, -336.058, 6244.2802, -53.72) + intBitsToFloat(31440));
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              continue;
             while((workgroup_id < (workgroup_size << workgroup_base)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 mat4x3(mat3x4(-199.507, -9.0, -5211.2030, -347.034, 7382.8960, _GLF_IDENTITY(62.15, clamp(62.15, _GLF_IDENTITY(62.15, (62.15) + _GLF_IDENTITY(0.0, min(0.0, 0.0))), _GLF_IDENTITY(62.15, mix(float(_GLF_FUZZED(-2919.0572)), float(_GLF_IDENTITY(62.15, clamp(62.15, 62.15, 62.15))), bool(true))))), -7.8, 6257.8869, 25.88, -46.01, -43.67, 74.94));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 continue;
                }
               bvec2(bvec3(true, false, false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 return;
                }
               mat4 _GLF_SWITCH_0_36v, _GLF_SWITCH_0_37v, _GLF_SWITCH_0_38v;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 min(uvec4(169451u, 41004u, 142027u, 62078u), uvec4(uvec2(176757u, 7970u), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size));
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               ivec2(-74015, -25204);
              }
             if((bvec3(false, false, true) != lessThan(uvec3(28209u, 161554u, 167004u), uvec3(147320u, 37368u, 69025u))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 break;
                }
               do
                {
                 vec3(-5943.0601, 79.58, -528.365);
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 return;
                }
              }
             mat4x3 _GLF_SWITCH_0_39v, _GLF_SWITCH_0_40v[45], _GLF_SWITCH_0_41v[58];
            }
          }
        }
       case 0:
       int i = 0;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))) || (_GLF_DEAD(false))), false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
       case 73:
       case 26:
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-21.66)), bool(false)))))))
        continue;
       case 85:
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           ivec3(97901, -2651, -95460);
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       case 95:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       mat3x2(5.7, -3.4, -21.67, 3.7, 651.341, _GLF_IDENTITY(-95.81, float(mat3x2(-95.81, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8836.5135))), 1.0, 1.0))));
       default:
       if(_GLF_DEAD(false))
        break;
       1;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0))) << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   switch(_GLF_SWITCH(0))
    {
     case 3:
     if(_GLF_DEAD(false))
      return;
     do
      {
       for(       (mat4x3(_GLF_IDENTITY(812.286, (false ? _GLF_IDENTITY(_GLF_FUZZED(72.89), (true ? _GLF_FUZZED(72.89) : _GLF_FUZZED((-6.2 * 47.19)))) : 812.286)), -3.4, 931.348, -5.1, -6632.8735, -4320.4216, 7668.5329, 7738.0450, 478.608, 4.5, _GLF_IDENTITY(23.70, clamp(_GLF_IDENTITY(23.70, clamp(23.70, 23.70, 23.70)), 23.70, _GLF_IDENTITY(23.70, 0.0 + (23.70)))), -9.1) / mat4x3(-71.23, 31.74, 90.24, -884.458, -8436.5189, _GLF_IDENTITY(2.8, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(2.8, (2.8) + 0.0), 0.0, 0.0, _GLF_IDENTITY(tan(0.0), float(_GLF_IDENTITY(mat4(tan(0.0), round(length(normalize(abs(1.0)))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, tan(0.0), 0.0), (true ? mat4(tan(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(336.340)), float(0.0), bool(true)))), round(length(normalize(abs(1.0)))), 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4.0)), bool(false))), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3.3)), float(0.0), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true))))))))))), 1.0, 0.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, tan(0.0), 0.0) : _GLF_FUZZED(mat4(6.2, -422.529, 35.01, _GLF_IDENTITY(-59.99, mix(float(-59.99), float(_GLF_FUZZED(-5.1)), bool(false))), 3.9, 9088.2906, 7221.9038, -6.3, 21.63, -996.421, 78.25, -5.0, 382.774, -8.9, 1653.1445, -789.701))))))), transpose(transpose(mat2(_GLF_IDENTITY(2.8, (2.8) + 0.0), 0.0, 0.0, tan(0.0))))))), -8541.2887, -9802.1182, -105.541, 48.14, 8.2, 339.672));
 false; vec4(1.1, 92.30, -3.4, -1.9))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         {
          float _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            continue;
           }
          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
           continue;
          if((true && false))
           {
            switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
             {
              case 9:
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    return;
                   }
                  else
                   {
                   }
                 }
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                 {
                  return;
                 }
               }
              ;
              if(_GLF_DEAD(false))
               {
                if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                 {
                  return;
                 }
                else
                 {
                 }
               }
              case 0:
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
               break;
              if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
               continue;
              case 61:
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 break;
                return;
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              ;
              for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
               }
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(false))
               break;
              do
               {
                greaterThan(vec4(-7066.2518, 195.467, 334.273, 3097.4600), vec4(2.7, _GLF_IDENTITY(8915.0349, clamp(8915.0349, _GLF_IDENTITY(8915.0349, clamp(8915.0349, 8915.0349, 8915.0349)), 8915.0349)), -271.747, 3138.6383));
               }
              while(_GLF_WRAPPED_LOOP(false));
              case 33:
              if(_GLF_DEAD(false))
               return;
              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
               }
              else
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  return;
                 }
               }
              case 14:
              case 76:
              vec3 _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
              case 12:
              case 46:
              (mat3x2(314.610, -305.235, -8532.3984, -2918.1399, 6.0, 68.07) + float(-70418));
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
               return;
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                subgroup_id;
               }
              else
               {
               }
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
                 continue;
                continue;
               }
              break;
              if(_GLF_DEAD(false))
               break;
              default:
              do
               {
                1;
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
           }
          if(_GLF_DEAD(false))
           break;
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
             continue;
            continue;
           }
          uvec4 _GLF_SWITCH_1_5v, _GLF_SWITCH_1_6v[51], _GLF_SWITCH_1_7v;
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             continue;
            return;
           }
          for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
           {
            while(true)
             {
             }
           }
          {
           mat2x4 _GLF_SWITCH_1_8v[24];
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           vec4 _GLF_SWITCH_1_9v, _GLF_SWITCH_1_10v[78], _GLF_SWITCH_1_11v[91];
           _GLF_IDENTITY(mat3(81.43, 2.9, -261.349, 8532.5440, -9.9, 7187.9283, -758.258, -0.1, -6.7), mat3(1.0) * (mat3(81.43, 2.9, -261.349, 8532.5440, -9.9, 7187.9283, -758.258, -0.1, -6.7)));
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               workgroup_base;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           mat3x4(-79.31, -1.5, -37.58, -9315.8543, 9370.1749, 6125.4817, 27.96, -811.451, -15.66, -9.5, -291.556, 8485.9188);
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           continue;
          mat3x4 _GLF_SWITCH_1_12v;
          ivec2(_GLF_IDENTITY(60163, (60163) | 0), -35788);
          if(_GLF_DEAD(false))
           continue;
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
             {
              if(_GLF_DEAD(false))
               {
                for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                 {
                  for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                   {
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                     {
                      if(_GLF_DEAD(false))
                       return;
                      if(_GLF_DEAD(false))
                       break;
                     }
                    else
                     {
                     }
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
                       continue;
                      if(_GLF_DEAD(false))
                       return;
                      return;
                     }
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                     }
                    else
                     {
                      if(_GLF_DEAD(false))
                       {
                        do
                         {
                          return;
                         }
                        while(_GLF_WRAPPED_LOOP(false));
                       }
                     }
                   }
                 }
                return;
               }
             }
           }
          else
           {
           }
          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), bool(bool(bool(bvec3(false, true, _GLF_IDENTITY(true, (true) || false)))))))) && true)))
           break;
          if(_GLF_DEAD(false))
           break;
          if(_GLF_DEAD(false))
           continue;
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(false))
           return;
         }
         {
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             continue;
            break;
           }
          if(_GLF_DEAD(false))
           return;
          ivec4(_GLF_IDENTITY(-93587, 0 ^ (-93587)), -38257, -74564, -67625);
          uvec3(50247u, 189638u, 158610u);
          do
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (true ? _GLF_IDENTITY(int(2), int(ivec3(int(2), 0, 1))) : _GLF_FUZZED(55596))), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
               {
                if(_GLF_WRAPPED_IF_TRUE(true))
                 {
                  mat3(997.049, -74.84, 3.2, -766.728, -9.2, -733.103, -141.318, 708.025, -96.12);
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    break;
                   }
                 }
                else
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                    if(_GLF_DEAD(false))
                     return;
                    break;
                   }
                 }
                if(_GLF_DEAD(false))
                 return;
               }
             }
            else
             {
              if(_GLF_DEAD(false))
               return;
             }
            if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false))))
             {
             }
            else
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
               continue;
              mat2(-6426.8364, -4.2, 74.10, -9.7);
             }
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
               break;
              break;
             }
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               continue;
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(false))
                 break;
                break;
               }
              continue;
              if(_GLF_DEAD(false))
               return;
              do
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    return;
                   }
                  else
                   {
                   }
                 }
               }
              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             }
            if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
             continue;
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               continue;
              break;
             }
            vec2 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v[43];
            mat3x4 _GLF_SWITCH_1_15v, _GLF_SWITCH_1_16v[63], _GLF_SWITCH_1_17v;
            ;
            if(_GLF_DEAD(false))
             continue;
            if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))))
             break;
            1.2;
            if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, false))), (injectionSwitch.x < injectionSwitch.y)))))), false, false))))
             {
              uvec2(29611u, 63432u);
             }
            else
             {
             }
            vec4 _GLF_SWITCH_1_18v;
           }
          while(true);
          for(vec4 _GLF_SWITCH_1_19v[51], _GLF_SWITCH_1_20v[82], _GLF_SWITCH_1_21v; (num_workgroup > _GLF_IDENTITY((bvec4(false, true, true, true) , 176260u), clamp((bvec4(false, true, true, true) , 176260u), (bvec4(false, true, true, true) , 176260u), (bvec4(false, true, true, true) , 176260u)))); isnan(vec2(-7539.7712, -620.776)))
           {
            ;
            mat2x4 _GLF_SWITCH_1_22v;
            _GLF_IDENTITY(clamp((uvec3(47649u, 84194u, 27809u) | num_workgroup), uvec3(48683u, 112372u, 123660u), uvec3(142161u, 126666u, 48274u)), (true ? clamp((uvec3(47649u, 84194u, 27809u) | num_workgroup), uvec3(48683u, 112372u, 123660u), uvec3(142161u, 126666u, 48274u)) : _GLF_FUZZED(bitfieldExtract(uvec3(47424u, 73525u, 66389u), -78525, 98789))));
            int _GLF_SWITCH_1_23v;
            mat3x2 _GLF_SWITCH_1_24v;
            if(_GLF_DEAD(false))
             continue;
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             continue;
            if(_GLF_DEAD(false))
             break;
            ivec3 _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v, _GLF_SWITCH_1_27v;
            ;
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                bvec3(true, true, false);
               }
              else
               {
               }
              if(_GLF_DEAD(false))
               continue;
             }
            else
             {
             }
            bvec4(true, false, false, true);
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             break;
            if(_GLF_DEAD(false))
             return;
            continue;
           }
          do
           {
            mat4x2(-8.3, 9.4, 2.8, 5653.3431, 5.6, _GLF_IDENTITY(31.07, min(_GLF_IDENTITY(31.07, 0.0 + (_GLF_IDENTITY(31.07, min(31.07, 31.07)))), 31.07)), -4.3, 5792.8865);
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
             {
              if(_GLF_DEAD(false))
               break;
              continue;
             }
            if(_GLF_DEAD(false))
             break;
            if(_GLF_DEAD(false))
             return;
            if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
             {
              if(_GLF_WRAPPED_IF_FALSE(false))
               {
               }
              else
               {
                lessThanEqual(injectionSwitch, vec2(3.9, -17.72));
               }
             }
            else
             {
             }
            if(_GLF_DEAD(false))
             break;
            uvec4 _GLF_SWITCH_1_28v[38], _GLF_SWITCH_1_29v, _GLF_SWITCH_1_30v;
            do
             {
              (bvec3(true, false, true) == bvec3(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), true));
             }
            while(_GLF_WRAPPED_LOOP(false));
            -38406;
            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
             {
             }
            else
             {
              (5243 , bvec4(false, true, true, false));
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
               return;
             }
            ;
            uvec2 _GLF_SWITCH_1_31v;
           }
          while((mat2x4(-454.252, 8.9, -98.90, 4.0, -8.7, _GLF_IDENTITY(63.75, max(63.75, 63.75)), 6.0, -7.9) != mat2x4(28.66, -3.1, -5.9, 766.589, 7.4, -4.3, 6.2, -3.6)));
          uvec2(177808u, 55467u);
          if(_GLF_DEAD(false))
           break;
         }
         if(_GLF_DEAD(false))
          break;
         vec3(7646.3300, -1.0, 180.452);
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     case 0:
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) | (0))), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, false))))), false || (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
     case 95:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     case 68:
     case 26:
     case 49:
     case 5:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     case 46:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     case 9:
     case 62:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(max(vec2(18.36, -3.2), injectionSwitch)))), vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 0.0, 1.0))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
        }
       return;
      }
     case 52:
     {
      do
       {
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
       }
      while(_GLF_WRAPPED_LOOP(false));
      if(_GLF_DEAD(false))
       return;
      do
       {
        if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
         return;
       }
      while(_GLF_WRAPPED_LOOP(false));
      while(false)
       {
        if(_GLF_DEAD(false))
         continue;
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          bvec4(true, false, true, true);
          if(_GLF_DEAD(false))
           {
            do
             {
              do
               {
                return;
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
            while(_GLF_WRAPPED_LOOP(false));
           }
         }
        else
         {
         }
        if(_GLF_WRAPPED_IF_TRUE(true))
         {
          ;
         }
        else
         {
         }
        uvec3(141449u, 165107u, 43137u);
        (mat4x3(0.3, 956.038, 0.3, -564.482, -69.15, -1.9, -4.9, -7.5, 0.6, -184.847, 3.0, _GLF_IDENTITY(-367.235, clamp(_GLF_IDENTITY(-367.235, min(-367.235, _GLF_IDENTITY(-367.235, max(-367.235, -367.235)))), -367.235, _GLF_IDENTITY(-367.235, mix(float(_GLF_FUZZED(vec4(-726.714, 17.01, -21.26, -317.388).w)), float(-367.235), bool(true)))))) * (mat2x4(-4735.4772, -95.73, 5134.4359, -758.086, -6.7, 6927.8233, -5037.1846, 9434.5460)));
        if(_GLF_DEAD(false))
         continue;
        {
         float _GLF_SWITCH_1_32v;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true && _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(false, (false) && true)))), bool(bvec2(bool((! (_GLF_IDENTITY(false, (false) && true)))), true))))), false || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (! (_GLF_IDENTITY(false, (false) && true))))))))))
            return;
           abs(-73910);
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           ;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
        if(_GLF_DEAD(false))
         break;
       }
      if(_GLF_WRAPPED_IF_TRUE(true))
       {
        if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
         return;
       }
      else
       {
       }
      if(_GLF_DEAD(false))
       return;
      if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
       return;
      if(_GLF_DEAD(false))
       {
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         {
          if(_GLF_DEAD(false))
           return;
          return;
         }
        do
         {
          if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
           {
            return;
            if(_GLF_DEAD(false))
             continue;
           }
          else
           {
            if(_GLF_DEAD(false))
             break;
            if(_GLF_DEAD(false))
             continue;
           }
         }
        while(_GLF_WRAPPED_LOOP(false));
        if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
         {
          if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))
           {
            return;
           }
          else
           {
           }
         }
        if(_GLF_DEAD(false))
         return;
       }
      if(_GLF_DEAD(false))
       {
        if(_GLF_WRAPPED_IF_FALSE(false))
         {
         }
        else
         {
          return;
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
       }
      true;
      vec3(5.5, 9880.0064, -9491.7061);
      if(_GLF_WRAPPED_IF_TRUE(true))
       {
        uvec3(55742u, 113913u, 118612u);
       }
      else
       {
       }
      if(_GLF_DEAD(false))
       {
        for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
         {
          return;
         }
       }
      if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
       {
       }
      else
       {
        if(_GLF_DEAD(false))
         return;
       }
      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
       return;
      ivec4 _GLF_SWITCH_1_33v, _GLF_SWITCH_1_34v, _GLF_SWITCH_1_35v;
      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
       return;
      for(      ivec2(-75078, 90632);
 false; mat4x3(3.9, -2.3, -62.21, -530.802, -7.1, 90.23, -27.15, -80.15, 7.9, -2694.6857, 0.8, -72.56))
       {
        mat3 _GLF_SWITCH_1_36v;
        mat4(-7.5, _GLF_IDENTITY(8307.9437, clamp(_GLF_IDENTITY(8307.9437, _GLF_IDENTITY((8307.9437) - abs(0.0), mix(float((8307.9437) - abs(0.0)), float(_GLF_FUZZED(18.36)), bool(false)))), 8307.9437, 8307.9437)), 6.3, 8.3, 70.42, -7606.7417, -3.7, 6.2, 761.601, 393.792, 9.5, -510.882, 61.21, 191.671, -8.3, -404.767);
       }
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       mat2x3(-8.9, -8.3, 76.88, 9.1, -5726.4692, -9.9);
       do
        {
         uvec2(84715u, 4908u);
         mat2 _GLF_SWITCH_1_37v[36];
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           roundEven(vec4(-3752.8577, 633.309, _GLF_IDENTITY(9624.7416, (false ? _GLF_FUZZED(-9978.4143) : _GLF_IDENTITY(9624.7416, max(9624.7416, 9624.7416)))), -6.0));
          }
         else
          {
          }
         vec4 _GLF_SWITCH_1_38v;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             _GLF_IDENTITY(notEqual(sqrt(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), injectionSwitch), bvec2(bvec3(notEqual(sqrt(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), injectionSwitch), true)));
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
       while(true);
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               break;
              }
            }
           else
            {
             notEqual(injectionSwitch, injectionSwitch);
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, true)))))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED((vec2(7148.9600, -0.9) , 782.860)))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & -24170)); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         for(mat4 _GLF_SWITCH_1_39v, _GLF_SWITCH_1_40v; false; _GLF_IDENTITY(all(bvec4(true, true, true, true)), (all(bvec4(true, true, true, true))) || false))
          {
           uvec4 _GLF_SWITCH_1_41v, _GLF_SWITCH_1_42v, _GLF_SWITCH_1_43v[69];
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           ;
           ivec2 _GLF_SWITCH_1_44v, _GLF_SWITCH_1_45v, _GLF_SWITCH_1_46v[62];
           mat3(-0.8, 44.36, 7670.3076, 0.1, -21.00, -8441.4535, 86.34, -76.52, 38.13);
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              {
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             continue;
            }
           (_GLF_SWITCH_1_41v.bgr ++);
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
            }
           uvec4 _GLF_SWITCH_1_47v, _GLF_SWITCH_1_48v;
           mat4(5445.7870, -294.108, -1.8, _GLF_IDENTITY(-0.9, min(-0.9, _GLF_IDENTITY(-0.9, _GLF_IDENTITY((-0.9) - log(1.0), exp(0.0) * ((_GLF_IDENTITY(-0.9, _GLF_IDENTITY(float(mat2x4(-0.9, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))), mix(float(float(mat2x4(-0.9, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0))))), float(_GLF_FUZZED(-5.3)), bool(false))))) - log(1.0)))))), 2.0, 3922.1860, 771.637, -1462.1846, -447.808, 98.72, -3.5, -0.6, _GLF_IDENTITY(-4909.8844, mix(float(_GLF_FUZZED(-2.3)), float(-4909.8844), bool(true))), -4.7, -289.149, -1.3);
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       else
        {
        }
       ivec4 _GLF_SWITCH_1_49v[31], _GLF_SWITCH_1_50v, _GLF_SWITCH_1_51v;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)))))))))
        return;
       ivec2(60845, -5065);
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          return;
         for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) >> 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) << 0), 0, 1, 1)), 0 ^ (int(ivec4(_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) << 0), 0, 1, 1)))))); _injected_loop_counter --)
          {
           while(false)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               ;
              }
             ivec4 _GLF_SWITCH_1_52v, _GLF_SWITCH_1_53v[52];
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               vec3(-8.4, 8.3, 63.64);
              }
             else
              {
              }
             mat4 _GLF_SWITCH_1_54v[15];
             -505.269;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                }
              }
             83175;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             injectionSwitch;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               continue;
              }
             int _GLF_SWITCH_1_55v, _GLF_SWITCH_1_56v, _GLF_SWITCH_1_57v;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
      vec4(4.8, 2.0, 741.450, -9.8);
      if(_GLF_DEAD(false))
       return;
      if(_GLF_DEAD(false))
       return;
      if(_GLF_DEAD(false))
       {
        if(_GLF_DEAD(false))
         return;
        return;
       }
     }
     case 44:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     bvec4 _GLF_SWITCH_1_58v, _GLF_SWITCH_1_59v;
     default:
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
