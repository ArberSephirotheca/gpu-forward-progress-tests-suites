#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, exp(sqrt(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.7) : 0.0)))), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0)), min(float(mat4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, exp(sqrt(0.0)), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(0.0, exp(0.0), 1.0, cos(0.0))), 0.0 + (float(vec4(0.0, exp(0.0), 1.0, cos(0.0))))), mix(float(_GLF_FUZZED(vec4(3.6, -7.0, -6584.8553, 363.540).z)), float(_GLF_IDENTITY(float(vec4(0.0, exp(0.0), 1.0, cos(0.0))), 0.0 + (float(vec4(0.0, exp(0.0), 1.0, cos(0.0)))))), bool(true)))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0)), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-38.74) : 1.0)), 1.0)) * (injectionSwitch)).y, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, exp(sqrt(0.0)), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0)))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
            continue;
           barrier();
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false))))))), (false) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
          continue;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, true)))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, true))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(229.798)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), false, false)))), true && (bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec4(bvec2(! (false), false), false, false)))))))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                barrier();
              }
             continue;
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, tan(0.0) + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y)))))))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), false || (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false))))) || (false))) || false), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.0) : injectionSwitch.x)) > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + _GLF_IDENTITY((int(4)), ~ (~ (_GLF_IDENTITY((int(4)), ((int(4))) >> (0 << _GLF_IDENTITY(int(5), int(5))))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) | (4))), _GLF_IDENTITY(int(4), 0 + _GLF_IDENTITY((int(4)), ~ (~ (_GLF_IDENTITY((int(4)), ((int(4))) >> (0 << _GLF_IDENTITY(int(5), int(5)))))))))))) || false); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
            }
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, abs(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)), (vec2(mat4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, abs(1.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0))) - vec2(0.0, 0.0)))) + vec2(0.0, 0.0)).y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, true, true))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(min(round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0))))), min(min(round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((+ -8.1))), bool(false))), _GLF_IDENTITY(sqrt(0.0), float(mat2(sqrt(0.0), 1.0, 0.0, 0.0))), 0.0, 0.0)))), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), min(round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((+ -8.1))), bool(false))), _GLF_IDENTITY(sqrt(0.0), float(mat2(sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.29))), 0.0))), 0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))))))), true && (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), min(round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((+ -8.1))), bool(false))), _GLF_IDENTITY(sqrt(0.0), float(mat2(sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.29))), 0.0))), 0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))))))))) || false))) || _GLF_IDENTITY(false, (false) && true))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, true, true))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0, 1.0)), (float(vec3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), 1.0, 1.0))) / 1.0)), 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(min(round(length(normalize(vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0))))), min(min(round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(vec3(1.0, 1.0, 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((+ -8.1))), bool(false))), _GLF_IDENTITY(sqrt(0.0), float(mat2(sqrt(0.0), 1.0, 0.0, 0.0))), 0.0, 0.0)))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), min(round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((+ -8.1))), bool(false))), _GLF_IDENTITY(sqrt(0.0), float(mat2(sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.29))), 0.0))), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec2(0.0, 1.0), mix(vec2(_GLF_FUZZED(0.3), (vec2(0.0, 1.0))[1]), vec2((vec2(0.0, 1.0))[0], _GLF_FUZZED(-68.72)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), true && (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), min(round(length(normalize(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)))), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), (false ? _GLF_FUZZED(7.3) : clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((+ -8.1))), bool(false))), _GLF_IDENTITY(sqrt(0.0), float(mat2(sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-74.29))), 0.0))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-72.91) : _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0)))))))))) || false))) || _GLF_IDENTITY(false, (false) && true)))))) && true)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))), bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) && true))));
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     return;
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       return;
      }
    }
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, true)), (bool(bvec4(_GLF_DEAD(false), true, true, true))) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          {
           return;
          }
         else
          {
          }
        }
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-869.963)), bool(false)))), float(_GLF_FUZZED((+ 5636.6885))), bool(false))) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-869.963)), bool(false)))), float(_GLF_FUZZED((+ 5636.6885))), bool(false))) > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-869.963)), bool(false)))), float(_GLF_FUZZED((+ 5636.6885))), bool(false))) > injectionSwitch.y)))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0))), float(_GLF_FUZZED(-5.0)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x)) > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) ^ 0))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED((mat4(5438.9809, -25.83, 714.053, 5.2, 21.20, -76.77, -7.2, -8.1, 1532.4345, 8015.4531, -7.6, 350.593, -41.28, -8.5, 9.9, -9543.3928) , vec2(-8.2, -169.401))))).y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true))), true && (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true))), ((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true)))) || false))), true, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true))), true && (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true))), ((! _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))), _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), (vec2(1.0, 1.0)) + vec2(0.0, 0.0)), vec2(0.0, 0.0)), dot(vec2(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), log(1.0))), log(1.0))), 0.0, _GLF_IDENTITY(abs(0.0), min(abs(0.0), abs(0.0))), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_FUZZED(-4078.2491)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(vec3(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0)), mat4x3(mat4x3(mat4x3(vec2(1.0, 1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, sin(0.0), 0.0, 0.0, abs(0.0))))))), 0.0))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.8)), vec2(_GLF_FUZZED(-877.039), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, 1.0 * (0.0))), float(_GLF_FUZZED(29.28)), bool(false))), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-3514.2545)), bool(false))), 1.0))), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 1.0) * (vec3(0.0, 1.0, 0.0))), vec3(log(1.0), 1.0, 0.0))), sqrt(_GLF_IDENTITY(tan(0.0), (false ? _GLF_FUZZED(tanh(-5.1)) : tan(0.0)))), cos(0.0))), float(mat2(float(mat3(0.0, 1.0, 0.0, 0.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), _GLF_IDENTITY(vec3(log(1.0), 1.0, 0.0), vec3(_GLF_IDENTITY(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), mat3x4(mat3x4(mat3x4(vec3(log(1.0), 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))))))), sqrt(tan(0.0)), cos(0.0))), 1.0, 1.0, 1.0)))), 0.0, abs(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) - determinant(mat2(determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false)), (bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-883.580)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.9) : _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((+ 3.3))), float(1.0), bool(true)))), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.5) : 0.0)))))))))) / vec2(1.0, 1.0))).y, max(injectionSwitch.y, injectionSwitch.y))))), true && ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))), (vec2(mat4x3(injectionSwitch, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(log(1.0), max(_GLF_IDENTITY(log(1.0), clamp(log(1.0), log(1.0), log(1.0))), log(1.0))), 0.0, abs(0.0), 0.0, 0.0, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) + 0.0)), float(_GLF_FUZZED(-9.6)), bool(false)))), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))) / vec2(1.0, 1.0))).y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3.2)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))), true, false))) && true)))) || false))), true, true, false)), false, false, false))))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_IDENTITY(false, false || (false)), true))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(abs(_GLF_IDENTITY(1.0, min(1.0, 1.0))), clamp(abs(1.0), abs(1.0), abs(1.0))), 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)))))), false, false, true))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0))) - 0.0), 1.0, 1.0, exp(0.0)), clamp(vec4(_GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0))) - 0.0), 1.0, 1.0, exp(0.0)), _GLF_IDENTITY(vec4(_GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0))) - 0.0), 1.0, 1.0, exp(0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0))) - 0.0), 1.0, 1.0, exp(0.0)))), vec4(_GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, 1.0, 0.0))) - 0.0), 1.0, 1.0, exp(0.0)))))))))), false, false, true)))) || false)) && true), false)))))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) ^ 0)))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             break;
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 1.0, length(0.0), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, determinant(mat3(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))), (false ? _GLF_FUZZED(mat4x2(_GLF_IDENTITY(3923.8805, max(_GLF_IDENTITY(3923.8805, (3923.8805) * 1.0), 3923.8805)), -1175.1489, 7951.8586, 189.796, 45.34, 58.32, -1056.6235, 2.2)) : mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), 0.0, 1.0, 1.0, length(0.0), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0))))), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))))))).y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0))))).x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)));
           return;
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(5.4)), float(injectionSwitch.y), bool(true)))))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(7.2)), bool(false))), injectionSwitch[1])).x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))
              barrier();
             break;
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))), ! (! (! (_GLF_IDENTITY(! (! (false)), bool(bool(_GLF_IDENTITY(! (! (false)), (! (! (_GLF_IDENTITY(false, true && (false))))) && true)))))))))))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), (! (! (_GLF_IDENTITY(false, false || (false))))) || false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, true && (false)), false, false)))))))) || false), false, false, false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               break;
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_TRUE(true), true)))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
             barrier();
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(-0.1))) - _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(-0.1))) - _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)))))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (true ? (injectionSwitch.y) : _GLF_FUZZED(-0.1))) - _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0)), dot(vec2(1.0, 0.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0))))))))))))))
        {
         return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         do
          {
           barrier();
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, int(ivec2(0, 1)))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), int(ivec2(0, 1)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))
                return;
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     return;
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(126.867), mix(float(_GLF_FUZZED(6.5)), float(_GLF_IDENTITY(_GLF_FUZZED(126.867), (_GLF_FUZZED(126.867)) + 0.0)), bool(true)))), float(injectionSwitch.y), bool(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), (injectionSwitch.x < injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || _GLF_IDENTITY(false, (false) || false))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))) || false)))), false, true))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false)))) || false)))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))) && true))))))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uint((subgroup_size)), (uint((subgroup_size))) | 0u))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uint((subgroup_size)), (uint((subgroup_size))) | 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, ~ (~ _GLF_IDENTITY((subgroup_size), uint(_GLF_IDENTITY(uint((subgroup_size)), (uint((subgroup_size))) | 0u))))))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))).y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) - 0u)) | (subgroup_local_id)) + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), subgroup_local_id + 1))) / 1u, 0u | ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-86679) : 1)), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u)))), ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u))) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) - 0u)) | (subgroup_local_id)) + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u, max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)), subgroup_local_id + 1))) / 1u, 0u | ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u)), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-86679) : 1)), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u)))), ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) ^ 0), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) / 1u))) << 0u))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat3(injectionSwitch[1], _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sqrt(0.0)) > injectionSwitch.y))))
        return;
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, sin(0.0), 1.0, 1.0), (mat2(injectionSwitch.x, sin(0.0), 1.0, 1.0)) - mat2(0.0, 0.0, 0.0, 0.0)))) > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, false)))))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), true, false)))))))), (bool(bool((_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) && true), true, false))))))))) && true))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), ! (! (bool(bvec4(false, false, false, true))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
              {
              }
             else
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, true)), true && (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false, true))))))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY(min(0, 0), (false ? _GLF_FUZZED(34095) : min(0, 0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 | 1), max(_GLF_IDENTITY((1 | 1), int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1)) | 1), ((1 | 1)) ^ 0), 1))), (1 | 1)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           continue;
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                break;
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(50.62))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(50.62))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true)))))))) || false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             continue;
            }
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, true))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) && true)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false, true)), bool(bvec2(bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false, true)), false)))))))))
        return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0)))) * 1.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), (bool(bvec3(_GLF_DEAD(false), true, false))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, sin(length(vec4(0.0, 0.0, 0.0, 0.0)))))) > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), true, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), true)))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(73737)))), clamp(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(73737)))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(73737)))), (true ? _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(73737)))) : _GLF_FUZZED(86313))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, 0 | (7))), _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(ivec4(7, 0, 1, 1)))), (true ? int(7) : _GLF_FUZZED(73737))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), min(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + abs(log(1.0))) > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, ! (! (false)))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_LOOP(false))));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 buf[virtual_gid] = 1;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) != 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               continue;
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), true, false, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(subgroup_local_id + 1 < subgroup_size)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           int i = 0;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               break;
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               break;
              }
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))), injectionSwitch)))).y))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.4), _GLF_FUZZED(5.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                barrier();
               break;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               return;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), false)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))))
                  continue;
                }
               else
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(i))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (! (false)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(! (false), true && (! (false)))), bool(bvec4((_GLF_IDENTITY(! (false), true && (! (false)))), false, true, false))), true, false, false)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), max(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), false || (true && (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), max(mat2(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, _GLF_IDENTITY(1.0, abs(1.0) * (1.0)))), injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)), max(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))).y)) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), max(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)), max(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0)), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))))).y)) * (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     return;
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, length(0.0), 1.0, 0.0, 0.0, exp(0.0), 0.0))).x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && _GLF_IDENTITY(true, ! (! (true)))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   continue;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     return;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) && true, ((false) && true) && true), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((false) && true, ((false) && true) && true), true, false), true))))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(float(false))), bool(false))) > injectionSwitch.y))));
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false))))), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(_GLF_ZERO(0.0, injectionSwitch.x))))) + (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 + (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))) && true)))))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                          }
                        }
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))), false), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)), injectionSwitch.y))), false))))))))))));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  break;
                 break;
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false))), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))) && true)))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0), ~ _GLF_IDENTITY((~ (ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0))), (_GLF_IDENTITY((~ (ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0))), (_GLF_IDENTITY((~ (ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0))), ivec3(ivec4((~ (ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0))), 1)))) * ivec3(1, 1, 1))) | ivec3(0, 0, 0)))), int(ivec4(int(_GLF_IDENTITY(ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0), ~ (~ (ivec3(0 >> _GLF_IDENTITY(int(2), int(2)), 0, 0))))), 1, 0, 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED((injectionSwitch * atan(142.768))))).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                }
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), true && ((false)))) && true)))));
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-3.6)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x3(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-3.6)), bool(false))), 0.0, 1.0, 0.0, 1.0, 1.0)))))), injectionSwitch[1])).y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                continue;
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter : _GLF_FUZZED(atomicMax(i, _injected_loop_counter)))) > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                  }
                }
               else
                {
                 atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, ~ _GLF_IDENTITY((~ (64)), max((~ (64)), _GLF_IDENTITY((~ (64)), (_GLF_IDENTITY((~ (64)), int(ivec4(_GLF_IDENTITY((~ (64)), (_GLF_IDENTITY((~ (64)), 0 ^ (_GLF_IDENTITY((~ (64)), 1 * ((~ (64))))))) | 0), 0, 1, 1)))) | 0)))), 4);
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   break;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || false)), bool(bvec4(! (_GLF_IDENTITY(true, (true) || false)), true, false, false))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)), bool(bvec4(! (_GLF_IDENTITY(true, (true) || false)), true, false, false)))))))))))))))
                  continue;
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / cos(abs(0.0)))))))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       return;
                      }
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
                      barrier();
                     break;
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec3(int(5), 0, 0)))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), (false) && _GLF_IDENTITY(true, bool(bvec2(true, true))))))
                      barrier();
                    }
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, (4) << (0 >> _GLF_IDENTITY(int(7), int(7)))));
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))), _GLF_IDENTITY(true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), true, false, false))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, false))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), true, false, false))))), bool(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(_GLF_IDENTITY(bvec3(! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), true, false, false))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))), false))))))) || false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
             do
              {
               barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true))))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(7.5), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((-2884.2251 + -3.2))), bvec2(true, false))).y))));
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) && true) && ((injectionSwitch.x > injectionSwitch.y))))))
            continue;
           for(int _injected_loop_counter = (-78871 & (0 & -23614)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) && true); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, false)), true && (_GLF_IDENTITY(bool(bvec3(! (false), false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(! (false), false, false)), bool(_GLF_IDENTITY(bvec2(bool(bvec3(! (false), false, false)), true), bvec2(bvec2(bvec2(bool(bvec3(! (false), false, false)), true))))))))))))))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          barrier();
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))), true, true, true))))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
