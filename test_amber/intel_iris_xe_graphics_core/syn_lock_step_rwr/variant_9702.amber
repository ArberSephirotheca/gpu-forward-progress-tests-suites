#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(false, (false) || false), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(false, (false) || false), false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(false, (false) || false), false)))))))), _GLF_IDENTITY(_GLF_IDENTITY(true && (bool(bvec3(false, false, false))), false || (true && (bool(bvec3(false, false, false))))), (true && (bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))))), false)))) && _GLF_IDENTITY(true, ! (! (true))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false))), true && ((bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false))))), ! (! (true && _GLF_IDENTITY((bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), true))), false, false))), true && ((bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, false)))))))))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false), (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))) || false)) && true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))), true && (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))), true && (! (false)))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))), true && (! (false)))), true)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! (! (bool(bool(! (false))))))), true && (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))), true && (! (false)))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), ! (! (bool(bool(! (false))))))), true && (! _GLF_IDENTITY((false), ! (! ((false))))))), true)))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.0) : injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) / 1.0))) > injectionSwitch.y, true)), true && (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), true && (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), true && (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), true && (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(mix(-7848.1880, mix(-8.6, -44.31, false), -1819.6566)) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))))) > injectionSwitch.y, true)))))) && true)))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, max(injectionSwitch.y, injectionSwitch.y)))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, abs(0.0)))))).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x) * 1.0) > injectionSwitch.y), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.7)), bool(false)))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))) || false))) || _GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(6.7), (_GLF_IDENTITY(_GLF_FUZZED(6.7), min(_GLF_IDENTITY(_GLF_FUZZED(6.7), clamp(_GLF_FUZZED(6.7), _GLF_FUZZED(6.7), _GLF_FUZZED(6.7))), _GLF_FUZZED(6.7)))) * 1.0)), bool(false))))))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))), ! (! ((_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))))))))), false)), false || (bool(bvec4((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))), false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.7)), bool(false)))))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false)), false, true))))))))))))))))), false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec3((_GLF_DEAD(false)), false, true)), (bool(bvec3((_GLF_DEAD(false)), false, true))) || false))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) * 1u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), bool(bool(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), ! (! (false))), _GLF_IDENTITY(true, _GLF_IDENTITY((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (bool(bvec2(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), true)))), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)) * mat2(1.0), clamp(((injectionSwitch)) * mat2(1.0), ((injectionSwitch)) * mat2(1.0), ((injectionSwitch)) * mat2(1.0)))), mat2(1.0) * _GLF_IDENTITY(((injectionSwitch)), min(((injectionSwitch)), ((injectionSwitch))))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), float(_GLF_FUZZED(-0.2)), bool(false))))), injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), float(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), 1.0, 0.0, 0.0, cos(0.0), 1.0), transpose(_GLF_IDENTITY(transpose(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), 1.0, 0.0, 0.0, cos(0.0), 1.0)), mat4(1.0) * (transpose(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), 1.0, 0.0, 0.0, cos(0.0), 1.0))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(51.91), _GLF_FUZZED(61.46)), bvec2(false, false))), (injectionSwitch) * mat2(1.0)) : _GLF_FUZZED(injectionSwitch))).y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, true, false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), (_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), false || (_GLF_IDENTITY((false), false || ((false))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), false || (_GLF_IDENTITY((false), false || ((false))))), true, true), true)))))) && true)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false))) && true))))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), (bool(bvec4(true, true, true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-26.69)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), true), bvec3(bvec3(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_IDENTITY(true, (true) || false)))))), true)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0))))))))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0))))))))))))))), true, true, false)))) && true)), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bool(! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0))))))))))))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(! (! (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0))))))))))))))), true, true, false)))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))) << 0u), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u, clamp((uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u, (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u, (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), uint(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))), uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))))) << 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), max(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), clamp(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), clamp(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))))), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) | (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))))))) << 0u)))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) + 0u)))) << 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))) << 0u))))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), min(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 1u, 1u, 1u), ~ (~ (uvec4(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), 1u, 1u, 1u))))))))))) << 0u)))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))))))) << 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u), (0u ^ 0u) ^ (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), min((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))))))))) - 0u)) << (1u ^ 1u)) : _GLF_FUZZED(workgroup_base)))))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-252.374)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) ? (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), min(subgroup_id, subgroup_id)), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, clamp((subgroup_id) / 1u, (subgroup_id) / 1u, (subgroup_id) / 1u))), subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) << 0u))) << 0u)))) | _GLF_IDENTITY((uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u))))))), min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)), subgroup_id))))) << 0u), (0u & 147769u) + (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 1u, 0u))))))), min(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)), subgroup_id))))) << _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_base))))))))), min((_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u, ((uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u) | 0u)))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id))))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))), (uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))) | (uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))))) << 0u)))) * 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))), uint(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)))), (uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) << 0u)))))))))) : _GLF_FUZZED(num_workgroup))) << 0u)) ^ 0u) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u, ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u) | ((_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u))) * subgroup_size), uint(uvec2((workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), min(subgroup_id, subgroup_id))) ^ 0u)) >> 0u), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))), 1u)), _GLF_IDENTITY((true ? uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ _GLF_IDENTITY(0u, (0u) ^ (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_id) : uint(0u)))) << 0u), uint(0u)))))) >> 0u), (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, max(3u, 3u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, max(3u, 3u))), min(uint(3u), uint(3u))))), 1u)) : _GLF_FUZZED(subgroup_size)), ((true ? uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ 0u), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))) ^ _GLF_IDENTITY(0u, (0u) ^ (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))) >> 0u), (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u))))), 1u)) : _GLF_FUZZED(subgroup_size))) * 1u))) * _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED((subgroup_id >> subgroup_size))))), 0u))), uint(uvec2((workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), _GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_id), (min(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), subgroup_id)) / _GLF_IDENTITY(1u, uint(uint(1u)))))) ^ 0u) * subgroup_size), 0u))) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(sinh(-6460.2403)) : injectionSwitch[0])), injectionSwitch[1])).x))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))), false, false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) - 0.0))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), false))))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))) || false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(436.158))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))), injectionSwitch.x)))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true)) && true) || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)))))) + 1) % subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) * 1), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (injectionSwitch.x)))) > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, abs(1.0) * (injectionSwitch.x)))) > injectionSwitch.y), true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, max(1, 1)), (0 & -36100), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec4(_GLF_IDENTITY(1, max(1, 1)), (0 & -36100), 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec4(22546, -94675, 1110, -81764)))))), (1) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY((1), int(ivec4((1), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))) / 1), (read_1 + _GLF_IDENTITY(1, (1) / 1)) | 0u), 0u | (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), clamp(~ ((1)), _GLF_IDENTITY(~ ((1)), (_GLF_IDENTITY(~ ((1)), int(ivec2(~ ((1)), 0)))) | (~ ((1)))), ~ ((1)))))) / 1))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), int(ivec4((1), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))) / 1, (_GLF_IDENTITY(_GLF_IDENTITY((1), int(ivec4((1), int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))) / 1, 0 + (_GLF_IDENTITY((1), int(ivec4((1), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(4.7)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(true))))), 0, 0))) / 1))) - 0)), (read_1 + _GLF_IDENTITY(1, (1) / 1)) | 0u), 0u | (read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((1)), 0 + (~ ((1)))), clamp(~ ((1)), _GLF_IDENTITY(~ ((1)), (_GLF_IDENTITY(~ ((1)), int(ivec2(~ ((1)), 0)))) | (~ ((1)))), ~ ((1)))))) / 1))) : _GLF_FUZZED(max(14934u, workgroup_id))))) ^ 0u)), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(int(64)), _GLF_IDENTITY(min(int(int(64)), int(int(64))), (min(int(int(64)), int(int(64)))) | (_GLF_IDENTITY(min(int(int(64)), int(int(64))), (_GLF_IDENTITY(min(int(int(64)), int(int(64))), 0 + (_GLF_IDENTITY(min(int(int(64)), int(int(64))), max(min(int(int(64)), int(int(64))), min(int(int(64)), int(int(64)))))))) | (min(int(int(64)), int(int(64))))))))), min(_GLF_IDENTITY(64, _GLF_IDENTITY(int(int(64)), _GLF_IDENTITY(min(int(int(64)), int(int(64))), (min(int(int(64)), int(int(64)))) | (_GLF_IDENTITY(_GLF_IDENTITY(min(int(int(64)), int(int(64))), (true ? min(int(int(64)), int(int(64))) : _GLF_FUZZED(39043))), (_GLF_IDENTITY(min(int(int(64)), int(int(_GLF_IDENTITY(64, (64) >> 0)))), 0 + _GLF_IDENTITY((min(int(int(64)), int(int(64)))), ((min(int(int(64)), int(int(64))))) >> (0 << _GLF_IDENTITY(int(8), int(8)))))) | (_GLF_IDENTITY(min(int(int(64)), int(int(64))), (min(int(int(64)), int(int(64)))) >> 0))))))), _GLF_IDENTITY(64, _GLF_IDENTITY(int(int(64)), _GLF_IDENTITY(min(int(int(64)), int(_GLF_IDENTITY(int(64), max(int(64), int(64))))), (min(int(int(64)), int(int(64)))) | (_GLF_IDENTITY(min(int(int(64)), int(int(64))), (_GLF_IDENTITY(min(_GLF_IDENTITY(int(int(64)), (_GLF_IDENTITY(int(int(64)), (false ? _GLF_FUZZED(8717) : int(int(64))))) - 0), int(int(64))), 0 + (min(int(int(64)), int(int(64)))))) | (min(int(int(64)), int(int(64))))))))))), 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1 == read_2, true && (_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(read_1, (read_1) - 0u), read_1)) + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(78863))) | 0), (_GLF_IDENTITY(read_1, max(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (read_1)), (_GLF_IDENTITY(read_1, clamp(read_1, read_1, _GLF_IDENTITY(read_1, 0u + (_GLF_IDENTITY(read_1, (read_1) - 0u)))))) - 0u), read_1)) + _GLF_IDENTITY(1, (1) | 0)) >> 0u) == read_2))) + _GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), (~ (4)) - 0)), (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((4), 1 * ((4)))), max(~ (~ _GLF_IDENTITY((4), 1 * ((4)))), ~ (~ _GLF_IDENTITY((4), 1 * ((4))))))) | (~ (~ (4)))))) - 0, ((_GLF_IDENTITY(4, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (4), (~ (4)) - _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0, 1 * (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), max(_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0, 1 * (0)), int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(int(int(ivec2(_GLF_IDENTITY(0, 1 * (0)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))), int(ivec2(_GLF_IDENTITY(0, 1 * (0)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), (~ (~ _GLF_IDENTITY((4), 1 * ((4))))) | (~ (~ (4)))))) - 0) >> 0)), 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
