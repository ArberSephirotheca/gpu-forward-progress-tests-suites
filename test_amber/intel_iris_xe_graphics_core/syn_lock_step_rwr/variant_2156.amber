#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 mat3x2 _f0;
} ;

struct _GLF_struct_10 {
 float _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_9 {
 int _f0;
 float _f1;
 vec2 _f2;
 bvec4 _f3;
 vec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_8 {
 bool _f0;
 mat2x4 _f1;
 mat2 _f2;
 vec4 _f3;
 float _f4;
} ;

struct _GLF_struct_12 {
 _GLF_struct_8 _f0;
 mat2x3 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
 ivec3 _f4;
 _GLF_struct_11 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_6 {
 uvec4 _f0;
} ;

struct _GLF_struct_5 {
 vec3 _f0;
 vec3 _f1;
 bvec4 _f2;
 mat2 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_4 {
 ivec4 _f0;
 ivec4 _f1;
 mat3x2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_7 {
 ivec3 _f0;
 bool _f1;
 vec2 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_13 {
 _GLF_struct_7 _f0;
 uint workgroup_base;
 bvec4 _f1;
 _GLF_struct_12 _f2;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 bvec2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 mat3 _f1;
 uint subgroup_size;
 bool _f2;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 uint _f1;
 mat4 _f2;
 _GLF_struct_0 _f3;
 float _f4;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 ivec2 _f1;
 uvec2 _f2;
 bvec2 _f3;
 _GLF_struct_2 _f4;
 bvec2 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1;
 uvec2 GLF_merged2_0_1_6_1_1_11read_1virtual_gid;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.xy = GLF_merged2_0_1_6_1_1_11read_1virtual_gid;
  }
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2;
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_1(vec4(1.0), 1u, mat4(1.0), _GLF_struct_0(mat4x2(1.0), mat3(1.0), gl_SubgroupSize, true), 1.0), ivec2(1), uvec2(1u), bvec2(true), _GLF_struct_2(uvec2(1u), bvec2(true), uvec2(1u)), bvec2(true));
 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x = _GLF_struct_replacement_3._f0._f3.subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y = workgroup_id;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(_GLF_struct_7(ivec3(1), true, vec2(1.0), _GLF_struct_4(ivec4(1), ivec4(1), mat3x2(1.0), mat3x4(1.0)), _GLF_struct_5(vec3(1.0), vec3(1.0), bvec4(true), mat2(1.0), uvec3(1u)), _GLF_struct_6(uvec4(1u))), workgroup_size * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y, bvec4(true), _GLF_struct_12(_GLF_struct_8(true, mat2x4(1.0), mat2(1.0), vec4(1.0), 1.0), mat2x3(1.0), _GLF_struct_9(1, 1.0, vec2(1.0), bvec4(true), vec3(1.0), bvec3(true)), _GLF_struct_10(1.0, uvec2(1u)), ivec3(1), _GLF_struct_11(mat3x2(1.0)), ivec4(1)));
 uint virtual_gid = _GLF_struct_replacement_13.workgroup_base + subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x + subgroup_local_id;
 GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.xy.y = virtual_gid;
 uint next_virtual_gid = _GLF_struct_replacement_13.workgroup_base + subgroup_id * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x);
 GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.z = next_virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))
  {
   GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x = GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.z;
  }
 else
  {
  }
 uint read_1 = atomicLoad(buf[GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.xy.y], 4, 64, 0);
 do
  {
   GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.w = read_1;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.xy.x = GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.w;
  }
 else
  {
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z = GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.xy.x;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[GLF_merged3_0_2_41_2_1_16_3_1_6GLF_merged2_0_1_6_1_1_11read_1virtual_gidnext_virtual_gidread_1.xy.y], 4, 64, 0);
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 ^ 0) >> _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w = read_2;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.x], uint(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.z + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_6next_virtual_gidnum_workgroupread_1read_2.w) + 1, 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
