#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_2 {
 mat3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_0 {
 bvec2 _f0;
 mat3x2 _f1;
 uint _f2;
 mat3x2 _f3;
 mat4 _f4;
 uint workgroup_base;
} ;

struct _GLF_struct_1 {
 ivec2 _f0;
 _GLF_struct_0 _f1;
} ;

struct _GLF_struct_4 {
 _GLF_struct_1 _f0;
 _GLF_struct_3 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2(_GLF_DEAD(false), true))))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), false || ((! (_GLF_IDENTITY(false, (false) && true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), bool(bvec3(! (! (_GLF_IDENTITY(false, (false) && true))), true, true)))) && true)), bool(bool(! (! (! (_GLF_IDENTITY(false, (false) && true))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), true)), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true)), ! (! (bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, true && (true)))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true)), ! (! (bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, true && (true)))))))), true && ((_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true)), ! (! (bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, true && (true)))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool((! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), true)), ! (! (bool(bvec2((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true, true && (true)))))))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false)))))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), min(gl_NumWorkGroups, gl_NumWorkGroups)), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), min(gl_NumWorkGroups, gl_NumWorkGroups))) / (uvec3(1u, 1u, 1u) | uvec3(1u, 1u, 1u))).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), vec2(_GLF_FUZZED(893.978), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))))[1]), bvec2(false, true))).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), vec2(_GLF_FUZZED(893.978), (injectionSwitch)[1]), bvec2(false, true))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), vec2(_GLF_FUZZED(893.978), (injectionSwitch)[1]), bvec2(false, true))).y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), vec2(_GLF_FUZZED(893.978), (injectionSwitch)[1]), bvec2(false, true))).y))))))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (bool(false))), ((! (bool(false)))) && true)))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)), false, true)))))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID, 0u), min(uvec4(gl_WorkGroupID, 0u), uvec4(gl_WorkGroupID, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupID, 0u), min(uvec4(gl_WorkGroupID, 0u), uvec4(gl_WorkGroupID, 0u))), ~ (~ (_GLF_IDENTITY(uvec4(gl_WorkGroupID, 0u), min(uvec4(gl_WorkGroupID, 0u), uvec4(gl_WorkGroupID, 0u))))))) | (_GLF_IDENTITY(uvec4(gl_WorkGroupID, 0u), min(uvec4(gl_WorkGroupID, 0u), uvec4(gl_WorkGroupID, 0u))))))).x, (gl_WorkGroupID.x) | 0u), _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (gl_WorkGroupID.x), ~ (~ ((0u >> _GLF_IDENTITY(uint(5u), uint(5u))) ^ (gl_WorkGroupID.x))))), _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) / 1u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), bool(bvec3(_GLF_DEAD(false), false, false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(_GLF_struct_1(ivec2(1), _GLF_struct_0(bvec2(true), mat3x2(1.0), 1u, mat3x2(1.0), mat4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), round(length(normalize(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(866.495), (vec3(1.0, 1.0, 1.0))[1], (vec3(1.0, 1.0, 1.0))[2]), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED(519.004), _GLF_FUZZED(7.1)), bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), min(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, log(exp(0.0)))), 0.0 + (float(mat3x2(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), min(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, log(exp(0.0))))))), max(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(cos(sqrt(0.0)), clamp(cos(sqrt(0.0)), cos(sqrt(0.0)), _GLF_IDENTITY(cos(sqrt(0.0)), clamp(cos(sqrt(0.0)), _GLF_IDENTITY(cos(sqrt(0.0)), max(cos(sqrt(0.0)), cos(sqrt(0.0)))), cos(sqrt(0.0)))))), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0))))), _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), float(_GLF_IDENTITY(mat4(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0))))), 0.0, 1.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0), (mat4(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-12.35) : 0.0)), _GLF_IDENTITY(cos(sqrt(0.0)), float(float(cos(sqrt(0.0))))), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), mix(float(_GLF_FUZZED(3.0)), float((_GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), min(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, log(exp(0.0)))), 0.0 + (float(mat3x2(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), min(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))), float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), _GLF_IDENTITY(round(length(normalize(vec3(1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(_GLF_IDENTITY(normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), (normalize(vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))) * mat3(1.0)))), (round(length(normalize(vec3(1.0, 1.0, 1.0))))) - 0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))))), 0.0, 0.0, _GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0)), injectionSwitch.y))))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, log(exp(0.0))))))), max(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(cos(sqrt(0.0)), clamp(cos(sqrt(0.0)), cos(sqrt(0.0)), _GLF_IDENTITY(cos(sqrt(0.0)), clamp(cos(sqrt(0.0)), _GLF_IDENTITY(cos(sqrt(0.0)), max(cos(sqrt(0.0)), cos(sqrt(0.0)))), cos(sqrt(0.0)))))), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(vec2(_GLF_ONE(1.0, injectionSwitch.y), 0.0))))), _GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), float(_GLF_IDENTITY(mat4(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, cos(sqrt(0.0)), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), float(_GLF_IDENTITY(float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (float(_GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), float(_GLF_FUZZED(428.566)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) - 0.0))))), 0.0, 1.0, 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0), (mat4(float(mat4x3(1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-12.35) : 0.0)), _GLF_IDENTITY(cos(sqrt(0.0)), float(float(cos(sqrt(0.0))))), abs(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), bool(true))), 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))))), bool(true)))))), workgroup_size * workgroup_id)), _GLF_struct_3(_GLF_struct_2(mat3(1.0), ivec3(1))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))), true && (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))) || false)))))))))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false))))))), _GLF_IDENTITY(true && (_GLF_DEAD(false)), bool(bvec2(true && (_GLF_DEAD(false)), true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || (false)), true, false))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), bool(bvec4((false), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false)))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), false || (! (false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), false || (bool((_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_IDENTITY(bool((false)), false || (bool((false))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), false || (bool((_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_IDENTITY(bool((false)), false || (bool((false)))))))), _GLF_IDENTITY(bool(bvec2(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), false || (bool((_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_IDENTITY(bool((false)), false || (bool((false)))))))), false)), ! (! (bool(bvec2(! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), false || (bool((_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_IDENTITY(bool((false)), false || (bool((false)))))))), false)))))))))))))))
  barrier();
 uint virtual_gid = _GLF_struct_replacement_4._f0._f1.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, 0u + (workgroup_id))))) + _GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(4u), uint(4u))) + (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_struct_replacement_4._f0._f1.workgroup_base + _GLF_IDENTITY(subgroup_id, (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(uvec2(124965u, 177266u)[1], ~ (~ (uvec2(124965u, 177266u)[1])))), (_GLF_FUZZED(_GLF_IDENTITY(uvec2(124965u, 177266u)[1], ~ (~ (uvec2(124965u, 177266u)[1]))))) | 0u) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), (false ? _GLF_FUZZED(51553u) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))) / 1u) + 0u)), clamp(_GLF_IDENTITY(clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id), 0u | (clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(workgroup_size))), subgroup_id)), min(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, 0u))))))), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), max(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) / 1u, ((_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) / 1u) << 0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), uint(uint(clamp(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(workgroup_size))), subgroup_id)), min(_GLF_IDENTITY(subgroup_id, max(subgroup_id, _GLF_IDENTITY(subgroup_id, 0u | (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, 0u))))))), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), max(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) / 1u, ((_GLF_IDENTITY(subgroup_id, (subgroup_id) ^ 0u)) / 1u) << 0u))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), clamp(clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id), clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(exp(0.0)))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), mat3(1.0) * (mat4x3(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(exp(0.0)))), _GLF_ONE(1.0, injectionSwitch.y)))))) > injectionSwitch.y))))) || (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_IDENTITY(subgroup_id, (subgroup_id) - 0u) : _GLF_FUZZED(workgroup_size)))), clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(subgroup_id, subgroup_id), (0u | 0u) + (max(_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)))), subgroup_id)))), subgroup_id))), clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), subgroup_id)))))) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(clamp(workgroup_id, subgroup_local_id, virtual_gid)) : subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 uint read_1 = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, uint(uint(virtual_gid))), virtual_gid))) ^ 0u), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid))], _GLF_IDENTITY(4, 0 | (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | (_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | (4)), 4)))))), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, _GLF_IDENTITY(1.0, float(mat2x4(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 1.0, 0.0, 0.0))))))))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, false)))))))), true, false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(bitCount(-11938)) : 1))], injectionSwitch[1])))))[0], _GLF_FUZZED(_GLF_IDENTITY(9385.0135, mix(float(9385.0135), float(_GLF_FUZZED(7473.0918)), bool(false))))), vec2(_GLF_FUZZED(-318.626), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))).y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), _GLF_IDENTITY(true, true && (true))), true)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), true && (bool(bvec3(_GLF_DEAD(false), false, true))))), true), true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, false || (true))), true))))) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(5.4), (true ? _GLF_FUZZED(5.4) : _GLF_FUZZED(-184.265)))), float(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.2)))), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, uint(uvec4(read_1 + 1, 1u, 0u, 1u)))))) << 0u)) ^ _GLF_IDENTITY((0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(uint(7u), uint(7u))))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), min(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))) : _GLF_FUZZED(subgroup_id))))))), clamp((_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, uint(uvec4(read_1 + 1, 1u, 0u, 1u)))))) << 0u)) ^ _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(_GLF_IDENTITY(7u, max(7u, 7u))))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, uint(uvec4(read_1 + 1, 1u, 0u, 1u)))))) << 0u)) ^ _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) >> (1u ^ 1u)), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ _GLF_IDENTITY((true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id)), min((true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id)), (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))))), _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, uint(uvec4(read_1 + _GLF_IDENTITY(1, 0 | (1)), 1u, 0u, 1u)))))) << 0u)) ^ _GLF_IDENTITY((_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))), 0u, 0u)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) - (0u ^ 0u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), 0u | (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), clamp((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), (1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), uint(uvec4((_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | (_GLF_IDENTITY(read_1 + 1, uint(uvec4(read_1 + 1, 1u, 0u, 1u)))))) << 0u)) ^ _GLF_IDENTITY(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), 1u, 0u), ~ (~ (uvec3(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), 1u, 0u))))), uint(uvec3(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), 1u, 0u), ~ (~ (uvec3(_GLF_IDENTITY((0u << _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY(((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(0u)), (_GLF_IDENTITY(uint(0u), uint(0u))) / (1u | 1u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))), (_GLF_IDENTITY(true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id), ~ (~ (true ? ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * ((0u << _GLF_IDENTITY(uint(7u), uint(7u)))) : _GLF_FUZZED(subgroup_id))))))), 1u, 0u))))), 1u, 1u)))), 1u, 0u, 1u)))))) == read_2), (false ? _GLF_FUZZED(virtual_gid) : uint(_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1 + 1, (_GLF_IDENTITY(read_1, max(read_1, read_1)) + 1) - (0u | 0u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), clamp(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u + (0u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))), min(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) >> (0u ^ 0u)))), _GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), min(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))))))) == read_2))) + _GLF_IDENTITY(1, int(ivec4(1, 1, _GLF_IDENTITY(1, (1) >> 0), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, (1) + (63852 & 0))))))), int(3)))))), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
