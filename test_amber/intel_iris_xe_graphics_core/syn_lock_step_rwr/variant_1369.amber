#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460
struct _GLF_struct_7 {
 mat4x3 _f0;
 uint subgroup_local_id;
} ;

struct _GLF_struct_8 {
 _GLF_struct_7 _f0;
 float _f1;
 float _f2;
 bvec4 _f3;
 ivec3 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 uvec4 _f3;
 bvec2 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 bool _f1;
 uvec4 _f2;
 mat4x3 _f3;
 mat3x4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 uint _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 vec3 _f2;
 _GLF_struct_4 _f3;
 ivec3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_0 {
 uint _f0;
 vec4 _f1;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 ivec4 _f1;
 uint subgroup_size;
 vec4 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat2x3(1.0), ivec4(1), gl_SubgroupSize, vec4(1.0), _GLF_struct_1(_GLF_struct_0(1u, vec4(1.0))), _GLF_struct_5(_GLF_struct_2(uvec2(1u), 1u, ivec4(1)), _GLF_struct_3(ivec2(1), true, uvec4(1u), mat4x3(1.0), mat3x4(1.0), bvec2(true)), vec3(1.0), _GLF_struct_4(mat4x3(1.0), bvec4(true), mat2x4(1.0), uvec4(1u), bvec2(true), mat3x4(1.0)), ivec3(1), mat4x2(1.0)));
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(_GLF_struct_8(_GLF_struct_7(mat4x3(1.0), gl_SubgroupInvocationID), 1.0, 1.0, bvec4(true), ivec3(1), vec2(1.0)));
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + _GLF_struct_replacement_9._f0._f0.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_6.subgroup_size + ((_GLF_struct_replacement_9._f0._f0.subgroup_local_id + 1) % _GLF_struct_replacement_6.subgroup_size);
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
