#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 mat3x4 _f0;
 uvec3 _f1;
 int _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 vec3 _f1;
 int _f2;
 mat2x4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 mat4x3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 ivec4 _f1;
 vec3 _f2;
 uvec4 _f3;
 mat2x3 _f4;
 mat2x4 _f5;
 int _f6;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 bool _f3;
 _GLF_struct_3 _f4;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 uvec4 _f1;
 ivec4 _f2;
 uvec4 _f3;
 uint subgroup_local_id;
 _GLF_struct_4 _f4;
 mat3x4 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (_GLF_IDENTITY(false, true && (false)))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, sqrt(1.0), 0.0, 1.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(3.1)), float(injectionSwitch.y), bool(true)))))))) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uvec2 GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          continue;
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_13_1_1_6num_workgroupread_1;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))), true, false)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
    }
  }
 uvec4 GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) || false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) || false)))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uvec3 GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_size;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(6), int(6))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_size;
    }
  }
 uvec4 GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) && true), ! (_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))), ! _GLF_IDENTITY((! ((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))), true && ((! ((_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))))))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), max((~ (0)), (~ (0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6)))))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), 0 ^ (int(6)))), 0 ^ ((_GLF_IDENTITY(int(6), 0 ^ (int(6)))))) + 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6))))), int(int((_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6)))))))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6))))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) + 0.0), injectionSwitch.x)) ^ (int(6))))), min(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), 0 ^ (int(6)))) + 0), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(28.62)), float(injectionSwitch.x), bool(true))))) ^ (int(6))))), int(int((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6)))), (_GLF_IDENTITY(1, (1) | (1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6))))) ^ (int(_GLF_ZERO(0.0, injectionSwitch.x)) & -8549)))))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) >> 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(6)))))))) - 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-87.22)), bool(false)), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(304.829) : mix(float(injectionSwitch.y), float(_GLF_FUZZED(-87.22)), bool(false)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), false, true, false)))))
      return;
    }
   else
    {
     _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z = subgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z = subgroup_id));
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      break;
     return;
    }
  }
uint subgroup_size = 16;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (false)), ! (! ((! (false))))), (_GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), bool(bvec3(! ((! (false))), true, true)))))) || false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x = subgroup_size;
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(mat2x4(1.0), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (1u) | (1u))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (1u) | (1u))), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (1u) | (1u))), ((_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (1u) | (1u)))) / 1u))), (_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (1u) | (1u))), (_GLF_IDENTITY(1u, (1u) | (1u))) | (_GLF_IDENTITY(1u, (1u) | (1u)))))), (1u) ^ 0u)), min(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ 0u)), uvec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(77.60)), float(injectionSwitch.y), bool(true)))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ 0u)))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ 0u)), max(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ 0u)), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), min(0u >> _GLF_IDENTITY(uint(6u), uint(6u)), 0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) : _GLF_FUZZED(GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup[2])))) ^ (0u))))) >> uvec4(0u, 0u, 0u, 0u)), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) | (1u)), (1u) ^ 0u)))))), ivec4(1), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) / uvec4(1u, 1u, 1u, 1u)), gl_SubgroupInvocationID, _GLF_struct_4(_GLF_struct_0(bvec4(true), ivec4(1), vec3(1.0), uvec4(1u), mat2x3(1.0), mat2x4(1.0), 1), _GLF_struct_1(mat3(1.0), mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), _GLF_IDENTITY((_GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true))) * 1.0)) + sin(_GLF_IDENTITY(0.0, (0.0) - 0.0)), (_GLF_IDENTITY((_GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true))) * 1.0)) + sin(0.0), mix(float((_GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), (mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true)))))))) * 1.0)) + sin(0.0)), float(_GLF_FUZZED(2728.0150)), bool(false)))) - 0.0))), float(mat3x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), clamp(mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(_GLF_IDENTITY(true, ! (! (true))))), mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true)), mix(float(_GLF_FUZZED(8.9)), float(1.0), bool(true))))) * _GLF_IDENTITY(1.0, 0.0 + (1.0)))) + sin(0.0))), 0.0, 1.0, determinant(mat4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, (1.0) / 1.0), abs(1.0), determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1864.6469)), float(0.0), bool(true))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), 0.0, 1.0)), 0.0, 0.0, 1.0, log(1.0), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, log(1.0))), exp(0.0), 0.0, 0.0, 1.0, abs(1.0), 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))), bvec4(true)), _GLF_struct_2(bvec4(true), vec3(1.0), 1, mat2x4(1.0), mat2(1.0)), true, _GLF_struct_3(mat3x4(1.0), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) | 0u)))) : 1u), _GLF_IDENTITY(uint(uvec2((false ? _GLF_FUZZED(subgroup_id) : 1u), 1u)), (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (uint(_GLF_IDENTITY(2u, (2u) << 0u)))), uint(2u))) | (uint(uvec2((false ? _GLF_FUZZED(subgroup_id) : 1u), 1u)))))), (1u) - 0u)), 1, mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), clamp(min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), (false ? _GLF_FUZZED(692.070) : _GLF_IDENTITY(min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), (_GLF_IDENTITY(min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0) : _GLF_FUZZED(1296.2987)))) + 0.0))), min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), (true ? _GLF_IDENTITY(1.0, min(1.0, 1.0)) : _GLF_FUZZED(-9.2)))))), mat3x4(1.0));
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   GLF_merged2_0_1_13_1_1_6num_workgroupread_1.x = num_workgroup;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false)), (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-58.43) : injectionSwitch.x)), 0.0, 0.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, abs(0.0))), (float(mat3(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-58.43) : injectionSwitch.x)), 0.0, 0.0, sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, abs(0.0)))) - 0.0)) > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.0), _GLF_FUZZED(-4204.2958)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
  return;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(5628.3318, clamp(_GLF_IDENTITY(5628.3318, (5628.3318) + 0.0), 5628.3318, 5628.3318))), min(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(5628.3318, clamp(_GLF_IDENTITY(5628.3318, (5628.3318) + 0.0), 5628.3318, 5628.3318))), (false ? _GLF_FUZZED(788.218) : _GLF_FUZZED(_GLF_IDENTITY(5628.3318, clamp(_GLF_IDENTITY(5628.3318, (5628.3318) + 0.0), 5628.3318, 5628.3318))))), _GLF_FUZZED(_GLF_IDENTITY(5628.3318, clamp(_GLF_IDENTITY(5628.3318, (5628.3318) + 0.0), 5628.3318, 5628.3318))))) : _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.6), _GLF_FUZZED(9.4)), bvec2(false, false))).x, (true ? false ? _GLF_FUZZED(_GLF_IDENTITY(5628.3318, clamp(_GLF_IDENTITY(5628.3318, _GLF_IDENTITY((5628.3318) + 0.0, (false ? _GLF_FUZZED(64.93) : (5628.3318) + 0.0))), 5628.3318, 5628.3318))) : injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(10.87), clamp(_GLF_IDENTITY(_GLF_FUZZED(10.87), min(_GLF_FUZZED(10.87), _GLF_FUZZED(10.87))), _GLF_FUZZED(10.87), _GLF_FUZZED(10.87))))))) < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y))))
    {
     GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.w = GLF_merged2_0_1_13_1_1_6num_workgroupread_1.x;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-81.86)), float(injectionSwitch[1]), bool(true))))), (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y))))))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((false)), false || (bool((false)))), bool(bvec2(bool((false)), true))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 continue;
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false));
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.z = workgroup_size;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(cos(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(cos(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(sqrt(0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(sqrt(0.0), 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0, 1.0, 1.0, 0.0))).x, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(920.277) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) | (1)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (-18653 & 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)), injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, abs(0.0), 0.0, abs(0.0), 0.0, 0.0)), max(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, abs(0.0), 0.0, abs(0.0), 0.0, 0.0)), float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, abs(0.0), 0.0, abs(0.0), 0.0, 0.0)))))), true, false)), false || (bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))))))))) && true))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
        return;
      }
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) / 1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
              break;
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))) && true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
               break;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), max(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), uvec3(_GLF_IDENTITY(7u, (7u) / 1u))))) * uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(7u), uvec3(uvec3(uvec3(7u)))))) / uvec3(1u, 1u, 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), max(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), uvec3(_GLF_IDENTITY(7u, (7u) / 1u))))) * uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u))), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, clamp(7u, 7u, 7u))), _GLF_IDENTITY(uvec3(7u), uvec3(uvec3(uvec3(7u)))))) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (uvec3(1u, 1u, 1u)))))))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), max(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(7u, (false ? _GLF_FUZZED(137248u) : 7u)), (7u) / 1u)), uvec3(_GLF_IDENTITY(7u, _GLF_IDENTITY((7u), ~ (~ ((7u)))) / 1u))))) * uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(7u), uvec3(uvec3(uvec3(7u)))))) / uvec3(1u, 1u, 1u)), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), max(uvec3(_GLF_IDENTITY(7u, (7u) / 1u)), uvec3(_GLF_IDENTITY(7u, (7u) / 1u))))) * uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(uvec3(7u), _GLF_IDENTITY(uvec3(7u), uvec3(uvec3(uvec3(7u)))))) / uvec3(1u, 1u, 1u))) / uvec3(_GLF_IDENTITY(1u, (1u) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u, 1u))))) | (gl_WorkGroupID)).x;
 for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0)), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y = workgroup_id;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), mix(vec2((vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))[0], (vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), mat4(1.0) * (mat2x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0)))))[1]), vec2(_GLF_FUZZED(float(true)), _GLF_FUZZED(-6.1)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8672.4664), _GLF_FUZZED((-7.3 * 2165.3554))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.w = GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.y;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_DEAD(false)))))))), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), sqrt(vec2(1.0, 1.0)) * (injectionSwitch))) - vec2(0.0, 0.0)).x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED((-5.1)), _GLF_FUZZED(-7.2)), vec2(_GLF_IDENTITY(((injectionSwitch)), vec2(mat2x3(_GLF_IDENTITY(((injectionSwitch)), min(((injectionSwitch)), ((injectionSwitch)))), length(0.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), cos(0.0))))[0], (_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + sin(vec2(0.0, 0.0)))) - vec2(0.0, 0.0)))[1]), bvec2(true, true))))) - vec2(0.0, 0.0)).x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, sqrt(vec2(1.0, 1.0)) * (injectionSwitch))) - vec2(0.0, 0.0)).x)) > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint workgroup_base = GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.z * GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.w;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, clamp(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, 0u ^ (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z)))), min(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, 0u ^ (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z)))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, 0u ^ (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z)))), (_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z, 0u ^ (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z))))) | _GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))))) * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z * _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, ~ (~ (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id))).x)) + _GLF_IDENTITY(_GLF_struct_replacement_5.subgroup_local_id, (_GLF_struct_replacement_5.subgroup_local_id) | 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), min(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
   GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.y = virtual_gid;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), true, true), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, true))))))))))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      continue;
    }
   if(_GLF_DEAD(false))
    break;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(49630)), _GLF_FUZZED(-1.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(int(0))), 0, _GLF_IDENTITY(0, 0 ^ (0))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))), true && (_GLF_IDENTITY(_injected_loop_counter != 0, ! (_GLF_IDENTITY(! (_injected_loop_counter != 0), true && (! (_injected_loop_counter != 0))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) != 0, ! _GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))), _GLF_IDENTITY(bool(bvec4((_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))), false, true, true)), (bool(bvec4((_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))), false, true, true))) || false))), ((! (_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (0)), max(_GLF_IDENTITY(0, 0 ^ (0)), _GLF_IDENTITY(0, 0 ^ (0))))))) && true))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))), _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0)) | (_injected_loop_counter)))) != 0, ! _GLF_IDENTITY((! (_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0)))), ((! (_injected_loop_counter != _GLF_IDENTITY(0, 0 ^ (0))))) && true))))))), _GLF_IDENTITY(true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(! (! (_injected_loop_counter != 0)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_injected_loop_counter != 0), bool(bvec2(! (_injected_loop_counter != 0), false)))), _GLF_IDENTITY(false || (! (! (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(0, int(ivec4(0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-94203) : _GLF_IDENTITY(1, min(1, 1)))), (1 | (1 | 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))), false || (false || (! (! (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(0, int(ivec4(0, 1, (1 | (_GLF_IDENTITY(1 | 0, (1 | 0) | (1 | 0)))), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))))))))), ((! (_GLF_IDENTITY(! _GLF_IDENTITY((! (_injected_loop_counter != 0)), true && ((! (_injected_loop_counter != 0)))), _GLF_IDENTITY(false || (! (! (_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY(0, int(ivec4(0, 1, (1 | (1 | 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | (7))))))))))), false || (false || (! (! (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), (_GLF_IDENTITY(clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter), (clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) >> 0)) | 0)) != _GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 1, (1 | (1 | 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), ivec4(0, 0, 0, 0) + (_GLF_IDENTITY(ivec4(0, 1, (1 | (1 | 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), (ivec4(0, 1, (1 | (1 | 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) | (ivec4(0, 1, (1 | (1 | 0)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))))))))))))))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0)), (int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0))) | 0)) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0)), (int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0))) | 0)) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0)), (int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0))) | 0)) : _GLF_FUZZED(_injected_loop_counter)))) << 0)) << 0) != 0, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), int(_GLF_IDENTITY(8, int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec2(-17642, 78852)) : ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), 0)), (int(ivec4(_injected_loop_counter, _GLF_IDENTITY(1, (1) >> 0), (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0))) | 0)) : _GLF_FUZZED(_injected_loop_counter))), ~ (~ (_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec4(_injected_loop_counter, 1, (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) | 0), int(_GLF_IDENTITY(8, int(_GLF_IDENTITY(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec2(-17642, 78852)) : ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), 0)), (int(ivec4(_injected_loop_counter, _GLF_IDENTITY(1, (1) >> 0), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))))))), min(_GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, int(ivec2(8, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) / 1)), 0))) | 0)) : _GLF_FUZZED(_injected_loop_counter)))))) != 0) || false)))))))), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true) && (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true))) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), false || (! (_GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true && (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), bool(bool(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))))))), _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))), bool(bvec3(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false)), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))), bool(bvec3(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false)), false, true)))))), bool(bool((! _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))), bool(bvec3(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false)), false, true))))))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), false || ((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))), _GLF_IDENTITY(false || (! (! (_injected_loop_counter != 0))), bool(bvec4(false || (! (! (_injected_loop_counter != 0))), true, true, false)))))), bool(bool(! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), false || ((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))), _GLF_IDENTITY(false || (! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), bool(bvec4(false || (! (! (_injected_loop_counter != 0))), true, true, false))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-14730) : _injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! (_injected_loop_counter != 0))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-14730) : _injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! (_injected_loop_counter != 0)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-14730) : _injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! _GLF_IDENTITY((_injected_loop_counter != 0), bool(bool((_injected_loop_counter != 0)))))))))))))))), false || ((true && (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true))), false || ((_GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, false), true)))))))), true && (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), bool(bool(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))))), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false), _GLF_IDENTITY(true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))))))) && true)), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 23702)))))) != 0)) || false)), (true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(! (! (_injected_loop_counter != 0)), bool(_GLF_IDENTITY(bvec3(! (! (_injected_loop_counter != 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! (! (_injected_loop_counter != 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))) && true)), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY(true ? (_injected_loop_counter) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 23702)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? (_injected_loop_counter) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 23702)))))))) != 0)) || false))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_injected_loop_counter != 0)), false || (! (! (_injected_loop_counter != 0)))), false || (_GLF_IDENTITY(! (! (_injected_loop_counter != 0)), false || (! (! (_injected_loop_counter != 0)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), clamp((_injected_loop_counter), (_injected_loop_counter), (_injected_loop_counter))) * 1), _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))) != 0, ! (! _GLF_IDENTITY((_injected_loop_counter != 0), false || ((_injected_loop_counter != 0))))))))))))), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true) && (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true))) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || _GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)), false || (! (_GLF_IDENTITY(((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (((_GLF_IDENTITY(true, false || (true))) && _GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || false), ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, log(1.0) + (injectionSwitch.x)))) < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true && (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), bool(bool(bool(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))))))), _GLF_IDENTITY(! _GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))), bool(bvec3(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false)), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))), bool(bvec3(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false)), false, true)))))), bool(bool((! _GLF_IDENTITY((_injected_loop_counter != 0), _GLF_IDENTITY(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false, _GLF_IDENTITY(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), bool(bool(! (false))))))))))), bool(bvec3(bool(bool(((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false)), false, true))))))))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), false || ((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))), _GLF_IDENTITY(false || (! (! (_injected_loop_counter != 0))), bool(bvec4(false || (! (! (_injected_loop_counter != 0))), true, true, false)))))), bool(bool(! (! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))), false || ((_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)))))), _GLF_IDENTITY(false || (! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), bool(bvec4(false || (! (! (_injected_loop_counter != 0))), true, true, false))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-14730) : _injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! (_injected_loop_counter != 0))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-14730) : _injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! (_injected_loop_counter != 0)))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(-14730) : _injected_loop_counter)), clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0, ! (! _GLF_IDENTITY((_injected_loop_counter != 0), bool(bool((_injected_loop_counter != 0)))))))))))))))), false || ((true && (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true))), false || ((_GLF_IDENTITY(true, _GLF_IDENTITY(false, false || (false)) || (true))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, false), true)))))))), true && (injectionSwitch.x < injectionSwitch.y)))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), bool(bool(_injected_loop_counter != _GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY(! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))))), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0)) || false), _GLF_IDENTITY(true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))))))) && true)), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_injected_loop_counter), (true ? (_injected_loop_counter) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 23702)))))) != 0)) || false)), (true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0))))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))))), ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_GLF_IDENTITY(_injected_loop_counter != 0, _GLF_IDENTITY(! (! (_injected_loop_counter != 0)), bool(_GLF_IDENTITY(bvec3(! (! (_injected_loop_counter != 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! (! (_injected_loop_counter != 0)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))) && true)), ((_GLF_IDENTITY(_injected_loop_counter, ~ (~ _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY(true ? (_injected_loop_counter) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 23702)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : true ? (_injected_loop_counter) : _GLF_FUZZED(atomicExchange(_injected_loop_counter, 23702)))))))) != 0)) || false))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_injected_loop_counter != 0)), false || (! (! (_injected_loop_counter != 0)))), false || (_GLF_IDENTITY(! (! (_injected_loop_counter != 0)), false || (! (! (_injected_loop_counter != 0)))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY((_injected_loop_counter), clamp((_injected_loop_counter), (_injected_loop_counter), (_injected_loop_counter))) * 1), _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))) != 0, ! (! _GLF_IDENTITY((_injected_loop_counter != 0), false || ((_injected_loop_counter != 0)))))))))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0)) ^ (25186 & 0)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), false, true), bvec3(bvec4(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true))))), false, true), true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.z * GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x + ((_GLF_struct_replacement_5.subgroup_local_id + 1) % _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, max(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id, (uvec2(0u, 0u) << _GLF_IDENTITY(uvec2(7u), uvec2(7u))) | (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id)).x, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x, (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x) | (GLF_merged2_0_1_13_1_1_12subgroup_sizeworkgroup_id.x)))));
 uint read_1 = atomicLoad(buf[GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.y], 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) || false) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         GLF_merged2_0_1_13_1_1_6num_workgroupread_1.y = read_1;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), false)), true))))))));
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((273.660 - 7433.1902))), vec2(_GLF_FUZZED(61.90), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))) && true)), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
          return;
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5))), (((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(5), int(5))))) >> _GLF_IDENTITY(int(5), int(5)))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0 & 79127, (0 & 79127) << int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), min(int(8), int(8))))) | (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(4), int(4)), min(0 >> _GLF_IDENTITY(int(4), int(4)), 0 >> _GLF_IDENTITY(int(4), int(4)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY((bool(bvec2(false, true))) && true, bool(_GLF_IDENTITY(bvec2((bool(bvec2(false, true))) && true, _GLF_IDENTITY(true, bool(bvec3(true, true, true)))), bvec2(bvec3(bvec2((bool(bvec2(false, true))) && true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec4(bvec3(bvec3(true, true, true)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(true, true, true)), bvec3(bvec4(bvec3(bvec3(true, true, true)), true)))), true))))))), false)))))))));
        }
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(37114)))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(37114)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(37114))))) + 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
   GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.x = GLF_merged2_0_1_13_1_1_6num_workgroupread_1.y;
  }
 do
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(6), int(6))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (55249 & 0)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))))))
  {
  }
 else
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.x = GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.x;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), true, false, true)), bool(bvec2(bool(bvec4(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0)))), true, false, true)), false))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.x + 1, (GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.x + _GLF_IDENTITY(1, 0 + (1))) / 1u)), 4, 64, 4);
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            return;
           return;
          }
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))) || false) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true, false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false, false)))), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))) || false)), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))) || false) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true, false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false, false)))), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))) || false)), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))) || false) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true, false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false, false)))), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))) || false)))), ! (! (bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))) / 1.0) > injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false))))))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))) || false) || _GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), true, false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false, false)))), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))))))))) || false)))))))), false, true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) | (int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                return;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0, 1.0))).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       return;
      }
     return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec4(bvec2(true, true), true, true)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
            {
            }
           else
            {
             return;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_injected_loop_counter != 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint read_2 = atomicLoad(buf[GLF_merged2_0_3_62_3_1_13GLF_merged3_0_1_6_1_1_11_2_1_14read_1virtual_gidworkgroup_sizenum_workgroup.xyz.y], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true && (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         return;
        }
       else
        {
        }
      }
    }
   do
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)), true)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), min((1 & 1), (1 & 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   return;
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.y = read_2;
  }
 atomicStore(buf[next_virtual_gid], uint(GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.x + 1 == GLF_merged4_0_1_6_1_1_6_2_1_11_3_1_12read_1read_2subgroup_idworkgroup_id.y) + _GLF_IDENTITY(1, ~ (~ (1))), 4, _GLF_IDENTITY(64, (64) - 0), 4);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))))), true && (false))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), false, true))) || false))) && true))) && true));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
