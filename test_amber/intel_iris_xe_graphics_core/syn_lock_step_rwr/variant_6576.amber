#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 uint num_workgroup;
 bvec4 _f0;
 mat3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 _GLF_struct_1 _f1;
} ;

struct _GLF_struct_0 {
 uint next_virtual_gid;
 mat4 _f0;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, true, true, true)))))))) && (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, true, true, true)))))))) && (false)), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, true, true, true)))), (_GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, true, true, true))))) && true))))) && (false)))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (true && (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), false || (bool(bvec4(true, _GLF_IDENTITY(true, bool(bvec3(true, false, false))), true, true)))))))) && (false)), (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) && (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((false), true && ((false)))) || false)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(true, _GLF_IDENTITY((true), false || ((true))) && true))), true && (bool(bvec4(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(true, _GLF_IDENTITY((true), false || ((true))) && true))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0), (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - 0.0)) / abs(1.0)), 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(138.012))), ! _GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)), min(mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)), mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)))))) - 0.0) / 1.0))) * 1.0))))), (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)), min(mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)), mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)))))) - 0.0) / 1.0))) * 1.0))))), true && ((! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.3)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)), min(mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)), mix(_GLF_IDENTITY(float(injectionSwitch.y), float(mat2x4(float(injectionSwitch.y), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(9.3)), 1.0 * (float(_GLF_FUZZED(9.3)))), bool(false)))))) - 0.0) / 1.0))) * 1.0)))))))) && true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), bool(_GLF_IDENTITY(bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))), (bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))))) && true)))))))) || _GLF_IDENTITY(false, (false) && true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), bool(_GLF_IDENTITY(bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))), (bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))))) && true)))))))) || _GLF_IDENTITY(false, (false) && true)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), bool(_GLF_IDENTITY(bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))), (bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))))) && true)))))))) || _GLF_IDENTITY(false, (false) && true))))) && true)), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), bool(_GLF_IDENTITY(bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))), (bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))))) && true)))))))) || _GLF_IDENTITY(false, (false) && true)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))), bool(_GLF_IDENTITY(bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true)))), (bool(false || _GLF_IDENTITY((false), bool(bvec4((false), false, true, true))))) && true)))))))) || _GLF_IDENTITY(false, (false) && true))))) && true))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))), false)))), true && (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), bool(bool(! (! ((injectionSwitch.x > injectionSwitch.y)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(ivec2(1), _GLF_struct_1(gl_NumWorkGroups.x, bvec4(true), mat3(1.0), ivec3(1)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)), 0u) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))))).x, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(0u, 0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_id) : 0u)), 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, uint(uvec2(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 0u))), 1u))) | (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))) | (_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))))).x) / 1u);
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (workgroup_size * workgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (workgroup_size * _GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id)))), (_GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (workgroup_size * workgroup_id))) ^ 0u), _GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (workgroup_size * workgroup_id)), _GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u)))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false)))), true, false))))))), ((_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2((false) && true, false)))), true, false)))))))) && true) || false, ! (! ((_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))) || false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (6u) - 0u)) - 0u)))) ^ (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (true ? _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)))) : _GLF_FUZZED(subgroup_local_id))))), (~ (subgroup_id * subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (6u) - 0u)) - 0u)))) ^ (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (true ? _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)))) : _GLF_FUZZED(subgroup_local_id))))), (~ (subgroup_id * subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), min(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (6u) - 0u)) - 0u)))) ^ (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (true ? _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)))) : _GLF_FUZZED(subgroup_local_id))))), (~ (subgroup_id * subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (0u >> _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, (_GLF_IDENTITY(6u, (6u) - 0u)) - 0u)))) ^ (subgroup_id * subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (true ? _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)), (false ? _GLF_FUZZED(workgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), 1u, 0u, 1u)))) : _GLF_FUZZED(subgroup_local_id))))), (~ (subgroup_id * subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))), ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true)))), (! (_GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec2(! (! (false)), true)), (bool(bvec2(! (! (false)), true))) && true)))) || false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(roundEven(0.6)) : injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) * 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)) | 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / _GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, (1u) ^ 0u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u), 0u), (uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))) << (0u ^ (0u | 0u))))) >> 0u), 0u)) - uvec2(0u, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))) / 1u)))))), uint(uvec4(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)) << 0u)) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u), 0u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) ^ _GLF_IDENTITY(0u, min(0u, 0u))), (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)) * 1u) + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u)) / 1u), 0u)) - uvec2(0u, 0u))), 0u ^ (uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << 0u)) << 0u)) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u), 0u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), 0u | ((subgroup_local_id + 1))) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) / 1u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))) ^ _GLF_IDENTITY(0u, min(0u, 0u))), (subgroup_local_id + 1) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)) * 1u) + _GLF_IDENTITY(1, (1) | 0), (subgroup_local_id + 1) / 1u), uint(uvec2(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1))) / 1u), 1u))), _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) / 1u))))) >> 0u)) / 1u), 0u)) - uvec2(0u, 0u))))), 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)))) % _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))) / 1u)), _GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(523.900)), float(1.0), bool(true)))), _GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))))), transpose(transpose(transpose(transpose(mat4(1.0))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) ? _GLF_FUZZED(_GLF_IDENTITY(86873, max(86873, 86873))) : 4)), _GLF_IDENTITY(64, (64) + 0), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, clamp(64, 64, 64))) ^ 0), (_GLF_IDENTITY(64, (64) | (64))) | (64)), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))) || false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_DEAD(false), false, true))))) || false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_struct_replacement_0.next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (1))) | 0)))), (uint(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))), (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) >> 0u))) == read_2) + 1) + 0u), 4, 64, _GLF_IDENTITY(4, 0 + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-6685, ~ (~ (_GLF_IDENTITY(-6685, (-6685) ^ 0)))), max(_GLF_IDENTITY(-6685, ~ (~ (-6685))), _GLF_IDENTITY(-6685, ~ (~ (_GLF_IDENTITY(-6685, (-6685) | (-6685)))))))) : 4)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), ((0 << _GLF_IDENTITY(int(1), int(1)))) | ((0 << _GLF_IDENTITY(int(1), int(1))))) + _GLF_IDENTITY((_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-6685) : 4))), clamp((_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-6685) : 4))), (_GLF_IDENTITY(4, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(-6685), int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(-6685), 0), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_FUZZED(-6685), 0)), clamp(~ (ivec2(_GLF_FUZZED(-6685), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)))))))) : 4), ((false ? _GLF_IDENTITY(_GLF_FUZZED(-6685), int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(-6685), 0), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_FUZZED(-6685), 0)), clamp(~ (ivec2(_GLF_FUZZED(-6685), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)))))))) : 4)) | (_GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(-6685), int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(-6685), 0), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_FUZZED(-6685), 0)), clamp(~ (ivec2(_GLF_IDENTITY(_GLF_FUZZED(-6685), (_GLF_FUZZED(-6685)) >> 0), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)))))))) : 4), ((false ? _GLF_IDENTITY(_GLF_FUZZED(-6685), int(_GLF_IDENTITY(ivec2(_GLF_FUZZED(-6685), 0), ~ (_GLF_IDENTITY(~ (ivec2(_GLF_FUZZED(-6685), 0)), clamp(~ (ivec2(_GLF_FUZZED(-6685), 0)), ~ (ivec2(_GLF_FUZZED(_GLF_IDENTITY(-6685, max(-6685, -6685))), 0)), ~ (ivec2(_GLF_FUZZED(-6685), 0)))))))) : 4)) ^ 0))))), (_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-6685) : 4))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-6685, ~ (~ (-6685))), max(_GLF_IDENTITY(-6685, ~ (~ (-6685))), _GLF_IDENTITY(_GLF_IDENTITY(-6685, (-6685) ^ 0), ~ (~ (_GLF_IDENTITY(-6685, (-6685) | (-6685)))))))) : 4)), (0 << _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_FUZZED(-6685) : 4, 0 ^ (false ? _GLF_FUZZED(-6685) : 4)))))))) | _GLF_IDENTITY(0, max(0, 0)))));
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
