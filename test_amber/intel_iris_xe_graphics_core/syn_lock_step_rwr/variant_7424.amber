#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))), true && (bool(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), false))))))))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 0.0, 0.0, tan(0.0), determinant(_GLF_IDENTITY(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0) : _GLF_FUZZED(mat3(7.5, -9.5, 866.036, -7.7, -10.08, 66.19, -5041.8338, -42.60, 35.07))))), 1.0, 0.0, 0.0, 0.0)), (true ? float(mat3(injectionSwitch.x, 0.0, 0.0, tan(0.0), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(3.6)))) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-732.392) : injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true, false))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, ! (! (false)))))) && true), false, false, false)), true && _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false))), ((bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false)))) || false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, false))), ! (! ((bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true), false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true, true, true)), (bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), true, true, true))) || false)))))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false))))) && true), false, false, false))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false)), (bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false))) || false)))))), true && (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false)), (bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false))) || false)))))), ! (! (! ((_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))))), (bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true), _GLF_IDENTITY(false, false || (false)), false, false))) || false))))))))))))), true)))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0)))))[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((gl_NumWorkGroups.x) ^ 0u, ((gl_NumWorkGroups.x) ^ 0u) / (0u | 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), false, false)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), false, false)))))))), false || (false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), false, false))))))))))), true && (! (_GLF_IDENTITY(false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec4(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), false, false)))))))), false || (false || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), true, false)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), true), true, false))))))))), bvec2(bvec4(bvec2(bool(bool((injectionSwitch.x > injectionSwitch.y))), true), false, false))))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY((false), ((false)) || false)), bool(bvec4((_GLF_IDENTITY((false), ((false)) || false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false || _GLF_IDENTITY((! (_GLF_IDENTITY((false), ((false)) || false))), (_GLF_IDENTITY((! (_GLF_IDENTITY((false), ((false)) || false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY((false), ((false)) || false))), true && ((! (_GLF_IDENTITY((false), ((false)) || false))))), false || (_GLF_IDENTITY((! (_GLF_IDENTITY((false), ((false)) || false))), true && ((! (_GLF_IDENTITY((false), ((false)) || false)))))))), bool(bvec2(! (_GLF_IDENTITY((! (_GLF_IDENTITY((false), ((false)) || false))), true && ((! (_GLF_IDENTITY((false), ((false)) || false)))))), true)))))) || false))))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9718.0690)), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec4(3.0, -2.0, 64.48, -4.6), clamp(vec4(3.0, -2.0, 64.48, -4.6), vec4(3.0, -2.0, 64.48, -4.6), vec4(3.0, -2.0, 64.48, -4.6))).a), (injectionSwitch)[1]), bvec2(false, true))).y, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9718.0690)), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec4(3.0, -2.0, 64.48, -4.6), clamp(vec4(3.0, -2.0, 64.48, -4.6), vec4(3.0, -2.0, 64.48, -4.6), vec4(3.0, -2.0, 64.48, -4.6))).a), (injectionSwitch)[1]), bvec2(false, true))).y, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), tan(0.0))), mix(float(_GLF_FUZZED(782.871)), float(float(mat4x3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9718.0690)), vec2(_GLF_FUZZED(_GLF_IDENTITY(vec4(3.0, -2.0, 64.48, -4.6), clamp(vec4(3.0, -2.0, 64.48, -4.6), vec4(3.0, -2.0, 64.48, -4.6), vec4(3.0, -2.0, 64.48, -4.6))).a), (injectionSwitch)[1]), bvec2(false, true))).y, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), tan(0.0)))), bool(true)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true, true && ((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false))), true && (_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(false)))))))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) && true)))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(247.235) : injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-8143.1007)), bool(false))))), true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), _GLF_IDENTITY(0 ^ ((1 | 1)), _GLF_IDENTITY(0, max(0, 0)) + (0 ^ ((1 | 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-33.18)), bool(false)))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(bvec3(bool(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false))), false, false)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), false || (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)), _GLF_IDENTITY(true, true && (true)) && (bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))), bool(bvec3(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false, false))))) || false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(bvec3(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false, false)))), (bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(bvec3(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false, false))))) || false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), bool(bvec3(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), false, false)))), (bool(_GLF_IDENTITY(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))), _GLF_IDENTITY(bool(bvec3(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false)), ! (! (bool(bvec3(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false)))))))) || false)))) && true))) || false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) / determinant(mat4(1.0, 0.0, 0.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, sin(0.0), cos(0.0), 1.0, 0.0, 0.0, cos(0.0), 0.0, 1.0))) > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id * subgroup_size)), (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id * subgroup_size))) | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))) / 1u), subgroup_id)) * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)))))) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), false || (bool(bool((injectionSwitch.x < injectionSwitch.y))))))) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)))), false || (bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (bool(bvec4(_GLF_DEAD(false), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, 1 * (0))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), false || (_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), clamp(int(_GLF_IDENTITY(0, (0) ^ 0)), int(_GLF_IDENTITY(0, (0) ^ 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) ^ 0)), clamp(int(_GLF_IDENTITY(0, (0) ^ 0)), int(_GLF_IDENTITY(0, (0) ^ 0)), int(_GLF_IDENTITY(0, (0) ^ 0))))))))))), 0, 0))))), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_injected_loop_counter < (1 ^ 0)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (_GLF_IDENTITY(! (_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), (true ? _GLF_IDENTITY(1, (0 | 0) | (1)) : _GLF_FUZZED(81096))), _GLF_IDENTITY(1, (0 | 0) | (1)))) ^ 0)), (! (_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (0 | 0) | (1)), (true ? _GLF_IDENTITY(1, (0 | 0) | (1)) : _GLF_FUZZED(81096))), _GLF_IDENTITY(1, (0 | 0) | (1)))) ^ 0))) || false)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)) < (1 ^ 0))))))), ! (! _GLF_IDENTITY((_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0)), ((_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(1 ^ 0, ~ (~ (1 ^ 0)))), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter < (1 ^ 0)), bool(bvec4((_injected_loop_counter < (1 ^ 0)), true, true, false)))))))), ! (! (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_injected_loop_counter < (1 ^ 0)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < (1 ^ 0), ! (! (_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0))) | (1)) ^ 0), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0))) | (1)) ^ 0), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0))) | (1)) ^ 0), max((_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0))) | (1)) ^ 0), (_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0))) | (1)) ^ 0)))) << 0)))))))))))), ((! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0), 0 ^ ((_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0)))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true))), false || (true)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch))) / vec2(1.0, 1.0)).y))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(true, ! (! (true))) && (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true)))))))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true)))))))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false, bool(bvec2((_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), true)))))))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false, false))))))))))))))) && (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, (0) / 1)), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), (_injected_loop_counter < (1 ^ 0)) || false), false, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), (_injected_loop_counter < (1 ^ 0)) || false), false, false)), true))))))))))), bool(bvec4((_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(1, 1, 1)) ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_injected_loop_counter < (1 ^ 0)))))))), true, false, false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), (_GLF_IDENTITY((1 ^ 0), min((1 ^ 0), (1 ^ 0)))) ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0), (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, (0) | (0))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | _GLF_IDENTITY(0, (0) / 1)) | (1)) ^ 0))))), bool(bool((_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! _GLF_IDENTITY((_injected_loop_counter < (_GLF_IDENTITY(1, (0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, _GLF_IDENTITY(int(ivec4((0) / 1, (0 | 0), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | 0)) | (5))), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)), ~ (_GLF_IDENTITY(~ (int(ivec4((0) / 1, (0 | 0), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), min(int(3), int(3)))) | 0))) >> _GLF_IDENTITY(int(3), int(3))), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, int(ivec3(3, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 1)))) | (3))))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))), (true ? ~ (int(ivec4((0) / 1, (0 | _GLF_IDENTITY(0, ~ (~ (0)))), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))) : _GLF_FUZZED(-85664)))))))) | (1)) ^ 0)), _GLF_IDENTITY(bool(bvec3((_injected_loop_counter < (_GLF_IDENTITY(1, _GLF_IDENTITY((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, _GLF_IDENTITY(int(ivec4((0) / 1, (0 | 0), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)), ~ (_GLF_IDENTITY(~ (int(ivec4((0) / 1, (0 | 0), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))), (true ? ~ (int(ivec4((0) / 1, (0 | _GLF_IDENTITY(0, ~ (~ (0)))), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))) : _GLF_FUZZED(-85664)))))))) | (1), ((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, _GLF_IDENTITY(int(ivec4((0) / 1, (0 | 0), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)), ~ (_GLF_IDENTITY(~ (int(ivec4((0) / 1, (0 | 0), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))), (true ? ~ (int(ivec4((0) / 1, (0 | _GLF_IDENTITY(0, ~ (~ (0)))), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))) : _GLF_FUZZED(-85664)))))))) | (1)) ^ 0)) ^ 0)), true, false)), (bool(bvec3((_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) < (_GLF_IDENTITY(1, (0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) / 1, _GLF_IDENTITY(int(ivec4((0) / 1, (0 | 0), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | 0)) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0)), ~ (_GLF_IDENTITY(~ (int(ivec4((0) / 1, (0 | 0), ((_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), clamp(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) << (0 | 0)), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))), (true ? ~ (int(ivec4((0) / 1, (0 | _GLF_IDENTITY(0, ~ (~ (0)))), ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), 0))) : _GLF_FUZZED(-85664)))))))) | (1)) ^ 0)), true, false))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(5288.1842) : injectionSwitch.x)) > injectionSwitch.y)))))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < (1 ^ 0), ! (_GLF_IDENTITY(! (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0)), true && (! (_injected_loop_counter < (_GLF_IDENTITY(1, _GLF_IDENTITY((0 | 0) | (1), int(_GLF_IDENTITY(int((0 | 0) | (1)), (_GLF_IDENTITY(int((0 | 0) | (1)), (int((0 | 0) | (1))) / 1)) / 1)))) ^ 0))))))))))), ! (! ((! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < (1 ^ 0), ! (! (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0)))))), bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < (1 ^ 0), ! (! (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0)))))), false || (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) < (1 ^ 0), ! (! (_injected_loop_counter < (_GLF_IDENTITY(1, (0 | 0) | (1)) ^ 0))))))))))))))))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, false || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true) || (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ _GLF_IDENTITY(0, (0) / 1)), ! (! (_injected_loop_counter < (1 ^ 0)))))))), bool(bvec4((_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_GLF_IDENTITY(_injected_loop_counter < (1 ^ 0), ! (! (_injected_loop_counter < (_GLF_IDENTITY(1, (1) - int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))))))), true, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED(-52931) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, 0 | (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) * ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 0 ^ (int(4)))) / 1), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY((_injected_loop_counter ++) ^ 0, ((_injected_loop_counter ++) ^ 0) / 1)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) && true))), (false) && true), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), ! (! (! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))), (! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false)), ! (! (bool(bvec2(_GLF_IDENTITY((false), ! (! ((false)))), false)))))), false, true, false)))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, 1u * (read_1)) + _GLF_IDENTITY(1, (1) - 0)), 4, 64, _GLF_IDENTITY(4, 0 + (4)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]) | (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))), (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (buf[virtual_gid])), min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))) | (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * uint(_GLF_ONE(1.0, injectionSwitch.y)))], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_size), max(_GLF_FUZZED(workgroup_size), _GLF_FUZZED(workgroup_size))) : buf[virtual_gid])))), _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), clamp((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), max(_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), ((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))) | ((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))))))), _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), ~ (~ ((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))))))), _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]), max((false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]), (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | (_GLF_IDENTITY(buf[virtual_gid], min(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> 0u))))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), min((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), _GLF_IDENTITY((_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]), uint(uvec2((false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]), 0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u), virtual_gid))], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))), (false ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]), ((false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))))), (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), clamp(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), max(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid]))))))) | (_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(workgroup_size) : buf[virtual_gid])))))))))))), _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(80056, min(_GLF_IDENTITY(80056, (80056) | (80056)), 80056)))))) << 0), 4)) : _GLF_FUZZED((int(true) - -43559)))), 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool((false))))))), ((! (_GLF_IDENTITY(false, true && _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false)) && true)))), bool(bvec4(_GLF_IDENTITY((false), bool(bool((false)))), true, false, true)))))))))) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, min(4, 4)))), 64, _GLF_IDENTITY(4, ~ (~ (4))));
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
