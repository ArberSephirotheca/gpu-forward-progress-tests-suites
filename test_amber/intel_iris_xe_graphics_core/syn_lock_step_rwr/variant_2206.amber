#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), (bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))) && true)))), false, true, true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), ! (! (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))) && true))), true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(true)), ! (! (_GLF_IDENTITY(false || (_GLF_WRAPPED_IF_TRUE(true)), bool(bool(false || (_GLF_WRAPPED_IF_TRUE(true)))))))))) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, false), false, true))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), false, true))), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))).y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), bvec2(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), true, false))), false, true))), true))), bvec2(bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), bvec2(bvec4(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x < injectionSwitch.y, false), false, true))), false, true))), true))))))))))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9027.1684) : injectionSwitch.x)) : _GLF_FUZZED(tanh(6.4)))) < injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x < injectionSwitch.y), bool(bvec2(true && (injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, abs(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, abs(0.0)))) < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))) - 0.0), true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y), false || ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))), bool(bvec3(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec3(! ((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true, true))))), false, false), false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(! (true), bool(bvec4(_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! (true))), false || (bool(bool(! (true)))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false, false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(false), ! (! (bool(false))))))), ! (! (bool(_GLF_IDENTITY(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))))))))), true, true))))) && true)) && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(vec4(785.664, 6260.0147, _GLF_IDENTITY(-958.505, max(-958.505, -958.505)), 844.732), (false ? _GLF_FUZZED(vec4(6223.1362, -22.27, 968.292, 72.66)) : vec4(785.664, 6260.0147, -958.505, 844.732))).t)), 0.0 + (float(_GLF_FUZZED(_GLF_IDENTITY(vec4(785.664, 6260.0147, -958.505, 844.732), (false ? _GLF_FUZZED(vec4(6223.1362, -22.27, 968.292, 72.66)) : vec4(785.664, 6260.0147, -958.505, 844.732))).t)))), float(injectionSwitch.y), bool(true))))))), (((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(785.664, 6260.0147, -958.505, 844.732).t)), float(injectionSwitch.y), bool(true))), mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec4(785.664, 6260.0147, -958.505, 844.732).t)), float(injectionSwitch.y), bool(true)))), float(_GLF_FUZZED(726.042)), bool(false)))))))) && true), _GLF_IDENTITY(true, false || (true)), false)))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bvec3(bool(bool(_GLF_DEAD(false))), true, false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(-9304 & _GLF_IDENTITY(0, (0) - 0), (-9304 & _GLF_IDENTITY(0, (0) - 0)) ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))))), (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))))))) || false))), true)))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, _GLF_IDENTITY(7, int(ivec2(7, 1)))))), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)), 0 ^ (_GLF_IDENTITY(false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)), max(_GLF_IDENTITY(false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)), 1 * (false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)))), false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)))))))), min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-70153)))), clamp(false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-70153)))), false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-70153)))), false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(-70153)))))))), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1)))), _GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) * 1))), (1 & 1) * ((false ? _GLF_FUZZED(-51536) : _GLF_IDENTITY(1, 0 | (1))))))))))) % subgroup_size, _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) | 0u))))) % subgroup_size) + 0u, (((subgroup_local_id + 1) % subgroup_size) + 0u) << 0u))) | ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)) % subgroup_size)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y)) && (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))), ! (! (! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), (injectionSwitch[0]) / 1.0), injectionSwitch[1])).x))), (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(length(injectionSwitch)))), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1])), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8803.8704)), float(injectionSwitch.x), bool(true))) : _GLF_FUZZED(30.13)))))))), float(mat2(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), 1.0, 1.0, 1.0)))), 0 + (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))) ^ 0))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.4)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) - 0.0), _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.5), _GLF_FUZZED(9.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-37187) : int(3))))))))), (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) / ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) + 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))) && true) ? _GLF_FUZZED(-37187) : int(3)))))))))) && true)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))) || false))))
            barrier();
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + _GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))), 0u + (uint(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY((1) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(int(ivec2((1) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0)), (int(ivec2((1) / ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0))) | 0)))))), 4, 64, 4);
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, exp(0.0)), max(vec3(injectionSwitch, exp(0.0)), vec3(injectionSwitch, exp(0.0)))))).y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))), false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))))))) || false));
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == read_2, false || (read_1 + 1 == read_2))) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((0u | 0u) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, max(1, 1)) == read_2, false || _GLF_IDENTITY((read_1 + 1 == read_2), (_GLF_IDENTITY((read_1 + 1 == read_2), ((read_1 + 1 == read_2)) && true)) && true))) || false)), 1u * (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == read_2, false || (read_1 + 1 == read_2))) || false))))), ((0u | 0u) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), 0 | (max(1, 1)))) == read_2, false || (_GLF_IDENTITY(read_1 + 1, 0u | (_GLF_IDENTITY(read_1 + 1, max(_GLF_IDENTITY(read_1 + 1, (0u | 0u) | (read_1 + 1)), read_1 + 1)))) == read_2))) || false)), 1u * (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), read_1 + 1)) == read_2, false || (read_1 + _GLF_IDENTITY(1, ~ (~ (1))) == read_2))) || false)))))) | ((0u | 0u) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, _GLF_IDENTITY(0, ((-58156 >> -93166) & (0 >> _GLF_IDENTITY(int(5), int(5)))) | (0))) ^ (ivec2(1, 0))))))) == read_2, false || (read_1 + 1 == read_2))) || false)), 1u * (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == read_2, false || (_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) ^ 0u))) == read_2))) || false))))))))) - 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bool(read_1 + 1 == read_2))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec4(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)), 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) == read_2, bool(bool(read_1 + 1 == read_2)))) || false))) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec3(read_1 + 1 == read_2, true, true))))) - 0u)), uint(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u)), 1u, 0u, 0u), clamp(uvec4(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1 + 1, max(read_1 + 1, read_1 + 1)) == read_2)) - 0u)), 1u, 0u, 0u), uvec4(max(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false)), true && (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false))))), true)))), (uint(read_1 + 1 == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u)), 1u, 0u, 0u), uvec4(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))) >> 0u)) == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u)), 1u, 0u, 0u)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1, (read_1) / 1u) + 1 == read_2), (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == read_2, false || (read_1 + 1 == read_2))) || _GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((0u | _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) + 0u)))) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, max(1, 1)) == read_2, false || _GLF_IDENTITY((read_1 + 1 == read_2), (_GLF_IDENTITY((read_1 + 1 == read_2), ((read_1 + 1 == read_2)) && true)) && true))) || false)), 1u * (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + 1 == read_2, false || (read_1 + 1 == read_2))) || false))))), ((0u | 0u) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) - 0)) | (_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (0) - 0), 0))))) | (max(1, 1)))) == read_2, false || (_GLF_IDENTITY(read_1 + 1, 0u | (_GLF_IDENTITY(read_1 + 1, max(_GLF_IDENTITY(read_1 + 1, (0u | 0u) | (read_1 + 1)), read_1 + 1)))) == read_2))) || false)), 1u * (uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, min(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) | 0u), read_1 + 1)) == read_2, false || (read_1 + _GLF_IDENTITY(1, ~ (~ (1))) == read_2))) || false)))))) | ((0u | 0u) | (_GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1 == read_2, (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, _GLF_IDENTITY(0, ((-58156 >> -93166) & (0 >> _GLF_IDENTITY(int(5), int(5)))) | (0))) ^ (ivec2(1, 0))))))) == read_2, (read_1 + _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), int(_GLF_IDENTITY(ivec2(1, 0), ivec2(0, _GLF_IDENTITY(0, ((-58156 >> -93166) & (0 >> _GLF_IDENTITY(int(5), int(5)))) | (0))) ^ (ivec2(1, 0))))))) == read_2) || false), false || (read_1 + 1 == read_2))) || false)), 1u * (uint(_GLF_IDENTITY(read_1 + 1 == read_2, _GLF_IDENTITY((_GLF_IDENTITY(read_1 + 1 == read_2, false || (_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) ^ 0u))) == read_2))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(read_1 + 1 == read_2, false || (_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) ^ 0u))) == read_2)))), ! (! (! ((_GLF_IDENTITY(read_1 + 1 == read_2, false || (_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) ^ 0u))) == read_2))))))))) || false))))))))) - 0u), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bool(read_1 + 1 == read_2))), (_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1, uint(uvec4(_GLF_IDENTITY(read_1 + 1, min(read_1 + 1, read_1 + 1)), 0u, 0u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - 0u) : _GLF_FUZZED(subgroup_local_id)))))) == read_2, bool(bool(read_1 + 1 == read_2)))) || false))) - 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(read_1 + 1, ~ (_GLF_IDENTITY(~ (read_1 + 1), (~ (read_1 + 1)) - 0u))) == read_2), (uint(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec3(read_1 + 1 == read_2, true, true))))) - 0u)), uint(_GLF_IDENTITY(uvec4(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u)), 1u, 0u, 0u), clamp(uvec4(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1, max(read_1, _GLF_IDENTITY(read_1, (read_1) | (read_1)))) + 1, max(read_1 + 1, read_1 + 1)) == read_2)) - 0u)), 1u, 0u, 0u), uvec4(max(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false)), true && (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false))))), true))), bool(bool(_GLF_IDENTITY(read_1 + 1 == read_2, bool(bvec4(read_1 + 1 == read_2, true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false)), true && (bool(bvec2(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), false))))), true))))))), (uint(read_1 + 1 == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u)), 1u, 0u, 0u), uvec4(_GLF_IDENTITY(max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))) >> 0u)) == read_2)) - 0u), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u)), (max(_GLF_IDENTITY(uint(read_1 + 1 == read_2), _GLF_IDENTITY((uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))) >> 0u)) == read_2)) - 0u, ~ (~ ((uint(_GLF_IDENTITY(read_1 + 1, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(read_1 + 1, (read_1 + 1) / (((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))) & 1u)), 1u, 0u, 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))))) / 1u))), (uint(_GLF_IDENTITY(uvec4(read_1 + 1, 1u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u), (_GLF_IDENTITY(uvec4(read_1 + 1, 1u, 0u, 0u), min(uvec4(read_1 + 1, 1u, 0u, 0u), uvec4(read_1 + 1, 1u, 0u, 0u)))) ^ uvec4(0u, 0u, 0u, 0u)))) >> 0u)) == read_2)) - 0u)))), _GLF_IDENTITY(uint(read_1 + 1 == read_2), (uint(read_1 + 1 == read_2)) - 0u))) / 1u), 1u, 0u, 0u))))))))) + 1, 4, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, 0 | (64)), 64))) | (64), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, 0 | (64)), 64))) | (64), (_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 0, ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))), (false ? _GLF_FUZZED(ivec4(99618, 79486, 77813, 35223)) : _GLF_IDENTITY(ivec4(0, 0, 0, ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))), (ivec4(0, 0, 0, ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))) >> _GLF_IDENTITY(int(0), int(0))))) / ivec4(1, 1, 1, 1)))))) ^ 1) * ((_GLF_IDENTITY(64, min(_GLF_IDENTITY(64, 0 | (64)), 64))) | (64))), 0, 0)))), 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
