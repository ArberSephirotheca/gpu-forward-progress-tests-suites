#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false))));
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), (! _GLF_IDENTITY((! (true)), ((! (true))) || false)) || false))))), (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) && true)) || false)))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(1, int(ivec2(1, 1))) ^ 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) | (1 ^ 1)) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), (false ? _GLF_FUZZED(ivec2(-81885, -66545)) : _GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), (_GLF_IDENTITY(_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), ivec2(ivec4(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 0, 0))), (_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), ivec2(ivec4(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 0, 0)))) | (_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), ivec2(ivec4(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 0, 0)))))) | (ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1)))))), clamp(int(_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), (_GLF_IDENTITY(false ? _GLF_FUZZED(ivec2(-81885, -66545)) : ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), ivec2(_GLF_IDENTITY(ivec3(false ? _GLF_FUZZED(ivec2(-81885, -66545)) : ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 1), ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), max(_GLF_FUZZED(ivec2(-81885, -66545)), _GLF_FUZZED(ivec2(-81885, -66545)))) : ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 1), min(ivec3(false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), max(_GLF_FUZZED(ivec2(-81885, -66545)), _GLF_FUZZED(ivec2(-81885, -66545)))) : ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 1), ivec3(false ? _GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), max(_GLF_FUZZED(ivec2(-81885, -66545)), _GLF_FUZZED(ivec2(-81885, -66545)))) : ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), 1)))))))))), int(_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1), (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), (_GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), max(_GLF_FUZZED(ivec2(-81885, -66545)), _GLF_FUZZED(ivec2(-81885, -66545))))) | (_GLF_FUZZED(ivec2(-81885, -66545)))), min(_GLF_IDENTITY(_GLF_FUZZED(ivec2(_GLF_IDENTITY(-81885, min(_GLF_IDENTITY(-81885, 0 ^ (_GLF_IDENTITY(-81885, max(-81885, -81885)))), -81885)), -66545)), (_GLF_FUZZED(ivec2(-81885, -66545))) | (_GLF_FUZZED(ivec2(_GLF_IDENTITY(-81885, clamp(-81885, -81885, _GLF_IDENTITY(-81885, (-81885) ^ 0))), -66545)))), _GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), clamp(_GLF_IDENTITY(_GLF_FUZZED(ivec2(-81885, -66545)), (false ? _GLF_FUZZED(ivec2(43465, 51450)) : _GLF_FUZZED(ivec2(-81885, -66545)))), _GLF_FUZZED(ivec2(-81885, -66545)), _GLF_FUZZED(ivec2(-81885, -66545)))))) : ivec2(0 >> _GLF_IDENTITY(int(0), int(0)), 1)))), int(_GLF_IDENTITY(ivec2(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (int(0))), ((~ (int(0)))) >> 0)), int(0)), 1), (false ? _GLF_FUZZED(ivec2(-81885, -66545)) : ivec2(_GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(0), int(0)), 1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), min((1 << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))))) | ((1 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) & 1), max(_GLF_IDENTITY((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) / 1), (int(5)) ^ 0))) & 1), min((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0))) & 1), (((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(int(5)))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), max((int(5)), (int(5)))) ^ 0), (true ? _GLF_IDENTITY(int(5), (int(5)) ^ 0) : _GLF_FUZZED(_injected_loop_counter))))) & 1))), (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, 5))), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ _GLF_IDENTITY(0, max(0, 0))))) >> 0)) & 1)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) ^ 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.21), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.9)), bvec2(_GLF_IDENTITY(true, bool(bvec2(true, false))), false))), sqrt(1.0), 1.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 0.0), (false ? _GLF_FUZZED((-4938.4754 - mat3(7.8, -2.4, -4.1, -58.46, -37.78, 373.342, -1.3, 7.4, -65.08))) : mat3(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-38.21), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6.9)), bvec2(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec4(bool(bvec3(false, true, false)), false, false, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec4(bool(bvec3(false, true, false)), false, false, true))), false), true, true))))))))), sqrt(1.0), 1.0, round(length(normalize(1.0))), 1.0, 1.0, 0.0, 0.0))))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)) / round(length(normalize(1.0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0))))))).y))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y) - 0.0)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bvec4(false || (true), false, false, false)), false || (bool(bvec4(false || (true), false, false, false)))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id));
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u) + (_GLF_IDENTITY((subgroup_local_id + 1), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u), (0u | 0u) ^ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)))))) % subgroup_size), uint(uvec2(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u) + (_GLF_IDENTITY((subgroup_local_id + 1), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u), (0u | 0u) ^ (_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) - 0u)))))) % subgroup_size), (0u >> _GLF_IDENTITY(uint(5u), uint(5u))))));
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) | (4)), _GLF_IDENTITY(4, (4) << 0), 4))) | (_GLF_IDENTITY(4, _GLF_IDENTITY((4), 0 ^ ((4))) << 0))), 4, 4)), 64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY((0), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((0), 0 ^ ((0))), ~ (~ ((0)))))) / 1));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(-32721)))) >> 0)) ^ (0 | 0)) != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(-4.9) : injectionSwitch.y, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-4.9) : injectionSwitch.y, mix(float(_GLF_FUZZED(9508.4570)), float(false ? _GLF_FUZZED(-4.9) : injectionSwitch.y), bool(true))), false ? _GLF_FUZZED(-4.9) : injectionSwitch.y, false ? _GLF_FUZZED(-4.9) : injectionSwitch.y))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat3(mat2(1.0) * (injectionSwitch), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 0.0, 0.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))))).y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(read_1 + 1), max(uint(read_1 + 1), uint(read_1 + 1))), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), true))))))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6.5)), vec2(_GLF_FUZZED(-48.09), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(31443))), 1)), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bool(bool(bvec3(false, false, true))))))));
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | (_GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, (1 & (1 & 1)), 1)), int(int(int(ivec3(1, (1 & (1 & 1)), 1)))))), 1, 0), _GLF_IDENTITY((ivec4(0, 1, 1, 0)), ((ivec4(0, 1, 1, 0))) | ((ivec4(0, 1, 1, 0)))) | (ivec4(0, 1, 1, _GLF_IDENTITY(0, int(int(0))))))))), ((0)) | (_GLF_IDENTITY((0), (false ? _GLF_FUZZED(-3698) : (0))))))) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY(int(7), int(7))))), 0 ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY(int(7), int(7))))), int(ivec2(~ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (int(7)))), int(7))))), 1))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < 1, true), bvec2(bvec3(bvec2(_injected_loop_counter < 1, true), false)))), (bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < 1, true), bvec2(bvec3(bvec2(_injected_loop_counter < 1, true), false))))) && true))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), ! (! (_GLF_IDENTITY(((false)), (((false))) && true)))) || false)))))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))), true)), bool(bool(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true)), true, false, false)))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false))), ! (! ((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(8.4, (8.4) + 0.0))), float(injectionSwitch.y), bool(true)), min(mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))))) ^ 0, clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, min(0, 0))], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY((+ vec3(-7578.2395, 51.54, -7.1)), clamp((+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)))).z, (false ? _GLF_FUZZED(-324.565) : _GLF_IDENTITY((+ vec3(-7578.2395, 51.54, -7.1)), clamp((+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)))).z))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-9.1), ((injectionSwitch))[1]), _GLF_IDENTITY(vec2((_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(140.944), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(float(140435u))), bvec2(true, false))))[0], _GLF_FUZZED(vec3(-1790.4967, -8.1, 0.0).g)), min(vec2((_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(140.944), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(float(140435u))), bvec2(true, false))))[0], _GLF_FUZZED(vec3(-1790.4967, -8.1, 0.0).g)), _GLF_IDENTITY(vec2((_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(140.944), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(float(140435u))), bvec2(true, false))))[0], _GLF_FUZZED(vec3(-1790.4967, -8.1, 0.0).g)), max(vec2((_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(140.944), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(float(140435u))), bvec2(true, false))))[0], _GLF_FUZZED(vec3(-1790.4967, -8.1, 0.0).g)), vec2((_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(140.944), ((injectionSwitch))[1]), vec2(((injectionSwitch))[0], _GLF_FUZZED(float(140435u))), bvec2(true, false))))[0], _GLF_FUZZED(vec3(-1790.4967, -8.1, 0.0).g)))))), bvec2(true, false)))[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, (false ? _GLF_FUZZED(distance(vec4(0.4, -487.468, 2.5, -541.254), vec4(-5569.7571, 4833.3412, 0.3, -795.341))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, 0.0 + (-7.1)))), (true ? (+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, 0.0 + (-7.1)))) : _GLF_FUZZED(log(vec3(-3813.6458, 6265.0174, 0.0))))), clamp((+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, clamp(-7.1, -7.1, _GLF_IDENTITY(-7.1, max(-7.1, -7.1)))))), (+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)))).z, mix(float(_GLF_IDENTITY(_GLF_IDENTITY((+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, 0.0 + (-7.1)))), (true ? (+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, 0.0 + (-7.1)))) : _GLF_FUZZED(log(vec3(-3813.6458, 6265.0174, 0.0))))), clamp((+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, clamp(-7.1, -7.1, _GLF_IDENTITY(-7.1, max(-7.1, -7.1)))))), (+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)))).z), float(_GLF_FUZZED(-7422.4515)), bool(false))), (false ? _GLF_FUZZED(-324.565) : _GLF_IDENTITY((+ vec3(-7578.2395, _GLF_IDENTITY(51.54, clamp(51.54, 51.54, _GLF_IDENTITY(51.54, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(51.54, float(mat4(51.54, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), float(mat4(float(mat3(_GLF_IDENTITY(51.54, float(mat4(51.54, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), cos(0.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), -7.1)), clamp((+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(-7578.2395, 51.54, -7.1)), (+ vec3(_GLF_IDENTITY(-7578.2395, sqrt(0.0) + (-7578.2395)), 51.54, -7.1)))).z))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-9.1), ((injectionSwitch))[1]), vec2(_GLF_IDENTITY(((injectionSwitch)), clamp(((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), (((injectionSwitch))) + vec2(0.0, 0.0)), ((injectionSwitch))))[0], _GLF_FUZZED(vec3(-1790.4967, -8.1, 0.0).g)), bvec2(true, false)))[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y)), mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, max(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, _GLF_IDENTITY(51.54, mix(float(51.54), float(_GLF_FUZZED((-5147.7278 + -2.5))), bool(_GLF_IDENTITY(false, (false) || false)))), -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, (false ? _GLF_FUZZED(-2.0) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, _GLF_IDENTITY(51.54, mix(float(51.54), float(_GLF_FUZZED((-5147.7278 + -2.5))), bool(_GLF_IDENTITY(false, (false) || false)))), -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y)), mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, (-7.1) - tan(0.0)))).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true)), _GLF_IDENTITY(float(vec3(mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true)), sin(0.0), 0.0)), (float(vec3(mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true)), sin(0.0), 0.0))) + 0.0))))) ^ 0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))), (false ? _GLF_FUZZED(-64.91) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-458.299), _GLF_ONE(1.0, injectionSwitch.y) * (_GLF_FUZZED(-458.299)))), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))))), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (injectionSwitch)[0] : _GLF_FUZZED(-4.5))), _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true)))))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), max((1 << _GLF_IDENTITY(int(5), int(5))), (1 << _GLF_IDENTITY(int(5), int(5)))))) - 0)))) >> _GLF_IDENTITY(int(5), int(5))))) | (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))))) ^ 0, min(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-458.299), _GLF_IDENTITY(sqrt(0.0) + (_GLF_FUZZED(-458.299)), (sqrt(0.0) + (_GLF_FUZZED(-458.299))) - 0.0))), clamp(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-458.299), _GLF_IDENTITY(sqrt(0.0) + (_GLF_FUZZED(-458.299)), (sqrt(0.0) + (_GLF_FUZZED(-458.299))) - 0.0))), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-458.299), _GLF_IDENTITY(sqrt(0.0) + (_GLF_FUZZED(-458.299)), (sqrt(0.0) + (_GLF_FUZZED(-458.299))) - 0.0))), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-458.299), _GLF_IDENTITY(sqrt(0.0) + (_GLF_FUZZED(-458.299)), (sqrt(0.0) + (_GLF_FUZZED(-458.299))) - 0.0))))), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))), (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-458.299), sqrt(0.0) + (_GLF_FUZZED(-458.299)))), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true)))))) >> 0) ^ 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, ! (! (true)))))))) ^ 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, _GLF_IDENTITY(-7.1, (false ? _GLF_FUZZED(6533.9302) : -7.1)))).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(true))))) ^ 0, _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, (int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(8.4, max(8.4, 8.4)))), float(injectionSwitch.y), bool(true))))) ^ 0) * 1))), max(_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), _GLF_IDENTITY(vec2(mat3x4(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0)), (true ? vec2(mat3x4(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0)) : _GLF_FUZZED(vec2(2.7, -3343.8839))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0)), _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, clamp(int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0, int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ vec3(-7578.2395, 51.54, -7.1)).z), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-458.299)), bvec2(true, false))).y, mix(float(_GLF_FUZZED(8.4)), float(injectionSwitch.y), bool(true))))) ^ 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), true && (bool(bvec4(false, false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true))))))))))) || false), (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true)))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               for(int _injected_loop_counter = (0 | _GLF_IDENTITY(0, (0) * 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, true, true)), ! (! (bool(bvec4(true, false, true, true))))))) || false), (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))) || _GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 ^ (1))) >> (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(2)))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec3(int(6), 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY((1 | 0), clamp((1 | 0), (1 | 0), (1 | 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), 0 | (0 << _GLF_IDENTITY(int(7), int(7)))) : _GLF_FUZZED(_injected_loop_counter))), 0 << _GLF_IDENTITY(int(7), int(7)), 0 << _GLF_IDENTITY(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false))))) || false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(min(injectionSwitch, 55.50)))).y)), true, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true))))), false, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true))))), false, false, true)))), (_GLF_IDENTITY(! (! (bool(bvec4(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true))))), false, false, true)))), (! (! (bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true)))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_IDENTITY(true, ! (! (true)))))), false))))), false, false, true))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)) || false)))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y))))), false, true), false)))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 0.0))) > injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0))) > injectionSwitch.y))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), bvec2(bvec4(bvec2(_GLF_WRAPPED_IF_FALSE(false), false), true, true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))), false, _GLF_IDENTITY(true, (true) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).y))))))))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))) || false)))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
