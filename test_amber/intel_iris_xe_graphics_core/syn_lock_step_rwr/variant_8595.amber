#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bool(! (_GLF_IDENTITY(false, (false) && true)))))) && true)))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y) / 1.0), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-770.290), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(319.688)), bvec2(true, false))).y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(93.64))))) > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0))), transpose(_GLF_IDENTITY(transpose(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0)))), mat3(1.0) * (transpose(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, abs(0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, length(vec3(0.0, 0.0, 0.0))))))))))))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), true), false)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), _GLF_IDENTITY(uvec3(2u), (uvec3(2u)) + uvec3(0u, 0u, 0u)))) + (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), max((gl_WorkGroupSize), (gl_WorkGroupSize))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_size)))))) ^ uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))))))), uvec3(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(189709u, 187101u, 41887u)))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) << 0u))), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize))) | uvec3(0u, 0u, 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(gl_WorkGroupSize, 1u)))) ^ (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))) | uvec3(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u)), _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))), 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec3(27242u, 110294u, 134159u)) : ~ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) + 0u))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(74454u, 94766u, 108120u)) : false ? _GLF_FUZZED(uvec3(27242u, 110294u, 134159u)) : ~ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u))))))))), _GLF_IDENTITY(uvec3(uvec3(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], _GLF_IDENTITY(uint(uvec3(gl_WorkGroupSize[2], 0u, 0u)), ~ (~ (uint(uvec3(gl_WorkGroupSize[2], 0u, 0u))))))))), max((_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], _GLF_IDENTITY(uint(uvec3(gl_WorkGroupSize[2], 0u, 0u)), ~ (~ (uint(uvec3(gl_WorkGroupSize[2], 0u, 0u))))))))), (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], _GLF_IDENTITY(gl_WorkGroupSize[2], _GLF_IDENTITY(uint(uvec3(gl_WorkGroupSize[2], 0u, 0u)), ~ (~ (uint(uvec3(gl_WorkGroupSize[2], 0u, 0u))))))))))) | uvec3(0u, 0u, 0u))) | uvec3(0u, 0u, 0u)))), (false ? _GLF_FUZZED(uvec3(27242u, 110294u, 134159u)) : ~ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u))))))))), (uvec3(uvec3(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))), (false ? _GLF_FUZZED(uvec3(27242u, 110294u, 134159u)) : ~ ((_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | uvec3(0u, 0u, 0u)))))))))) << uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec4(bvec2(false, true), false, true)))))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u) * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, min(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) | ((subgroup_id * subgroup_size))) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(40.08)), vec2(_GLF_FUZZED((362.529 - vec3(5.8, -64.09, -7.8).s)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x, float(mat3x4(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(40.08)), vec2(_GLF_FUZZED((362.529 - vec3(5.8, -64.09, -7.8).s)), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).x, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(tan(vec3(0.0, 0.0, 0.0))), 0.0, _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0), vec3(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 1.0))), 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))))), max(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x))))))), subgroup_id * _GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 1u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y))), (uvec3(subgroup_size, 1u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)))) * uvec3(1u, 1u, 1u)))))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + sin(0.0)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(workgroup_base) : subgroup_local_id));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(virtual_gid))))) + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, 0u + ((subgroup_local_id + 1) % subgroup_size))), max(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, ((0 & 90025) << _GLF_IDENTITY(int(8), int(8))) | (1))) % subgroup_size)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), clamp(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), uint(_GLF_IDENTITY(uvec3(_GLF_FUZZED(workgroup_id), 1u, (1u & 1u)), ~ (~ (uvec3(_GLF_FUZZED(workgroup_id), 1u, (1u & 1u))))))) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), clamp(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), clamp(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), clamp(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), clamp(_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid))), _GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid)))))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))], ~ (_GLF_IDENTITY(~ (buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))).y), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))), (_GLF_IDENTITY(vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - vec4(0.0, 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(vec4(injectionSwitch, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 0.0, 0.0, 0.0))))), injectionSwitch.y)), vec4(injectionSwitch, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))).y)) || false)))) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid)))))]), (~ (buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid)))))])) | (~ (buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((virtual_gid), max((virtual_gid), _GLF_IDENTITY((virtual_gid), ((virtual_gid)) ^ 0u))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 0.0, 0.0, 1.0, exp(sin(0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))))), mat3x4(mat4(mat3x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), length(vec4(0.0, 0.0, 0.0, 0.0)), sqrt(1.0), 1.0, 0.0, 0.0, 1.0, exp(sin(0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))))) > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_id) : ~ (virtual_gid)))))]))))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (! (! (false))))), true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), true && ((! (false)))), _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(vec3(_GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) * vec2(1.0, 1.0)), 1.0)))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (_GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, true, false))))))))), _GLF_IDENTITY(true && (false), true && (true && (false)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, false))), true, true, true))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (! (! (false))))), true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (! (! (false))))), true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (! (! (false))))), true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false) || (! (! (false))))), true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))), false, false)))))))) && true), false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false) && true, ! (! ((false) && true)))), true, false, true)))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((false) && true, ! (! ((false) && true)))), true, false, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))) && true), (false) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), _GLF_IDENTITY(bool(bvec4(bool(bool(! (false))), false, false, false)), bool(bvec2(bool(bvec4(bool(bool(! (false))), false, false, false)), true)))))), true && ((_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), _GLF_IDENTITY(bool(bvec4(bool(bool(! (false))), false, false, false)), bool(bvec2(bool(bvec4(bool(bool(! (false))), false, false, false)), true)))))))))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(false, ! (! (false)))) && true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && _GLF_IDENTITY(true, (true) || false))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(((_GLF_IDENTITY(false, ! (! (false))))), (((_GLF_IDENTITY(false, ! (! (false)))))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), true)))) && true), _GLF_IDENTITY((false) && true, ! (! ((false) && true)))))))))))) || false))))))) || false)), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, (false) || false))), false || (false)))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, (false) && true))), false || (! (bool(_GLF_IDENTITY(false, (false) && true)))))))) || false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bool((false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), true && (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))) && true), (false) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true))))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y))))) && true), (false) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ((_GLF_IDENTITY(false, ! (! (false))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), (false) && true)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))), ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), ! (! (! (false))))), (bool(_GLF_IDENTITY(! (false), ! (! (! (false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), injectionSwitch)).y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))) && true), (false) && true)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))), bool(bvec4(((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))), false, false, false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, true && (true))), (false) && _GLF_IDENTITY(true, true && (true))))))))))) || false))))))))) || false)), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)), (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), true)), false))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, false || (false)), false, false), true)), false))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bvec2(false, false)))) && true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))))), false || (! _GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), ((bool(_GLF_IDENTITY(false, (false) && true)))) || false)) && true)))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))))), bool(bool(_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))))), ! (! (! (bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true)))))))))))))), false || (! _GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), ((bool(_GLF_IDENTITY(false, (false) && true)))) || false)) && true), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(false, (false) && true))), ((bool(_GLF_IDENTITY(false, (false) && true)))) || false)) && true)))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, ! (! (false))))), (! ((_GLF_IDENTITY(false, ! (! (false)))))) && true))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec3(bvec2(! (! (false)), false), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec2(! (! (false)), false), bvec2(bvec3(bvec2(! (! (false)), false), true)))), false, true, false)))))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + 1 == read_2) + 1, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
