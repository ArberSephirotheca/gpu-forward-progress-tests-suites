#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(bool(_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), true, true)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.w = subgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 1.0))))).x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2850.2372) : injectionSwitch.x)) > injectionSwitch.y))))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch)))), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 1.0))), max(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch)))), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 1.0))), (_GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch)))), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 1.0)))) - vec2(0.0, 0.0)), _GLF_IDENTITY((injectionSwitch), vec2(mat3x4(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - _GLF_IDENTITY(vec2(0.0, 0.0), (true ? vec2(0.0, 0.0) : _GLF_FUZZED(injectionSwitch)))), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 1.0))))), _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-9.9), _GLF_IDENTITY(_GLF_FUZZED(-452.567), max(_GLF_FUZZED(-452.567), _GLF_FUZZED(-452.567)))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), true))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), true, true))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat2(length(0.0), 0.0, tan(0.0), 0.0)))), (vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, tan(0.0), 1.0, determinant(mat2(length(0.0), 0.0, tan(0.0), 0.0))))) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), bool(bvec2(false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))))))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))) * uvec3(1u, 1u, 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups), uvec3(uvec3(uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups))))))) * uvec3(1u, 1u, 1u))) >> uvec3(0u, 0u, 0u)) + _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u))), max(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.y = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(gl_WorkGroupID[0], min(gl_WorkGroupID[0], gl_WorkGroupID[0])), gl_WorkGroupID[1], gl_WorkGroupID[_GLF_IDENTITY(2, min(2, 2))])).x, _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) >> 0u)));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), ! (! (false || (_GLF_IDENTITY(false, ! (! (false))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u), max(_GLF_IDENTITY(workgroup_size, (workgroup_size) + _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_id)))) | (0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) + 0u), (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size))) + 0u)) + 0u)) | 0u))), workgroup_size)) * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) << _GLF_IDENTITY(0u, (0u) - 0u))) ^ 0u), (true ? _GLF_IDENTITY(workgroup_base, 1u * _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u)))), clamp((_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u)))), (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u)))), (_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 1u, 0u))))))) - 0u)) : _GLF_FUZZED(uint(515.081)))) + GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.w * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)) && true, ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, 0 | (0))], injectionSwitch[1])).x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), false))))))))) && true)))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))])).x > injectionSwitch.y)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), bool(bvec2(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))])).x > injectionSwitch.y)) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), true))))))), false || (bool(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))]), (_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))]), vec2(mat2x3(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))]), (vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))])) + vec2(0.0, 0.0)), cos(0.0), 0.0, 0.0, 1.0)))) * vec2(1.0, 1.0))).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))]), (_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))]), vec2(mat2x3(_GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))]), (vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), _GLF_IDENTITY(1, max(1, 1)), 1))])) + vec2(0.0, 0.0)), cos(0.0), 0.0, 0.0, 1.0)))) * vec2(1.0, 1.0))).x > injectionSwitch.y)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! _GLF_IDENTITY((true), bool(bvec2((true), true))), true && (! (true))))))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, true && (false)), false, false), true))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false))), true)))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, length(sin(vec3(0.0, 0.0, 0.0))))), mix(vec2(_GLF_FUZZED((3849.7794 - -7.7)), _GLF_FUZZED(-0.0)), vec2((vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, length(sin(vec3(0.0, 0.0, 0.0))))))[0], (vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, length(sin(vec3(0.0, 0.0, 0.0))))))[1]), bvec2(true, true)))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, length(sin(vec3(0.0, 0.0, 0.0)))))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, length(sin(vec3(0.0, 0.0, 0.0)))))).x)) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], mix(float(_GLF_FUZZED(-9739.0601)), float(injectionSwitch[0]), bool(true))), injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, false)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), false, false, false)), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.w * subgroup_size, min(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.w * subgroup_size, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.w * subgroup_size, 0u | (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.w * subgroup_size)))) + ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(uint(uint(subgroup_local_id + 1)), (uint(uint(subgroup_local_id + _GLF_IDENTITY(1, (1) << 0)))) << 0u), (_GLF_IDENTITY(uint(uint(subgroup_local_id + 1)), (uint(uint(subgroup_local_id + 1))) << 0u)) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), uint(uvec3(_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(workgroup_id))), uint(_GLF_ONE(1.0, injectionSwitch.y)), (0u ^ 0u)))), uint(uvec2(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)), 1u))), _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) ^ 0u))) * (subgroup_local_id)) + 1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uint(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_id))), workgroup_id)))), ~ (~ (_GLF_IDENTITY((true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_id))), workgroup_id)))), ((true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(subgroup_id))), workgroup_id))))) / 1u)))))), min(uint(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1))), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1), _GLF_IDENTITY(~ (~ (uint(subgroup_local_id + 1))), (true ? ~ (~ (uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1))))) : _GLF_FUZZED(virtual_gid)))))))) << 0u))), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uint(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), (clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)) >> 0))))) / 1) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) | 0u), 0u, 1u, 0u)))))), min(uint(subgroup_local_id + 1), _GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, (1) + 0)), ~ (~ (uint(subgroup_local_id + 1)))))))) << 0u))), max(~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uint(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))) : _GLF_FUZZED(workgroup_id), max(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))) : _GLF_FUZZED(workgroup_id), true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))) : _GLF_FUZZED(workgroup_id)))))), min(uint(subgroup_local_id + 1), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, uint(uvec2(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 1u)))) | (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))), (subgroup_local_id) | 0u) + 1), ~ (~ (uint(subgroup_local_id + 1)))))))) << 0u))), ~ (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uint(subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))), (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id))), (true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)))) | (true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), max(clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1), clamp(1, _GLF_IDENTITY(1, max(1, 1)), 1)))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)))))) | 0u)))), min(uint(subgroup_local_id + 1), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1), (_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1), (uint(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + 1)) ^ 0u)) ^ 0u), ~ _GLF_IDENTITY((~ (uint(subgroup_local_id + 1))), clamp(_GLF_IDENTITY((~ (uint(subgroup_local_id + 1))), ((~ (uint(subgroup_local_id + 1)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (~ (uint(subgroup_local_id + 1))), (~ (uint(subgroup_local_id + 1)))))))))) << 0u))))) : _GLF_FUZZED(num_workgroup)))))) / 1u)) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false) ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), mix(vec2((_GLF_FUZZED(injectionSwitch))[0], _GLF_FUZZED(4.5)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-8.4, min(-8.4, -8.4))), (_GLF_FUZZED(injectionSwitch))[1]), bvec2(false, true))) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), clamp((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), min((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), (injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)))), (injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(1.0))), 0.0 + (float(vec2((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0))))))) > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(float(vec2((injectionSwitch.x) + sin(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-38.38))), injectionSwitch.x)))), sqrt(1.0))), 0.0 + (float(vec2((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0))))))) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), float(float((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(float(vec2((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0))), 0.0 + (float(vec2((injectionSwitch.x) + sin(_GLF_ZERO(0.0, injectionSwitch.x)), sqrt(1.0))))))) > injectionSwitch.y), false, false, false)))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x4(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, determinant(mat3(0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, 0.0)), dot(vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, 0.0))))), (float(mat2x4(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0, determinant(mat3(0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, 0.0)), dot(vec4(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec4(_GLF_ZERO(0.0, injectionSwitch.x), cos(0.0), 0.0, 0.0)))))) - 0.0))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), true))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), false, false)))))))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(uint(buf[virtual_gid]), (_GLF_IDENTITY(uint(buf[virtual_gid]), (false ? _GLF_FUZZED(69572u) : uint(buf[virtual_gid])))) >> 0u))), 4, 64, 0);
 atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.x, uint(uvec2(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.x, 0u)))], uint(_GLF_IDENTITY(read_1, ~ (_GLF_IDENTITY(~ (read_1), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 1u), min(uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 1u)))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 1u), min(uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 1u), uvec4(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u, 1u, 1u))))) - 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u)))), (false ? _GLF_FUZZED(atomicAdd(subgroup_local_id, read_1)) : _GLF_IDENTITY(~ (read_1), (~ (read_1)) - (0u >> _GLF_IDENTITY(uint(3u), uint(3u))))))) + 0u)) | (~ (read_1))))) + 1), 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, sqrt(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 0.0))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(9.4) : injectionSwitch.x)) > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) || false), bool(bvec3(false, false, false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))), (injectionSwitch.x < injectionSwitch.y)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), bool(bvec2(! (bool(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false)))))))), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(265.277)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 uint read_2 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (true ? buf[_GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid)), virtual_gid, virtual_gid))] : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), max(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), clamp(_GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size), _GLF_FUZZED(subgroup_size))) : _GLF_FUZZED(workgroup_size))), (_GLF_FUZZED(subgroup_size)) << (0u >> _GLF_IDENTITY(uint(2u), uint(2u))))) | 0u), _GLF_FUZZED(subgroup_size))))), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-77700)))) | (_GLF_IDENTITY(4, max(4, 4)))), 64, _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), int(_GLF_IDENTITY(ivec4(~ (0), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) << 0)), int(_GLF_IDENTITY(7, (7) | (7))))), 1, 1), (ivec4(~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(0, 0, 0), _GLF_IDENTITY(clamp(0, _GLF_IDENTITY(0, int(ivec2(0, 0))), 0), (clamp(0, 0, _GLF_IDENTITY(0, min(0, 0)))) / 1), clamp(0, 0, 0))))) >> 0)), (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (true ? 7 : _GLF_FUZZED(41077)))), _GLF_IDENTITY(int(7), (int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-93589) : 7)))) - 0))), 1, 1)) - ivec4(0, 0, 0, _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (0)))), (_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (0)))), ((_GLF_IDENTITY(0, ~ (~ (0))))) | 0)) * 1)))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), false, _GLF_IDENTITY(true, bool(bvec3(true, false, true)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))) || (_GLF_DEAD(false))), false, _GLF_IDENTITY(true, bool(bvec3(true, false, true))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false))), true && (_GLF_IDENTITY(bool((_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), true && (bool((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, true && (false)))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.z = read_2;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))) && true))), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, 0.0))).y)))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true && (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))))))) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))))).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))) && true), bool(_GLF_IDENTITY(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)), mix(vec2((vec2(mat3x2(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))[0], (vec2(mat3x2(injectionSwitch, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)))[1]), vec2(_GLF_FUZZED(113.663), _GLF_FUZZED(7.6)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), vec2(_GLF_FUZZED(242.483), _GLF_FUZZED((-4530.7877 - 7887.0900))), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))))))))))))), true, true, false))))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), bool(bvec2(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), false || (bool(bvec2(_GLF_DEAD(false), true)))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, determinant(mat3(0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, 1.0, 1.0, 1.0, abs(tan(0.0))), (false ? _GLF_FUZZED(mat3(-2090.5007, -83.51, 8958.6750, 15.03, -238.959, 2778.6691, -806.953, 2.5, -8.9)) : _GLF_IDENTITY(mat3(injectionSwitch.x, determinant(mat3(0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, 1.0, 1.0, 1.0, abs(tan(0.0))), transpose(transpose(mat3(injectionSwitch.x, determinant(mat3(0.0, 0.0, determinant(mat4(0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))), dot(vec4(0.0, 1.0, 0.0, 1.0), vec4(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0))))), 0.0, 1.0, 1.0, 1.0, abs(tan(0.0)))))))))) > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0))) * mat2(1.0)).x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       continue;
      }
     atomicStore(buf[_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, max(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id) << uvec4(0u, 0u, 0u, 0u)))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, max(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id, (GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id) / uvec4(1u, 1u, 1u, 1u))) << uvec4(0u, 0u, 0u, 0u))))) - uvec4(0u, 0u, 0u, 0u)).x], uint(_GLF_IDENTITY(_GLF_IDENTITY(read_1 + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.z, ! (! (read_1 + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.z))), bool(bvec4(read_1 + 1 == GLF_merged4_0_1_16_1_1_13_2_1_6_3_1_11next_virtual_gidnum_workgroupread_2subgroup_id.z, true, true, true)))) + 1, 4, 64, _GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, min(4, 4)))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
          continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(658.023) : _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
          barrier();
         break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       break;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))) && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(vec2(4.8, _GLF_IDENTITY(7.2, mix(float(_GLF_FUZZED(283.310)), float(7.2), bool(true))))))).y))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), (false) && true)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3.1), _GLF_FUZZED(5.5)), bvec2(false, false))).y, (injectionSwitch.y) - _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 1.0, 0.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x2(0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))))) + sqrt(0.0)), 0.0, 0.0), vec3(1.0, 1.0, 1.0))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true)))))), (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec4(bvec3(bvec3(false, true, true)), true))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      return;
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
