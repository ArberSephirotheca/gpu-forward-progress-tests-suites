#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size;
 uvec2 GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1;
 uvec4 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid;
 uvec3 GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size;
 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz = GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z = subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y = GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.z;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter --)
  {
   GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.z = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.z * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w + GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y;
 uint next_virtual_gid = workgroup_base + subgroup_id * GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w + ((GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.y + 1) % GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.w);
 GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1.x = next_virtual_gid;
 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.w = GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1.x;
 uint read_1 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1.y = read_1;
 GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.x = GLF_merged2_0_1_16_1_1_6next_virtual_gidread_1.y;
 atomicStore(buf[GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.w], uint(GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.x + 1), 4, 64, 4);
 uint read_2 = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y = read_2;
 atomicStore(buf[GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.w], uint(GLF_merged2_0_3_68_3_1_16GLF_merged3_0_1_6_1_1_17_2_1_14read_1subgroup_local_idworkgroup_sizenext_virtual_gid.xyz.x + 1 == GLF_merged4_0_1_13_1_1_6_2_1_17_3_1_13num_workgroupread_2subgroup_local_idsubgroup_size.y) + 1, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
