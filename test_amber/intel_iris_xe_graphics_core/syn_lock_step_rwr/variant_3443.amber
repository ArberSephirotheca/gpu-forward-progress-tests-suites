#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.3) : injectionSwitch.x)), max(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.3) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(0.3) : injectionSwitch.x)))) > injectionSwitch.y))), true, false, false)))) || false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                continue;
               barrier();
              }
             else
              {
              }
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch.y, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0)))), min(float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch.y, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0)))), float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch.y, 1.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 0.0, 1.0))))))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)))))), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(69.86), _GLF_FUZZED(927.386)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false)), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false)), bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))) || false)), false, false)))) || false))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, true && (false)) || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           continue;
           if(_GLF_DEAD(false))
            continue;
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
           return;
           if(_GLF_DEAD(false))
            continue;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false)) || false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (bool(bvec3(false, true, false))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y) / 1.0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y) / 1.0)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y) / 1.0)), bool(bvec4((_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y) / 1.0)), false, true, true))), true, false, false))))))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false));
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) >> 0) < 1); _injected_loop_counter ++)
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            break;
           if(_GLF_DEAD(false))
            return;
           continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
            barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true))))), true))), true))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true), false)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY(false, (false) || false), true))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), (false || (false)) && true)))), false || (_GLF_IDENTITY(false, false || (false))))), false)))) && true))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y)) || false))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              barrier();
             break;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), (true && (false)) || false), true, true, false)))))), false, true, false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))) || false)))
      barrier();
     break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)) && (_GLF_IDENTITY(false, true && (false))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      continue;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), false, false)))))))))
    return;
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(46640))), 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((1 << _GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) ^ 0))), 1, 1)), (1) | (1)), ~ (~ (_GLF_IDENTITY(1, (1) | (1))))), 1), (min(1, 1)) - 0)) << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), false)))))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0, (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), _GLF_IDENTITY((false ? _GLF_FUZZED(69271) : int(6)), (_GLF_IDENTITY((false ? _GLF_FUZZED(69271) : int(6)), ((false ? _GLF_FUZZED(69271) : int(6))) - 0)) | 0))))) << 0, (false ? _GLF_FUZZED(ivec4(-45970, -87178, -36204, 40039).b) : _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), (false ? _GLF_FUZZED(_GLF_IDENTITY(69271, 0 ^ (69271))) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0))) >> 0)))), (1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) - 0)))))) - 0) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, max(6, 6)), 6, 6))) << (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(6, (6) + int(_GLF_ZERO(0.0, injectionSwitch.x))), (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(_GLF_IDENTITY(0, ((true ? 70687 : 50167) & 0) | (0))), max(int(0), int(0)))))))), _GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) - (0 << _GLF_IDENTITY(int(5), int(5))))))), 0 + (_GLF_IDENTITY(0, ~ (~ (0))))))) << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(6, int(int(6))), (6) << (0 << _GLF_IDENTITY(int(0), int(0))))))))), max((_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ _GLF_IDENTITY((~ ((1 << _GLF_IDENTITY(int(6), int(6))))), int(ivec2((~ ((1 << _GLF_IDENTITY(int(6), int(6))))), 1)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (1) | (1)), 1), (min(1, 1)) - 0)) << _GLF_IDENTITY(int(6), int(6))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-98290) : 1)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))))) << 0))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(6)))) << 0)))) - 0, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (1) | (1)), 1), (min(1, 1)) - 0)) << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0))), (1 << _GLF_IDENTITY(int(6), int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (1) | (1)), 1), (min(1, 1)) - 0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), min(int(6), int(6))), int(6))), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0))), (1 << _GLF_IDENTITY(int(6), int(6)))))) / 1)) - 0, int(ivec2(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (1) | (1)), 1), (min(1, 1)) - 0)) << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0))), (1 << _GLF_IDENTITY(int(6), int(6)))))) - 0, (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), ((1)) >> 0), (1)))), 1), (min(1, 1)) - 0)) << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0)), max(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false)))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6)))))) << 0))))), (1 << _GLF_IDENTITY(int(6), int(6)))))) - 0)), 1)))) - int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, max(6, 6)), 6, 6))) << (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)))), clamp(0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)))), 0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)))), 0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), int(0))))))))), (false ? _GLF_FUZZED(3388) : min(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), (false ? _GLF_FUZZED(-52678) : (0 << _GLF_IDENTITY(int(0), int(0)))))), (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), max(0 << _GLF_IDENTITY(int(0), int(0)), 0 << _GLF_IDENTITY(int(0), int(0))))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (0) | 0) << _GLF_IDENTITY(int(0), int(0)))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), (_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, _GLF_IDENTITY((0) | 0, 1 * ((0) | 0))) << _GLF_IDENTITY(int(0), int(0)))))))))))), _GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) | (~ (~ (0))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(~ (~ (0)), (~ (~ (0))) >> 0)))))) << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), min(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(6))), ~ (~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(6)), min(1 << _GLF_IDENTITY(int(6), int(6)), 1 << _GLF_IDENTITY(int(6), int(6)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(min(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((1)) << 0)), _GLF_IDENTITY(1, (1) >> 0)), (min(1, 1)) - 0)) << _GLF_IDENTITY(int(6), int(6))), min((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), true)))))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false ? _GLF_FUZZED(69271) : int(6), (_GLF_IDENTITY(false ? _GLF_FUZZED(69271) : int(6), (false ? _GLF_FUZZED(69271) : int(6)) - 0)) - 0)))))), 0 ^ (_GLF_IDENTITY((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), true))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))), true)))))))))), (bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, false)), bvec3(bvec3(bvec3(bvec3(false, true, false))))))))) || false)) ? _GLF_FUZZED(69271) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(69271) : int(6))))) | ((_GLF_IDENTITY(int(6), (_GLF_IDENTITY(false ? _GLF_FUZZED(69271) : int(6), (_GLF_IDENTITY(false ? _GLF_FUZZED(69271) : int(6), (false ? _GLF_FUZZED(69271) : int(6)) - 0)) - 0)))))))) << 0))), (1 << _GLF_IDENTITY(int(6), int(6)))))) - 0) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, max(6, 6)), 6, 6))) << (0 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 + (0)), 0)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(int(0), (int(0)) ^ 0), 1, 1)), clamp(int(ivec3(_GLF_IDENTITY(int(0), (int(0)) ^ 0), 1, 1)), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), (int(0)) ^ 0), 1, 1)), int(ivec3(_GLF_IDENTITY(int(0), (int(0)) ^ 0), 1, 1)))))))), (_GLF_IDENTITY(6, _GLF_IDENTITY((6), _GLF_IDENTITY(int(ivec4((6), (0 | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0)), min(int(ivec4((6), (0 | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0)), int(ivec4((6), (0 | 0), ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0))))) << (0 << _GLF_IDENTITY(int(0), int(0))))) | (_GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) | 0) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (0 >> _GLF_IDENTITY(int(4), int(4)))))))))), _GLF_IDENTITY(6, (6) << (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), 0 + (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), (_GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))) >> 0)))))) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) | (0)))))), _GLF_IDENTITY(6, (6) << (0 << _GLF_IDENTITY(int(0), int(0)))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)), ! (! _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
    }
   return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uint(subgroup_local_id)), max(uint(uint(subgroup_local_id)), uint(uint(subgroup_local_id))))), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0), (true ? mat2x4(injectionSwitch.y, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2x4(9.4, 27.14, -8656.6465, 856.155, -5.0, 283.532, -5.0, 1023.1627)))))), injectionSwitch.y)))) ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), (uint(uvec3(workgroup_base, 1u, 0u))) >> 0u)) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), _GLF_IDENTITY(uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), (uint(uvec3(workgroup_base, 1u, 0u))) >> 0u)) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), 1u, 1u)), (uint(uvec3((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), (uint(uvec3(workgroup_base, 1u, 0u))) >> 0u)) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))), 1u, 1u))) | 0u)) << 0u)) >> 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), uint(uvec2(_GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), _GLF_IDENTITY((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) * 1u, (_GLF_IDENTITY((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) * 1u, max((((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) * 1u, (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) * 1u))) + (0u & 49821u))), 1u)))))) >> 0u, 0u | ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), subgroup_size)) + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(uint(7u), uint(7u))) / 1u)), uint(uvec2(_GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u))), (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))) * 1u), 1u)))))) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) + subgroup_local_id, min(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)))) * subgroup_size + subgroup_local_id)) >> (_GLF_IDENTITY(0u, (0u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))))), clamp((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)))) * subgroup_size + subgroup_local_id)) >> (_GLF_IDENTITY(0u, (0u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)))) * subgroup_size + subgroup_local_id)) >> (_GLF_IDENTITY(0u, (0u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))))), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)))) * subgroup_size + subgroup_local_id)) >> (_GLF_IDENTITY(0u, (0u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))))), ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)))) * subgroup_size + subgroup_local_id)) >> (_GLF_IDENTITY(0u, (0u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u))))))) | ((_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u) + subgroup_local_id), ((workgroup_base + _GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)))) * subgroup_size + subgroup_local_id)) >> (_GLF_IDENTITY(0u, (0u) - 0u) >> _GLF_IDENTITY(uint(7u), uint(7u)))))))))) >> 0u)) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)), subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_id) : subgroup_id)), subgroup_id)) * subgroup_size) ^ 0u) + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)), 0u | (((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)))) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) * 1u), 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))), 0u ^ (_GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))))) >> 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))) >> 0u), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u)) >> 0u) + _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : subgroup_local_id)), 1u * _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id), ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id)) >> (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))) >> 0u)) | 0u))))) : _GLF_FUZZED(subgroup_size)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)))))))
        break;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) | (1)), 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (1 & 1) * (_injected_loop_counter)) != (0 & 2120)); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-944.567) : injectionSwitch.y))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false)) || false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
                  return;
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               return;
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), true && (bool(bool(true)))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 + (int(1)))) | (int(1))), int(1))), int(1)), 0, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(mix(vec2(-58.96, 2145.8910), vec2(-5.1, 2948.7917), bvec2(true, false))), min(true ? injectionSwitch : _GLF_FUZZED(mix(vec2(-58.96, 2145.8910), vec2(-5.1, 2948.7917), bvec2(true, false))), true ? injectionSwitch : _GLF_FUZZED(mix(vec2(-58.96, 2145.8910), vec2(-5.1, 2948.7917), bvec2(true, false))))))).x), (true ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(vec2(-58.96, 2145.8910), vec2(-5.1, 2948.7917), bvec2(true, false))))).x), ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mix(vec2(-58.96, 2145.8910), vec2(-5.1, 2948.7917), bvec2(true, false))))).x)) / 1.0) : _GLF_IDENTITY(_GLF_FUZZED(442.273), max(_GLF_IDENTITY(_GLF_FUZZED(442.273), min(_GLF_FUZZED(442.273), _GLF_FUZZED(442.273))), _GLF_FUZZED(442.273)))))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))))), (0 >> _GLF_IDENTITY(int(2), int(2)))), _GLF_IDENTITY((ivec4(_GLF_IDENTITY(int(1), int(1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(0, 0 ^ (0)) >> _GLF_IDENTITY(int(2), int(2))))) | ivec4(0, 0, 0, 0), clamp((ivec4(_GLF_IDENTITY(int(1), int(1)), 0, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x)))), (0 >> _GLF_IDENTITY(int(2), int(2))))) | ivec4(0, 0, 0, 0), (ivec4(_GLF_IDENTITY(int(1), int(1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 >> _GLF_IDENTITY(int(2), int(2))))) | _GLF_IDENTITY(ivec4(0, 0, 0, 0), min(ivec4(0, 0, 0, 0), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (ivec4(0, 0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, min(0, 0)), 0)), 0)) + _GLF_IDENTITY(ivec4(0, 0, 0, 0), min(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0)))))), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) << 0), int(1)), 0, int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 >> _GLF_IDENTITY(int(2), int(2))))) | ivec4(0, 0, 0, 0))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (false ? _GLF_FUZZED(3603) : _GLF_IDENTITY(int(3), int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))) || false)), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             barrier();
            }
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
        }
      }
     break;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 1.0), min(vec3(injectionSwitch.x, 0.0, 1.0), vec3(injectionSwitch.x, 0.0, 1.0))))) > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))).y)), false))))))), ! (! ((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true && (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))).y)), false)))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    continue;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size) - 0u, 1u * (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size) - 0u, ((_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size) - 0u) | ((_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size) - 0u)), uint(uint((_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size) - 0u))))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), ~ (~ ((workgroup_base)))) ^ 0u) + subgroup_id * subgroup_size) - 0u))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 1u * (subgroup_size))) / 1u, ((subgroup_size) / 1u) ^ 0u), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))), (subgroup_size))) / 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, (false ? _GLF_FUZZED(subgroup_size) : (subgroup_size) / 1u)))), _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) / 1u, (false ? _GLF_FUZZED(subgroup_size) : (subgroup_size) / 1u))))), ((~ (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ((subgroup_size)) | 0u) / 1u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY((subgroup_size) / 1u, (false ? _GLF_FUZZED(num_workgroup) : (subgroup_size) / 1u)))))))) | 0u) ^ 0u))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))))) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))), 1.0 * (_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))), 1.0 * (float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))))))), 1.0, 0.0, round(length(normalize(1.0))), 0.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))), mix(float(_GLF_FUZZED(-477.018)), float(float(mat3x4(_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))), 1.0 * (_GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))), 1.0 * (float(_GLF_IDENTITY(float(injectionSwitch.x), _GLF_IDENTITY(min(float(injectionSwitch.x), float(injectionSwitch.x)), float(mat2x3(min(float(injectionSwitch.x), float(injectionSwitch.x)), 0.0, 0.0, 1.0, 1.0, 0.0))))))))), 1.0, 0.0, round(length(normalize(1.0))), 0.0, 1.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), bool(true))))) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))) || false)))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64), ((64)) ^ 0) | (64)), 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, true)))), (false || (false)) || false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY((2), max((2), (2))) >> 0)), _GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) | (2))), _GLF_IDENTITY(int(2), clamp(int(2), int(2), int(2))), int(2))))), ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) | (2))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) | (2))), (int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) | (2)))) * 1)) / 1), int(2), int(2)))))) | ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) | 0)) | (2))), int(2), int(2))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), (0 >> _GLF_IDENTITY(int(2), int(2))) | (int(2))), int(2))), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true && ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-3.8))), clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             break;
            }
          }
         else
          {
          }
         return;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec2(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), false))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           return;
          }
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(floor(injectionSwitch)) : injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(floor(injectionSwitch)) : injectionSwitch)).y))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), float(mat2(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x, injectionSwitch.x)), abs(1.0), 0.0, 0.0)))))) - 0.0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, _GLF_IDENTITY(64, (64) | 0), 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-58.09, -66.12)) : injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, (-49892 & 0) | (6))), clamp(int(_GLF_IDENTITY(6, (-49892 & 0) | (6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (-49892 & 0) | (6))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(_GLF_IDENTITY(6, (-49892 & 0) | (6))))), int(_GLF_IDENTITY(6, (-49892 & 0) | (6))))), int(6))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 >> _GLF_IDENTITY(int(5), int(5)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      barrier();
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec3(bool(bvec3((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true, false)))) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, (true) || false), false, false)))))))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             break;
            }
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), (! ((true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               do
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                      {
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))) || false)))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)), true, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), (bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) && true)), true, false)))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.5)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.3)), bool(false)))), bool(true)))))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               return;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             if(_GLF_DEAD(false))
              barrier();
             continue;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read_2 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) - (0 | 0)), 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (-61572 & (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) ^ 0))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1 + 1 == read_2, false || (_GLF_IDENTITY(read_1, _GLF_IDENTITY((read_1), ((read_1)) ^ (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(7u), uint(7u)), max(0u << _GLF_IDENTITY(uint(7u), uint(7u)), 0u << _GLF_IDENTITY(uint(7u), uint(7u)))), 0u << _GLF_IDENTITY(uint(7u), uint(7u))))) >> (0u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) | (uint(0u)))))))) >> 0u) + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))), (_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1))))) << 0), _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))), _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))))) == read_2))) + 1, _GLF_IDENTITY(4, (4) + 0), 64, _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(2), int(2))) ^ (4)));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
