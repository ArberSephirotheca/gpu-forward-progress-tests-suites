#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         for(int _injected_loop_counter = (0 | (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uvec4 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ _GLF_IDENTITY(1, (1) << 0)), ! (! (_injected_loop_counter > (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) ^ _GLF_IDENTITY(1, (1) << 0)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      break;
    }
   else
    {
    }
  }
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x = subgroup_id;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY((! (! (true))), ! (_GLF_IDENTITY(! ((! (! (true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! ((! (! (true)))), bool(bvec3(! ((! (! (true)))), false, false))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! ((! (! (true)))), bool(bvec3(! ((! (! (true)))), false, false)))), ! (! (bool(_GLF_IDENTITY(! ((! (! (true)))), bool(bvec3(! ((! (! (true)))), false, false))))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) / 1), 7, 7))), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) - 0))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  continue;
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-5.4, -6826.6127)) : injectionSwitch)).y))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                          continue;
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))))); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), false), false, false))))), (injectionSwitch.x < injectionSwitch.y))))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(false))
                                        break;
                                       return;
                                      }
                                     return;
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, _GLF_IDENTITY(false, (false) || false)), false, true)))))));
                                }
                               else
                                {
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   do
                                    {
                                     return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  continue;
                                 return;
                                }
                               continue;
                              }
                             if(_GLF_DEAD(false))
                              return;
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(determinant(mat2(1.0, 0.0, 0.0, 1.0))))), vec2(mat2x4(vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(8.3) : 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), sqrt(determinant(mat2(1.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0))))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))).x > injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 return;
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                           for(int _injected_loop_counter = ((-40309 & 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))), clamp(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(max(int(4), int(4)), 0 + (max(int(4), int(4)))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), max(int(4), int(4))), max(int(4), int(4)))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), 0 | (_GLF_IDENTITY(int(4), int(int(int(4))))))) - 0), max(int(4), int(4)))), int(ivec2(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), max(int(4), int(4)))), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                              }
                             else
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 return;
                                }
                              }
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) << (0 << _GLF_IDENTITY(int(2), int(2)))))))); _injected_loop_counter ++)
                            {
                             return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                     GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.x;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))));
          }
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
uint subgroup_size = 16;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
              {
               for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                {
                 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z = _GLF_IDENTITY(subgroup_size, 0u + (subgroup_size));
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (false ? _GLF_FUZZED(mat2(-99.21, 3065.0449, 49.93, 6.7)) : mat2(injectionSwitch.x, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))))))) > injectionSwitch.y))));
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(14363)), int(ivec3((true ? 1 : _GLF_FUZZED(14363)), 0, 0)))), 1 * (1))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y = subgroup_local_id;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 0.0)), clamp(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 0.0)), (float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 0.0))) - 0.0), float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 0.0)), float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0), 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))))), 0.0))))) > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
           break;
          }
        }
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(_GLF_IDENTITY(int(4), max(int(4), int(4))), _GLF_IDENTITY(int(4), min(int(4), int(4))), int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))))) && true))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))))); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), ! (! (bool(bvec4(false, true, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false)))), true)))))))))))
                          break;
                         if(_GLF_DEAD(false))
                          break;
                         do
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 do
                                  {
                                   do
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(false))
                                        break;
                                      }
                                     else
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                            {
                                             do
                                              {
                                               do
                                                {
                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                  {
                                                  }
                                                 else
                                                  {
                                                   if(_GLF_DEAD(false))
                                                    break;
                                                   do
                                                    {
                                                     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, false, false, true)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bvec4(true, false, false, true))), ! (! (! (bool(bvec4(true, false, false, true))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (bool(bvec4(true, false, false, true))), ! (! (! (bool(bvec4(true, false, false, true)))))))), ! (! (! (! (_GLF_IDENTITY(! (bool(bvec4(true, false, false, true))), ! (! (! (bool(bvec4(true, false, false, true)))))))))))))))))
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             if(_GLF_DEAD(false))
                                                              {
                                                               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                {
                                                                }
                                                               else
                                                                {
                                                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                                                  {
                                                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                    return;
                                                                  }
                                                                 else
                                                                  {
                                                                   return;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                       if(_GLF_DEAD(false))
                                                        break;
                                                      }
                                                    }
                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                   if(_GLF_DEAD(false))
                                                    break;
                                                  }
                                                }
                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                              }
                                             while(_GLF_WRAPPED_LOOP(false));
                                            }
                                           else
                                            {
                                            }
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            break;
                                          }
                                         if(_GLF_DEAD(false))
                                          return;
                                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3.8) : injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
                                          break;
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false));
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                            }
                           else
                            {
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        break;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))), (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       do
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                break;
                               return;
                              }
                            }
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))))))))))))));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
            return;
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((1 ^ 1) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(24381))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(2, max(2, 2))), _GLF_IDENTITY(int(2), (int(2)) | (int(2)))))))) >> _GLF_IDENTITY(int(2), int(2)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + 0))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true))))
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)) && true); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         do
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             for(int _injected_loop_counter = ((1 ^ 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                      continue;
                                     if(_GLF_DEAD(false))
                                      break;
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                                        {
                                         return;
                                        }
                                       else
                                        {
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, true))))))))
                        break;
                       return;
                      }
                    }
                  }
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 for(int _injected_loop_counter = (5952 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                              {
                               return;
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                continue;
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))
                              {
                              }
                             else
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                     break;
                                    }
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                    {
                                     do
                                      {
                                       for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), (true ? (1 & 1) : _GLF_FUZZED(-44480))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                                            {
                                            }
                                           else
                                            {
                                             return;
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     while(_GLF_WRAPPED_LOOP(false));
                                    }
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             if(_GLF_DEAD(false))
                              continue;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))));
                  }
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2x3(injectionSwitch[0], 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 1.0))), injectionSwitch[1])).y)) * (injectionSwitch)).x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x)) < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false, false || (false)) || (injectionSwitch.x < injectionSwitch.y))))))))))), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) * (injectionSwitch)).x < injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  return;
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                             if(_GLF_DEAD(false))
                              break;
                            }
                          }
                        }
                       else
                        {
                        }
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            break;
                           do
                            {
                             do
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 do
                                  {
                                   GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.x = num_workgroup;
                                  }
                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                                      {
                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                        {
                                         return;
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  break;
                                }
                               else
                                {
                                 for(int _injected_loop_counter = (-28359 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   do
                                    {
                                     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false))))
                                      {
                                       if(_GLF_DEAD(false))
                                        continue;
                                       do
                                        {
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                       if(_GLF_DEAD(false))
                                        return;
                                       return;
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                 if(_GLF_DEAD(false))
                                  break;
                                }
                              }
                             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, true))))), (injectionSwitch.x > injectionSwitch.y))));
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) || false), true)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))), max(~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))), clamp(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))), 1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))))), _GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))), max(~ (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 1 * (1))), _GLF_IDENTITY(int(1), 1 * (int(1))))), ~ _GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))), 0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1))))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 1 * (int(1)))))) + 0)))))))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            return;
           break;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) * 1))) << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)) >> 0))))), true && (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (5) | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) / 1), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))), 1 * (~ (_GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, (0) / 1), 0, 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))))) - 0)), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << 0)), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, 5))), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)) >> 0))))))), (_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(5), int(5)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(atomicAnd(_injected_loop_counter, _injected_loop_counter)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), ! (! (_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), 0 | ((0 << _GLF_IDENTITY(int(5), int(5))))), (0 << _GLF_IDENTITY(int(5), int(5))), (0 << _GLF_IDENTITY(int(5), int(5))))) ^ 0)) >> 0), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), 1 * (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))), _GLF_IDENTITY(int(5), (int(5)) - 0)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(_injected_loop_counter))), int(7)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) << 0))), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)))) : _GLF_FUZZED(findLSB(num_workgroup)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) | 0))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (_GLF_IDENTITY(0, (0) ^ 0) << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) << 0))), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)))) : _GLF_FUZZED(findLSB(num_workgroup)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, 1 * (5))) + 0)) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) << 0))), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)))) : _GLF_FUZZED(findLSB(num_workgroup)))), max(_GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) << 0)) ^ 0)) >> 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) << 0))), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)))) : _GLF_FUZZED(findLSB(num_workgroup)))), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(5), int(5))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(int(5), int(5))), 0 ^ (int(_GLF_IDENTITY(int(5), int(5))))), int(_GLF_IDENTITY(int(5), int(5))))))), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0), clamp(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7))))), (int(_GLF_IDENTITY(5, (5) << (0 << _GLF_IDENTITY(int(7), int(7)))))) << 0))), int(5)), (0 << _GLF_IDENTITY(int(5), int(5))) ^ 0)) >> 0)))) : _GLF_FUZZED(findLSB(num_workgroup))))))) >> 0)) - 0) >> 0)))))) && true)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.w = workgroup_size;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w = workgroup_id;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(1), int(1)))), (int(int(_GLF_IDENTITY(int(1), int(1))))) + _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)))) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(false || (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (false || (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))))))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.w;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.w * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.w;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id)).z + GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y;
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z = virtual_gid;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), true, false, true)))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), (_GLF_IDENTITY(~ (int(7)), (~ (int(7))) + 0)) | 0)))), int(ivec3(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7))))), (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, min(7, _GLF_IDENTITY(7, int(ivec3(_GLF_IDENTITY(7, (7) - 0), 0, (1 & 1))))))))), _GLF_IDENTITY(int(7), ~ (~ (int(7))))))), 0, 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, (1) / 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, _GLF_IDENTITY(1 * (_GLF_IDENTITY(5, (5) | (5))), min(1 * (_GLF_IDENTITY(5, (5) | (5))), 1 * (_GLF_IDENTITY(5, (5) | (5)))))))))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         return;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
         else
          {
           GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.z = GLF_merged4_0_1_11_1_1_17_2_1_11_3_1_12subgroup_idsubgroup_local_idvirtual_gidworkgroup_id.z;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) >> 0u), 0u)))) / 1u) + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z + ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, uvec4(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size[0], GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size[1], GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size[2], GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size[3])).y + 1, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, uint(uvec3(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, uint(uvec2(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, 1u))), 0u, 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, (false ? _GLF_FUZZED(subgroup_id) : GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1)), uint(uvec3(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, 0u, 0u))), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, uint(uvec3(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, 0u, 0u)))) - 0u), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, uint(uvec3(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1, 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, min(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, min(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size)), (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, min(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size, GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size))) - uvec4(0u, 0u, _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)), ~ (~ (_GLF_IDENTITY(uint(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)), clamp(uint(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)), uint(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u)), uint(uvec4(0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u))))))))), 0u))) << uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))).y + 1))) % GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id.z);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.x = next_virtual_gid;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), false, true, false)), ! (! (bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, false || (false)))), false, true, false))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))) || (_GLF_IDENTITY(false, false || (false))), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))) || (_GLF_IDENTITY(false, false || (false))))))), false, true, false)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(false, false || (false)), false))) || (_GLF_IDENTITY(false, false || (false)))), false, true, false)), true)), false || (bool(bvec2(bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, false, false))) || (_GLF_IDENTITY(false, false || (false)))), false, true, false)), true))))), ! (! (bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))))), false, true, false)))))))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) / 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, false))), true && (_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec3(_injected_loop_counter < 1, true, false)))))) && true)); _injected_loop_counter ++)
  {
   buf[GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.z] = 1;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_WRAPPED_LOOP(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((4.7 / vec2(0.2, 4092.7883).y))), bool(false)))))))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       break;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
      {
       if(GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.y + 1 < _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_12num_workgroupsubgroup_idsubgroup_sizeworkgroup_id) >> uvec4(0u, 0u, 0u, 0u)).z)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) | (1))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               do
                {
                 atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.x], uint(2), 4, 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-0.1))) > injectionSwitch.y))))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), false || (_GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), bool(_GLF_IDENTITY(bvec3((_GLF_WRAPPED_IF_TRUE(true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3((_GLF_WRAPPED_IF_TRUE(true)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), false || (! (_GLF_WRAPPED_IF_TRUE(true)))))))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   subgroupAll(false);
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
       else
        {
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.4)), bool(false)))))))
              break;
            }
           else
            {
             do
              {
               do
                {
                 atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_11_3_1_14next_virtual_gidsubgroup_local_idvirtual_gidworkgroup_size.x], _GLF_IDENTITY(uint(_GLF_IDENTITY(2, (2) ^ 0)), 0u ^ (_GLF_IDENTITY(uint(2), (uint(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(79387) : _GLF_IDENTITY(2, int(int(2))))))) << (0u ^ _GLF_IDENTITY(0u, max(0u, 0u)))))), _GLF_IDENTITY(4, (4) ^ 0), 64, 4);
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(93.54)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true)), max(mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)), _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)), max(mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)))), (true ? _GLF_IDENTITY(mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)), max(mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)), mix(float(_GLF_FUZZED(93.54)), float(injectionSwitch.y), bool(true)))) : _GLF_FUZZED(roundEven(-2.4)))))))))))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 subgroupAll(true);
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), ! (! (! ((_GLF_DEAD(false)))))))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_DEAD(false)))), _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))) || false), true), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
