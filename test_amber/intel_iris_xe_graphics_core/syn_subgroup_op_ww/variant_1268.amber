#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_136 {
 uvec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_134 {
 mat2 _f0;
 ivec4 _f1;
 uint _f2;
 mat2x4 _f3;
 uvec4 _f4;
 bvec4 _f5;
 ivec3 _f6;
} ;

struct _GLF_struct_135 {
 uvec2 _f0;
 _GLF_struct_134 _f1;
 float _f2;
 vec2 _f3;
} ;

struct _GLF_struct_137 {
 _GLF_struct_135 _f0;
 mat3 _f1;
 _GLF_struct_136 _f2;
 bool _f3;
 bvec4 _f4;
 int _injected_loop_counter;
} ;

struct _GLF_struct_131 {
 bvec4 _f0;
 mat4 _f1;
 bool _f2;
 bvec4 _f3;
 float _f4;
} ;

struct _GLF_struct_130 {
 float _f0;
 ivec3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_129 {
 bvec3 _f0;
} ;

struct _GLF_struct_132 {
 _GLF_struct_129 _f0;
 bvec2 _f1;
 _GLF_struct_130 _f2;
 ivec2 _f3;
 uvec4 _f4;
 _GLF_struct_131 _f5;
} ;

struct _GLF_struct_128 {
 vec3 _f0;
} ;

struct _GLF_struct_126 {
 ivec4 _f0;
 mat3x2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_125 {
 vec4 _f0;
 ivec4 _f1;
 bvec4 _f2;
 int _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_124 {
 bvec2 _f0;
 mat4 _f1;
 float _f2;
} ;

struct _GLF_struct_123 {
 bvec3 _f0;
 bvec2 _f1;
 uint _f2;
 uvec4 _f3;
 ivec4 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_127 {
 mat4x3 _f0;
 _GLF_struct_123 _f1;
 _GLF_struct_124 _f2;
 _GLF_struct_125 _f3;
 mat2x3 _f4;
 _GLF_struct_126 _f5;
} ;

struct _GLF_struct_133 {
 _GLF_struct_127 _f0;
 _GLF_struct_128 _f1;
 int _injected_loop_counter;
 _GLF_struct_132 _f2;
 uint _f3;
} ;

struct _GLF_struct_120 {
 float _f0;
 mat3x4 _f1;
 uvec3 _f2;
 int _f3;
 vec3 _f4;
 vec3 _f5;
} ;

struct _GLF_struct_121 {
 _GLF_struct_120 _f0;
 uvec4 _f1;
 mat4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_118 {
 uint _f0;
 bvec4 _f1;
 int _f2;
 mat4x2 _f3;
 bool _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_117 {
 float _f0;
} ;

struct _GLF_struct_119 {
 mat4x3 _f0;
 vec4 _f1;
 int _f2;
 _GLF_struct_117 _f3;
 _GLF_struct_118 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_122 {
 int _injected_loop_counter;
 mat3x2 _f0;
 _GLF_struct_119 _f1;
 _GLF_struct_121 _f2;
} ;

struct _GLF_struct_114 {
 mat2x4 _f0;
 uvec4 _f1;
 bool _f2;
 ivec3 _f3;
 bool _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_113 {
 mat2x3 _f0;
} ;

struct _GLF_struct_115 {
 uvec4 _f0;
 vec2 _f1;
 mat2x3 _f2;
 _GLF_struct_113 _f3;
 mat2x3 _f4;
 int _f5;
 _GLF_struct_114 _f6;
} ;

struct _GLF_struct_111 {
 uvec3 _f0;
 vec2 _f1;
 mat3x2 _f2;
 mat4x3 _f3;
 mat3 _f4;
 bool _f5;
} ;

struct _GLF_struct_110 {
 bvec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_112 {
 uvec2 _f0;
 _GLF_struct_110 _f1;
 _GLF_struct_111 _f2;
 mat4x2 _f3;
 mat4 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_108 {
 float _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_109 {
 uint _f0;
 _GLF_struct_108 _f1;
} ;

struct _GLF_struct_116 {
 uvec4 _f0;
 _GLF_struct_109 _f1;
 _GLF_struct_112 _f2;
 bvec2 _f3;
 mat3x4 _f4;
 _GLF_struct_115 _f5;
 int _injected_loop_counter;
 vec4 _f6;
} ;

struct _GLF_struct_106 {
 int _injected_loop_counter;
 mat3 _f0;
} ;

struct _GLF_struct_104 {
 int _f0;
 mat3x4 _f1;
 ivec3 _f2;
 float _f3;
} ;

struct _GLF_struct_105 {
 _GLF_struct_104 _f0;
 mat4x2 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_103 {
 ivec2 _f0;
 bvec4 _f1;
 ivec4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_101 {
 uvec4 _f0;
 mat3x2 _f1;
 int _f2;
} ;

struct _GLF_struct_100 {
 uvec4 _f0;
 uvec4 _f1;
 bvec2 _f2;
 ivec3 _f3;
 bvec3 _f4;
 vec3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_99 {
 uint _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_98 {
 mat3 _f0;
 vec2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_102 {
 _GLF_struct_98 _f0;
 _GLF_struct_99 _f1;
 _GLF_struct_100 _f2;
 _GLF_struct_101 _f3;
} ;

struct _GLF_struct_107 {
 _GLF_struct_102 _f0;
 _GLF_struct_103 _f1;
 _GLF_struct_105 _f2;
 _GLF_struct_106 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_95 {
 mat2 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_96 {
 int _injected_loop_counter;
 mat4 _f0;
 _GLF_struct_95 _f1;
} ;

struct _GLF_struct_97 {
 _GLF_struct_96 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_92 {
 ivec2 _f0;
 uvec4 _f1;
 bool _f2;
 mat2x3 _f3;
 int _f4;
 mat3 _f5;
} ;

struct _GLF_struct_91 {
 bvec3 _f0;
 int _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_90 {
 ivec3 _f0;
 float _f1;
} ;

struct _GLF_struct_89 {
 mat4x2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_93 {
 mat2 _f0;
 _GLF_struct_89 _f1;
 _GLF_struct_90 _f2;
 uvec2 _f3;
 _GLF_struct_91 _f4;
 _GLF_struct_92 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_87 {
 int _injected_loop_counter;
 mat4x3 _f0;
 uvec3 _f1;
 mat3x4 _f2;
 uvec3 _f3;
 bool _f4;
 mat3 _f5;
} ;

struct _GLF_struct_88 {
 mat4x3 _f0;
 vec2 _f1;
 ivec3 _f2;
 mat2 _f3;
 _GLF_struct_87 _f4;
} ;

struct _GLF_struct_86 {
 bool _f0;
} ;

struct _GLF_struct_94 {
 mat3x4 _f0;
 _GLF_struct_86 _f1;
 _GLF_struct_88 _f2;
 _GLF_struct_93 _f3;
 float _f4;
 mat2 _f5;
 uint _f6;
} ;

struct _GLF_struct_83 {
 bool _f0;
 mat4 _f1;
 bvec2 _f2;
 bvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_82 {
 bool _f0;
 vec2 _f1;
 bvec3 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_84 {
 _GLF_struct_82 _f0;
 _GLF_struct_83 _f1;
 bvec2 _f2;
 vec3 _f3;
 mat3 _f4;
} ;

struct _GLF_struct_80 {
 bvec4 _f0;
 bvec4 _f1;
 ivec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_79 {
 uvec4 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_78 {
 bvec3 _f0;
 mat4x2 _f1;
 mat4 _f2;
 mat2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_81 {
 bvec4 _f0;
 _GLF_struct_78 _f1;
 int _f2;
 _GLF_struct_79 _f3;
 _GLF_struct_80 _f4;
} ;

struct _GLF_struct_76 {
 mat4 _f0;
 mat3 _f1;
 ivec4 _f2;
 vec4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_75 {
 vec2 _f0;
 ivec4 _f1;
 ivec3 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_77 {
 uvec4 _f0;
 mat4x3 _f1;
 _GLF_struct_75 _f2;
 _GLF_struct_76 _f3;
} ;

struct _GLF_struct_73 {
 mat3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_72 {
 mat4 _f0;
} ;

struct _GLF_struct_71 {
 bvec3 _f0;
 mat4x2 _f1;
 mat2x3 _f2;
 vec3 _f3;
 ivec3 _f4;
} ;

struct _GLF_struct_74 {
 _GLF_struct_71 _f0;
 bvec2 _f1;
 _GLF_struct_72 _f2;
 _GLF_struct_73 _f3;
 int _injected_loop_counter;
} ;

struct _GLF_struct_69 {
 mat3x2 _f0;
 mat4x2 _f1;
 float _f2;
} ;

struct _GLF_struct_70 {
 _GLF_struct_69 _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_85 {
 _GLF_struct_70 _f0;
 _GLF_struct_74 _f1;
 _GLF_struct_77 _f2;
 _GLF_struct_81 _f3;
 _GLF_struct_84 _f4;
} ;

struct _GLF_struct_66 {
 mat2x4 _f0;
 ivec2 _f1;
 int _f2;
 float _f3;
 mat2x4 _f4;
 bool _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_67 {
 _GLF_struct_66 _f0;
 mat2x3 _f1;
 uint _f2;
} ;

struct _GLF_struct_64 {
 vec4 _f0;
 uvec4 _f1;
 bvec4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_63 {
 mat3x2 _f0;
 vec2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_62 {
 uvec2 _f0;
 ivec4 _f1;
 float _f2;
 mat4 _f3;
 int _f4;
 vec3 _f5;
} ;

struct _GLF_struct_61 {
 mat2 _f0;
 mat4 _f1;
 vec3 _f2;
 int _f3;
 float _f4;
 mat3 _f5;
} ;

struct _GLF_struct_60 {
 uvec2 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_65 {
 _GLF_struct_60 _f0;
 _GLF_struct_61 _f1;
 ivec4 _f2;
 _GLF_struct_62 _f3;
 _GLF_struct_63 _f4;
 int _f5;
 _GLF_struct_64 _f6;
 int _injected_loop_counter;
} ;

struct _GLF_struct_58 {
 uvec4 _f0;
 uvec3 _f1;
 bvec2 _f2;
 mat3x4 _f3;
} ;

struct _GLF_struct_59 {
 _GLF_struct_58 _f0;
 vec4 _f1;
 mat2 _f2;
 vec3 _f3;
 bool _f4;
} ;

struct _GLF_struct_57 {
 vec2 _f0;
} ;

struct _GLF_struct_68 {
 vec4 _f0;
 mat3x4 _f1;
 _GLF_struct_57 _f2;
 _GLF_struct_59 _f3;
 vec3 _f4;
 _GLF_struct_65 _f5;
 _GLF_struct_67 _f6;
} ;

struct _GLF_struct_56 {
 mat4x3 _f0;
 uint num_workgroup;
} ;

struct _GLF_struct_53 {
 mat3x2 _f0;
 mat4x2 _f1;
 mat4x3 _f2;
 mat3 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_52 {
 mat2x4 _f0;
 mat3 _f1;
 vec3 _f2;
 mat4x3 _f3;
 ivec4 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_51 {
 mat2 _f0;
} ;

struct _GLF_struct_54 {
 _GLF_struct_51 _f0;
 _GLF_struct_52 _f1;
 bvec2 _f2;
 _GLF_struct_53 _f3;
 mat3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_49 {
 bvec4 _f0;
 uvec4 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_48 {
 bvec3 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_47 {
 vec2 _f0;
 bvec2 _f1;
 bvec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_50 {
 _GLF_struct_47 _f0;
 _GLF_struct_48 _f1;
 uvec3 _f2;
 uint _f3;
 _GLF_struct_49 _f4;
} ;

struct _GLF_struct_46 {
 mat3 _f0;
} ;

struct _GLF_struct_55 {
 _GLF_struct_46 _f0;
 uvec2 _f1;
 uint subgroup_size;
 _GLF_struct_50 _f2;
 _GLF_struct_54 _f3;
} ;

struct _GLF_struct_43 {
 float _f0;
} ;

struct _GLF_struct_42 {
 mat2x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_44 {
 _GLF_struct_42 _f0;
 vec4 _f1;
 int _injected_loop_counter;
 _GLF_struct_43 _f2;
} ;

struct _GLF_struct_45 {
 int _f0;
 vec2 _f1;
 ivec4 _f2;
 _GLF_struct_44 _f3;
 mat3 _f4;
 uvec4 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_39 {
 int _f0;
} ;

struct _GLF_struct_38 {
 bvec2 _f0;
 uvec3 _f1;
 int _f2;
 uvec2 _f3;
 ivec2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_37 {
 float _f0;
 uvec2 _f1;
 mat4x2 _f2;
 bool _f3;
 mat4x2 _f4;
 uvec4 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_40 {
 uvec3 _f0;
 _GLF_struct_37 _f1;
 mat4x2 _f2;
 _GLF_struct_38 _f3;
 bool _f4;
 _GLF_struct_39 _f5;
} ;

struct _GLF_struct_35 {
 uvec2 _f0;
 int _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_34 {
 float _f0;
 ivec2 _f1;
 mat4x2 _f2;
 int _f3;
 bvec2 _f4;
 vec2 _f5;
} ;

struct _GLF_struct_36 {
 _GLF_struct_34 _f0;
 int _injected_loop_counter;
 _GLF_struct_35 _f1;
 vec2 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_41 {
 bvec2 _f0;
 vec4 _f1;
 _GLF_struct_36 _f2;
 _GLF_struct_40 _f3;
 mat4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_32 {
 mat2 _f0;
} ;

struct _GLF_struct_30 {
 float _f0;
 mat3 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_31 {
 mat2x4 _f0;
 _GLF_struct_30 _f1;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 uint _f1;
 mat2 _f2;
 mat3x2 _f3;
 mat2x3 _f4;
 mat4x3 _f5;
} ;

struct _GLF_struct_27 {
 ivec4 _f0;
 mat3x2 _f1;
 mat3x4 _f2;
 mat3x2 _f3;
 float _f4;
} ;

struct _GLF_struct_29 {
 bool _f0;
 vec2 _f1;
 _GLF_struct_27 _f2;
 _GLF_struct_28 _f3;
 ivec3 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_33 {
 int _injected_loop_counter;
 _GLF_struct_29 _f0;
 _GLF_struct_31 _f1;
 ivec3 _f2;
 _GLF_struct_32 _f3;
} ;

struct _GLF_struct_24 {
 int _f0;
 ivec3 _f1;
 vec2 _f2;
 mat3x2 _f3;
 bool _f4;
 vec2 _f5;
} ;

struct _GLF_struct_23 {
 int _f0;
 int _injected_loop_counter;
 ivec2 _f1;
 ivec4 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_25 {
 ivec3 _f0;
 _GLF_struct_23 _f1;
 mat4x2 _f2;
 _GLF_struct_24 _f3;
} ;

struct _GLF_struct_26 {
 _GLF_struct_25 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_20 {
 bvec2 _f0;
 mat2x4 _f1;
 float _f2;
} ;

struct _GLF_struct_19 {
 uvec4 _f0;
 bvec4 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_21 {
 bvec4 _f0;
 _GLF_struct_19 _f1;
 _GLF_struct_20 _f2;
} ;

struct _GLF_struct_22 {
 mat2x4 _f0;
 uint subgroup_id;
 _GLF_struct_21 _f1;
 ivec4 _f2;
 vec2 _f3;
} ;

struct _GLF_struct_16 {
 int _f0;
 mat3 _f1;
 bvec2 _f2;
 mat4x3 _f3;
 uint _f4;
 mat3x4 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_17 {
 _GLF_struct_16 _f0;
} ;

struct _GLF_struct_14 {
 ivec4 _f0;
 bvec4 _f1;
 mat3x2 _f2;
 uvec3 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_13 {
 bvec4 _f0;
} ;

struct _GLF_struct_12 {
 mat4 _f0;
 mat2 _f1;
 uint _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_11 {
 uvec3 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_15 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 uvec2 _f3;
 mat4x3 _f4;
 _GLF_struct_14 _f5;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 int _f1;
 vec2 _f2;
 uvec2 _f3;
 mat3 _f4;
 int _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 ivec2 _f1;
 mat2x3 _f2;
 uvec2 _f3;
 ivec3 _f4;
 bool _f5;
} ;

struct _GLF_struct_6 {
 mat2x3 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 mat4x3 _f1;
 _GLF_struct_7 _f2;
 uint workgroup_size;
 mat2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_18 {
 _GLF_struct_8 _f0;
 mat2x4 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_15 _f3;
 uvec4 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 uint virtual_gid;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 uvec2 _f1;
 mat2x3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 mat4x2 _f1;
 bvec2 _f2;
 vec3 _f3;
 mat2x3 _f4;
 uvec3 _f5;
 ivec4 _f6;
 uint workgroup_id;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 ivec2 _f1;
 _GLF_struct_2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  {
   for(_GLF_struct_97 _GLF_struct_replacement_97 = _GLF_struct_97(_GLF_struct_96((0 >> _GLF_IDENTITY(int(2), int(2))), mat4(1.0), _GLF_struct_95(mat2(1.0), mat2x4(1.0))), vec2(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_97._f0._injected_loop_counter < 1); _GLF_struct_replacement_97._f0._injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat2x4(1.0), gl_SubgroupID, _GLF_struct_21(bvec4(true), _GLF_struct_19(uvec4(1u), bvec4(true), mat3x4(1.0)), _GLF_struct_20(bvec2(true), mat2x4(1.0), 1.0)), ivec4(1), vec2(1.0));
 _GLF_struct_55 _GLF_struct_replacement_55 = _GLF_struct_55(_GLF_struct_46(mat3(1.0)), uvec2(1u), gl_SubgroupSize, _GLF_struct_50(_GLF_struct_47(vec2(1.0), bvec2(true), bvec4(true), bvec2(true)), _GLF_struct_48(bvec3(true), vec4(1.0)), uvec3(1u), 1u, _GLF_struct_49(bvec4(true), uvec4(1u), mat2x3(1.0))), _GLF_struct_54(_GLF_struct_51(mat2(1.0)), _GLF_struct_52(mat2x4(1.0), mat3(1.0), vec3(1.0), mat4x3(1.0), ivec4(1), uvec4(1u)), bvec2(true), _GLF_struct_53(mat3x2(1.0), mat4x2(1.0), mat4x3(1.0), mat3(1.0), mat2(1.0)), mat3(1.0), ivec2(1)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, (0) << 0) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 else
  {
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     else
      {
       GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z = _GLF_struct_replacement_55.subgroup_size;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) ^ 0), 0, 0))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z;
          }
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 _GLF_struct_56 _GLF_struct_replacement_56 = _GLF_struct_56(mat4x3(1.0), gl_NumWorkGroups.x);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(_GLF_struct_8(_GLF_struct_6(mat2x3(1.0), ivec2(1)), mat4x3(1.0), _GLF_struct_7(mat4(1.0), ivec2(1), mat2x3(1.0), uvec2(1u), ivec3(1), true), gl_WorkGroupSize.x, mat2(1.0), bvec3(true)), mat2x4(1.0), _GLF_struct_10(_GLF_struct_9(mat4x2(1.0), 1, vec2(1.0), uvec2(1u), mat3(1.0), 1, ivec4(1))), _GLF_struct_15(_GLF_struct_11(uvec3(1u), mat3(1.0)), _GLF_struct_12(mat4(1.0), mat2(1.0), 1u, bvec2(true)), _GLF_struct_13(bvec4(true)), uvec2(1u), mat4x3(1.0), _GLF_struct_14(ivec4(1), bvec4(true), mat3x2(1.0), uvec3(1u), vec2(1.0))), uvec4(1u), _GLF_struct_17(_GLF_struct_16(1, mat3(1.0), bvec2(true), mat4x3(1.0), 1u, mat3x4(1.0), mat2(1.0))));
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(vec4(1.0), ivec2(1), _GLF_struct_2(_GLF_struct_0(vec4(1.0), mat4x2(1.0), bvec2(true), vec3(1.0), mat2x3(1.0), uvec3(1u), ivec4(1), gl_WorkGroupID.x), _GLF_struct_1(ivec3(1), uvec2(1u), mat2x3(1.0), uvec4(1u)), mat4(1.0), mat2(1.0)));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 & 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ (0 ^ 0))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
      }
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(_GLF_struct_107 _GLF_struct_replacement_107 = _GLF_struct_107(_GLF_struct_102(_GLF_struct_98(mat3(1.0), vec2(1.0), mat3(1.0)), _GLF_struct_99(1u, mat2x4(1.0)), _GLF_struct_100(uvec4(1u), uvec4(1u), bvec2(true), ivec3(1), bvec3(true), vec3(1.0), mat2x3(1.0)), _GLF_struct_101(uvec4(1u), mat3x2(1.0), 1)), _GLF_struct_103(ivec2(1), bvec4(true), ivec4(1), ivec2(1)), _GLF_struct_105(_GLF_struct_104(1, mat3x4(1.0), ivec3(1), 1.0), mat4x2(1.0), ivec3(1)), _GLF_struct_106((1 ^ 1), mat3(1.0)), mat2x4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_107._f3._injected_loop_counter < (1 ^ 0)); _GLF_struct_replacement_107._f3._injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(_GLF_struct_41 _GLF_struct_replacement_41 = _GLF_struct_41(bvec2(true), vec4(1.0), _GLF_struct_36(_GLF_struct_34(1.0, ivec2(1), mat4x2(1.0), 1, bvec2(true), vec2(1.0)), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_struct_35(uvec2(1u), 1, bvec2(true)), vec2(1.0), ivec3(1)), _GLF_struct_40(uvec3(1u), _GLF_struct_37(1.0, uvec2(1u), mat4x2(1.0), true, mat4x2(1.0), uvec4(1u), uvec2(1u)), mat4x2(1.0), _GLF_struct_38(bvec2(true), uvec3(1u), 1, uvec2(1u), ivec2(1), uvec3(1u)), true, _GLF_struct_39(1)), mat4(1.0), uvec2(1u)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_41._f2._injected_loop_counter != (((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) << 0)))); _GLF_struct_replacement_41._f2._injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 ^ (int(0))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
            {
             for(_GLF_struct_68 _GLF_struct_replacement_68 = _GLF_struct_68(vec4(1.0), mat3x4(1.0), _GLF_struct_57(vec2(1.0)), _GLF_struct_59(_GLF_struct_58(uvec4(1u), uvec3(1u), bvec2(true), mat3x4(1.0)), vec4(1.0), mat2(1.0), vec3(1.0), true), vec3(1.0), _GLF_struct_65(_GLF_struct_60(uvec2(1u), mat4(1.0)), _GLF_struct_61(mat2(1.0), mat4(1.0), vec3(1.0), 1, 1.0, mat3(1.0)), ivec4(1), _GLF_struct_62(uvec2(1u), ivec4(1), 1.0, mat4(1.0), 1, vec3(1.0)), _GLF_struct_63(mat3x2(1.0), vec2(1.0), vec3(1.0)), 1, _GLF_struct_64(vec4(1.0), uvec4(1u), bvec4(true), uvec2(1u)), (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_struct_67(_GLF_struct_66(mat2x4(1.0), ivec2(1), 1, 1.0, mat2x4(1.0), true, ivec2(1)), mat2x3(1.0), 1u)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_68._f5._injected_loop_counter != 0); _GLF_struct_replacement_68._f5._injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_struct_replacement_18._f0.workgroup_size * _GLF_struct_replacement_3._f2._f0.workgroup_id;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = (-64864 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       barrier();
      }
    }
   GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(mat3x2(1.0), GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_22.subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x + GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y), ivec2(1));
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + _GLF_struct_replacement_22.subgroup_id * GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x + ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1) % GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x = next_virtual_gid;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(_GLF_struct_26 _GLF_struct_replacement_26 = _GLF_struct_26(_GLF_struct_25(ivec3(1), _GLF_struct_23(1, 0, ivec2(1), ivec4(1), uvec3(1u)), mat4x2(1.0), _GLF_struct_24(1, ivec3(1), vec2(1.0), mat3x2(1.0), true, vec2(1.0))), bvec2(true)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_26._f0._f1._injected_loop_counter < 1); _GLF_struct_replacement_26._f0._f1._injected_loop_counter ++)
  {
   buf[_GLF_struct_replacement_5._f0.virtual_gid] = 1;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((1 & 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1 < GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec3(int(1), 1, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(_GLF_struct_85 _GLF_struct_replacement_85 = _GLF_struct_85(_GLF_struct_70(_GLF_struct_69(mat3x2(1.0), mat4x2(1.0), 1.0), bvec4(true)), _GLF_struct_74(_GLF_struct_71(bvec3(true), mat4x2(1.0), mat2x3(1.0), vec3(1.0), ivec3(1)), bvec2(true), _GLF_struct_72(mat4(1.0)), _GLF_struct_73(mat3(1.0), mat2x3(1.0)), 0), _GLF_struct_77(uvec4(1u), mat4x3(1.0), _GLF_struct_75(vec2(1.0), ivec4(1), ivec3(1), mat3x4(1.0)), _GLF_struct_76(mat4(1.0), mat3(1.0), ivec4(1), vec4(1.0), mat2x3(1.0))), _GLF_struct_81(bvec4(true), _GLF_struct_78(bvec3(true), mat4x2(1.0), mat4(1.0), mat2(1.0), mat2x4(1.0)), 1, _GLF_struct_79(uvec4(1u), mat2x3(1.0)), _GLF_struct_80(bvec4(true), bvec4(true), ivec3(1), uvec4(1u))), _GLF_struct_84(_GLF_struct_82(true, vec2(1.0), bvec3(true), mat3x2(1.0)), _GLF_struct_83(true, mat4(1.0), bvec2(true), bvec3(true), mat4x2(1.0)), bvec2(true), vec3(1.0), mat3(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_85._f1._injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_struct_replacement_85._f1._injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              barrier();
             atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x], uint(2), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(false);
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(_GLF_struct_94 _GLF_struct_replacement_94 = _GLF_struct_94(mat3x4(1.0), _GLF_struct_86(true), _GLF_struct_88(mat4x3(1.0), vec2(1.0), ivec3(1), mat2(1.0), _GLF_struct_87(_GLF_IDENTITY(0, min(0, 0)), mat4x3(1.0), uvec3(1u), mat3x4(1.0), uvec3(1u), true, mat3(1.0))), _GLF_struct_93(mat2(1.0), _GLF_struct_89(mat4x2(1.0), mat4x2(1.0)), _GLF_struct_90(ivec3(1), 1.0), uvec2(1u), _GLF_struct_91(bvec3(true), 1, mat2x3(1.0)), _GLF_struct_92(ivec2(1), uvec4(1u), true, mat2x3(1.0), 1, mat3(1.0)), vec4(1.0)), 1.0, mat2(1.0), 1u); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_94._f2._f4._injected_loop_counter != 1); _GLF_struct_replacement_94._f2._f4._injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(_GLF_struct_116 _GLF_struct_replacement_116 = _GLF_struct_116(uvec4(1u), _GLF_struct_109(1u, _GLF_struct_108(1.0, uvec2(1u))), _GLF_struct_112(uvec2(1u), _GLF_struct_110(bvec4(true), ivec3(1)), _GLF_struct_111(uvec3(1u), vec2(1.0), mat3x2(1.0), mat4x3(1.0), mat3(1.0), true), mat4x2(1.0), mat4(1.0), bvec2(true)), bvec2(true), mat3x4(1.0), _GLF_struct_115(uvec4(1u), vec2(1.0), mat2x3(1.0), _GLF_struct_113(mat2x3(1.0)), mat2x3(1.0), 1, _GLF_struct_114(mat2x4(1.0), uvec4(1u), true, ivec3(1), true, ivec3(1))), 0, vec4(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_116._injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _GLF_struct_replacement_116._injected_loop_counter ++)
                {
                 atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x], uint(2), 4, 64, 4);
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(_GLF_struct_122 _GLF_struct_replacement_122 = _GLF_struct_122(0, mat3x2(1.0), _GLF_struct_119(mat4x3(1.0), vec4(1.0), 1, _GLF_struct_117(1.0), _GLF_struct_118(1u, bvec4(true), 1, mat4x2(1.0), true, ivec3(1)), ivec3(1)), _GLF_struct_121(_GLF_struct_120(1.0, mat3x4(1.0), uvec3(1u), 1, vec3(1.0), vec3(1.0)), uvec4(1u), mat4(1.0), mat2x4(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_122._injected_loop_counter != (((0 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(7), int(7))) | 1)); _GLF_struct_replacement_122._injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             do
              {
               for(int _injected_loop_counter = (0 & 6132); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         for(_GLF_struct_33 _GLF_struct_replacement_33 = _GLF_struct_33(0, _GLF_struct_29(true, vec2(1.0), _GLF_struct_27(ivec4(1), mat3x2(1.0), mat3x4(1.0), mat3x2(1.0), 1.0), _GLF_struct_28(mat4(1.0), 1u, mat2(1.0), mat3x2(1.0), mat2x3(1.0), mat4x3(1.0)), ivec3(1), mat2x4(1.0)), _GLF_struct_31(mat2x4(1.0), _GLF_struct_30(1.0, mat3(1.0), mat4x3(1.0))), ivec3(1), _GLF_struct_32(mat2(1.0))); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_33._injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_struct_replacement_33._injected_loop_counter ++)
          {
           subgroupAll(true);
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((+ -82075) & 0)); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 for(_GLF_struct_133 _GLF_struct_replacement_133 = _GLF_struct_133(_GLF_struct_127(mat4x3(1.0), _GLF_struct_123(bvec3(true), bvec2(true), 1u, uvec4(1u), ivec4(1), mat3x4(1.0)), _GLF_struct_124(bvec2(true), mat4(1.0), 1.0), _GLF_struct_125(vec4(1.0), ivec4(1), bvec4(true), 1, mat3x2(1.0)), mat2x3(1.0), _GLF_struct_126(ivec4(1), mat3x2(1.0), vec3(1.0))), _GLF_struct_128(vec3(1.0)), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> (0 << _GLF_IDENTITY(int(8), int(8)))))) >> _GLF_IDENTITY(int(1), int(1))), _GLF_struct_132(_GLF_struct_129(bvec3(true)), bvec2(true), _GLF_struct_130(1.0, ivec3(1), mat2x4(1.0)), ivec2(1), uvec4(1u), _GLF_struct_131(bvec4(true), mat4(1.0), true, bvec4(true), 1.0)), 1u); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_133._injected_loop_counter != (-14469 & 0)); _GLF_struct_replacement_133._injected_loop_counter --)
                                  {
                                   barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                          }
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 do
                                  {
                                   barrier();
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                   barrier();
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                }
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     for(int _injected_loop_counter = (1 ^ ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                      {
                                       if(_GLF_DEAD(false))
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           barrier();
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   barrier();
                                  }
                                }
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                            }
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                    {
                                     barrier();
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (((1 ^ 1) | 0) << _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(_GLF_struct_137 _GLF_struct_replacement_137 = _GLF_struct_137(_GLF_struct_135(uvec2(1u), _GLF_struct_134(mat2(1.0), ivec4(1), 1u, mat2x4(1.0), uvec4(1u), bvec4(true), ivec3(1)), 1.0, vec2(1.0)), mat3(1.0), _GLF_struct_136(uvec2(1u), mat3x4(1.0)), true, bvec4(true), 1); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_137._injected_loop_counter > 0); _GLF_struct_replacement_137._injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), true)))))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 0)); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                     for(int _injected_loop_counter = ((1 | 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(_GLF_struct_45 _GLF_struct_replacement_45 = _GLF_struct_45(1, vec2(1.0), ivec4(1), _GLF_struct_44(_GLF_struct_42(mat2x3(1.0), mat2x4(1.0)), vec4(1.0), 1, _GLF_struct_43(1.0)), mat3(1.0), uvec4(1u), mat2x3(1.0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_45._f3._injected_loop_counter != (0 << _GLF_IDENTITY(int(6), int(6)))); _GLF_struct_replacement_45._f3._injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                        }
                      }
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))) >> _GLF_IDENTITY(int(3), int(3))) ^ (1 & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (8295 & 0)); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 do
                  {
                   barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
