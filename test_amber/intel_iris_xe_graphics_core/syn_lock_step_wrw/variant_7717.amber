#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(255.780)), bool(false))) > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), clamp((1), (1), (1))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1))))) || false); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter ++)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              return;
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0))) >> 0), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) | (0))))), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
              }
            }
          }
         else
          {
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x)), _GLF_IDENTITY(0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))), (0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) - 0), 0 | (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) : _GLF_FUZZED(58238), clamp(true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(int(int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 + (int(int(int(_GLF_ZERO(0.0, injectionSwitch.x))))))))) : _GLF_FUZZED(58238), _GLF_IDENTITY(true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(58238), max(true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(58238), true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) / 1.0), injectionSwitch.x)))), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(58238))), true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x4(injectionSwitch.x, 0.0, log(1.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 1.0, log(1.0))), (float(mat2x4(injectionSwitch.x, 0.0, log(1.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 1.0, log(1.0)))) / determinant(mat4(1.0, 1.0, length(vec2(0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))) / determinant(mat4(1.0, tan(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, sqrt(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0))))), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(58238))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool((false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false)))))), _GLF_IDENTITY(true && ((_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, ! (! (false))))))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, ! (! (false))))))), ((_GLF_IDENTITY(! (false), false || (! (_GLF_IDENTITY(false, ! (! (false)))))))) || false), true)))))), bool(bvec4(true && ((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))))), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false)))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y)), ((int(5)) / int(_GLF_ONE(1.0, injectionSwitch.y))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((~ (int(5))), (_GLF_IDENTITY((~ (int(5))), int(ivec4((~ (int(5))), 0, 1, 1)))) | ((~ (int(5))))))))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY((-9.2 - (+ 740.750)), clamp((-9.2 - (+ 740.750)), _GLF_IDENTITY((-9.2 - (+ 740.750)), max(_GLF_IDENTITY((-9.2 - (+ 740.750)), ((-9.2 - (+ 740.750))) / 1.0), (-9.2 - (+ 740.750)))), _GLF_IDENTITY((-9.2 - (+ 740.750)), 1.0 * (_GLF_IDENTITY((-9.2 - (+ 740.750)), float(mat2x3((-9.2 - (+ 740.750)), 0.0, 1.0, 1.0, 1.0, 0.0))))))))), bool(false))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) / 1)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), (float(float(injectionSwitch.y))) / _GLF_ONE(1.0, injectionSwitch.y))))))))))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_DEAD(false))
          return;
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) / 1.0))).x > injectionSwitch.y)), false)))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_TRUE(true))), ! (_GLF_IDENTITY(! ((! (_GLF_WRAPPED_IF_TRUE(true)))), bool(bvec4(! ((! (_GLF_WRAPPED_IF_TRUE(true)))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, true, false))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true)))))
            return;
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(tanh(6734.2751)))), injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(-97200), min(_GLF_FUZZED(-97200), _GLF_IDENTITY(_GLF_FUZZED(-97200), (_GLF_FUZZED(-97200)) | (_GLF_FUZZED(-97200))))) : int(_GLF_ONE(1.0, injectionSwitch.y)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), (bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))) || false))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec4(int(4), 1, (0 >> _GLF_IDENTITY(int(3), int(3))), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (47969 & 0)); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))), true && (_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (true ? _injected_loop_counter -- : _GLF_FUZZED(_injected_loop_counter)))) / 1))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) >> 0)); _injected_loop_counter --)
                          {
                           return;
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                          {
                           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                            {
                             return;
                            }
                          }
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(bool(bool(true)), ! (! (bool(bool(true)))))))), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 do
                  {
                   for(int _injected_loop_counter = (-59010 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - (0 >> _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (24444 & 0)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(24444 & 0, (24444 & 0) * 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (24444 & 0)))))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (24444 & 0)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(24444 & 0, (24444 & 0) * 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (24444 & 0)))))) && true), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (24444 & 0)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(24444 & 0, (24444 & 0) * 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (24444 & 0)))))) && true)) && true)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                      }
                     else
                      {
                      }
                     continue;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         return;
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))) || false)))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))))
                      return;
                    }
                   else
                    {
                    }
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) && true))))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), clamp((0u), (0u), _GLF_IDENTITY((0u), max((0u), (0u))))) | 0u), (0u) | (0u))))), ~ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u)), 0u)), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), min(_GLF_IDENTITY(0u ^ (0u), (0u ^ _GLF_IDENTITY((0u), min(_GLF_IDENTITY((0u), ((0u)) - 0u), _GLF_IDENTITY((0u), min((0u), (0u)))))) / 1u), _GLF_IDENTITY(0u ^ (0u), max(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))), max(_GLF_IDENTITY(uvec3(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u)), 0u)), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), min(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), _GLF_IDENTITY(0u ^ (0u), max(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))), (true ? uvec3(subgroup_id, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 1u * (0u)), _GLF_IDENTITY(0u, (0u) - 0u), 0u)), 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (true ? ~ (0u) : _GLF_FUZZED(22360u)))))) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), min(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), _GLF_IDENTITY(0u ^ (0u), max(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))) : _GLF_FUZZED(uvec3(87160u, 127157u, 55556u)))), uvec3(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) - 0u)))), min(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) - 0u), 0u)), 0u)), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), min(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), _GLF_IDENTITY(0u ^ (0u), max(_GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) / 1u), 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u)))))))), clamp(uint(uvec3(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (subgroup_id))) - 0u), 0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), max(_GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, 0u ^ (0u))))))), clamp(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) ^ 0u)) | 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(uint(1u), uint(1u))) * (_GLF_IDENTITY(0u, 0u ^ (0u))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), 0u + ((0u)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) - 0u)))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))))), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), 1u * (uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))), clamp(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))) ? _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) : _GLF_FUZZED(workgroup_base))))), min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), _GLF_IDENTITY(clamp(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), 0u | (clamp(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), _GLF_IDENTITY(~ (0u), 0u ^ (~ (0u))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u ^ (0u))))) | (0u)), 0u ^ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), 0u | ((0u))) : _GLF_FUZZED((subgroup_local_id + subgroup_local_id)))))))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))))), 1u), _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), min(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) + (uvec3(1u, 1u, 1u))))) * (uvec3(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(_GLF_IDENTITY(5u, (5u) / 1u)), uint(5u))))), 1u))))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), clamp((0u), _GLF_IDENTITY((0u), (true ? (0u) : _GLF_FUZZED(workgroup_id))), (0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), min(0u ^ _GLF_IDENTITY((0u), 1u * ((0u))), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u))), 0u ^ (0u)))))), ~ (~ (uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), min(0u ^ _GLF_IDENTITY((0u), 1u * ((0u))), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u))), 0u ^ (0u)))))))))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_local_id) : (0u))))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) >> 0u)))))), min((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))) ? _GLF_FUZZED(110267u) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), 1u))), (true ? _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))) ? _GLF_FUZZED(110267u) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), 1u))) : _GLF_FUZZED((workgroup_id))))))))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))))) | (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))))))))))))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), 0u + ((0u)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) - 0u)))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))))), clamp(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), 1u * (uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))), clamp(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))) ? _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) : _GLF_FUZZED(workgroup_base))))), min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), (uint(_GLF_IDENTITY(0u, 0u ^ (0u)))) << 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), _GLF_IDENTITY(clamp(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), 0u | (clamp(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), _GLF_IDENTITY(~ (0u), 0u ^ (~ (0u))))))), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, 0u ^ (0u))))) | (0u)), 0u ^ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), 0u | ((0u))) : _GLF_FUZZED((subgroup_local_id + subgroup_local_id)))))))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))))), 1u), _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), min(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) | (_GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) + (uvec3(1u, 1u, 1u))))) * (uvec3(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(_GLF_IDENTITY(5u, (5u) / 1u)), uint(5u))))), 1u))))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), clamp((0u), _GLF_IDENTITY((0u), (true ? (0u) : _GLF_FUZZED(workgroup_id))), (0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), min(0u ^ _GLF_IDENTITY((0u), 1u * ((0u))), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u))), 0u ^ (0u)))))), ~ (~ (uint(uint(_GLF_IDENTITY(0u, _GLF_IDENTITY(0u ^ (0u), clamp(0u ^ (0u), _GLF_IDENTITY(0u ^ (0u), min(0u ^ _GLF_IDENTITY((0u), 1u * ((0u))), _GLF_IDENTITY(0u ^ (0u), (0u ^ (0u)) ^ 0u))), 0u ^ (0u)))))))))))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(subgroup_local_id) : (0u))))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ _GLF_IDENTITY((0u), ((0u)) >> 0u)))))), min((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))) ? _GLF_FUZZED(110267u) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), 1u))), (true ? _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))) ? _GLF_FUZZED(110267u) : _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(uint((_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))), 1u))) : _GLF_FUZZED((workgroup_id))))))))))))), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), clamp(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), _GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))))) | (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) : uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))))))))))))))))))) : _GLF_FUZZED(uvec3(57462u, 92415u, 82204u).t)))))) | (0u)))))), _GLF_IDENTITY(uint(uvec3(subgroup_id, 0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), min(uint(_GLF_IDENTITY(0u, 0u ^ (0u))), uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(uvec3(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), 0u, 0u))))), 0u ^ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))), min(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(uvec3(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), 0u, 0u))))), 0u ^ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), uint(uvec3(uint(_GLF_IDENTITY(0u, ~ (~ (0u)))), 0u, 0u))))), 0u ^ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))))))))) | (0u)))))), 0u ^ (uint(uvec3(subgroup_id, _GLF_IDENTITY(0u, (0u) + 0u), _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (_GLF_IDENTITY(0u, 0u ^ (0u))) >> 0u)))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u)))))))), uint(uvec3(subgroup_id, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((0u) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))), uint(uvec3((_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u ^ (0u))))))), max(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u ^ (0u))))))), _GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (0u)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(0u, 0u ^ (0u))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u)))) | ((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))), max(_GLF_IDENTITY((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))), (_GLF_IDENTITY((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), (uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) ^ 0u)))))) | (0u))), ((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), (uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) ^ 0u)))))) | (0u)))) | ((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), (uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))) ^ 0u)))))) | (0u)))))) | ((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))), _GLF_IDENTITY((0u) | (_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(46016u) : uint(4u))))), 1u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(46016u) : uint(4u))))), 1u, 1u)))))))) | (0u), ((_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), uint(_GLF_IDENTITY(uvec4(~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(46016u) : uint(4u))))), 1u, 1u), uvec4(0u, 0u, 0u, 0u) | (uvec4(~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))))), ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (false ? _GLF_FUZZED(46016u) : uint(4u))))), 1u, 1u)))))))) | (0u)) ^ 0u))), _GLF_IDENTITY(((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), uint(uint(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, max(0u, 0u)))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u)))), (((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), uint(uint(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, max(0u, 0u)))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))) | (_GLF_IDENTITY(((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), uint(uint(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, max(0u, 0u)))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u)))), uint(uvec4(((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, 0u)), uint(uint(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, max(0u, 0u)))))))))), ~ (~ (_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u)))), 0u, 0u, 1u))))) | _GLF_IDENTITY(((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), clamp(uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u)))), uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))))) | (0u)))), (((0u) | (_GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), uint(uint(_GLF_IDENTITY(0u, 0u ^ (0u))))))))) | (0u))))) << 0u))))))))))))) * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size, subgroup_size)) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), (~ (subgroup_size)) * 1u))), subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u, uint(uvec3(0u, (0u | 1u), 0u))) ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u))))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u), ~ (~ _GLF_IDENTITY((uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u)), ~ (_GLF_IDENTITY(~ ((uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u))), (_GLF_IDENTITY(~ ((uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u))), ~ (~ (~ ((uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u))))))) << uvec2(0u, 0u))))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u), ~ (~ (uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u), ~ (~ (uvec2(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size))) | ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)))), ~ (~ ((subgroup_local_id + 1) % subgroup_size))), 1u)))))))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) * 1u)], _GLF_IDENTITY(uint(1), (false ? _GLF_FUZZED(workgroup_base) : uint(1))), 4, 64, 4);
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    return;
  }
 uint read_1 = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), (_GLF_IDENTITY(! (! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (! (false))), true && (! (! (! (false)))))), ! (! (_GLF_IDENTITY(! (! (! (! (false)))), bool(bvec4(! (! (! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))))) || false))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false), true && (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              {
              }
             else
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ~ (~ ((0 ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-0.0)), bool(false))), max(injectionSwitch.y, injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))), true)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))
                continue;
               break;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             break;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                  return;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) || false))))) || false));
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_FUZZED(-1.0)), float(injectionSwitch[1]), bool(true))))).y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(300.384))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((- _injected_loop_counter)) : _injected_loop_counter --)))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(1.0, determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0))), round(length(normalize(1.0))), 0.0, 0.0, 0.0))).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(round(length(normalize(vec3(1.0, 1.0, 1.0))))))))))))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false)))), true && ((_GLF_IDENTITY(! (true), bool(bvec4(! (true), true, false, false))))))))) && (_GLF_IDENTITY(false, (false) && true)))));
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
              }
             else
              {
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, _GLF_IDENTITY(false, true && (false)))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))) || false)))))
    {
    }
   else
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         atomicStore(buf[next_virtual_gid], uint(read_1 + 1), 4, 64, 4);
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
