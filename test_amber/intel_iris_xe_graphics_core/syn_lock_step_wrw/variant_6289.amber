#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true))))), true && ((_GLF_IDENTITY(bool(bvec3(false, false, true)), true && (bool(bvec3(false, false, true)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))))))), true && (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))))))))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))))))), true && (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false)))))), true && (bool(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bool((_GLF_DEAD(false))))))))))))))))))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0)), clamp(vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0)), (true ? vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0)) : _GLF_FUZZED(vec2(6.7, 9.9)))), vec2(mat2x3(injectionSwitch, sqrt(0.0), 0.0, 1.0, 0.0))))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y))))) && true)) || false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) && true)), false || (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4.6, 196.657)) : injectionSwitch)).x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-6970.0540)), vec2(_GLF_FUZZED(-1.7), (injectionSwitch)[1]), bvec2(false, true))).y)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))) && true)))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), min((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY((injectionSwitch) - vec2(0.0, 0.0), _GLF_IDENTITY(((injectionSwitch) - vec2(0.0, 0.0)) * vec2(1.0, 1.0), clamp(((injectionSwitch) - vec2(0.0, 0.0)) * vec2(1.0, 1.0), ((injectionSwitch) - vec2(0.0, 0.0)) * vec2(1.0, 1.0), ((injectionSwitch) - vec2(0.0, 0.0)) * vec2(1.0, 1.0)))))))) * vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) * vec2(1.0, 1.0)) / vec2(1.0, 1.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x)), (gl_WorkGroupSize.x) << 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, (2u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ (gl_WorkGroupID)), min(_GLF_IDENTITY(gl_WorkGroupID, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(2u, min(_GLF_IDENTITY(2u, (2u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 2u)), (2u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ (gl_WorkGroupID)), _GLF_IDENTITY(gl_WorkGroupID, (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(2u), uvec3(_GLF_IDENTITY(2u, (2u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ (gl_WorkGroupID)))).x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || ((false))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u), ~ (~ (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) << 0u)))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3.5)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))), bool(true))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0), mat3x4(mat4(mat3x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))), injectionSwitch.x)), 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / vec3(1.0, 1.0, 1.0)), vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), mat3(1.0) * (vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))) / vec3(1.0, 1.0, 1.0)), vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / vec3(1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x) * 1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / vec3(1.0, 1.0, 1.0)) : _GLF_FUZZED(vec3(77.04, -66.58, 0.5)))), _GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), min(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))) > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), _GLF_IDENTITY(vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), (true ? vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))) : _GLF_FUZZED(vec2(7239.8535, 3.3)))), bvec2(false, true))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), mat3(1.0) * (vec3(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))))) / vec3(1.0, 1.0, 1.0)), vec3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, (1.0) / 1.0), injectionSwitch.y)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, min(1, 1)))))))], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, int(int(_GLF_IDENTITY(1, min(1, 1)))))))], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x : _GLF_FUZZED(-5212.5984))), 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / vec3(1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / exp(vec3(0.0, 0.0, 0.0))), (vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(0, 0)))), _GLF_IDENTITY(0, int(int(0)))))], _GLF_FUZZED(-4.2)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-4.2), (_GLF_FUZZED(-4.2)) - 0.0)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x), min((_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-4.2), (_GLF_FUZZED(-4.2)) - 0.0)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x), (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-4.2), (_GLF_FUZZED(-4.2)) - 0.0)), (vec2((injectionSwitch)[0], _GLF_FUZZED(-4.2))) - vec2(0.0, 0.0)), vec2(_GLF_FUZZED(2.1), _GLF_IDENTITY((injectionSwitch)[1], 1.0 * ((injectionSwitch)[1]))), bvec2(false, true))).x))) * 1.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y))) / vec3(1.0, 1.0, 1.0)) : _GLF_FUZZED(vec3(77.04, -66.58, 0.5)))), _GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), min(vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), vec3(injectionSwitch.x, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))))))) > injectionSwitch.y)))))))) && true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))), _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)))) + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1)))) * 1u), subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))) - 0u) - 0u, clamp((((subgroup_local_id + 1)) - 0u) - _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)), _GLF_IDENTITY((_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, min(((subgroup_local_id + 1)) - 0u, ((subgroup_local_id + 1)) - 0u))) - 0u, ((((subgroup_local_id + 1)) - 0u) - 0u) | 0u), (((subgroup_local_id + 1)) - 0u) - 0u))), (((subgroup_local_id + 1)) - 0u) ^ 0u)) % subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (false ? _GLF_FUZZED(69943) : _GLF_IDENTITY(1, (1) << 0))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), min((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1), (clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), (false ? _GLF_FUZZED(clamp(virtual_gid, workgroup_size, workgroup_size)) : _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))), subgroup_local_id + 1))), (true ? (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) : _GLF_FUZZED(subgroup_local_id))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, 1, 1)))) - 0u, _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, clamp((((subgroup_local_id + 1)) - 0u) - 0u, _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, ((((subgroup_local_id + 1)) - 0u) - 0u) | 0u), ((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)))) - 0u) - 0u))), (((subgroup_local_id + 1)) - 0u) ^ _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) << 0u)))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) | (subgroup_local_id)) + _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), ~ (~ (_GLF_IDENTITY(1, clamp(1, 1, 1))))))) - 0u, _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, clamp((((subgroup_local_id + 1)) - 0u) - 0u, _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, ((((subgroup_local_id + 1)) - 0u) - 0u) | 0u), ((_GLF_IDENTITY((subgroup_local_id + 1), clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, _GLF_IDENTITY(1u, (1u) >> 0u))), 0u ^ (uint(uvec2(subgroup_local_id, _GLF_IDENTITY(1u, (1u) >> 0u)))))) + 1)))) - 0u) - 0u))), (((subgroup_local_id + 1)) - 0u) ^ _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) << 0u))))))) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), max(ivec3(1, 0, _GLF_IDENTITY(1, clamp(1, 1, 1))), ivec3(1, 0, 1)))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 0, 1), (ivec3(1, 0, 1)) << ivec3(0, 0, 0)), max(ivec3(1, 0, 1), ivec3(1, 0, 1))))) ^ 0), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), max(ivec3(1, 0, 1), ivec3(1, 0, 1)))), (int(_GLF_IDENTITY(ivec3(1, 0, 1), max(ivec3(1, 0, 1), ivec3(1, 0, 1))))) ^ 0)) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 0, 1), max(ivec3(1, 0, 1), ivec3(1, 0, 1)))), (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, min(1, 1)))), 0, 1), max(ivec3(1, 0, 1), ivec3(1, 0, 1))))) ^ 0)))), clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))), _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1)) - 0u, _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, clamp((((subgroup_local_id + 1)) - 0u) - 0u, _GLF_IDENTITY(_GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, ((((subgroup_local_id + 1)) - 0u) - _GLF_IDENTITY(0u, max(0u, 0u))) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, ((((subgroup_local_id + 1)) - 0u) - _GLF_IDENTITY(0u, max(0u, 0u))) | 0u), max(_GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, ((((subgroup_local_id + 1)) - 0u) - _GLF_IDENTITY(0u, max(0u, 0u))) | 0u), _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u) - 0u, ((((subgroup_local_id + 1)) - 0u) - _GLF_IDENTITY(0u, max(0u, 0u))) | 0u)))) >> 0u), _GLF_IDENTITY((((subgroup_local_id + 1)) - 0u), ~ (_GLF_IDENTITY(~ ((((subgroup_local_id + 1)) - 0u)), (~ ((((subgroup_local_id + 1)) - 0u))) / 1u))) - 0u))), (((subgroup_local_id + 1)) - 0u) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) << 0u))) % subgroup_size)));
 atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) | (4)), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! _GLF_IDENTITY((false), _GLF_IDENTITY(((false)), (((false))) && true) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) || _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (_GLF_IDENTITY(4, ~ (~ (4)))) + 0), _GLF_IDENTITY(64, ~ (~ (64))), _GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, 0 | (0))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))), false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))), false, false, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))), ! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), ! (! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), clamp(uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u))))))), uint(uvec4(read_1, 1u, 0u, 1u))), 1u, (1u & 1u))), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), clamp(uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u))))))), uint(uvec4(read_1, 1u, 0u, 1u))), 1u, (1u & 1u))), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), clamp(uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u))))))), uint(uvec4(read_1, 1u, 0u, 1u))), 1u, (1u & 1u))), max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), clamp(uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u))))))), uint(uvec4(read_1, 1u, 0u, 1u))), 1u, (1u & 1u))), uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(read_1, 0u ^ (_GLF_IDENTITY(read_1, _GLF_IDENTITY(uint(uvec4(read_1, 1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), clamp(uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u)), uint(uvec4(read_1, 1u, 1u, 1u))))))), uint(uvec4(read_1, 1u, 0u, 1u))), 1u, (1u & 1u)))))))) + 1), _GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp(_GLF_IDENTITY((_GLF_IDENTITY(4, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? _GLF_IDENTITY(4, (4) | 0) : _GLF_FUZZED(-55231)))), ((4)) | ((4))), (4), (4))) << _GLF_IDENTITY(0, _GLF_IDENTITY(max(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + _GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec4(-54000, 29833, 83188, 82914))))), max(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec4(-54000, 29833, 83188, 82914))))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))), (true ? ivec4(_GLF_IDENTITY(0, clamp(0, 0, 0)), 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(ivec4(-54000, 29833, 83188, 82914))))))))), 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | (0))))), (false ? _GLF_FUZZED(-48246) : _GLF_IDENTITY(max(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | (0))))), max(max(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | (0))))), max(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), max(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) | (0))))))))))), 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! ((false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false))), true, false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))))))) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, false, false)))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, false, false)))) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))) || false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
