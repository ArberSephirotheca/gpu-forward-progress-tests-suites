#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(54.35)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, clamp(_GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) + 0.0), (injectionSwitch.y) / 1.0, (injectionSwitch.y) / 1.0))))), bool(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / 1.0, clamp(_GLF_IDENTITY((injectionSwitch.y) / 1.0, ((injectionSwitch.y) / 1.0) + 0.0), (injectionSwitch.y) / 1.0, (injectionSwitch.y) / 1.0)))))))))) || false), _GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), bool(bvec3(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, true)))))) || ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.2)), vec2(_GLF_FUZZED((- 86.09)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(false, true))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), bool(bvec3(! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false, true)))))) || ((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4.2)), vec2(_GLF_FUZZED((- 86.09)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[1]), bvec2(false, true))).x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))) || false), ! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec2(bvec2(bvec2(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.7), (injectionSwitch)[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(98029) : 1))]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, false))))).x > injectionSwitch.y, true))) && true, ! (! ((_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), false || (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))) && true))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y) && true)), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))) : _GLF_FUZZED(vec2(-682.260, -1826.7385)))).y, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(636.209)), bool(false))))), 0.0, sin(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(18.43)), bool(false))), length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), max(float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)))))), (true ? min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(636.209)), bool(false))))), 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), max(float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0))))), float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(636.209)), bool(false))))), 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), max(float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0))))), 0.0, 1.0, 1.0, determinant(mat2(0.0, abs(0.0), 0.0, 0.0)), 1.0), (true ? mat2x3(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x3(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(636.209)), bool(false))))), 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), max(float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0)), float(mat4x3(injectionSwitch.x, 0.0, 1.0, 0.0, sin(0.0), 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 1.0))))), 0.0, 1.0, 1.0, determinant(mat2(0.0, abs(0.0), 0.0, 0.0)), 1.0) : _GLF_FUZZED(mat2x3(10.21, -49.33, -644.317, 22.04, 6723.5108, -5.9))))))) : _GLF_FUZZED(-20.69)))) > injectionSwitch.y, true)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mat2(1.0) * ((injectionSwitch) / vec2(1.0, 1.0))))) / vec2(1.0, 1.0)), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(9.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.5)), bvec2(true, _GLF_IDENTITY(false, true && (false))))))).x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, true))) && _GLF_IDENTITY(true, (true) || false), ! _GLF_IDENTITY((_GLF_IDENTITY(! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true), ! (_GLF_IDENTITY(! (! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)), _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false), ! (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false))))) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), true && (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)))))))))))) && true, ((! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))))), true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true))) && true) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), false || (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)))))))))))))) && true) && true))))), bool(bvec2((_GLF_IDENTITY(! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true), ! (_GLF_IDENTITY(! (! ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true)), _GLF_IDENTITY((! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false), ! (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false))))) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), true && (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)))))))))))) && true, ((! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), true, true))))), true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), true))) && true) || false)) && true)), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)), true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)), false || (! (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), (_GLF_IDENTITY((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true, ((bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) && true) || false)) && true)))))))))))))) && true) && true))))), true)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(-891.878)))) / 1.0)) - 0.0)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 1.0 * _GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), (_GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(-891.878)))) / 1.0)) - 0.0)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) && true) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0), (false ? _GLF_FUZZED(vec3(8803.3858, 34.82, 916.608)) : vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), max(float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0), (false ? _GLF_FUZZED(vec3(8803.3858, 34.82, 916.608)) : vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))), float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0), (false ? _GLF_FUZZED(vec3(8803.3858, 34.82, 916.608)) : vec3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0)))))))), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), false || (_GLF_IDENTITY((! (true)), ((! (true))) || false))))), false, _GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false)), _GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), bool(_GLF_IDENTITY(bool(false || (false)), true && (bool(false || (false)))))), bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))) || (false), true, false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false || (false), bool(bvec3(false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)), true, false))), true, true)))))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(_GLF_FUZZED(-56.40)), float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), bool(true)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)))), false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))))).x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), false || (bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.2), _GLF_FUZZED(-9.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(gl_NumWorkGroups))))).x, clamp(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(gl_NumWorkGroups))))).x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(gl_NumWorkGroups))))).x, min(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(gl_NumWorkGroups))))).x, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(gl_NumWorkGroups))))).x)), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), uvec3(0u, 0u, 0u) ^ (uvec3(uvec3(gl_NumWorkGroups))))).x))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (true))), bool(bool(bool(_GLF_IDENTITY(true, true && (true)))))))) ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(false))) : _GLF_FUZZED(5777.1896)), (_GLF_IDENTITY((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))) && (true))), bool(bool(bool(_GLF_IDENTITY(true, true && (true)))))))) ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(_GLF_IDENTITY(false, ! (! (false)))))) : _GLF_FUZZED(5777.1896)), max((_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, true && (true))))), (bool(bool(bool(_GLF_IDENTITY(true, true && (true)))))) || false)))) ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.8)), bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)) && (false))))) : _GLF_FUZZED(5777.1896)), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true, true)), false)))))) && (true))), bool(bool(bool(_GLF_IDENTITY(true, true && (true)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true, true)), false)))))) && (true))), bool(bool(bool(_GLF_IDENTITY(true, true && (true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))), true, true)), false)))))) && (true))), bool(bool(bool(_GLF_IDENTITY(true, true && (true)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true)) ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), _GLF_IDENTITY(float(_GLF_FUZZED(-3.8)), max(float(_GLF_FUZZED(-3.8)), _GLF_IDENTITY(float(_GLF_FUZZED(-3.8)), min(float(_GLF_FUZZED(-3.8)), float(_GLF_FUZZED(-3.8)))))), bool(false))) : _GLF_FUZZED(5777.1896))))) * 1.0)))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), (_GLF_DEAD(false)) && true))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((false ? _GLF_FUZZED(uvec3(169326u, 123629u, 58734u)) : _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) + 0u), 0u))), uvec3(0u, 0u, 0u) | ((false ? _GLF_FUZZED(uvec3(169326u, 123629u, 58734u)) : _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) ^ uvec3(0u, 0u, 0u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), false, true)), bool(bvec3(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(true, false, true))), ! (! (_GLF_IDENTITY(true, bool(bvec3(true, false, true))))))), false)))), true, true)))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec3(bool(bvec3(false, false, true)), true, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, ((subgroup_local_id) << 0u) + 0u))) | 0u), min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), (subgroup_local_id) << _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(0u, min(0u, 0u))))), 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))) << _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(0u, (0u) - 0u)))))), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), 0u | ((subgroup_local_id))) << 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) >> (0u | (0u & 185873u))) + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id))) << 0u), _GLF_IDENTITY(max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, (_GLF_IDENTITY((subgroup_local_id) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))) / 1u))), (max(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, (_GLF_IDENTITY((subgroup_local_id) << 0u, max((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))) / 1u)))) << 0u)))) >> 0u)), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, ((subgroup_local_id) << 0u) - 0u)), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), min(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), clamp(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) << 0u, min((subgroup_local_id) << 0u, (subgroup_local_id) << 0u))), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)) | 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u >> _GLF_IDENTITY(uint(2u), uint(2u)))))) * _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) << 0u) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), max(_GLF_IDENTITY((subgroup_local_id), (_GLF_IDENTITY((subgroup_local_id), (false ? _GLF_FUZZED(subgroup_id) : (subgroup_local_id)))) / 1u), (subgroup_local_id))) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) | _GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id)))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(workgroup_id))))))) >> 0u))), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) + 0u) << 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, 0u + _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), clamp((workgroup_base), (workgroup_base), _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))))), 0u | ((workgroup_base)))), workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (workgroup_base + subgroup_id * subgroup_size) << _GLF_IDENTITY(0u, (1u ^ 1u) | (0u))) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) ^ 0u) + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id))) | (subgroup_local_id)), (subgroup_local_id) << 0u)))))) | (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), max(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)))) / 1u), (subgroup_local_id) << 0u), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 1u), ~ (~ (uvec3(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), 0u, 1u))))))))))) / 1u))), workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))) * 1u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) || false), true)))))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)) + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(170152u) : subgroup_size)), 0u, 1u)))) >> 0u), 0u), uvec2(1u, 1u) * (uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(170152u) : subgroup_size)), 0u, 1u)))) >> 0u), 0u)))), (uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)) % _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(170152u) : subgroup_size)), 0u, 1u)))) >> 0u), 0u))) << 0u), (uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) / 1)) % subgroup_size, 0u))) | (uint(uvec2((subgroup_local_id + _GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (1) - 0))) % _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u), 0u))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) << 0u)], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read_1 = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(64, min(64, 64))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(64, min(64, 64))), ((_GLF_IDENTITY(64, min(64, 64)))) ^ 0)))), max(_GLF_IDENTITY((_GLF_IDENTITY(64, min(64, 64))), ((_GLF_IDENTITY(64, min(64, 64)))) | ((_GLF_IDENTITY(64, min(64, 64))))), _GLF_IDENTITY((_GLF_IDENTITY(64, min(64, 64))), int(ivec4((_GLF_IDENTITY(64, min(64, 64))), 1, 0, 1))))), min(_GLF_IDENTITY((_GLF_IDENTITY(64, min(64, 64))), ~ (~ ((_GLF_IDENTITY(64, _GLF_IDENTITY(min(64, _GLF_IDENTITY(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, max(64, 64))) * 1), (64) ^ 0)), ~ (~ (min(64, 64))))))))), (_GLF_IDENTITY(64, _GLF_IDENTITY(min(64, 64), (1 ^ 1) | (_GLF_IDENTITY(min(64, 64), min(min(64, 64), min(64, 64))))))))) << _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-74223) : _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(0, int(ivec2(0, 1))), 0))))), 0);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[next_virtual_gid], uint(read_1 + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (_GLF_IDENTITY(true ? 0 | (1) : _GLF_FUZZED(_GLF_IDENTITY(68088, (_GLF_IDENTITY(68088, (false ? _GLF_FUZZED(-62693) : 68088))) ^ (0 >> _GLF_IDENTITY(int(5), int(5))))), (_GLF_IDENTITY(true ? 0 | (1) : _GLF_FUZZED(_GLF_IDENTITY(68088, (_GLF_IDENTITY(68088, (false ? _GLF_FUZZED(-62693) : 68088))) ^ (0 >> _GLF_IDENTITY(int(5), int(5))))), max(true ? 0 | (1) : _GLF_FUZZED(_GLF_IDENTITY(68088, (_GLF_IDENTITY(68088, (false ? _GLF_FUZZED(-62693) : 68088))) ^ (0 >> _GLF_IDENTITY(int(5), int(5))))), true ? 0 | (1) : _GLF_FUZZED(_GLF_IDENTITY(68088, (_GLF_IDENTITY(68088, (false ? _GLF_FUZZED(-62693) : 68088))) ^ (0 >> _GLF_IDENTITY(int(5), int(5)))))))) | (true ? 0 | (1) : _GLF_FUZZED(_GLF_IDENTITY(68088, (_GLF_IDENTITY(68088, (false ? _GLF_FUZZED(-62693) : 68088))) ^ (0 >> _GLF_IDENTITY(int(5), int(5))))))))))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! _GLF_IDENTITY((false), ((false)) && true)) || false)) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (true ? min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))))) : _GLF_FUZZED(injectionSwitch)))), vec2(vec2(injectionSwitch))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y) - 0.0)))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(1.1, -188.572)) : injectionSwitch)))), vec2(vec2(injectionSwitch))).y))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y, (true ? _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y : _GLF_FUZZED(437.127)))))), (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)) && true), ! (! (bool(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))))))))))))) && _GLF_IDENTITY(true, (true) || false)))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
