#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY((1 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), _GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), 0 | (_GLF_IDENTITY(~ (int(4)), (~ (int(4))) | 0))))))) >> _GLF_IDENTITY(int(4), int(4)))), ((1 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))), min((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), _GLF_IDENTITY(int(4), ~ (~ (int(4)))))), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), ~ (~ (int(4)))), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))))) >> 0)) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) + 0)))))) - (0 ^ 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true, false))))))) && true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- -9.8))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- -9.8))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) / determinant(mat2(1.0, 0.0, abs(0.0), 1.0))), (false ? _GLF_FUZZED((-577.838 * 7127.5798)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), mix(float(_GLF_FUZZED(-21.26)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))) ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), (_GLF_FUZZED((-577.838 * 7127.5798))) / 1.0) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) - 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), float(_GLF_IDENTITY(mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0), (mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0))))) / 1.0)), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false)))))))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) / determinant(mat2(1.0, 0.0, abs(0.0), 1.0))), (false ? _GLF_FUZZED((-577.838 * 7127.5798)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), mix(float(_GLF_FUZZED(-21.26)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))) ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), (_GLF_FUZZED((-577.838 * 7127.5798))) / 1.0) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) - 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), float(_GLF_IDENTITY(mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0), (mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0))))) / 1.0)), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))) && true))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))) / determinant(_GLF_IDENTITY(mat2(1.0, 0.0, abs(0.0), 1.0), mat2(1.0) * (mat2(1.0, 0.0, abs(0.0), 1.0))))), (false ? _GLF_FUZZED((-577.838 * 7127.5798)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch, injectionSwitch)), (injectionSwitch) - vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), mix(float(_GLF_FUZZED(-21.26)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), min(_GLF_FUZZED((-577.838 * 7127.5798)), _GLF_FUZZED((-577.838 * 7127.5798)))), (_GLF_FUZZED((-577.838 * 7127.5798))) / 1.0) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))) - 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), float(_GLF_IDENTITY(mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0), (mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0))), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0))))) / 1.0)), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), ! (! (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))) - 0.0), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, (true ? (injectionSwitch.y) - 0.0 : _GLF_FUZZED(8.9))))))) / determinant(mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(57.06)), bool(false))), 0.0, abs(0.0), 1.0))), (_GLF_IDENTITY(false ? _GLF_FUZZED((-577.838 * 7127.5798)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0), injectionSwitch.y)), (false ? _GLF_FUZZED((-577.838 * 7127.5798)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0), injectionSwitch.y))) + 0.0))), mix(float(_GLF_FUZZED(-21.26)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-6400.4643, -2.7)) : injectionSwitch)), injectionSwitch)), injectionSwitch)).y, (injectionSwitch.y) - 0.0), (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))) ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), _GLF_IDENTITY((_GLF_FUZZED((-577.838 * 7127.5798))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_FUZZED((-577.838 * 7127.5798))) : _GLF_FUZZED(pow(-4.9, 8.7)))) / 1.0) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) - 0.0), (false ? _GLF_IDENTITY(_GLF_FUZZED((-577.838 * 7127.5798)), float(_GLF_IDENTITY(mat4(_GLF_FUZZED((-577.838 * 7127.5798)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(atan(-4.6)))), 0.0, 0.0, log(1.0), 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), 0.0, 0.0), _GLF_IDENTITY((mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)), (_GLF_IDENTITY((mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0)), ((mat4(_GLF_FUZZED((-577.838 * 7127.5798)), 1.0, 0.0, 0.0, log(1.0), 1.0, 1.0, 1.0, log(1.0), 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)) + mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) - 0.0))))) / 1.0)), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, false))))))))))) && true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), false))))))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (true ? _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), (max(injectionSwitch, injectionSwitch)) * mat2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / _GLF_ONE(1.0, injectionSwitch.y)))))) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) + 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), ! (! (_GLF_DEAD(false))))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, ! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ((! (injectionSwitch.x > injectionSwitch.y))) && true))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, ~ (~ ((0) << 0))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 return;
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)) / exp(0.0))))))
                  return;
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter < 1))))); _injected_loop_counter ++)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(log(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(vec2(4652.2797, -2.6))))))).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(log(_GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(log(vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(0.0), tan(0.0), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))), injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(log(vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(0.0), tan(0.0), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x)))))), injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(log(vec2(1.0, 1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, length(vec3(0.0, 0.0, 0.0)), 1.0, tan(_GLF_IDENTITY(0.0, float(mat4x2(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0)))), tan(0.0), 1.0, 0.0, 0.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))) / vec2(1.0, 1.0)).x)))))), injectionSwitch.y))) || false))))), bool(bvec2(! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) / cos(log(vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))), 1.0)))))).x > injectionSwitch.y), false)))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), false)))))))
                    return;
                   break;
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bool(true && (false)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
        return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x, round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 1.0, 1.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.6) : injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-463.564), (true ? _GLF_FUZZED(-463.564) : _GLF_FUZZED(-2899.9994))))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-411.113, 9.0)) : injectionSwitch)).y, (false ? _GLF_FUZZED(-3.6) : injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(-463.564))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.6) : injectionSwitch.y)), (true ? injectionSwitch.y : _GLF_FUZZED(-463.564))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), (false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), 1.0, 1.0))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-3.6) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), (true ? _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)) : _GLF_IDENTITY(_GLF_FUZZED(-463.564), (true ? _GLF_FUZZED(-463.564) : _GLF_FUZZED(-2899.9994))))))), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-411.113, 9.0)) : injectionSwitch)).y, (false ? _GLF_FUZZED(-3.6) : injectionSwitch.y)), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), (bool(true)) || false)), true && (! (_GLF_IDENTITY(bool(true), (bool(true)) || false))))))), ! (! (bool(_GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(true), (bool(true)) || false)), true && (! (_GLF_IDENTITY(bool(true), (bool(true)) || false))))))))))) ? injectionSwitch.y : _GLF_FUZZED(-463.564))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) * mat2(1.0)))).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false ? _GLF_FUZZED(-3.6) : injectionSwitch.y, mix(float(_GLF_FUZZED(179.902)), float(false ? _GLF_FUZZED(-3.6) : injectionSwitch.y), bool(true))))), (true ? injectionSwitch.y : _GLF_FUZZED(-463.564))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(ivec3(int(0), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0), (ivec3(int(0), ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 0)) ^ ivec3(0, 0, 0)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(mix(_injected_loop_counter, _injected_loop_counter, false)))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-74413)), 0 ^ ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(-74413))))) << _GLF_IDENTITY(int(7), _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(0 + _GLF_IDENTITY((int(7)), ~ (~ ((int(7))))), (0 & 26188) | (0 + _GLF_IDENTITY((int(7)), ~ (~ ((int(7)))))))), (int(_GLF_IDENTITY(7, max(_GLF_IDENTITY(_GLF_IDENTITY(7, min(7, 7)), (_GLF_IDENTITY(7, min(7, 7))) | (_GLF_IDENTITY(7, min(7, 7)))), 7)))) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), vec2(_GLF_IDENTITY(mat3x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 0.0, 1.0, cos(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(997.932, 7303.2208, 3.7, 6.2, 8966.3432, -19.13)) : mat3x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 0.0, 1.0, cos(0.0), 0.0))))), _GLF_IDENTITY((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), vec2(_GLF_IDENTITY(mat3x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 0.0, 1.0, cos(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(997.932, 7303.2208, 3.7, 6.2, 8966.3432, -19.13)) : mat3x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 0.0, 1.0, cos(0.0), 0.0)))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), ((_GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), vec2(_GLF_IDENTITY(mat3x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 0.0, 1.0, cos(0.0), 0.0), (false ? _GLF_FUZZED(mat3x2(997.932, 7303.2208, 3.7, 6.2, 8966.3432, -19.13)) : mat3x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 0.0, 1.0, cos(0.0), 0.0)))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0))))).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), true && ((false)))), true && (bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || ((false))))))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), true && ((false)))), true && (bool(_GLF_IDENTITY((false), true && ((false))))))))), false || (! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), true && ((false)))), true && (bool(_GLF_IDENTITY((false), true && ((false))))))))))))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), true && (_GLF_WRAPPED_IF_FALSE(false)))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], float(mat2(injectionSwitch[0], 1.0, 0.0, 0.0))), injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ((! (false))) || false), bool(bvec2(! (! (false)), true))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (false)), true), bvec2(bvec3(bvec2(! (! (false)), true), false))))), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true))))))))), true))), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))), true, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))) || false))), true, true)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(floor(vec2(1.9, 2.8))) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x))); _injected_loop_counter --)
      {
       return;
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8422.1847)), float(injectionSwitch.y), bool(true))))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bvec3(false || (injectionSwitch.x > injectionSwitch.y), true, false))))))))))))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8422.1847)), float(injectionSwitch.y), bool(true))))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bvec3(false || (injectionSwitch.x > injectionSwitch.y), true, false))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(ldexp(-810.643, -2989)) : injectionSwitch.x)) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))))))), (injectionSwitch.x > injectionSwitch.y) || false)) && _GLF_IDENTITY(true, ! (! (true)))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(109.724)))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true))))))), ! (! ((! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true))))))))))))), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true))))))), ! (! ((! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))), false, true))))))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), (bool(bvec2(_GLF_DEAD(false), false))) || false)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y)))))), false || (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 4.2)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.50)), bvec2(true, false))).y)) ? injectionSwitch : _GLF_FUZZED((1.2 * vec2(7515.7514, 33.60)).yx), (false ? _GLF_FUZZED(vec2(8.2, -3.5)) : _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 4.2)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.50)), bvec2(true, false))).y)) ? injectionSwitch : _GLF_FUZZED((1.2 * vec2(7515.7514, 33.60)).yx))))).x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 4.2)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.50)), bvec2(true, false))).y)) ? injectionSwitch : _GLF_FUZZED((1.2 * vec2(7515.7514, 33.60)).yx), (false ? _GLF_FUZZED(vec2(8.2, -3.5)) : _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 4.2)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.50)), bvec2(true, false))).y)) ? injectionSwitch : _GLF_FUZZED((1.2 * vec2(7515.7514, 33.60)).yx))))).x > injectionSwitch.y), bool(bvec3((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 4.2)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.50)), bvec2(true, false))).y)) ? injectionSwitch : _GLF_FUZZED((1.2 * vec2(7515.7514, 33.60)).yx), (false ? _GLF_FUZZED(vec2(8.2, -3.5)) : _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- 4.2)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.50)), bvec2(true, false))).y)) ? injectionSwitch : _GLF_FUZZED((1.2 * vec2(7515.7514, 33.60)).yx))))).x > injectionSwitch.y), true, true))))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(-502.402)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), 0.0, 0.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(-502.402)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), 0.0, 0.0))) + vec2(0.0, 0.0))).x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true))), injectionSwitch.y)))))))))))) || false)), bool(bvec2((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(-502.402)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), 0.0, 0.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(-502.402)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), 0.0, 0.0))) + vec2(0.0, 0.0))).x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true))), injectionSwitch.y)))))))))))) || false)), false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, true && (false)), true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y))), 1.0, 1.0, exp(0.0), 0.0, 1.0, 0.0, 1.0, log(1.0), 0.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), sin(0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), float(mat4(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0)), 0.0, 0.0, exp(0.0), 1.0), transpose(transpose(mat4x3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), sin(0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), float(mat4(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0)))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)), dot(vec4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0), vec4(_GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0))), 1.0, determinant(mat4(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0)), 0.0, 0.0, exp(0.0), 1.0)))))), max(injectionSwitch.y, injectionSwitch.y))))))))))))), bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(inversesqrt(injectionSwitch)) : injectionSwitch))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4435.6353, 8783.8996)) : injectionSwitch)).y, false, true))))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))))), (bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, true))))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(inversesqrt(injectionSwitch)) : injectionSwitch))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(4435.6353, 8783.8996)) : injectionSwitch)).y, false, true))))))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))))))) || false))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(_GLF_IDENTITY(-502.402, max(-502.402, _GLF_IDENTITY(-502.402, (-502.402) - 0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, _GLF_IDENTITY(length(0.0), float(_GLF_IDENTITY(mat3x4(length(0.0), sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3x4(-0.5, 63.27, 6.1, -8177.1753, -6.1, -49.03, -87.10, -7.1, -50.48, -9027.6095, 7.8, -83.93)) : mat3x4(length(0.0), sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0))))), 0.0, exp(0.0), 0.0, 0.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(_GLF_IDENTITY(-502.402, clamp(-502.402, -502.402, _GLF_IDENTITY(-502.402, clamp(-502.402, -502.402, -502.402)))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), 0.0, 0.0))) + vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), true), bvec2(bvec2(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))), true))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(atanh(6.3)))) > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))), bool(bvec2(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(_GLF_IDENTITY(injectionSwitch[0], float(mat4(injectionSwitch[0], 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])))), injectionSwitch[1])).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && _GLF_IDENTITY(true, false || (true)))))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))))))))) || false)), bool(bvec2((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(-502.402)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0))) < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), 0.0, 0.0)), (vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(708.147), _GLF_FUZZED(-502.402)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x < injectionSwitch.y))))), 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(0.0), 0.0, exp(0.0), _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)), 0.0))) + vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), mat3(1.0) * (vec3(injectionSwitch, 0.0))))).y)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))), true && (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))) || false), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false)))))), (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))), true))))), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), _GLF_IDENTITY(float(mat3(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), 0.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(float(float(mat3(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), 0.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))), cos(0.0))), max(float(vec2(_GLF_IDENTITY(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), _GLF_IDENTITY(float(mat3(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), 0.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(float(float(mat3(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), 0.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))), cos(0.0))), float(vec2(_GLF_IDENTITY(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), _GLF_IDENTITY(float(mat3(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), 0.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), float(float(float(mat3(mix(float(_GLF_FUZZED(15.74)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.2)), bool(false)))), bool(true)), 0.0, abs(1.0), 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))), cos(0.0))))))), injectionSwitch.y)))))))))))) || false)), false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
      barrier();
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0)) | (~ (~ (1)))))) ^ 0), ~ _GLF_IDENTITY((~ (1)), max((~ (1)), (~ (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))) && true), false, _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-48.66))), 1.0)), 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))), false || (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))), (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(0.0, 0.0 + (0.0)) + (injectionSwitch.y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(5.7))) : _GLF_FUZZED(normalize(-1.8))))), false || _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + log(vec2(1.0, 1.0))).y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, float(vec2(0.0, 1.0))))).y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)))))))))), false || (bool((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))))))))))), ! (! (bool(_GLF_IDENTITY(bool((_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)), max(_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)), clamp(true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)), true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)), true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)))), true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) + vec2(0.0, 0.0)).y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)))))))))), _GLF_IDENTITY(false, (false) && true) || (bool((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false)), mix(float(_GLF_FUZZED(7.4)), float(mix(float(injectionSwitch.y), float(_GLF_FUZZED(-696.899)), bool(false))), bool(true)))))), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))) : _GLF_FUZZED(normalize(-1.8))))) || false)), _GLF_IDENTITY(! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))))), false || (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(normalize(-1.8))))))))))))))))))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, exp(0.0))), float(mat3x2(float(vec2(1.0, exp(0.0))), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), cos(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(length(vec2(0.0, 0.0)), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(length(vec2(0.0, 0.0)), 1.0, 0.0))), abs(0.0), 1.0, 0.0))), sqrt(1.0)))), max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, exp(0.0))), float(mat3x2(float(vec2(1.0, exp(0.0))), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), cos(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(length(vec2(0.0, 0.0)), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(length(vec2(0.0, 0.0)), 1.0, 0.0))), abs(0.0), 1.0, 0.0))), sqrt(1.0)))), _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec2(1.0, exp(0.0))), float(mat3x2(float(vec2(1.0, exp(0.0))), 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0)))), cos(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(length(vec2(0.0, 0.0)), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(length(vec2(0.0, 0.0)), 1.0, 0.0))), abs(0.0), 1.0, 0.0))), sqrt(1.0)))))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 1.0, 0.0))))) > injectionSwitch.y))))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)))) || false), true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + _GLF_IDENTITY(0u, (0u & 180744u) | (_GLF_IDENTITY(0u, 0u ^ (0u))))) * subgroup_size) / 1u), clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED((true ? 4.2 : 5.7))), bool(false)), _GLF_IDENTITY(_GLF_IDENTITY((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false))), mix(float((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false)))), float(_GLF_FUZZED(-3595.4568)), bool(false))), min(_GLF_IDENTITY((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false))), mix(float((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : _GLF_IDENTITY(5.7, mix(float(5.7), float(_GLF_FUZZED(vec4(-742.997, 9299.7738, -43.73, 4.9).w)), bool(false)))) * 1.0)))), bool(false)))), float(_GLF_IDENTITY(_GLF_FUZZED(-3595.4568), (_GLF_IDENTITY(_GLF_FUZZED(-3595.4568), clamp(_GLF_FUZZED(-3595.4568), _GLF_FUZZED(-3595.4568), _GLF_IDENTITY(_GLF_FUZZED(-3595.4568), (false ? _GLF_FUZZED(-2.8) : _GLF_FUZZED(-3595.4568)))))) * 1.0)), bool(false))), _GLF_IDENTITY((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false))), mix(float((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false)))), float(_GLF_FUZZED(-3595.4568)), bool(false))))) - 0.0)) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(mix(float(injectionSwitch.x), float(_GLF_FUZZED((true ? 4.2 : 5.7))), bool(false)), _GLF_IDENTITY((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? 4.2 : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false))), mix(float((mix(float(injectionSwitch.x), float(_GLF_FUZZED((_GLF_IDENTITY(true ? _GLF_IDENTITY(4.2, max(_GLF_IDENTITY(4.2, round(length(normalize(1.0))) * (4.2)), 4.2)) : 5.7, (true ? 4.2 : 5.7) * 1.0)))), bool(false)))), float(_GLF_FUZZED(-3595.4568)), bool(false))) - _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), max(0.0, 0.0)))) > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) << 0u), ~ (~ (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)))); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(findLSB(subgroup_size)) : _injected_loop_counter --))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (_injected_loop_counter --) : _GLF_FUZZED(-91199))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))))));
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   _GLF_IDENTITY(buf[virtual_gid] = 1, (true ? buf[virtual_gid] = 1 : _GLF_FUZZED(_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), clamp(uvec3(22287u, 165686u, 72349u), uvec3(22287u, 165686u, 72349u), _GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (~ (uvec3(22287u, 165686u, 72349u))))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), clamp(uvec3(22287u, 165686u, 72349u), uvec3(22287u, 165686u, 72349u), _GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (~ (uvec3(22287u, 165686u, 72349u))))))), ((_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), clamp(uvec3(22287u, 165686u, 72349u), uvec3(22287u, 165686u, 72349u), _GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (~ (uvec3(22287u, 165686u, 72349u)))))))) | ((_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), clamp(uvec3(22287u, 165686u, 72349u), uvec3(22287u, 165686u, 72349u), _GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (~ (uvec3(22287u, 165686u, 72349u)))))))))))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), clamp(uvec3(22287u, 165686u, 72349u), uvec3(22287u, 165686u, 72349u), _GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (~ (uvec3(22287u, 165686u, 72349u))))))), (~ (_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), clamp(_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), (true ? _GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), uvec3(uvec3(uvec3(22287u, 165686u, 72349u)))) : _GLF_FUZZED(uvec3(subgroup_local_id, num_workgroup, workgroup_id)))), uvec3(22287u, 165686u, 72349u), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), (_GLF_IDENTITY(uvec3(22287u, 165686u, 72349u), ~ (~ (uvec3(22287u, 165686u, 72349u))))) >> uvec3(0u, 0u, 0u)), ~ (~ (uvec3(22287u, 165686u, 72349u)))))))) + uvec3(0u, 0u, 0u))))))[0])));
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) << 0)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), true && (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4019.1122) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-7.9) : injectionSwitch.x)))) > injectionSwitch.y)))) && true))))))))
  {
  }
 else
  {
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_GLF_IDENTITY(-97654, (false ? _GLF_FUZZED(-98824) : -97654)))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
