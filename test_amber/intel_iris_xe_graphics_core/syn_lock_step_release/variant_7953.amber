#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), true))));
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(vec2(-6.5, -2.5).x, mix(float(vec2(-6.5, -2.5).x), float(_GLF_FUZZED(-2272.8526)), bool(false)))), _GLF_FUZZED((-339.912 + 8.4))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true))))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), clamp(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0), int(7))), _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), 0 + (int(7)))))), (_GLF_IDENTITY(int(7), min(int(7), int(7)))) / 1))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bvec3(_injected_loop_counter > 0, true, true)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))), false, true, true))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))), false, true, true)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1062.9547), _GLF_FUZZED(-0.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-4.8)), bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), false))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z = subgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y))))) && true)))
    barrier();
   return;
  }
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w = subgroup_local_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(1.6))), _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-9.8)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true)))))))))) && true), false), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, bool(bvec3(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false)))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false)))), false, false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, false)), ! (! (bool(bvec3(true, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))) || false)))))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, false)), true, false, false)))))), bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))), clamp(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))), _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))), _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))))), (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), ! (! (! (_GLF_IDENTITY(true, false || (true)))))))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), clamp(float(_GLF_FUZZED(-88.48)), float(_GLF_FUZZED(-88.48)), float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))), ! (! ((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false || (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.9)), float(injectionSwitch.y), bool(true))))), true)))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! _GLF_IDENTITY((bool(true)), ! (! ((bool(true)))))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), ! (! (bool(true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))))))) && true), _GLF_IDENTITY(true, bool(bvec3(true, false, false))), false), bvec3(bvec3(bvec3(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, ! (! (true))))), bool(bvec4(! ((_GLF_IDENTITY(true, ! (! (true))))), false, true, false)))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), 1.0 * (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))), (_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, (-88.48) - determinant(mat3(tan(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))), ! (! ((_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))), false)), bvec3(bvec4(bvec3(bvec3(false, true, false)), _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))), true))))), (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, ! (! (false))))))) || false), (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-88.48, max(-88.48, -88.48)))), float(injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(true), false || (bool(true))), (_GLF_IDENTITY(bool(true), ! (! (bool(true))))) || false))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-88.48)), float(injectionSwitch.y), bool(true)))) - 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-88.48)), tan(0.0) + (float(_GLF_FUZZED(-88.48)))), float(injectionSwitch.y), bool(true))))))))))))) && true), _GLF_IDENTITY(true, bool(bvec3(true, false, false))), false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  barrier();
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.7)), bool(false))))), injectionSwitch.y)))), _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(-73.38, -8551.5310))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))))).y)) / cos(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))[1]), vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)), bvec2(false, false))))), _GLF_IDENTITY(vec2(mat4(_GLF_IDENTITY(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - _GLF_IDENTITY(0.0, (0.0) * 1.0)))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6619.3946), _GLF_FUZZED(-682.522)), bvec2(false, false))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0), mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6619.3946), _GLF_FUZZED(-682.522)), bvec2(false, false))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(6637.0233), clamp(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_FUZZED(6637.0233), max(_GLF_FUZZED(6637.0233), _GLF_FUZZED(6637.0233))), _GLF_IDENTITY(_GLF_FUZZED(6637.0233), min(_GLF_FUZZED(6637.0233), _GLF_FUZZED(6637.0233))))), _GLF_FUZZED(-301.115)), bvec2(false, false))))), mix(vec2(_GLF_FUZZED(-7.7), (vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - _GLF_IDENTITY(0.0, (0.0) * 1.0)))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6619.3946), _GLF_FUZZED(-682.522)), bvec2(false, false))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0), mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6619.3946), _GLF_FUZZED(-682.522)), bvec2(false, false))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(6637.0233), clamp(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_FUZZED(6637.0233), max(_GLF_FUZZED(6637.0233), _GLF_FUZZED(6637.0233))), _GLF_IDENTITY(_GLF_FUZZED(6637.0233), min(_GLF_FUZZED(6637.0233), _GLF_FUZZED(6637.0233))))), _GLF_FUZZED(-301.115)), bvec2(false, false))))))[1]), vec2((vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - _GLF_IDENTITY(0.0, (0.0) * 1.0)))), mix(vec2(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6619.3946), _GLF_FUZZED(-682.522)), bvec2(false, false))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0), mat2x4(mat2x4(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6619.3946), _GLF_FUZZED(-682.522)), bvec2(false, false))), 1.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0))))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(6637.0233), clamp(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_FUZZED(6637.0233), max(_GLF_FUZZED(6637.0233), _GLF_FUZZED(6637.0233))), _GLF_IDENTITY(_GLF_FUZZED(6637.0233), min(_GLF_FUZZED(6637.0233), _GLF_FUZZED(6637.0233))))), _GLF_FUZZED(-301.115)), bvec2(false, false))))))[0], _GLF_FUZZED(873.668)), bvec2(true, false))), min(vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(clamp(vec2(-12.19, 4.5), 7.3, -71.92)))).y)), mix(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], min(((injectionSwitch) * _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) + mat2(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], (((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0]) * 1.0))), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)), mix(vec2(_GLF_FUZZED(-5.7), _GLF_FUZZED(-7811.3471)), vec2(_GLF_IDENTITY((vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, mix(float(_GLF_IDENTITY(6637.0233, (6637.0233) - 0.0)), float(_GLF_FUZZED((+ vec3(95.86, -754.412, -9.2)).x)), bool(false)))), _GLF_FUZZED(-301.115)))[0], _GLF_IDENTITY(min(_GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), max((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), _GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), ((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))) * mat2(1.0))))[0], (vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))[0]), clamp(min(_GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), max((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), _GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), ((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))) * mat2(1.0))))[0], (vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))[0]), min(_GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), max((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), _GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), ((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))) * mat2(1.0))))[0], (vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))[0]), _GLF_IDENTITY(min(_GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), max((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), _GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), ((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))) * mat2(1.0))))[0], (vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))[0]), (min(_GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), max((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), _GLF_IDENTITY((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115))), ((vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))) * mat2(1.0))))[0], (vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))[0])) - 0.0)))), (vec2(_GLF_FUZZED(6637.0233), _GLF_FUZZED(-301.115)))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bvec2(false, false))))), vec2(_GLF_IDENTITY(vec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, min(6637.0233, 6637.0233))), mix(float(_GLF_FUZZED(6637.0233)), float(_GLF_FUZZED(-573.371)), bool(false))), _GLF_FUZZED(-301.115)), bvec2(false, false)))), (vec2(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), clamp(injectionSwitch, injectionSwitch, injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(6637.0233), mix(float(_GLF_FUZZED(6637.0233)), float(_GLF_FUZZED(-573.371)), bool(false))), _GLF_FUZZED(-301.115)), bvec2(false, false))))) * _GLF_IDENTITY(mat2(1.0), mat2(mat2(_GLF_IDENTITY(mat2(1.0), mat2(mat3x2(mat2(1.0))))))))))), 1.0, 1.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0))), vec2(mat3(vec2(mat4(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), min((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mat2(1.0) * _GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) * vec2(1.0, 1.0))))), mix(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], (((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0]) / 1.0), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(75.92) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), max(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), max(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)) : _GLF_FUZZED(-428.325), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)) : _GLF_FUZZED(-428.325), 0.0 + (true ? _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)) : _GLF_FUZZED(-428.325))), true ? _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)) : _GLF_FUZZED(-428.325), _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)) : _GLF_FUZZED(-428.325), mix(float(true ? _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0)) : _GLF_FUZZED(-428.325)), float(_GLF_FUZZED(-51.29)), bool(false)))))))))), min(vec2(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_FUZZED(-301.115), _GLF_FUZZED(-301.115)))) - tan(0.0))), vec2(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), min(_GLF_IDENTITY(_GLF_FUZZED(-301.115), mix(float(_GLF_FUZZED(vec4(8.2, -666.540, -2.4, 502.205).w)), float(_GLF_FUZZED(-301.115)), bool(true))), _GLF_FUZZED(-301.115)))) - tan(0.0))))), bvec2(false, false))))), min(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) * cos(0.0))), injectionSwitch.y, injectionSwitch.y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-96.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) / exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, clamp(_GLF_IDENTITY(6637.0233, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 6637.0233 : _GLF_FUZZED(0.9))), 6637.0233, 6637.0233))), _GLF_FUZZED(_GLF_IDENTITY(-301.115, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(-301.115, (-301.115) + 0.0)), bool(true))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), clamp(vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) * cos(0.0))), injectionSwitch.y, injectionSwitch.y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-96.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) / exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, clamp(_GLF_IDENTITY(6637.0233, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 6637.0233 : _GLF_FUZZED(0.9))), 6637.0233, 6637.0233))), _GLF_FUZZED(_GLF_IDENTITY(-301.115, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(-301.115, (-301.115) + 0.0)), bool(true))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) * cos(0.0))), injectionSwitch.y, injectionSwitch.y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-96.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) / exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, clamp(_GLF_IDENTITY(6637.0233, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 6637.0233 : _GLF_FUZZED(0.9))), 6637.0233, 6637.0233))), _GLF_FUZZED(_GLF_IDENTITY(-301.115, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(-301.115, (-301.115) + 0.0)), bool(true))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))), mix(vec2(_GLF_FUZZED(-9.1), _GLF_FUZZED(212.496)), vec2((vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) * cos(0.0))), injectionSwitch.y, injectionSwitch.y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-96.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) / exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, clamp(_GLF_IDENTITY(6637.0233, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 6637.0233 : _GLF_FUZZED(0.9))), 6637.0233, 6637.0233))), _GLF_FUZZED(_GLF_IDENTITY(-301.115, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(-301.115, (-301.115) + 0.0)), bool(true))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))[0], (vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) * cos(0.0))), injectionSwitch.y, injectionSwitch.y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-96.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) / exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, clamp(_GLF_IDENTITY(6637.0233, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 6637.0233 : _GLF_FUZZED(0.9))), 6637.0233, 6637.0233))), _GLF_FUZZED(_GLF_IDENTITY(-301.115, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(-301.115, (-301.115) + 0.0)), bool(true))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))[1]), bvec2(true, true))), vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) * cos(0.0))), injectionSwitch.y, injectionSwitch.y), mix(float(clamp(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))), injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-96.10)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(6789.9779)), vec2(_GLF_FUZZED(-9.0), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))))))), bvec2(false, true)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) / exp(vec2(0.0, 0.0)))[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(6637.0233, clamp(_GLF_IDENTITY(6637.0233, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))) ? 6637.0233 : _GLF_FUZZED(0.9))), 6637.0233, 6637.0233))), _GLF_FUZZED(_GLF_IDENTITY(-301.115, mix(float(_GLF_FUZZED(6.7)), float(_GLF_IDENTITY(-301.115, (-301.115) + 0.0)), bool(true))))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))), vec2(vec2(_GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), max(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), (((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))) - vec2(0.0, 0.0))))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), clamp(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) + 0.0), _GLF_ONE(1.0, injectionSwitch.y)))), float(_GLF_FUZZED(9.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))[1]), vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]))), vec2(_GLF_FUZZED(6637.0233), _GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_IDENTITY(_GLF_FUZZED(-301.115), (_GLF_FUZZED(-301.115)) + 0.0)) - 0.0)), _GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), true, false)))), true, true)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), true, false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))), true, false)))), true, true)))))))))))))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-6.2))), 1.0, cos(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), min((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y))))
      {
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(-34221) : clamp(1, 1, 1)))))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) << 0)), int(1))), (false ? _GLF_FUZZED((67731 % ivec3(48370, 2988, 50396).g)) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) << 0)), int(1))), min((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) ^ 0)) | (_GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, 1), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) + 0)))))))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)), 1, 1))))) << 0)), int(1))), (_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (~ (1))), 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) << 0)), int(1))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec2(int(1), 1))), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1)))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (false ? _GLF_FUZZED(-34221) : clamp(1, 1, 1)))))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) << 0)), int(1))), (false ? _GLF_FUZZED((67731 % ivec3(48370, 2988, 50396).g)) : _GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) << 0)), int(1))), min((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) ^ 0)) | (_GLF_IDENTITY(clamp(1, 1, 1), min(clamp(1, 1, 1), _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) + 0)))))))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) | (1)), 1, 1))))) << 0)), int(1))), (_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, ~ (~ (1))), 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))) << 0)), int(1))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(ivec2(int(1), 1))), _GLF_IDENTITY(int(1), min(_GLF_IDENTITY(int(1), 1 * (int(1))), int(1))))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), false, true)))))
          continue;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true)))))))), (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool((_GLF_DEAD(false)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))), (bool(bool((_GLF_DEAD(false))))) && true)), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))), (bool(bool((_GLF_DEAD(false))))) && true)), bool(bvec2(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))), (bool(bool((_GLF_DEAD(false))))) && true)), true)))))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))) && true)) || (_GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), (! ((_GLF_DEAD(false)))) || false))))))))), (bool(bool((_GLF_DEAD(false))))) && true)))), bool(_GLF_IDENTITY(bool(bool(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))), (bool(bool((_GLF_DEAD(false))))) && true))))), bool(bvec2(bool(bool(bool(bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))), (bool(bool((_GLF_DEAD(false))))) && true))))), false)))))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))), (bool(bool((_GLF_DEAD(false))))) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(bool(bool((_GLF_DEAD(false)))), (bool(bool((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), false || ((false)))))))))))))))) && true))), ((! (_GLF_IDENTITY(bool(bool((_GLF_DEAD(false)))), (bool(bool((_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))), (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (_GLF_IDENTITY(! (false), (! (false)) || false)))))))) && true)))))))) && true)))) && true)))) && true)))))))
            {
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))).y))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), false, false, false)), (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), false, false, false))) || false)), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), ! (_GLF_IDENTITY(! (true && (true)), true && (_GLF_IDENTITY(! (true && (true)), bool(bvec2(! (true && (true)), false)))))))) && (false))), false, false, false)), (bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true, true && (true)) && (false))), false, false, false))) || false))) && true));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), (bool(_GLF_IDENTITY(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))) && true)))), (bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))) && true)), (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), false, false)), false || (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), false, false)))))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.y = num_workgroup) ^ 0u)) - 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) ^ (gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, (false) && true))))))
            continue;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0)), min(float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0)), float(vec4(injectionSwitch.x, 0.0, 1.0, 1.0))))))) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))));
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_DEAD(false)) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) || false))))
            continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), true, false)))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.5 / -657.571)), _GLF_FUZZED(661.102)), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3.0) : injectionSwitch.x)) > injectionSwitch.y) || _GLF_IDENTITY(false, true && (false)))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(false, ! (! (false))) || (bool(bvec3(false, false, false)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(89.37)), bool(false))) > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(7), int(7))) | 0)), true && _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, ~ (~ (7))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_ONE(1.0, injectionSwitch.y), 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 1.0, 1.0)))) + 0.0))) ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))) | (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(61678) : _injected_loop_counter))))) : 7))))) | 0))), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, max(7, 7))) ^ 0)), int(_GLF_IDENTITY(7, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 7))))) | 0)))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (1 & 1) * (0))], ((injectionSwitch)[_GLF_IDENTITY(0, (1 & 1) * (0))]) + 0.0), _GLF_FUZZED(-9.8)), vec2(_GLF_FUZZED(573.160), (injectionSwitch)[1]), bvec2(false, true))))))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(30.49)), vec2(_GLF_FUZZED((3.0 + -4.6)), (injectionSwitch)[1]), bvec2(false, true))).y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))), false, true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)), false, true))))))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), _GLF_IDENTITY(int(ivec3(int(3), 0, 1)), (int(ivec3(int(3), 0, 1))) / 1)), _GLF_IDENTITY((0 & 10503), (_GLF_IDENTITY((0 & 10503), clamp((0 & 10503), (0 & 10503), (0 & 10503)))) << 0) ^ _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), (int(3)) / 1)), ((_GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), (int(3)) / 1))) << 0))))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y = workgroup_id;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (injectionSwitch) - vec2(0.0, 0.0)).y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-4550))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(19.57)), bool(false)))) + 0.0)), vec2(_GLF_FUZZED(3.3), _GLF_FUZZED(21.53)), bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 ^ (int(6))), (true ? _GLF_IDENTITY(int(6), 0 ^ (int(6))) : _GLF_FUZZED(-5543)))) >> ((0 >> _GLF_IDENTITY(int(3), int(3))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))), 0 ^ ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, 1u * (GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) - 0u), uint(uint(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)))), (workgroup_size) - 0u))) * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) - 0u), uint(uint(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)))), (workgroup_size) - 0u))) * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) - 0u), uint(uint(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)))), (workgroup_size) - 0u))) * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) | (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)), (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) - 0u), uint(uint(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, (workgroup_size) >> 0u), _GLF_IDENTITY(workgroup_size, 0u | (workgroup_size)))), (workgroup_size) - 0u))) * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)))), max((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) - 0u), uint(uint(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY((workgroup_size), clamp((workgroup_size), (workgroup_size), (workgroup_size)))) | ((workgroup_size))) >> 0u), _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u, (0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (workgroup_size)))), (workgroup_size) - 0u))) * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y, (workgroup_size * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y) - 0u), uint(uint(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(subgroup_local_id) : workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) >> 0u, ((workgroup_size) >> 0u) | ((workgroup_size) >> 0u))), _GLF_IDENTITY(workgroup_size, 0u | (_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)))))), (workgroup_size) - 0u))) * GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.y)))))))) * _GLF_IDENTITY(1u, (1u) + 0u));
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z * subgroup_size + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w, 1u * _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w))), 1u * ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w, max(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w, GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w))))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0]))) - 0.0))), injectionSwitch[1])).y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(bvec2(_GLF_DEAD(false), true), true))))), false, true, false))))
    barrier();
   barrier();
  }
 GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x = virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1, max(1, 1)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 0))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), false || (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))))
      return;
    }
   else
    {
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id) - uvec4(0u, 0u, 0u, 0u)).z, min(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z, 1u * (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z)), GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.z)) * subgroup_size + ((GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.w + 1) % subgroup_size);
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), true))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * _GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1))))), max(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, _GLF_IDENTITY(1, int(int(1)))) * (ivec3(1, 1, 1))), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1))))), ivec3(_GLF_IDENTITY(0, (0) - 0), 0, 0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * _GLF_IDENTITY((ivec3(1, _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(1, 1, 0, 1)), (int(ivec4(1, 1, _GLF_IDENTITY(0, 1 * (0)), 1))) / 1)), 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1))))), _GLF_IDENTITY(max(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1))), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1)))), ~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1))), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1)))), (max(_GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, max(1, 1)), 1, 1), ~ (~ (ivec3(_GLF_IDENTITY(1, max(1, 1)), 1, 1)))) * (ivec3(1, 1, 1))), _GLF_IDENTITY(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0)), ivec3(1, 1, 1) * (ivec3(1, 1, 1))))) + ivec3(0, 0, 0)))))), (false ? _GLF_IDENTITY(_GLF_FUZZED((ivec3(-27115, 20336, 45089) | _injected_loop_counter)), min(_GLF_FUZZED((ivec3(-27115, 20336, 45089) | _injected_loop_counter)), _GLF_FUZZED((ivec3(-27115, 20336, 45089) | _injected_loop_counter)))) : _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, _GLF_IDENTITY(1, (1 ^ 1) ^ (1))), ivec3(1, 1, 1) * _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1)))), clamp(_GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1)))), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1)))), max(_GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1)))), _GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1)))))), _GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1))))))), max(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) << ivec3(_GLF_IDENTITY(0, 0 ^ (0)), 0, 0)), _GLF_IDENTITY(ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY((ivec3(1, 1, 1)) << ivec3(0, 0, 0), min((ivec3(1, 1, 1)) << ivec3(0, 0, 0), (ivec3(1, 1, 1)) << ivec3(0, 0, 0))))), (ivec3(0, 0, 0) + (_GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY((ivec3(1, 1, 1)) << ivec3(0, 0, 0), min((ivec3(1, 1, 1)) << ivec3(0, 0, 0), (ivec3(1, 1, 1)) << ivec3(0, 0, 0)))))) >> ivec3(0, 0, 0))), ivec3(1, 1, 1) * (ivec3(1, 1, 1))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(1, 0 + (_GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), ~ (~ (int(int(1)))))))), 1, 1))) * _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, clamp(1, 1, 1)))), ((_GLF_IDENTITY(ivec3(1, 1, 1), (_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | ivec3(0, 0, 0))) ^ ivec3(0, 0, 0)))) | ((ivec3(1, 1, 1))))), max(_GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY(ivec3(1, 1, 1), min(ivec3(1, 1, 1), ivec3(1, 1, 1))) * _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), min((ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), min((ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1)), (ivec3(_GLF_IDENTITY(1, min(1, 1)), 1, 1))))))), _GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY(ivec3(1, 1, 1) * (ivec3(1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))), 1)), (ivec3(1, 1, 1) * (ivec3(1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, 1)))), 1))) * ((ivec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(ivec3(3), ivec3(3))) >> _GLF_IDENTITY(ivec3(3), ivec3(3))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * _GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, _GLF_IDENTITY(1, ~ (~ (1))), 1))))), (_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * _GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1)))))) * ivec3(1, 1, 1)), max(_GLF_IDENTITY(ivec3(1, 1, _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, ~ (~ (1)))))), _GLF_IDENTITY(ivec3(1, 1, 1), clamp(ivec3(1, 1, 1), ivec3(1, 1, 1), _GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) >> ivec3(0, 0, 0)))) * (ivec3(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) >> 0)) | 0), 1))), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) / 1), 1))) ^ ((_GLF_IDENTITY(_GLF_IDENTITY(62902, _GLF_IDENTITY(int(ivec4(62902, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), min(int(ivec4(62902, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0)), int(ivec4(62902, int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ONE(1.0, injectionSwitch.y)), 0))))), min(_GLF_IDENTITY(62902, _GLF_IDENTITY((62902), (0 << _GLF_IDENTITY(int(0), int(0))) + ((62902))) >> 0), 62902)) << -37912) & 0)), 1, 1) * (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, clamp(1, 1, 1)))), 0)), ~ (~ (int(ivec2(1, 0)))))), _GLF_IDENTITY(1, max(1, 1)), 1))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) | (1)), 1)), 1, 1)), _GLF_IDENTITY(((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1))), ivec3(0, 0, 0) + (((ivec3(1, 1, 1))) | ((ivec3(1, 1, 1))))))), max(_GLF_IDENTITY(ivec3(1, 1, 1), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(0, 0, 0) ^ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1)))), ((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))) ^ ivec3(0, 0, 0)), (_GLF_IDENTITY((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1)))), ((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))) ^ ivec3(0, 0, 0))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1)))), ((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))) ^ ivec3(0, 0, 0)), (_GLF_IDENTITY((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1)))), ((_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) | (ivec3(1, 1, 1))))) ^ ivec3(0, 0, 0))) + ivec3(0, 0, 0))))) * (ivec3(1, 1, 1))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (ivec3(1, 1, 1))), (_GLF_IDENTITY(ivec3(1, 1, _GLF_IDENTITY(1, (1) << 0)), ivec3(1, 1, 1) * (ivec3(1, 1, 1)))) / ivec3(1, 1, 1)))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * _GLF_IDENTITY((ivec3(1, 1, 1)), ((ivec3(1, 1, 1))) | (_GLF_IDENTITY((ivec3(1, 1, 1)), max((ivec3(1, 1, 1)), (ivec3(1, 1, 1))))))), max(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)), 1, _GLF_IDENTITY(1, (1) << 0)), ivec3(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(67003)))) | (1))) * (ivec3(1, 1, 1))), _GLF_IDENTITY(ivec3(1, 1, 1), ivec3(1, 1, 1) * (_GLF_IDENTITY(ivec3(1, 1, 1), (ivec3(1, 1, 1)) / ivec3(1, 1, 1))))))) << ivec3(0, 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0)), (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0), (0 >> _GLF_IDENTITY(int(3), int(3))) | (clamp(0, _GLF_IDENTITY(0, ~ (~ (0))), 0))))) | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false))))))))))))))
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _injected_loop_counter)) < 1), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0), _injected_loop_counter)) < 1)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
                  return;
                }
               else
                {
                 barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, true && (true))))))), false, false)))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x = next_virtual_gid) | 0u)) | 0u);
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8)))))), min((1 | (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (false ? _GLF_FUZZED(_injected_loop_counter) : 8))), _GLF_IDENTITY(int(8), 0 ^ (int(8)))))), (1 | (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, 0)), (int(ivec2(0, 0))) << 0)) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 | (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ _GLF_IDENTITY((int(8)), ~ (_GLF_IDENTITY(~ ((int(8))), (~ ((int(8)))) << 0))))))), true && (_GLF_IDENTITY(_injected_loop_counter != (1 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))), ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8)))))) | ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))))), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8)))))))), (_injected_loop_counter != (1 | (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))))) || false)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ (_GLF_IDENTITY(~ (int(8)), 0 + (~ (int(8)))))), 0 ^ (_GLF_IDENTITY(int(8), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(8)))))), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, (true ? _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, 0 | ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0))) >> 0) : _GLF_FUZZED((true ? _injected_loop_counter : _injected_loop_counter)))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), 0 | (_GLF_IDENTITY(int(8), 0 ^ (int(8)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) | (8))), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0) | 0), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(0 ^ (int(8)), (0 ^ (int(8))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))) - 0, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0)))) << _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0)))))))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-80342) : 0)), _GLF_IDENTITY(0, (0) | (0)), 0)))))))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), ~ (_GLF_IDENTITY(~ (int(8)), 0 + (~ (int(8)))))), 0 ^ (_GLF_IDENTITY(int(8), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(8)))))), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, (true ? _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, 0 | ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0))) >> 0) : _GLF_FUZZED((true ? _injected_loop_counter : _injected_loop_counter)))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), 0 | (_GLF_IDENTITY(int(8), 0 ^ (int(8)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) | (8))), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0) | 0), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(0 ^ (int(8)), (0 ^ (int(8))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))) - 0, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0)))) << _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0)))))))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-80342) : 0)), _GLF_IDENTITY(0, (0) | (0)), 0))))))))), ! (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) ^ 0) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8)))), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (int(8)), 0 + (~ (int(8))))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(~ (int(8)), 0 + (~ (int(8)))))), (~ (~ (_GLF_IDENTITY(~ (int(8)), 0 + (~ (int(8))))))) | (~ (~ (_GLF_IDENTITY(~ (int(8)), 0 + (~ (int(8))))))))))), 0 ^ (_GLF_IDENTITY(int(8), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) ^ (int(8)))))), _GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, (true ? _GLF_IDENTITY((_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(_GLF_IDENTITY(0, ~ (~ (0)))), (false ? _GLF_FUZZED(89792) : int(_GLF_IDENTITY(0, ~ (~ (0)))))))) << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, 0 | ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0)), ~ (~ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, 0 | ((0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0)))))) >> 0) : _GLF_FUZZED((true ? _injected_loop_counter : _injected_loop_counter)))), clamp(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), (true ? int(8) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) - 0, ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (int(8))), 0 | (_GLF_IDENTITY(int(8), 0 ^ (int(8)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) | (_GLF_IDENTITY(8, (8) >> 0)))), _GLF_IDENTITY(int(8), 0 ^ (int(8))))) / int(_GLF_ONE(1.0, injectionSwitch.y)))) - 0) | 0), (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), _GLF_IDENTITY(0 ^ (int(8)), (0 ^ (int(8))) + int(_GLF_ZERO(0.0, injectionSwitch.x)))))) - 0, (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, min(8, 8))), 0 ^ (int(8))))) - 0)))) << _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0)))))))), _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-80342) : 0)), _GLF_IDENTITY(0, (0) | (0)), 0))))))))))))))) || false)) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), true))), true, true)), (bool(bvec3(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), true))), true, true))) || false))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))));
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5867.3015)), bool(false))), injectionSwitch.x)) > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5867.3015)), bool(false))), injectionSwitch.x)) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5867.3015)), bool(false))), injectionSwitch.x)) > injectionSwitch.y)))), (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5867.3015)), bool(false))), injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5867.3015)), bool(false))), injectionSwitch.x)) > injectionSwitch.y) && true)))))) || _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))[1])).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (false ? _GLF_FUZZED(vec2(-76.37, 4.6)) : vec2(vec2(injectionSwitch))))), vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))))) || false)))))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), mat2(1.0) * (mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), mat2(1.0) * (mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))))), (false ? _GLF_FUZZED(609.392) : float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), mat2(1.0) * (mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))))))))), float(_GLF_IDENTITY(mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))), mat2(1.0) * (mat3x2(injectionSwitch.y, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))))))), bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true))))))))))
                barrier();
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))))), (bool(bvec2(_GLF_IDENTITY(false, false || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   barrier();
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0) != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), _GLF_IDENTITY(int(ivec4((0 ^ 1), 1, 0, 1)), 0 | (int(ivec4((0 ^ 1), 1, 0, 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true, true))))), true && (bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true, true), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), true, true)))))))), false))), (false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))) && true)))), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.7) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.7) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))), true, true))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.7) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.7) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))), true, true))))), (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.7) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.7) : injectionSwitch.y)), injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))), bool(bvec3((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))), true, true)))))) && true), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true), bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), true, true)))))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false)))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), false || ((false)))))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 buf[GLF_merged2_0_1_11_1_1_12virtual_gidworkgroup_id.x] = 1;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true))), (injectionSwitch.x > injectionSwitch.y))))))), true, false, false))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1239.0081, 5.3)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false, _GLF_IDENTITY(false, ! (! (false)))))))))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))), bool(bool(_GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true)))))))))))
        continue;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         else
          {
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     do
      {
       atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x, (GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_17next_virtual_gidnum_workgroupsubgroup_idsubgroup_local_id.x) - 0u)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))], uint(2), _GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) ^ (1 ^ 1)) | (_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, clamp(4, 4, 4)), _GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | ((4))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((0) + 0, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0)), ((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0))) ^ 0)), int(ivec3(_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0)), ((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0))) ^ 0)), (true ? ~ (_GLF_IDENTITY((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0)), ((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0))) ^ 0)) : _GLF_FUZZED(-61848))), 1, 1))))) ^ 0, int(ivec4(_GLF_IDENTITY((_GLF_IDENTITY((0) + 0, (_GLF_IDENTITY((0) + 0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(38714) : (0) + 0))) | 0)) ^ 0, max((_GLF_IDENTITY((0) + 0, ((0) + 0) | 0)) ^ 0, (_GLF_IDENTITY((0) + 0, ((0) + 0) | 0)) ^ 0)), 0, 0, 0)))))) / 1)))))), 64, 4);
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
