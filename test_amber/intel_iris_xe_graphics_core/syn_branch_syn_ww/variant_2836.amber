#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 ivec2 _f0;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 mat2 _f1;
 uvec3 _f2;
 float _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_2 {
 uint workgroup_base;
 mat4x2 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_1 {
 bool _f0;
} ;

struct _GLF_struct_0 {
 bvec4 _f0;
 ivec4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_3 {
 bool _f0;
 uvec2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 bvec2 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_7 {
 _GLF_struct_3 _f0;
 _GLF_struct_6 _f1;
 ivec2 _f2;
 uint _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
uint subgroup_size = 16;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_3(true, uvec2(1u), _GLF_struct_0(bvec4(true), ivec4(1), bvec2(true)), _GLF_struct_1(true), bvec2(true), _GLF_struct_2(workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id))), mat4x2(1.0), ivec2(1))), _GLF_struct_6(_GLF_struct_4(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false))), mat2(1.0), uvec3(1u), 1.0), _GLF_struct_5(ivec2(1))), ivec2(1), 1u);
 uint virtual_gid = _GLF_struct_replacement_7._f0._f5.workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_id))), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_id))))), _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> 0u), subgroup_id * subgroup_size)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_7._f0._f5.workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   do
    {
     buf[virtual_gid] = 1;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (0 & -11151); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(subgroup_local_id + 1 < subgroup_size)
        {
         int i = _GLF_IDENTITY(0, 0 ^ (0));
         atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) << 0)) >> 0), 64, 4);
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
          }
         else
          {
          }
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
