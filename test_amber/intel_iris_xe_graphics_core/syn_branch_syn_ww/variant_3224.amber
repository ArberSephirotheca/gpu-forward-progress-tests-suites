#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
uint subgroup_size = 16;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = (1 & _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / 1), 1, 1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) >> 0) : _GLF_FUZZED(_injected_loop_counter))))) : _GLF_FUZZED(_injected_loop_counter)))) | _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))), ((_GLF_IDENTITY(0, 0 ^ (0)))) | ((_GLF_IDENTITY(0, 0 ^ (0))))))))), false || (_injected_loop_counter > _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), ~ (~ (_GLF_IDENTITY((true ? 0 : _GLF_FUZZED(_injected_loop_counter)), int(int((true ? 0 : _GLF_FUZZED(_injected_loop_counter)))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, int(_GLF_ONE(1.0, injectionSwitch.y)))))) | (0)), 0 ^ (0)))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, (false) || false), false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & (- -58023))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), sin(0.0), abs(0.0), _GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))))), _GLF_IDENTITY(min(float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0))), float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0)))), clamp(min(float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0))), float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0)))), min(float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0))), float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0)))), min(float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0))), float(mat4(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, abs(cos(0.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, sin(0.0), abs(0.0), cos(0.0)))))))) > injectionSwitch.y))));
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), (_GLF_IDENTITY(! (! (! (false))), ! (_GLF_IDENTITY(! (! (! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! (! (! (! (false)))), (! (! (! (! (false))))) || false)))))) && true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(! _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false, true)))))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_WRAPPED_IF_FALSE(false)))), bool(_GLF_IDENTITY(bvec2(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_WRAPPED_IF_FALSE(false)))), false), bvec2(bvec4(bvec2(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_WRAPPED_IF_FALSE(false)))), false), true, true))))))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || _GLF_IDENTITY((! (! _GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), _GLF_IDENTITY(bool(bvec3(((false)), false, true)), (bool(bvec3(((false)), false, true))) || false))))), true && (_GLF_IDENTITY((! (! _GLF_IDENTITY((false), _GLF_IDENTITY(false, bool(bvec4(false, false, true, false))) || ((false))))), (_GLF_IDENTITY((! (! _GLF_IDENTITY((false), false || ((false))))), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY((! (! _GLF_IDENTITY((false), false || ((false))))), false || ((! (! _GLF_IDENTITY((false), false || ((false)))))))))) || false)))))))
          barrier();
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(9652.7318), _GLF_FUZZED(-4.3)), bvec2(false, false))))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true, false, false)))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 1 * (1))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, int(ivec3(1, 1, 0))), min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size)) / _GLF_IDENTITY(1u, max(1u, 1u))))), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 1 * (1))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, int(ivec3(1, 1, 0))), min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size)) / _GLF_IDENTITY(1u, max(1u, 1u))))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 1 * (1))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, int(ivec3(1, 1, 0))), min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size)) / _GLF_IDENTITY(1u, max(1u, 1u))))), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), 1 * (1))) % subgroup_size), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, int(ivec3(1, 1, 0))), min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uvec4(subgroup_local_id + 1, 0u, 1u, 1u)))))) % subgroup_size), (((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size)) / _GLF_IDENTITY(1u, max(1u, 1u)))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     buf[virtual_gid] = 1;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (true ? _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec3(1, _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(0, 0)), 1), (ivec3(1, _GLF_IDENTITY(0, min(0, 0)), 1)) >> ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0))))) >> 0), 0, 0)))) : _GLF_FUZZED(_GLF_IDENTITY(62566, 0 | (_GLF_IDENTITY(62566, (true ? 62566 : _GLF_FUZZED(34928)))))))), 1)) < subgroup_size)
  {
   int i = 0;
   for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)) + 0, max((int(1)) + 0, (int(1)) + 0))), clamp(int(_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(int(1), (int(1)) | _GLF_IDENTITY((int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), (int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), ~ (~ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), (int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0))))) << 0)))))))), int(1))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), 0 ^ (int(5)))) << 0), int(5)))) / ((_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 | (_GLF_FUZZED(i)))) - 0) : 1)), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 | (_GLF_FUZZED(i)))) - 0) : 1)), 1, 1), (ivec3(_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 | (_GLF_FUZZED(i)))) - 0) : 1)), 1, 1)) / ivec3(1, 1, 1)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3)))) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))) ^ (0 >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))) | 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) + 0)), int(_GLF_IDENTITY(1, (1) / 1)))), max(((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), (int(1)) + 0), clamp(int(_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) >> (0 << _GLF_IDENTITY(int(0), int(0)))), (int(1)) | _GLF_IDENTITY((int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), (int(_GLF_IDENTITY(ivec2((int(1)), 0), _GLF_IDENTITY(ivec2(0, 0) ^ (ivec2((int(1)), 0)), (ivec2(0, 0) ^ (ivec2((int(1)), 0))) * ivec2(1, 1))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2((int(1)), 0), max(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(ivec4(ivec2((int(1)), 0), 0, 0))), ivec2((int(1)), 0))), ivec2(_GLF_IDENTITY(0, (0) ^ 0), 0) ^ (ivec2((int(1)), 0))))))))))), int(1))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), ((0 >> _GLF_IDENTITY(int(5), int(5)))) / ((_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 1 * (_GLF_FUZZED(i)))) | 0)) + 0), 0 | (_GLF_FUZZED(i)))) - 0) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(_GLF_IDENTITY(3, ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) * (3))), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3)))) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), (_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))))))))) | 0), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(i))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), min(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), (_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))))))))) | 0), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(i))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), min(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), (_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))))))))) | 0), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(i))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), min(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), (_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))))))))) | 0), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(i))), 0, 1)))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), min(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))), (false ? _GLF_FUZZED(-65609) : _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) * 1), 1, 1))), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), max((1), (1)))))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), (_GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1))))))) | (_GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))))), int(1))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) / (1 ^ 0)), 1, 1))) ^ _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(ivec2(95474, -55459)[1]))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(i) : int(1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY((_GLF_IDENTITY(int(1), ~ (~ (_GLF_IDENTITY(int(1), (int(1)) << 0))))), clamp(_GLF_IDENTITY((int(1)), (_GLF_IDENTITY((int(1)), 0 ^ ((int(1))))) | 0), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(int(int(1))), 0 | (int(int(int(1))))))), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))), _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(2), int(2))) ^ (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) / 1))))) ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))))) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) + 0)), int(_GLF_IDENTITY(1, (1) / 1)))), ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) + 0), clamp(int(_GLF_IDENTITY(1, (1) | (1))), _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (_GLF_IDENTITY(~ (1), (~ (1)) - 0))))))), (int(1)) | _GLF_IDENTITY((int(1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(_GLF_IDENTITY(1, int(ivec2(1, 0))))), 0)))), (int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), max(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), max(int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))), int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))))), int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), 0)))))), ~ (~ (int(_GLF_IDENTITY(ivec2((int(1)), 0), ivec2(0, 0) ^ (ivec2((int(1)), _GLF_IDENTITY(0, (0) | (0))))))))))))), _GLF_IDENTITY(int(1), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(1))))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), int(5))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(5), int(5)))) / ((_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 | (_GLF_FUZZED(i)))) - 0) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3))), (0 ^ 1) * (((0 >> _GLF_IDENTITY(int(5), int(5)))) / ((_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 | (_GLF_FUZZED(i)))) - 0), (_GLF_IDENTITY(_GLF_FUZZED(i), (_GLF_IDENTITY(_GLF_FUZZED(i), 0 | (_GLF_FUZZED(i)))) - 0)) | int(_GLF_ZERO(0.0, injectionSwitch.x))) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3)))))) | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(int(1))))))) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - 0), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, ~ (~ (1))))) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | _GLF_IDENTITY((int(1)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-97324) : (int(1))))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), (0 | (1)) | (_GLF_IDENTITY(0 | (1), min(0 | (1), 0 | (1))))))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), (false ? _GLF_FUZZED(i) : _GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((mat4x2(-6.4, 57.83, 0.7, 0.2, 324.730, -8897.0118, 7.5, -49.82) * vec4(1.8, -957.551, -590.122, 7.2))) : injectionSwitch)))).y)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (1), _GLF_IDENTITY((0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))), (_GLF_IDENTITY((0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))), min((0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1)))), (0 | (1)) | (_GLF_IDENTITY(0 | (1), 0 ^ (0 | (1))))))) << 0)))))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(bitfieldInsert(abs(17692), i, i, 38941)))), int(ivec4(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) - 0))), 0, 0, 1)))), _GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), clamp((int(1)), (int(1)), (int(1)))) | (int(1))), int(1)), clamp(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), _GLF_IDENTITY(_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)), (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1))) | (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(1)))), (_GLF_IDENTITY(clamp(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY((int(1)), ((int(1))) | (0 & int(39951u))) | (int(1))), int(1)), 0 ^ (clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), _GLF_IDENTITY(int(1), 0 | (int(1))))))) - 0), clamp(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) >> 0))) | (_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), ~ (~ (int(1)))))))), int(1))))), int(_GLF_ONE(1.0, injectionSwitch.y)))))), 0 ^ ((_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1))), int(_GLF_IDENTITY(1, 0 | (1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(_GLF_IDENTITY(1, ~ (~ (1)))))), int(1))), 0, 1, 1)), (int(ivec4(_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) + 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), (false ? _GLF_FUZZED(mix(i, i, true)) : int(_GLF_IDENTITY(1, ~ (~ (1)))))))), int(1))), 0, 1, 1))) ^ 0)), int(_GLF_ONE(1.0, injectionSwitch.y))))))))) ^ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), max(0 >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(2), int(2)), int(ivec2(0 >> _GLF_IDENTITY(int(2), int(2)), 0)))))) * 1)))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) + 0)), int(_GLF_IDENTITY(1, (1) / 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec4(1, 0, 1, 1)))))); _injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (0), ((0) | (0)) << 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | _GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) << 0)) | 0)) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | 0)), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | 0), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | 0), _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), min((_GLF_IDENTITY(1, (1) << 0)), (_GLF_IDENTITY(1, (1) << 0))))) >> 0) | 0))), ! (_GLF_IDENTITY(! (_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)) | 0, ~ (~ ((_GLF_IDENTITY(1, (1) << 0)) | 0))))), (! _GLF_IDENTITY((_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(findMSB(3362)) : 1), ((0 >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(findMSB(3362)) : 1), max((false ? _GLF_FUZZED(findMSB(3362)) : 1), (false ? _GLF_FUZZED(findMSB(3362)) : 1)))))), (1) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))), 0)))) | 0)), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, int(ivec2(_injected_loop_counter, 0))) < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB(3362)) : 1)), (1) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))), 0)))) | 0)), true && (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(ivec3(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), ivec3(ivec4(ivec3(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)), 1), 0)))))))) < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB(3362)) : 1)), (1) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))), 0)))) | 0)), ! (! ((_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB(3362)) : 1)), _GLF_IDENTITY((1), (false ? _GLF_FUZZED(85519) : _GLF_IDENTITY((1), ((1)) + 0))) << _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))), 0)))) | 0))))))), false, false, false)))) && true)))), true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), true))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 1 * (1))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         do
                          {
                           barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))));
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 atomicStore(buf[next_virtual_gid], uint(2), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((4), ((4)) | ((4))) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(ivec2(0, 0)))) - (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, 6))), int(6))))));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_IDENTITY(false, true && (false)))), (bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, true, _GLF_IDENTITY(false, true && (false))))) || false))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))), (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))), bool(bool(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y) - log(1.0)))))) || false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) || false)));
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true)))))), ! (! (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), _GLF_IDENTITY(! (! ((_GLF_WRAPPED_IF_TRUE(true)))), ! (! (! (! ((_GLF_WRAPPED_IF_TRUE(true))))))))), ((! _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(true)), ! (! ((_GLF_WRAPPED_IF_TRUE(true))))))) && true))))))
                {
                 barrier();
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false)))), (false) && true))) && true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))) < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], mix(float(injectionSwitch[0]), float(_GLF_FUZZED(-2.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch[1])).y))))
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(log(injectionSwitch)) : injectionSwitch)))).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))).y))))
                    {
                     for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, ! (! (true))) ? _injected_loop_counter ++ : _GLF_FUZZED(bitfieldReverse(-60447))))), ((_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, ! (! (true))) ? _injected_loop_counter ++ : _GLF_FUZZED(bitfieldReverse(-60447)))))) ^ 0) << 0), (_GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, ! (! (true))) ? _injected_loop_counter ++ : _GLF_FUZZED(_GLF_IDENTITY(bitfieldReverse(-60447), (_GLF_IDENTITY(bitfieldReverse(-60447), 0 ^ (bitfieldReverse(-60447)))) >> 0))))), ((_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(true, ! (! (true))) ? _injected_loop_counter ++ : _GLF_FUZZED(bitfieldReverse(-60447)))))) ^ 0) << 0)) * 1))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                }
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 else
  {
   do
    {
     atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) ^ 0u)))], uint(2), 4, _GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, (false ? _GLF_FUZZED(-15410) : 64)))), 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-5539.5490, -4224.8870), mat2(1.0) * (vec2(-5539.5490, -4224.8870)))) : injectionSwitch)).x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))), (bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false))))) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
