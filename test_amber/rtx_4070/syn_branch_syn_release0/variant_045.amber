#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 0) uniform buf0 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(9.4)), min(_GLF_IDENTITY(_GLF_IDENTITY(vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(9.4)), cos(vec2(0.0, 0.0)) * (vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(9.4)))), (vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(9.4))) - vec2(0.0, 0.0)), vec2((injectionSwitch)[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(9.4)))), vec2(_GLF_FUZZED(8.0), (injectionSwitch)[_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, 1))))]), bvec2(false, true))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[_GLF_IDENTITY(0, (0) | 0)], _GLF_FUZZED(9.4)), vec2(_GLF_FUZZED(8.0), (injectionSwitch)[1]), bvec2(false, true))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true), false, false, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), vec2(1.0, 1.0) * (injectionSwitch))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(1.0, 1.0) * (injectionSwitch), (vec2(1.0, 1.0) * (injectionSwitch)) * mat2(1.0)))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), clamp(vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + _GLF_IDENTITY((mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), transpose(transpose((mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))), vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED((- 3.0)))), 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))) / vec2(1.0, 1.0)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))), false, false)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-446.621), _GLF_FUZZED(2.9)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), clamp(vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-1.6)), bool(false))), 0.0)))), 1.0, 0.0, 1.0, _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) / 1.0), 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), max((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0), (false ? _GLF_FUZZED(mat3(-0.2, -29.11, 435.535, -534.487, 9.5, -5.4, 1839.9186, -0.5, 1752.1804)) : mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)))), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(_GLF_IDENTITY(mat3(0.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 1.0, sin(0.0), 0.0), mat3(1.0) * (mat3(0.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), max((0.0), (0.0))) - 0.0), 0.0, 1.0, sin(0.0), 0.0)))), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 1.0, 0.0, 0.0, 0.0))))))) / _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(6.9)), vec2(_GLF_FUZZED(45.01), (vec2(1.0, 1.0))[1]), bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), clamp(vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, 0.0 + (1.0))), 0.0, 0.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 1.0), (_GLF_IDENTITY(mat3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 1.0), mat3(mat4x3(mat3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 1.0))))) * mat3(1.0)))), sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(_GLF_IDENTITY(0.0, (0.0) - 0.0)), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), 0.0, determinant(mat3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)))), vec2(_GLF_IDENTITY(mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-405.563, -1.2)) : injectionSwitch))))), 0.0, determinant(mat3(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(787.671)), float(0.0), bool(true))), 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(0.0), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - _GLF_ZERO(0.0, injectionSwitch.x)), 0.0) + (mat4((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(vec4(375.663, 658.320, 94.33, 91.91).a)), bool(false))), determinant(mat3(0.0, 0.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, sin(_GLF_IDENTITY(0.0, 0.0 + (0.0))), 0.0)), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))) / vec2(1.0, 1.0)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, false)))))))) || false))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat3x4(injectionSwitch[1], 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1895.9989)), float(0.0), bool(true))), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 1.0)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true)), determinant(mat2(0.0, 0.0, 0.0, 0.0)) + (mix(float(_GLF_FUZZED(-3.5)), float(injectionSwitch.x), bool(true))))) : _GLF_FUZZED(_GLF_IDENTITY(-3784.7693, 1.0 * (-3784.7693))))) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(true && _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bool((_GLF_IDENTITY(false, ! (! (false)))))))))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), true, true)), ! (! (bool(bvec3(! (_GLF_IDENTITY(false, ! (! (false)))), true, true)))))))) || false), ! (! (true && _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), ((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, true)), false || (bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), false, true, true))))), ! (! (false)))))) || _GLF_IDENTITY(false, (false) || false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-431.331) : injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))), ! (! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))))), true && (! ((injectionSwitch.x > injectionSwitch.y))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((4.3 + _GLF_IDENTITY(-0.4, (false ? _GLF_FUZZED(sqrt(-58.67)) : -0.4)))), min(_GLF_IDENTITY(_GLF_FUZZED((4.3 + -0.4)), clamp(_GLF_FUZZED((4.3 + -0.4)), _GLF_IDENTITY(_GLF_FUZZED((4.3 + -0.4)), clamp(_GLF_FUZZED((4.3 + -0.4)), _GLF_FUZZED((4.3 + -0.4)), _GLF_FUZZED((4.3 + -0.4)))), _GLF_FUZZED((4.3 + -0.4)))), _GLF_FUZZED((4.3 + -0.4)))), _GLF_FUZZED(-9.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.3 + -0.4)), _GLF_FUZZED(_GLF_IDENTITY(-9.2, min(_GLF_IDENTITY(-9.2, min(-9.2, -9.2)), -9.2)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((4.3 + -0.4)), _GLF_FUZZED(-9.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x)), 1.0, sin(0.0), 0.0, 0.0, 0.0, determinant(mat2(1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec2(1.9, 9.1).s)), float(0.0), bool(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x < injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x < injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x < injectionSwitch.y))))))) && true)))))), float(_GLF_FUZZED(9675.7760)), bool(false))), _GLF_ZERO(0.0, injectionSwitch.x), 1.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, abs(0.0), 1.0)), dot(vec4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0), vec4(0.0, 0.0, abs(0.0), 1.0)))))) < injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! ((false))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(true, ! (! (true))) && (! (_GLF_IDENTITY(false, (false) && true))))))), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))), true, false, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! (_GLF_IDENTITY((! (true)), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((! (true))), _GLF_IDENTITY(bool(bvec3(! ((! (_GLF_IDENTITY(true, (true) || false)))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(! ((! (true))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), false))), (! (bool(bvec3(! ((! (true))), true, false)))) || false))))), bool(bvec2(! (_GLF_IDENTITY(! ((! (true))), _GLF_IDENTITY(bool(bvec3(! ((! (true))), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(! ((! (true))), true, false))), (! (bool(bvec3(! ((! (true))), true, false)))) || false))))), false))))))))))), ! (! ((false))))))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (bool(bvec3(false, false, false))))), true, false, false))))))), _GLF_IDENTITY(false || (false), true && (false || (false))))) && true)), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), _GLF_IDENTITY(true, ! (! (true))), true)))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, sqrt(0.0), 1.0, _GLF_IDENTITY(dot(vec4(cos(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(cos(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0, tan(0.0)))), float(mat3(injectionSwitch.y, 0.0, 0.0, abs(1.0), 1.0, log(1.0), 1.0, sqrt(1.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec2(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.9)), vec2(_GLF_FUZZED(17.73), (injectionSwitch)[1]), bvec2(false, true))).y)), false))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), false, true))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), bool(bool(! (true && (injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), bool(bool(! (true && (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true))))
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))) && true))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))) && true))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(bool(bvec4(false, true, true, true))))))))
  barrier();
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true))))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true)))))), bool(bvec4(! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true)))))), false, true, true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(53.14) : injectionSwitch.y)), injectionSwitch.y))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(53.14) : injectionSwitch.y)), injectionSwitch.y))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1))), (true ? 1 : _GLF_FUZZED(-29227)))))), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(bitfieldInsert(83055, -85116, -94260, -75335)))), (true ? 1 : _GLF_FUZZED(-29227)))))), uint(uint((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29227))))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29227)))))) ^ 0u)))))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u | (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(uvec4(63772u, 20242u, _GLF_IDENTITY(46622u, clamp(46622u, _GLF_IDENTITY(46622u, (_GLF_IDENTITY(46622u, clamp(46622u, 46622u, 46622u))) / 1u), 46622u)), 195783u)[0], (uvec4(63772u, 20242u, _GLF_IDENTITY(46622u, clamp(46622u, _GLF_IDENTITY(46622u, (_GLF_IDENTITY(46622u, clamp(46622u, 46622u, 46622u))) / 1u), 46622u)), 195783u)[0]) << 0u))))))), clamp(0u | (1u), 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(false ? _GLF_FUZZED(virtual_gid) : 1u, max(false ? _GLF_FUZZED(virtual_gid) : 1u, false ? _GLF_FUZZED(virtual_gid) : 1u)))), (false ? _GLF_FUZZED(subgroup_local_id) : 1u))))))), 0u | (1u)))), ~ (~ (~ (_GLF_IDENTITY(0u | (1u), clamp(0u | (1u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, 0u | (0u)) : _GLF_FUZZED((subgroup_size / workgroup_size)))), (0u) / 1u) | (1u), 0u | (1u))))))))))) % subgroup_size), 0u + (workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-88640) : _GLF_IDENTITY((1), int(int(_GLF_IDENTITY((1), ~ (~ ((1))))))))) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29227)))))), ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-88640) : _GLF_IDENTITY((1), int(int(_GLF_IDENTITY((1), ~ (~ ((1))))))))) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29227))))))) | ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-88640) : _GLF_IDENTITY((1), int(int(_GLF_IDENTITY((1), ~ (~ ((1))))))))) | (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29227)))))))), ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-29227))), _GLF_IDENTITY((_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (false ? _GLF_FUZZED(95275) : 1)) : _GLF_FUZZED(-29227)))), (false ? _GLF_FUZZED(-9568) : (_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (false ? _GLF_FUZZED(95275) : 1)) : _GLF_FUZZED(-29227)))))) - 0))))) / _GLF_IDENTITY(1u, 0u | (1u))) % subgroup_size)));
 buf[virtual_gid] = 1;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch, injectionSwitch)).y))))))
  barrier();
 if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, true && (subgroup_local_id + 1 < subgroup_size)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
    barrier();
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2((vec3(7839.3460, -7851.9326, -3.9) * mat3(6617.5528, 643.803, -1.5, 239.080, -3.2, -0.7, -50.68, -219.895, 9.2)))) : injectionSwitch)).y), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), false || (! (true && (injectionSwitch.x > injectionSwitch.y))))))) || false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2((vec3(7839.3460, -7851.9326, -3.9) * mat3(6617.5528, 643.803, -1.5, 239.080, -3.2, -0.7, -50.68, -219.895, 9.2)))) : injectionSwitch)).y), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), false || (! (true && (injectionSwitch.x > injectionSwitch.y))))))) || false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), (_GLF_IDENTITY(true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2((vec3(7839.3460, -7851.9326, -3.9) * mat3(6617.5528, 643.803, -1.5, 239.080, -3.2, -0.7, -50.68, -219.895, 9.2)))) : injectionSwitch)).y), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), false || (! (true && (injectionSwitch.x > injectionSwitch.y))))))) || false))) || false), true, true, false)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2(true && (injectionSwitch.x > injectionSwitch.y), false)), (bool(bvec2(true && (injectionSwitch.x > injectionSwitch.y), false))) || false)))), (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false, false, true)))))) && true), ! (_GLF_IDENTITY(! (true && (injectionSwitch.x > injectionSwitch.y)), false || (! (true && (injectionSwitch.x > injectionSwitch.y))))))) || false))), false, true, _GLF_IDENTITY(true, true && (true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2621.3459), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-6720.5456)), bvec2(true, false))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), min(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, log(abs(1.0))), vec4(_GLF_IDENTITY(mat2(vec4(injectionSwitch, 0.0, log(abs(1.0)))), (mat2(vec4(injectionSwitch, 0.0, log(abs(1.0))))) / mat2(1.0, 1.0, 1.0, 1.0)))))).y), (clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)) / 1.0))))) + 0.0))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))) + _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0)))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(float(_GLF_FUZZED(7925.3805)), 0.0 + (float(_GLF_FUZZED(7925.3805)))), bool(false))), injectionSwitch.y))) + 0.0, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, abs(0.0), 0.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), _GLF_IDENTITY(mat3(mat3(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), transpose(transpose(mat3(mat3(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))))))))))) : _GLF_FUZZED(vec2(-2.2, 824.755)))).x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(asinh(-45.05)), _GLF_IDENTITY(max(_GLF_FUZZED(asinh(-45.05)), _GLF_FUZZED(asinh(-45.05))), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(max(_GLF_FUZZED(asinh(-45.05)), _GLF_FUZZED(asinh(-45.05))), float(vec4(max(_GLF_FUZZED(asinh(-45.05)), _GLF_FUZZED(asinh(-45.05))), 1.0, 1.0, log(1.0)))), 0.0, 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(1.0, 0.0, 1.0, exp(0.0))), dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(1.0, 0.0, 1.0, exp(0.0))))), (false ? _GLF_FUZZED(mat2x4(9794.5508, -496.108, 3.3, -2.2, -2383.5312, 13.97, -6.3, -7564.2965)) : mat2x4(_GLF_IDENTITY(max(_GLF_FUZZED(asinh(-45.05)), _GLF_FUZZED(asinh(-45.05))), float(vec4(max(_GLF_FUZZED(asinh(-45.05)), _GLF_FUZZED(asinh(-45.05))), 1.0, 1.0, log(1.0)))), 0.0, 0.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(1.0, 0.0, 1.0, exp(0.0))), dot(vec4(0.0, abs(1.0), 0.0, 0.0), vec4(1.0, 0.0, 1.0, exp(0.0)))))))))) : (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) + 0.0)))), true))))) || false)) || false)))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, true, false))))), false), false, true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
