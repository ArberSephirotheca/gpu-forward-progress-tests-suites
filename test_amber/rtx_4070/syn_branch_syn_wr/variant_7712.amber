#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false))))))) && true))), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), _GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, bool(bool(false))))), true && (_GLF_IDENTITY(false || (! (_GLF_IDENTITY(false, bool(bool(false))))), (false || (! (_GLF_IDENTITY(false, bool(bool(false)))))) || false)))))), true))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))), false || (! (_GLF_IDENTITY(false, bool(bool(false))))))))))))), bool(bvec4(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (! (_GLF_IDENTITY(false, bool(bool(false))))))))))))), false, false, true))))) || _GLF_IDENTITY(false, true && (false))), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), ! (! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), false || (! (_GLF_IDENTITY(false, bool(bool(false)))))))), true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), injectionSwitch)).y)))))))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(369.000) : injectionSwitch.x)) > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -78543)); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    break;
   do
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && true) || (_GLF_DEAD(false))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))), false || (_GLF_DEAD(false))), true, false), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) || false) && true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true)))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))))))) || false), true, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))))))) || false), true, false), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))))))) || false), true, false), true))), bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), true && (! (! (_GLF_DEAD(false)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true), false)))))))) || false), true, false), true))))))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true)))))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), true))), true))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true)))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true))))))))), false))), true))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4((_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), true, false, false)), false || (bool(bvec4((_GLF_DEAD(false)), true, false, false)))))), true, _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), false || ((false))), false, false, false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, false), _GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))) || (_GLF_IDENTITY(true, (true) && true)))))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))))))))))))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), false))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false)))))))))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6213.5969) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y))), false)))))))))) || false))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, (1) * 1) & 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
          {
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.2)), vec2(_GLF_FUZZED(45.93), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, sin(0.0) + (_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, log(1.0), 0.0, tan(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true))))))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(packSnorm4x8(vec4(464.721, -85.94, -586.713, 5.9)))))) * (0u | 1u)) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u), subgroup_local_id)), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) ^ 0) | (1)), (1) / 1)), (_GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1)), min(_GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp((1), (1), _GLF_IDENTITY((1), (0 | 0) + ((1))))) >> 0), _GLF_IDENTITY(1, (1) / 1))) - 0), clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) >> 0))), _GLF_IDENTITY(1, (1) / 1))))) | (clamp(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / 1))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY((max(subgroup_local_id, subgroup_local_id)) << 0u, 0u | (_GLF_IDENTITY((max(subgroup_local_id, subgroup_local_id)) << 0u, ((max(subgroup_local_id, subgroup_local_id)) << 0u) - 0u)))), max(subgroup_local_id, subgroup_local_id)))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (_GLF_IDENTITY(~ ((1) >> 0), (~ ((1) >> 0)) | (~ _GLF_IDENTITY(((1) >> 0), (((1) >> 0)) << 0)))))), _GLF_IDENTITY(1, (1) / 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u))) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) / 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((~ (_GLF_IDENTITY(1, (1) / 1)))))), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (1 & 1) * (_GLF_IDENTITY(1, (1) >> 0))), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u + (subgroup_local_id)))), subgroup_local_id)) + _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) >> _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))))))), (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))) | (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), max(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (true ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(-85601)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(6), int(6)))), (1) / 1)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), max(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), (~ ((1))) << 0))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), max(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), int(ivec4(_GLF_IDENTITY(1, (1) ^ 0), (0 | 0), 1, 1)))))) - 0))) | (_GLF_IDENTITY(1, (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(1, (1) / 1))) ^ 0)))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id))) / 1u), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))))), subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)))) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) | 0), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), min((1), (1)))))) / 1, ((1) / _GLF_IDENTITY(1, (1) | (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1))) << 0)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (1) / 1)) ^ 0) : _GLF_FUZZED(10135))))))), 0u, 1u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))), subgroup_local_id)), max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) - 0) / 1))))))) - 0u) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | 0), 1, 1))), (true ? (1) : _GLF_FUZZED(11956))) >> 0), _GLF_IDENTITY(1, (1) / 1)), (clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (true ? ~ (1) : _GLF_FUZZED(53006))))), _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) >> 0u) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | _GLF_IDENTITY((clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) >> 0) >> 0, ~ (~ ((1) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1))), 0 ^ (_GLF_IDENTITY((clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(45132))) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1))), ((clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ _GLF_IDENTITY((~ ((1) >> 0)), (true ? (~ ((1) >> 0)) : _GLF_FUZZED(17523))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, _GLF_IDENTITY(~ (~ ((1) >> 0)), max(_GLF_IDENTITY(~ (~ ((1) >> 0)), (~ (~ ((1) >> 0))) / 1), ~ (~ ((1) >> 0))))))) >> 0), _GLF_IDENTITY(1, (1) / 1)))) >> 0)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_local_id)))) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) << (0u & 72923u)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) >> 0), _GLF_IDENTITY(1, (1) / 1))))), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id), (max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id)) << 0u)) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), max(int(1), int(1)))))) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> _GLF_IDENTITY(0, 0 ^ (0)))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1))))))), _GLF_IDENTITY(uint(uint((~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> _GLF_IDENTITY(0, 0 ^ (0)))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1))))))))), _GLF_IDENTITY(uint(uint(uint(uint((~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> _GLF_IDENTITY(0, 0 ^ (0)))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1))))))))))), (uint(uint(uint(uint((~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> _GLF_IDENTITY(0, 0 ^ (0)))))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1)))))))))))) / 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) << (0u & 72923u)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), clamp(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | _GLF_IDENTITY((clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))), ~ (_GLF_IDENTITY(~ ((clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1)))), (~ ((clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))))) / 1))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) << (0u & 72923u)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1)))), clamp(_GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1)))), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1)))), _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1) >> 0, ((1) >> 0) | (_GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))), ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) / 1u))) << (0u & 72923u)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u)))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)), subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) << _GLF_IDENTITY((0u & 72923u), ~ (~ ((0u & 72923u))))) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), int(ivec2(~ ((1)), 0)))))) >> ((0 >> _GLF_IDENTITY(int(0), int(0))) & 12632)) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED((++ subgroup_local_id)) : uint(0u))), uint(0u))))) ^ uvec4(0u, 0u, 0u, 0u)), uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u))), subgroup_local_id)) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(1, (1) >> _GLF_IDENTITY(0, ~ (~ (0)))), _GLF_IDENTITY(1, (1) / 1)), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1) / 1, (true ? (1) / 1 : _GLF_FUZZED(-59728)))))) | (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((_GLF_IDENTITY(1, min(1, 1))) >> 0)))), _GLF_IDENTITY(1, (1) / 1))))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), max(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), (1) >> 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) / _GLF_IDENTITY(1, ~ (~ (1))))), (clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))) | (clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0)))), (_GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, ~ (~ ((1) >> 0))))) >> 0), _GLF_IDENTITY(1, (1) / 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), min(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (_GLF_IDENTITY(1, (1) >> 0)) - 0))), _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) >> 0))), _GLF_IDENTITY(1, (1) / 1))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id))) << (0u & 72923u)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) - 0)) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))) / 1))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), min((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), _GLF_IDENTITY((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u)), 0u + ((1u << _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), (uint(0u)) ^ 0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))))))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)))), _GLF_IDENTITY((1), max((1), (1))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) / 1), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(1, (1) / 1)), min(_GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(1, (1) / 1)), max(max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(1, (1) / 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(1, (1) / 1)))), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(1, (1) / 1)), (max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), clamp(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), min(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), _GLF_IDENTITY(1, (1) / 1))) << 0)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | (1)), (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | (1)), (1) / 1))) ^ 0), ((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(1, (1) / 1))) ^ 0)))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1) >> 0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((1) >> 0, ((1) >> 0) / 1) : _GLF_FUZZED(92491)))), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | (1)), (1) / 1)), ((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | (1)), (1) / 1))) ^ 0), ((_GLF_IDENTITY(1, (1) / 1)) | (_GLF_IDENTITY(1, (1) / 1))) ^ 0)))))), uint(uvec4(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) / _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), ~ (_GLF_IDENTITY(~ (int(8)), int(_GLF_IDENTITY(ivec2(~ (int(8)), 0), (ivec2(~ (int(8)), 0)) / ivec2(1, 1)))))))) ^ (1))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) / 1), (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, min(1, 1)), 1))) / 1)) | 0), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (1) / 1), _GLF_IDENTITY(1, (1) / 1))))), 0u, 1u, 0u))), _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) / 1))))))) - 0u) % subgroup_size) ^ (0u << _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, (3u) | (3u)))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, sqrt(0.0), 0.0))) < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), true && ((true))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(false))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
              }
             else
              {
              }
            }
          }
         else
          {
          }
        }
       else
        {
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), clamp(max(4, 4), max(4, 4), max(4, 4)))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     return;
    }
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 ^ (4)), 4)), 64, 0);
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), ! (! (bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = (1 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, true, true))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) >> 0)) * 1), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) / 1) + 0)); _injected_loop_counter ++)
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = ((0 & -44111) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1)))))), (int(1)) | 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != (1 & 1), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), min(max(1, 1), max(1, 1)))) & 1), true, true, false)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   do
    {
     do
      {
       for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, ~ (~ (1)))), int(1))) << _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) | (1)))))) && true); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (false)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))) || false)))
                    return;
                  }
                 else
                  {
                  }
                }
               break;
              }
             if(_GLF_DEAD(false))
              break;
             continue;
            }
           if(subgroup_local_id + 1 < subgroup_size)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             int i = 0;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) | (0 >> _GLF_IDENTITY(int(3), int(3)))));
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                break;
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              {
               do
                {
                 for(int _injected_loop_counter = (-7957 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    return;
                   do
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                    continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
