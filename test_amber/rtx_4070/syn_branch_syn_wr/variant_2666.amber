#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, true && (false))))))
  barrier();
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(79277)))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 + (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), (bool(bvec4(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(7086.1542)), vec2(_GLF_FUZZED(-6578.3573), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-244.559, 246.555)))))).y) && true))), false, false))) && true))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 0u | (workgroup_id))) ^ _GLF_IDENTITY(0u, min(0u, 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 1), clamp(ivec3(_injected_loop_counter, 1, 1), ivec3(_injected_loop_counter, 1, 1), ivec3(_injected_loop_counter, 1, 1)))), 0 | (int(_GLF_IDENTITY(ivec3(_injected_loop_counter, 1, 1), clamp(ivec3(_injected_loop_counter, 1, 1), ivec3(_injected_loop_counter, 1, 1), ivec3(_injected_loop_counter, 1, 1))))))) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)) + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(130792u) : subgroup_local_id + 1)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(1u), uint(1u))) ^ (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u))) + 1, (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id + 1)))))) - 0u)) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, ~ (~ (4)))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), min(~ (4), ~ (4))))))), (~ ((_GLF_IDENTITY(4, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (4), min(~ (4), ~ (4)))), min((_GLF_IDENTITY(~ (4), min(~ (4), ~ (4)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (4), min(~ (4), ~ (4)))), 0 ^ ((_GLF_IDENTITY(~ (4), min(~ (4), ~ (4)))))))))))) - 0), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(4, 1 * (4)), ~ (~ (4)))))) | (~ ((_GLF_IDENTITY(4, ~ (~ (4))))))))) | 0));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), false, true, false)), (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(_GLF_IDENTITY(bool(true && (true)), ! (! (bool(true && (true)))))))))))), false, true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(_GLF_IDENTITY(bool(true && (true)), ! (! (bool(true && (true)))))))))))), false, true, false)), (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(_GLF_IDENTITY(bool(true && (true)), ! (! (bool(true && (true)))))))))))), false, true, false))) && true))))) || false))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) > (-29577 & 0)); _injected_loop_counter --)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if((_GLF_IDENTITY(subgroup_local_id % 2, 1u * (_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2)))))) == 0)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     barrier();
    }
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     read = atomicLoad(buf[virtual_gid], 4, 64, 2);
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))), _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(_GLF_IDENTITY(bvec3((false) || false, false, true), bvec3(bvec3(bvec3((false) || false, false, true)))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_GLF_IDENTITY(76255, min(76255, _GLF_IDENTITY(76255, (76255) | (_GLF_IDENTITY(76255, (76255) | 0)))))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(76255))))), clamp(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))))), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(76255))))), ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (~ (1 << _GLF_IDENTITY(int(0), int(0))))))), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (0 >> _GLF_IDENTITY(int(6), int(6))) | (int(0))))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) - (0 & 4668)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), 0 | (int(0))), int(0))), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(76255))))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(76255))))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0)))))), (~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0))))))) << 0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(true ? int(0) : _GLF_FUZZED(76255), (true ? int(0) : _GLF_FUZZED(76255)) + (0 << _GLF_IDENTITY(int(3), int(3))))))))) - 0)))) | (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(0), int(0)), ~ (_GLF_IDENTITY(~ (1 << _GLF_IDENTITY(int(0), int(0))), max(~ (1 << _GLF_IDENTITY(int(0), int(0))), ~ (1 << _GLF_IDENTITY(int(0), int(0)))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(76255))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) ^ 0)) - (0 << _GLF_IDENTITY(int(5), int(5)))))), ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), (int(8)) ^ 0)) - (0 << _GLF_IDENTITY(int(5), int(5))))))) * 1)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 0u, 0u)), 1u * (_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), 0u, 0u), (uvec3(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), 0u, 0u)) / uvec3(1u, 1u, 1u)), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u)) ^ 0u), _GLF_IDENTITY(0u, (0u) | (0u)), 0u), (uvec3(_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u), 0u, 0u)) / uvec3(1u, 1u, 1u))) / ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))) >> _GLF_IDENTITY(uvec3(0u), uvec3(0u))))), (uint(uvec3(virtual_gid, 0u, 0u))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))))))], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) | ((1))) - 0)) << 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(int(1), int(1))), ~ (~ ((_GLF_IDENTITY(int(_GLF_IDENTITY(1, min(1, 1))), int(1)))))) / _GLF_IDENTITY(1, max(1, 1))) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(ivec2(int(1), 1)), (int(ivec2(int(1), 1))) | 0))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), clamp(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) << 0))), true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) << 0), (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 0, 0)), (int(ivec3(1, 0, 0))) | (int(ivec3(1, 0, 0))))), 1))))))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) * _GLF_IDENTITY(1, min(1, 1))))))) : _GLF_FUZZED(_injected_loop_counter)))))), (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), int(ivec3(_GLF_IDENTITY(int(1), int(1)), 0, 0)))) | 0))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(0, (0) + 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, 0 + (1)), 0), ivec2(ivec3(ivec2(_GLF_IDENTITY(1, 0 + (1)), 0), 1)))))), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) * 1)) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter)))))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))), (_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(1), int(1)))), (((0 << _GLF_IDENTITY(int(1), int(1))))) | (((0 << _GLF_IDENTITY(int(1), int(1)))))) << 0)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 1 * (0)), 0)) << _GLF_IDENTITY(int(1), int(1))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))) / 1)), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) - 0), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))), (_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)), false, true, false)), (bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)), false, true, false))) && true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) + 0)) | (int(1))), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter))))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) + 0)) | (int(1))), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) + 0)) | (int(1))), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) | (int(1)))))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(int(1), int(1))) / 1, min((_GLF_IDENTITY(int(1), int(1))) / 1, (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) + 0)) / 1))) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(_injected_loop_counter), 1, 1), (ivec3(_GLF_FUZZED(_injected_loop_counter), 1, 1)) | ivec3(0, 0, 0)))), _GLF_FUZZED(_injected_loop_counter))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(int(1), int(1))) / 1, max((_GLF_IDENTITY(int(1), int(1))) / 1, (_GLF_IDENTITY(int(1), int(1))) / 1))) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true, ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), ! (! (_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))))))) && true), bool(bool(! ((_injected_loop_counter > (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, ~ (~ (0))))) << _GLF_IDENTITY(int(1), int(1)))) && true))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0), min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0), mix(vec2(((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0))[0], ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0))[1]), vec2(_GLF_FUZZED(36.17), _GLF_FUZZED(-9376.7894)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)))), injectionSwitch)).x < injectionSwitch.y)), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-124.190))))) > injectionSwitch.y)))))) && true))), ! _GLF_IDENTITY((! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)) >> 0), _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), ~ (~ (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> (-76127 & 0))) : _GLF_FUZZED(_injected_loop_counter)))))), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1))) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))), (_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(false))), float(0.0), bool(true))))), injectionSwitch)).x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1)))), max(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1)))), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) + 0)) | (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) ^ 0)))), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-1372))))) : _GLF_FUZZED(77824)))), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, 0 + (1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), (true ? _GLF_IDENTITY(int(1), (int(1)) | (int(1))) : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(int(1), int(1))) / 1, min((_GLF_IDENTITY(int(1), int(1))) / 1, (_GLF_IDENTITY(int(1), int(1))) / 1))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(_injected_loop_counter), 1, 1), (ivec3(_GLF_FUZZED(_injected_loop_counter), 1, 1)) | ivec3(0, 0, 0)))), _GLF_FUZZED(_injected_loop_counter))), true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(findMSB((_injected_loop_counter % 58979)))))), int(1))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true, ! (_GLF_IDENTITY(! ((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), bool(bool(! _GLF_IDENTITY(((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), false || (((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(308.531), _GLF_FUZZED(-288.300)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), false || ((! ((_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)) >> 0), _GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), ~ (~ (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) >> (-76127 & 0))) : _GLF_FUZZED(_injected_loop_counter)))))), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1))))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1))) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))), (_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(false))), float(0.0), bool(true))))), injectionSwitch)).x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1)))), max(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1)))), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) | (1))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) + 0)) | (int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) ^ 0)))), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-1372))))) : _GLF_FUZZED(77824)))), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, 0 + (1))), _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (int(1))), (true ? _GLF_IDENTITY(int(1), (int(1)) | (int(1))) : _GLF_FUZZED(_injected_loop_counter)))))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))), false || (_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter))), clamp(true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), _GLF_IDENTITY((_GLF_IDENTITY(int(1), int(1))) / 1, min((_GLF_IDENTITY(int(1), int(1))) / 1, (_GLF_IDENTITY(int(1), int(1))) / 1))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter)))), true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), int(_GLF_IDENTITY(ivec3(_GLF_FUZZED(_injected_loop_counter), 1, 1), (ivec3(_GLF_FUZZED(_injected_loop_counter), 1, 1)) | ivec3(0, 0, 0)))), _GLF_FUZZED(_injected_loop_counter))), true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(findMSB((_injected_loop_counter % 58979)))))), int(1))) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(int(1), int(1))) / 1) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true, ! (_GLF_IDENTITY(! ((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), bool(bool(! _GLF_IDENTITY(((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true), false || (((_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))) && true))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(308.531), _GLF_FUZZED(-288.300)), bvec2(false, false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))))))))) && true); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
