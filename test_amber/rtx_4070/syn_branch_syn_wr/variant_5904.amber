#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_59 {
 vec4 _f0;
 int _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_58 {
 mat3x2 _f0;
 uvec2 _f1;
 uvec4 _f2;
 vec4 _f3;
 mat3 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_57 {
 bvec4 _f0;
 mat3x4 _f1;
 mat4 _f2;
 uint subgroup_local_id;
 mat2x3 _f3;
} ;

struct _GLF_struct_56 {
 bvec4 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_55 {
 mat2 _f0;
 mat4x2 _f1;
 mat3x4 _f2;
 uvec4 _f3;
 bvec3 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_60 {
 _GLF_struct_55 _f0;
 mat4 _f1;
 _GLF_struct_56 _f2;
 _GLF_struct_57 _f3;
 bvec4 _f4;
 _GLF_struct_58 _f5;
 _GLF_struct_59 _f6;
} ;

struct _GLF_struct_61 {
 _GLF_struct_60 _f0;
 mat3x2 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_53 {
 uint workgroup_base;
 int _f0;
 mat2x4 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_51 {
 mat4x2 _f0;
} ;

struct _GLF_struct_50 {
 mat3 _f0;
 mat3x4 _f1;
 mat3x2 _f2;
 mat2x4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_49 {
 ivec4 _f0;
 uvec2 _f1;
 int _f2;
} ;

struct _GLF_struct_52 {
 _GLF_struct_49 _f0;
 vec2 _f1;
 _GLF_struct_50 _f2;
 mat2 _f3;
 uvec2 _f4;
 _GLF_struct_51 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_54 {
 _GLF_struct_52 _f0;
 mat3 _f1;
 _GLF_struct_53 _f2;
} ;

struct _GLF_struct_46 {
 float _f0;
 mat3 _f1;
 mat2 _f2;
 uvec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_45 {
 uvec2 _f0;
 vec4 _f1;
 mat4 _f2;
 mat4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_44 {
 mat2x3 _f0;
 bvec3 _f1;
 uvec2 _f2;
 mat2 _f3;
 mat3x4 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_47 {
 ivec2 _f0;
 _GLF_struct_44 _f1;
 _GLF_struct_45 _f2;
 bvec3 _f3;
 mat4x2 _f4;
 _GLF_struct_46 _f5;
} ;

struct _GLF_struct_43 {
 mat4x2 _f0;
} ;

struct _GLF_struct_48 {
 _GLF_struct_43 _f0;
 int _injected_loop_counter;
 _GLF_struct_47 _f1;
} ;

struct _GLF_struct_40 {
 vec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_39 {
 float _f0;
 uint _f1;
 mat3 _f2;
 uint subgroup_base;
 mat4 _f3;
 mat2x3 _f4;
 float _f5;
} ;

struct _GLF_struct_38 {
 uvec4 _f0;
 bool _f1;
} ;

struct _GLF_struct_41 {
 uvec4 _f0;
 _GLF_struct_38 _f1;
 _GLF_struct_39 _f2;
 _GLF_struct_40 _f3;
} ;

struct _GLF_struct_36 {
 uvec4 _f0;
 mat3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_37 {
 _GLF_struct_36 _f0;
 int _f1;
} ;

struct _GLF_struct_34 {
 uvec2 _f0;
 mat4x2 _f1;
 mat4 _f2;
 uvec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_33 {
 float _f0;
 vec4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_32 {
 ivec3 _f0;
 int _f1;
 vec2 _f2;
} ;

struct _GLF_struct_31 {
 bvec2 _f0;
 mat3 _f1;
 uint _f2;
 bool _f3;
} ;

struct _GLF_struct_30 {
 vec3 _f0;
} ;

struct _GLF_struct_35 {
 ivec4 _f0;
 _GLF_struct_30 _f1;
 _GLF_struct_31 _f2;
 _GLF_struct_32 _f3;
 _GLF_struct_33 _f4;
 _GLF_struct_34 _f5;
} ;

struct _GLF_struct_28 {
 vec4 _f0;
 vec4 _f1;
 vec2 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_27 {
 mat3x2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_26 {
 int _f0;
 mat2 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_29 {
 _GLF_struct_26 _f0;
 ivec2 _f1;
 uvec3 _f2;
 int _f3;
 _GLF_struct_27 _f4;
 _GLF_struct_28 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_42 {
 mat3x2 _f0;
 _GLF_struct_29 _f1;
 bvec3 _f2;
 _GLF_struct_35 _f3;
 _GLF_struct_37 _f4;
 _GLF_struct_41 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_23 {
 mat3x2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_22 {
 mat3x2 _f0;
 float _f1;
 mat2 _f2;
 bool _f3;
 mat3x4 _f4;
 mat4x2 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_21 {
 vec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_24 {
 uint _f0;
 _GLF_struct_21 _f1;
 _GLF_struct_22 _f2;
 _GLF_struct_23 _f3;
} ;

struct _GLF_struct_19 {
 bvec4 _f0;
 mat3x2 _f1;
 mat3x2 _f2;
 bvec2 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_18 {
 mat4x3 _f0;
 uint num_workgroup;
 mat3 _f1;
} ;

struct _GLF_struct_20 {
 _GLF_struct_18 _f0;
 uvec4 _f1;
 _GLF_struct_19 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_17 {
 mat2x4 _f0;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
} ;

struct _GLF_struct_16 {
 int _f0;
 _GLF_struct_15 _f1;
} ;

struct _GLF_struct_25 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 mat3x2 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_24 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_12 {
 uvec2 _f0;
 uvec2 _f1;
} ;

struct _GLF_struct_11 {
 uint _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_13 {
 bvec3 _f0;
 vec4 _f1;
 _GLF_struct_11 _f2;
 vec3 _f3;
 _GLF_struct_12 _f4;
 int _f5;
} ;

struct _GLF_struct_9 {
 uvec3 _f0;
 int _f1;
 uvec3 _f2;
 vec3 _f3;
 bool _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_9 _f0;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_5 {
 bool _f0;
 mat4 _f1;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 mat2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 mat4 _f2;
 _GLF_struct_6 _f3;
 bvec4 _f4;
 _GLF_struct_7 _f5;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
} ;

struct _GLF_struct_1 {
 int _f0;
 mat4x2 _f1;
 vec4 _f2;
 mat2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 mat4x3 _f1;
 ivec4 _f2;
 float _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_3 {
 ivec4 _f0;
 mat4x2 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
} ;

struct _GLF_struct_14 {
 float _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_10 _f3;
 uint read;
 ivec3 _f4;
 _GLF_struct_13 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 _GLF_struct_61 _GLF_struct_replacement_61 = _GLF_struct_61(_GLF_struct_60(_GLF_struct_55(mat2(1.0), mat4x2(1.0), mat3x4(1.0), uvec4(1u), bvec3(true), bvec3(true)), mat4(1.0), _GLF_struct_56(bvec4(true), mat2x4(1.0)), _GLF_struct_57(bvec4(true), mat3x4(1.0), mat4(1.0), gl_SubgroupInvocationID, mat2x3(1.0)), bvec4(true), _GLF_struct_58(mat3x2(1.0), uvec2(1u), uvec4(1u), vec4(1.0), mat3(1.0), uvec3(1u)), _GLF_struct_59(vec4(1.0), 1, bvec3(_GLF_IDENTITY(true, (true) && true)))), mat3x2(1.0), uvec2(1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && true) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, true, true))))))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-8803.1677))) < injectionSwitch.y))))
    {
     barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(1.0), 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0, 1.0))) > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_struct_25 _GLF_struct_replacement_25 = _GLF_struct_25(_GLF_struct_16(1, _GLF_struct_15(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) | (_GLF_IDENTITY(uvec4(1u), (true ? uvec4(1u) : _GLF_FUZZED(uvec4(99688u, 143066u, 33971u, 25689u)))))))), _GLF_struct_17(mat2x4(1.0)), mat3x2(1.0), _GLF_struct_20(_GLF_struct_18(mat4x3(1.0), gl_NumWorkGroups.x, mat3(1.0)), uvec4(1u), _GLF_struct_19(bvec4(true), mat3x2(1.0), mat3x2(1.0), bvec2(true), mat2x4(1.0)), mat2(1.0)), _GLF_struct_24(1u, _GLF_struct_21(vec2(1.0), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(exp2(-66.02)))), (1.0) - 0.0))), _GLF_struct_22(mat3x2(1.0), 1.0, _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), true, mat3x4(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(696.392)))), mat4x2(1.0), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(true), false)))), _GLF_struct_23(mat3x2(1.0), mat4x2(1.0))), uvec2(1u));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) | (gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_54 _GLF_struct_replacement_54 = _GLF_struct_54(_GLF_struct_52(_GLF_struct_49(ivec4(1), uvec2(1u), 1), vec2(1.0), _GLF_struct_50(mat3(1.0), mat3x4(1.0), mat3x2(1.0), mat2x4(1.0), mat2x4(1.0)), mat2(1.0), uvec2(1u), _GLF_struct_51(mat4x2(1.0)), mat4x3(1.0)), mat3(1.0), _GLF_struct_53(workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) | (workgroup_id)), uint(_GLF_IDENTITY(uint(workgroup_id), min(uint(workgroup_id), uint(workgroup_id))))), 1, mat2x4(1.0), mat2(1.0)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(5.1) : injectionSwitch.y))) || false))), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), true, true, true))))), true && ((injectionSwitch.x > injectionSwitch.y))) || false)))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), min(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))) : _injected_loop_counter --)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_42 _GLF_struct_replacement_42 = _GLF_struct_42(mat3x2(1.0), _GLF_struct_29(_GLF_struct_26(1, mat2(1.0), bvec2(true)), ivec2(1), uvec3(1u), 1, _GLF_struct_27(mat3x2(1.0), vec4(1.0)), _GLF_struct_28(vec4(1.0), vec4(1.0), vec2(1.0), mat2x4(1.0)), vec4(1.0)), bvec3(true), _GLF_struct_35(ivec4(1), _GLF_struct_30(vec3(1.0)), _GLF_struct_31(bvec2(true), mat3(1.0), 1u, true), _GLF_struct_32(ivec3(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (1)), 1))), 1, vec2(1.0)), _GLF_struct_33(1.0, vec4(1.0), ivec3(1)), _GLF_struct_34(uvec2(1u), mat4x2(1.0), mat4(1.0), _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) >> uvec4(0u, 0u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u)), ivec2(1))), _GLF_struct_37(_GLF_struct_36(uvec4(1u), mat3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-14.23)), bool(false)))), ivec4(1)), 1), _GLF_struct_41(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), (_GLF_IDENTITY(1u, (1u) ^ 0u)) | (_GLF_IDENTITY(1u, (1u) ^ 0u)))), _GLF_struct_38(uvec4(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) + 0u)))), true), _GLF_struct_39(1.0, 1u, _GLF_IDENTITY(mat3(1.0), _GLF_IDENTITY(mat3(mat4(mat3(1.0))), (false ? _GLF_FUZZED(mat3(-1355.1241, 697.092, -3.3, 7174.0770, 5.5, -6.1, 9.8, 764.040, 242.375)) : mat3(mat4(mat3(1.0)))))), subgroup_id * subgroup_size, mat4(1.0), mat2x3(1.0), 1.0), _GLF_struct_40(vec4(1.0), mat3x2(1.0))), bvec2(true));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec3((false) || false, true, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))))), false || (bool(bvec3((false) || false, true, _GLF_IDENTITY(false, (false) && true))))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), ! (! (! (_GLF_IDENTITY(true, (true) && true)))))))))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         continue;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + _GLF_struct_replacement_61._f0._f3.subgroup_local_id, uint(_GLF_IDENTITY(uvec3(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + _GLF_struct_replacement_61._f0._f3.subgroup_local_id, 0u, (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(_GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), uint(6u))), uint(6u)))))), (uvec3(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base, (_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base) ^ 0u) + _GLF_struct_replacement_61._f0._f3.subgroup_local_id, 0u, (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), _GLF_IDENTITY(clamp(_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), max(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))), (_GLF_IDENTITY(clamp(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u))), (false ? _GLF_FUZZED(workgroup_size) : clamp(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u)))))) << 0u))))) | (uvec3(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_61._f0._f3.subgroup_local_id, (_GLF_struct_replacement_61._f0._f3.subgroup_local_id) - 0u), 0u, (0u << _GLF_IDENTITY(uint(6u), uint(6u))))))));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, float(vec2((injectionSwitch.x) - 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) - 0.0, float(vec2((injectionSwitch.x) - 0.0, 0.0)))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || false)) && true))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       return;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, min(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0, (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0 : _GLF_FUZZED((~ _injected_loop_counter)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), clamp(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), max(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size))), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size))), (_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), clamp(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), max(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size))), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size)))) | (_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), clamp(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), max(_GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size))), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size), _GLF_struct_replacement_54._f2.workgroup_base + _GLF_struct_replacement_42._f5._f2.subgroup_base + ((_GLF_struct_replacement_61._f0._f3.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))) % subgroup_size))))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(1.0, _GLF_struct_3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), clamp((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), clamp((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714))))))), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(1), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), clamp((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714))))))))), _GLF_IDENTITY(ivec4(1), _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), clamp((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714)))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, true), bvec3(bvec4(bvec3(true, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (bool(bvec3(true, false, true))) && true)) ? ivec4(1) : _GLF_FUZZED((~ ivec4(-51995, 42983, 74588, 33714))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 1 * (1))), (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)))), (false ? _GLF_FUZZED(ivec4(-33057, -93547, -16483, 33170)) : _GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 1 * (1))), (true ? ivec4(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) * 1)))))) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)))), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 1 * (1))), _GLF_IDENTITY((_GLF_IDENTITY(true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)), ivec4(1, 1, 1, 1) * (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880))))), max((_GLF_IDENTITY(true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)), ivec4(1, 1, 1, 1) * (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880))))), _GLF_IDENTITY((_GLF_IDENTITY(true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)), ivec4(1, 1, 1, 1) * (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880))))), ivec4(0, 0, 0, 0) ^ ((_GLF_IDENTITY(true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)), ivec4(1, 1, 1, 1) * (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)))))))))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 1 * (1))), (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, 1 * (1))), (true ? ivec4(1) : _GLF_FUZZED(ivec4(72321, -36024, 30615, -11880)))))))), _GLF_IDENTITY(ivec4(1), min(ivec4(1), ivec4(1))))), mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), min(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(false, (false) && true), false), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(false, (false) && true), false), true))))), false, true))) ? _GLF_FUZZED(7.9) : 1.0))), _GLF_struct_0(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), mat4x3(1.0), ivec4(1), 1.0, uvec2(_GLF_IDENTITY(1u, (1u) | (1u)))), _GLF_struct_1(1, mat4x2(1.0), vec4(1.0), mat2(1.0), bvec3(true)), _GLF_struct_2(uvec2(1u))), _GLF_struct_8(_GLF_struct_4(ivec3(1), mat2(1.0), mat4x3(1.0)), _GLF_struct_5(_GLF_IDENTITY(true, (true) && true), mat4(1.0)), mat4(1.0), _GLF_struct_6(mat2x4(1.0), bvec2(true)), bvec4(true), _GLF_struct_7(_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), uvec3(1u), uvec3(1u))))), _GLF_struct_10(_GLF_struct_9(uvec3(_GLF_IDENTITY(1u, (1u) - 0u)), 1, uvec3(1u), vec3(1.0), true, uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (1u))), 0u | (_GLF_IDENTITY(1u, 0u ^ (1u))))))), 0, ivec3(1), _GLF_struct_13(bvec3(_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), vec4(1.0), _GLF_struct_11(1u, uvec4(_GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, ~ (~ (1u)))))), _GLF_IDENTITY(clamp(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((true ? 1u : _GLF_FUZZED(_GLF_struct_replacement_54._f2.workgroup_base)), 0u + _GLF_IDENTITY(((true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base, clamp(_GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base))))), clamp(((true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base, clamp(_GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base))))), ((true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base, clamp(_GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base))))), ((true ? 1u : _GLF_FUZZED(_GLF_IDENTITY(_GLF_struct_replacement_54._f2.workgroup_base, clamp(_GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base, _GLF_struct_replacement_54._f2.workgroup_base))))))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, 1u, 1u), _GLF_IDENTITY(~ (~ (clamp(1u, 1u, 1u))), (~ (~ (clamp(1u, 1u, 1u)))) | 0u)))), clamp(clamp(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(true))) ? 1u : _GLF_FUZZED(_GLF_struct_replacement_54._f2.workgroup_base), ~ (~ (_GLF_IDENTITY(true, bool(bool(true))) ? 1u : _GLF_FUZZED(_GLF_struct_replacement_54._f2.workgroup_base)))))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(_GLF_struct_replacement_54._f2.workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) | (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) - 0u)))))))))), clamp(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(1u, (1u) << 0u))), (true ? 1u : _GLF_FUZZED(_GLF_struct_replacement_54._f2.workgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(97609u) : _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)), 1u, _GLF_IDENTITY(1u, (1u) << 0u))))))))), _GLF_IDENTITY(vec3(1.0), max(vec3(1.0), vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0))))), _GLF_struct_12(uvec2(1u), uvec2(1u)), 1));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, 0 + (4)));
 if((_GLF_struct_replacement_61._f0._f3.subgroup_local_id % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).x < injectionSwitch.y), false)))), ! _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.1)), vec2(_GLF_FUZZED(-1.6), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], 0.0 + ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]))))))), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y)))), true && (_GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.1)), vec2(_GLF_FUZZED(-1.6), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], 0.0 + ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]))))))), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y)))), true && ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-1.1)), vec2(_GLF_FUZZED(-1.6), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1])), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1], 0.0 + ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))[1]))))))), bvec2(false, _GLF_IDENTITY(true, (true) && true)))).y)))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-988.761))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, sin(0.0), 1.0))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4894.2642)), vec2(_GLF_FUZZED(18.37), (injectionSwitch)[1]), bvec2(false, true))))) : _GLF_FUZZED(exp(injectionSwitch)))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), int(ivec4(_GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) >> 0) & 58413), int(_GLF_ONE(1.0, injectionSwitch.y)), (1 ^ 1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (true ? _GLF_IDENTITY(int(2), int(2)) : _GLF_FUZZED(65068)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1))) : _GLF_FUZZED(87152)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0, 0.0, 0.0)), float(mat3x2(float(mat2(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), 1.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 1.0, 0.0))))))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))), true, true)))), false || (bool(bvec2((false), false))))) && _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (true) || false), true))))))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 barrier();
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             return;
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (! (true)))))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(2.5) : injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     _GLF_struct_replacement_14.read = atomicLoad(buf[virtual_gid], 4, 64, 2);
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, false)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, false)), true))))))))
      {
       for(int _injected_loop_counter = (0 & 40451); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) * 1), _GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(5))))))) & 1)), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(int(5), (int(5)) * 1), _GLF_IDENTITY(int(5), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (int(5))))))) & 1))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
        {
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4.3) : injectionSwitch.y))))))
    barrier();
   _GLF_struct_replacement_14.read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u + (buf[virtual_gid])), 4, 64, 2);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, true, false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(_GLF_struct_48 _GLF_struct_replacement_48 = _GLF_struct_48(_GLF_struct_43(mat4x2(1.0)), 0, _GLF_struct_47(ivec2(1), _GLF_struct_44(mat2x3(1.0), bvec3(true), uvec2(_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, (1u) / 1u)))), mat2(1.0), mat3x4(1.0), uvec3(1u)), _GLF_struct_45(uvec2(1u), vec4(1.0), mat4(1.0), _GLF_IDENTITY(mat4(1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), mat4(1.0)), bvec3(true), mat4x2(1.0), _GLF_struct_46(1.0, mat3(1.0), mat2(1.0), uvec4(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) / 1u)), uvec4(1u)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_struct_replacement_48._injected_loop_counter, (_GLF_struct_replacement_48._injected_loop_counter) - 0) < (1 & 1)); _GLF_struct_replacement_48._injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         continue;
        }
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   subgroupBarrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, true))))) || false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & 38639)); _injected_loop_counter --)
    {
     atomicStore(checker[virtual_gid], _GLF_struct_replacement_14.read, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (true ? 4 : _GLF_FUZZED(39449))), 64, 4);
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
