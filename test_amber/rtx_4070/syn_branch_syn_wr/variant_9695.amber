#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true)))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(2228.3129, 2.9)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).y)), (! (! (injectionSwitch.x > injectionSwitch.y))) || false))), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(2.0)))))) || false)))), _GLF_IDENTITY(bool(bvec2(! (bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(2.0)))))) || false)))), false)), _GLF_IDENTITY(bool(bvec3(bool(bvec2(! (bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(2.0)))))) || false)))), false)), true, true)), (bool(bvec3(bool(bvec2(! (bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(2.0)))))) || false)))), false)), true, true))) && true))), (! (bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), ((! (injectionSwitch.x > injectionSwitch.y))) && true)) || false), (! (! (injectionSwitch.x > injectionSwitch.y))) || false))))) || false)), bool(bvec4((_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), (! (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(normalize(-2374.6732)) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(2.0)))))) || false)))), (! (bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), ((! (injectionSwitch.x > injectionSwitch.y))) && true)) || false), (! (! (injectionSwitch.x > injectionSwitch.y))) || false))))) || false)), false, false, false))))))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), clamp(_GLF_IDENTITY(int(int(1)), min(int(int(1)), int(int(1)))), _GLF_IDENTITY(int(int(1)), 0 ^ (int(int(1)))), int(int(1))))))) || false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || _GLF_IDENTITY(false, false || (false))))); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), true && (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true))))), (! (bool(_GLF_IDENTITY(bvec2((false), false), bvec2(bvec3(bvec2((false), false), true)))))) && true))))))) && true) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackUnorm2x16(subgroup_size)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), bvec2(true, false)))), _GLF_IDENTITY((min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackUnorm2x16(subgroup_size)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), bvec2(true, false))))) * mat2(1.0), clamp((min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackUnorm2x16(subgroup_size)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), bvec2(true, false))))) * mat2(1.0), (min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackUnorm2x16(subgroup_size)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), bvec2(true, false))))) * mat2(1.0), (min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackUnorm2x16(subgroup_size)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), bvec2(true, false))))) * mat2(1.0))))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), (false || (! _GLF_IDENTITY((false), ((false)) && true))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), 0u | (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) : _GLF_FUZZED(usubBorrow(bitfieldReverse(virtual_gid), subgroup_size, (num_workgroup))))), (workgroup_base + subgroup_id * subgroup_size) * 1u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))))
  barrier();
 do
  {
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_GLF_IDENTITY(ivec4(69966, -55009, -14874, -24144), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4(69966, -55009, -14874, -24144), (ivec4(0, 0, 0, 0) >> _GLF_IDENTITY(ivec4(5), ivec4(5))) | (ivec4(69966, -55009, -14874, -24144)))))[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)) + 0)))))))) - (0 >> _GLF_IDENTITY(int(8), int(8)))))), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ _GLF_IDENTITY(((1)), 0 ^ (_GLF_IDENTITY(((1)), int(int(((1))))))))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))))))) - _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), int(ivec4(int(8), 1, 1, 1)))) - 0))), max((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), int(ivec4(int(8), 1, 1, 1)))) - 0))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), int(ivec4(int(8), 1, 1, 1)))) - 0))), 0 | ((0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (_GLF_IDENTITY(int(8), int(ivec4(int(8), 1, 1, 1)))) - 0)))))))))), uint(uint(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), min(_GLF_IDENTITY((1), ~ (~ ((1)))), _GLF_IDENTITY((1), ~ (~ ((1)))))), _GLF_IDENTITY((1), ~ (~ ((1)))), _GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ~ (~ ((1))))) * 1))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), max(_GLF_IDENTITY((1), ((1)) | ((1))), _GLF_IDENTITY((1), ((1)) | ((1))))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))))))) - (0 >> _GLF_IDENTITY(int(8), int(8))))))))), uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (1) : _GLF_FUZZED(88628)))) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))), int(_GLF_IDENTITY(ivec4(~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))), 1, (1 & 1), 0), (ivec4(~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))), 1, (1 & 1), 0)) / ivec4(1, 1, 1, 1)))))))) - (0 >> _GLF_IDENTITY(int(8), int(8)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), (false ? _GLF_FUZZED(86760) : _GLF_IDENTITY((1), int(ivec4(_GLF_IDENTITY((1), ((1)) / 1), 1, 0, 0)))))) >> _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), min(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), min((0 << _GLF_IDENTITY(int(1), int(1))), (0 << _GLF_IDENTITY(int(1), int(1))))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), ~ (~ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), int(ivec3((0 << _GLF_IDENTITY(int(1), int(1))), 1, 1)))))))))) + 0) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))))))), (false ? _GLF_FUZZED(22602) : (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0) ^ 0), _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))))))))) - (0 >> _GLF_IDENTITY(int(8), int(8)))))), max(uint(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((1), ((_GLF_IDENTITY(1, (1) >> 0))) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) << 0))), (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))))))) - (0 >> _GLF_IDENTITY(int(8), int(8)))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (0 & -82276)), _GLF_IDENTITY(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), ~ (~ ((1)))), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(ivec4(69966, -55009, -14874, -24144)[0])))))))) + 0) ^ 0, min(_GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) >> (0 << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), (_GLF_IDENTITY((1), ((1)) >> (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) / 1) << _GLF_IDENTITY(int(1), int(1))))) + 0) ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (0) : _GLF_FUZZED(-55891)))))))) - (0 >> _GLF_IDENTITY(int(8), int(8)))))))))), 4, 64, 4);
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (false ? _GLF_FUZZED(-30825) : 4)), 64, _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, (0) >> 0))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))), (true ? (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) : _GLF_FUZZED(44583))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(((_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0)) - (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1))), 0 + (((_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0)) - (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / 1)))))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0), (false ? _GLF_IDENTITY(_GLF_FUZZED(int(2574.2860)), min(_GLF_FUZZED(int(2574.2860)), _GLF_FUZZED(int(2574.2860)))) : _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) | ((0) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0))), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0)))) >> 0)) << 0) >> _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED((_injected_loop_counter * 80329)))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) ^ 0), _GLF_IDENTITY(0, (0) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0))), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0)))) >> 0)) << 0) >> _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED((_injected_loop_counter * 80329)))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(0, (0) - 0)) ^ 0), _GLF_IDENTITY(0, (0) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0)), (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0))) << 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) ^ 0), 0))) - 0))), ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), (false ? _GLF_FUZZED(_injected_loop_counter) : (0)))) / 1) ^ 0), 0))) - 0)))) >> 0)) << 0) >> _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED((_injected_loop_counter * 80329)))) : _GLF_FUZZED(_injected_loop_counter))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), ((_injected_loop_counter --)) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), clamp(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (0) - 0)))) ^ 0), _GLF_IDENTITY(0, (0) - 0)))) ^ 0), _GLF_IDENTITY(0, (0) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0)))) : _GLF_FUZZED(-73077))), (false ? _GLF_FUZZED(int(2574.2860)) : _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), min(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (0) - 0)))) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) | ((0) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0, 0 ^ ((_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, ((0) - 0) | ((0) - 0))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << _GLF_IDENTITY(0, (0) - 0))) >> int(_GLF_ZERO(0.0, injectionSwitch.x))))) - 0)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), true, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), true, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)), bool(bvec3(bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), bool(bvec4(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false)), (bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false))) && true), true, true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)), false, false))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0)) ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       do
        {
         for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(56.66))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))), 0 | (((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (((0 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), int(3))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(_GLF_IDENTITY(ivec3(3, 0, 1), (true ? ivec3(3, 0, 1) : _GLF_FUZZED(ivec3(73293, 16565, -10802))))))), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)), _GLF_IDENTITY(true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), ! (! (true && (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))))); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, _GLF_IDENTITY(0, (0) << 0), 0), (clamp(0, _GLF_IDENTITY(0, (0) << 0), 0)) / 1))); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) || false))))), (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(subgroup_local_id + 1 < subgroup_size)
      {
       int i = 0;
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read, (read) / 1u), 1u, 1u), (uvec3(_GLF_IDENTITY(read, (read) / 1u), 1u, 1u)) ^ uvec3(0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read, (read) / 1u), _GLF_IDENTITY(1u, min(1u, 1u)), 1u), (uvec3(_GLF_IDENTITY(read, (read) / 1u), 1u, 1u)) ^ uvec3(0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(read, (read) / 1u), 1u, 1u), (uvec3(_GLF_IDENTITY(read, (read) / 1u), 1u, _GLF_IDENTITY(1u, uint(uint(1u))))) ^ uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY(4, int(int(4))), 64, 4);
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
