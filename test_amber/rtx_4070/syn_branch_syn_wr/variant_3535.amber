#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(mat4x3(_GLF_IDENTITY(vec2(0.0, 0.0), mix(vec2((vec2(0.0, 0.0))[0], _GLF_FUZZED(4.6)), vec2(_GLF_FUZZED(-68.54), (vec2(0.0, 0.0))[1]), bvec2(false, true))), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))) + (injectionSwitch), mix(vec2(_GLF_FUZZED((true ? (-9.5 / -2177.9313) : -7.6)), _GLF_FUZZED(191.655)), vec2(_GLF_IDENTITY((vec2(0.0, 0.0) + (injectionSwitch))[0], float(mat4x3((vec2(0.0, 0.0) + (injectionSwitch))[0], 1.0, 1.0, determinant(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), (mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), 0.0, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 0.0, 0.0))), (vec2(0.0, 0.0) + (injectionSwitch))[1]), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), true)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), true, true))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(false, (false) || false), true))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y), false || ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) << 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), true && (! (_GLF_IDENTITY(false, (false) || false)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) + (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), false, true))), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / abs(1.0)))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(0.3, 9.2)) : injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), ! (! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && (false))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED((subgroup_base << workgroup_size)) : _GLF_IDENTITY(workgroup_base, (workgroup_base) >> 0u))) + _GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id)), 1u * (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u)));
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) + subgroup_base, (workgroup_base + subgroup_base) / 1u) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u))), (subgroup_local_id) | (subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(0.0, 0.0)) + (injectionSwitch), vec2(_GLF_IDENTITY(mat2(_GLF_IDENTITY(sin(vec2(0.0, 0.0)) + (injectionSwitch), (sin(vec2(0.0, 0.0)) + (injectionSwitch)) + vec2(0.0, 0.0)), sqrt(1.0), log(1.0)), mat2(mat4x3(mat2(_GLF_IDENTITY(sin(vec2(0.0, 0.0)) + (injectionSwitch), (sin(vec2(0.0, 0.0)) + (injectionSwitch)) + vec2(0.0, 0.0)), sqrt(1.0), log(1.0)))))))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y) / cos(0.0))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(1.0, 1.0) * (_GLF_IDENTITY(sin(vec2(0.0, 0.0)), max(_GLF_IDENTITY(sin(vec2(0.0, 0.0)), mix(vec2(_GLF_FUZZED(139.667), _GLF_FUZZED(8116.6697)), vec2((sin(vec2(0.0, 0.0)))[0], (sin(vec2(0.0, 0.0)))[1]), bvec2(true, true))), sin(vec2(0.0, 0.0)))))) + (injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch))) - vec2(0.0, 0.0)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(vec4(1141.4914, -6048.5230, 3050.1658, 880.848)[3]) : 0.0)), 0.0)), 0.0)) + (injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))) + (injectionSwitch)).y) / 1.0, mix(float((_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))) + (injectionSwitch)).y) / 1.0), float(_GLF_FUZZED(-1310.8340)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(mat4x3(sin(vec2(0.0, 0.0)), 0.0, tan(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat3x2(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0))))), max(float(mat3x2(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0))))), float(mat3x2(dot(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0), vec4(1.0, 1.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, 0.0, 0.0)))))))), dot(_GLF_IDENTITY(vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(789.609)), bool(false))))), 1.0, 1.0), (vec4(0.0, determinant(mat2(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(789.609)), bool(false))))), 1.0, 1.0)) * mat4(1.0)), vec4(1.0, 1.0, 0.0, 0.0))), 0.0))) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-3.8 * -274.812)), _GLF_FUZZED((-468.197 + -4089.6473))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y, (true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch))))), vec2(vec2(mat2(1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), clamp(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), min(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)))), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch))))))))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), vec2(vec3(vec2(0.0, 0.0), log(1.0))))))) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((- -1.5)), _GLF_FUZZED(-2.4)), bvec2(false, false))))).y, (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)), (true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483))) - _GLF_IDENTITY(dot(vec4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 1.0), vec4(0.0, 1.0, exp(0.0), 0.0)), dot(vec4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 1.0), vec4(0.0, 1.0, exp(0.0), 0.0)))))))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch)))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(_GLF_IDENTITY(vec2(0.0, 0.0), mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)), max(vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)), _GLF_IDENTITY(vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)), clamp(_GLF_IDENTITY(vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)), min(vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)), vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)))), vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)), vec2((_GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0), mat3(1.0) * (mat2x3(vec2(0.0, 0.0), 0.0, 1.0, 0.0, 1.0))))) : _GLF_FUZZED(vec2(-31.32, 9844.8953)))))[0], _GLF_FUZZED(816.270)))))), vec2(_GLF_FUZZED(float(false)), (vec2(0.0, 0.0))[1]), bvec2(false, _GLF_IDENTITY(true, (true) || false))))) + (injectionSwitch)).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-49.42, 4.9))))).y, clamp(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-49.42, 4.9))))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-49.42, 4.9))))).y, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-49.42, 4.9))))).y) + sin(0.0)), _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-49.42, 4.9))))).y)))) - _GLF_IDENTITY(0.0, min(0.0, 0.0))) : _GLF_FUZZED(-25.14))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)) + (injectionSwitch), vec2(1.0, 1.0) * (sin(vec2(0.0, 0.0)) + (injectionSwitch)))).y, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)) + (injectionSwitch), vec2(1.0, 1.0) * (sin(vec2(0.0, 0.0)) + (injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)) + (injectionSwitch), vec2(1.0, 1.0) * (sin(vec2(0.0, 0.0)) + (injectionSwitch)))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)) + (injectionSwitch), vec2(1.0, 1.0) * (sin(vec2(0.0, 0.0)) + (injectionSwitch)))).y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(sin(vec2(0.0, 0.0)), 1.0, 1.0, sqrt(0.0), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0), mat4(1.0) * (mat2x4(sin(vec2(0.0, 0.0)), 1.0, 1.0, sqrt(0.0), 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0))))) + (injectionSwitch)), mix(vec2((_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)))[0], _GLF_FUZZED(7.8)), vec2(_GLF_IDENTITY(_GLF_FUZZED(-61.95), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y))) * (_GLF_FUZZED(-61.95))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)))))[1]), bvec2(false, true))).y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), vec2(mat3x2(sin(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 1.0, 0.0, 1.0, 0.0))) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483))))))) + 0.0)), float(_GLF_FUZZED(9258.2025)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-514.432), _GLF_FUZZED(2.4)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(sin(vec2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0))), 0.0)), mix(vec2(_GLF_FUZZED((false ? -1825.7771 : -10.95)), _GLF_FUZZED(-5.1)), vec2((sin(vec2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0))), 0.0)))[0], _GLF_IDENTITY((sin(vec2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0))), 0.0)))[1], max((sin(vec2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0))), 0.0)))[1], (sin(vec2(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 0.0, 0.0, 1.0))), 0.0)))[1]))), bvec2(true, true))) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, sin(_GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (vec2(0.0, 0.0)))) + (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch)))).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))) + (injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)))))), (false ? _GLF_FUZZED(-9610.7075) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), injectionSwitch)))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, (true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, -9.8, 4961.1483)))), (false ? _GLF_FUZZED(-362.853) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, _GLF_IDENTITY(-9.8, mix(float(_GLF_FUZZED(float(true))), float(-9.8), bool(true))), 4961.1483)), (true ? _GLF_IDENTITY(injectionSwitch, sin(vec2(0.0, 0.0)) + (injectionSwitch)).y : _GLF_FUZZED(clamp(-0.1, _GLF_IDENTITY(-9.8, mix(float(_GLF_FUZZED(float(true))), float(-9.8), bool(true))), 4961.1483))) + abs(0.0))))))))))) - abs(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), ! (! (_GLF_DEAD(false)))), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(float(79978u)) : _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) * determinant(mat2(1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y)) && true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))) && true), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) * vec2(1.0, 1.0))), clamp(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) * vec2(1.0, 1.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) * vec2(1.0, 1.0))), float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) * vec2(1.0, 1.0)))))))) && true)))))), false)))), false || (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))))))), false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_DEAD(false)))))), (_GLF_DEAD(false)) && true))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_IDENTITY(_GLF_FUZZED(140440u), _GLF_IDENTITY((_GLF_FUZZED(140440u)) >> 0u, 0u + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(140440u, 0u | (140440u)))) >> 0u, (_GLF_IDENTITY((_GLF_FUZZED(140440u)) >> 0u, ((_GLF_FUZZED(140440u)) >> 0u) | ((_GLF_FUZZED(140440u)) >> 0u))) | ((_GLF_FUZZED(140440u)) >> 0u)), 0u ^ (_GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(140440u, 0u | (140440u)))) >> 0u, (_GLF_IDENTITY((_GLF_FUZZED(140440u)) >> 0u, ((_GLF_FUZZED(140440u)) >> 0u) | ((_GLF_FUZZED(140440u)) >> 0u))) | ((_GLF_FUZZED(140440u)) >> 0u))))))) : next_virtual_gid))], uint(1), 4, 64, _GLF_IDENTITY(4, (true ? _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, (4) | 0)) >> 0) : _GLF_FUZZED(-95235))) : _GLF_FUZZED(-9251))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) - 0.0, max(_GLF_IDENTITY((injectionSwitch.y) - 0.0, max((injectionSwitch.y) - 0.0, (injectionSwitch.y) - 0.0)), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) - 0.0)))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(_GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-30.03) : injectionSwitch[1])), injectionSwitch[1], injectionSwitch[1])))).x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))) % _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2), max(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2))), max(max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2))))) == _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, max(0, 0)), 0))) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))) % _GLF_IDENTITY(2, _GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2), max(max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2))))) == _GLF_IDENTITY(0, (0) >> 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))) % _GLF_IDENTITY(2, _GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2), max(max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2))))) == _GLF_IDENTITY(0, (0) >> 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))) % _GLF_IDENTITY(2, _GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(2, ~ (~ (2))), (2) << 0), 0))), 2), max(max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2))))) == _GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(0, 0 | (0))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(true && (bool(bvec2((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))) % _GLF_IDENTITY(2, _GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2), max(max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2))))) == _GLF_IDENTITY(0, (0) >> 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true && (bool(bvec2((_GLF_IDENTITY(subgroup_local_id, (true ? subgroup_local_id : _GLF_FUZZED(subgroup_size))) % _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2), (max(_GLF_IDENTITY(2, int(ivec2(_GLF_IDENTITY(2, (2) << 0), 0))), 2)) * 1), max(max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2), max(_GLF_IDENTITY(2, int(ivec2(2, 0))), 2))))) == _GLF_IDENTITY(0, (0) >> 0), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)) && true)))))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) && true)) && true)))))), true, true)))))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true)))), (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true), true))))))) && true)), bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true)))), (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true), true))))))) && true)), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true)))), (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), (injectionSwitch.x < injectionSwitch.y))))), (false) || false), true), true))))))) && true))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-0.3)))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-0.3))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), (bool(bool(true))) && true)))))) && (injectionSwitch.x > injectionSwitch.y))))) && true))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), max(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), 4, 64, 2), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (false ? _GLF_FUZZED(virtual_gid) : atomicLoad(buf[virtual_gid], 4, 64, 2)))));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), true))), _GLF_IDENTITY(true, false || (true)) && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 0.0, log(1.0), _GLF_ONE(1.0, injectionSwitch.y)))) > injectionSwitch.y))))
    barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), _GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))), false, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) && true))), false, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))))))) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) ^ (virtual_gid))], read, 4, _GLF_IDENTITY(64, max(64, 64)), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
