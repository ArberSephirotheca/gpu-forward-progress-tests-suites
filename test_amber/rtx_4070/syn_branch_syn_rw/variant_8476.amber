#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false)))), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))))), ! (_GLF_IDENTITY(! (! (true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false))))))))))), _GLF_IDENTITY(bool(bool(! (! (true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false))))))))))))), false || (bool(bool(! (! (true && (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), false || (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false))))))))))))))))))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false, false || (false))))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true))), _GLF_IDENTITY(bool(bvec3(bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(false, true && (false)))), false, true)), false || (bool(bvec3(bool(bvec2(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), true && (false)))), false, true))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_IDENTITY(false, true && (false)), true, _GLF_IDENTITY(false, ! (! (false)))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))))))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (false)))), (bool(_GLF_IDENTITY(false, ! (! (false))))) && true)))), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true))), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), ! (! (! (false)))), false, true, false))), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), bool(bvec4(! _GLF_IDENTITY((false), bool(bvec2((false), true))), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! _GLF_IDENTITY((false), ((false)) || false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((false), false || ((false))), false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(! _GLF_IDENTITY((false), false || ((false))), false, true, false)), true && (bool(bvec4(! _GLF_IDENTITY((false), false || ((false))), false, true, false)))), false)))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))))))), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))), (injectionSwitch.x > injectionSwitch.y)), false))))) && true))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), true, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y)), false)))), ((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false))), bool(bvec4(_GLF_IDENTITY(! (false), bool(bvec4(! (false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))), false || (bool(bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), true, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))) && true))))))))), true, true))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((86.42 - (_GLF_IDENTITY(458.637, _GLF_IDENTITY(max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true)))), (false ? _GLF_FUZZED(-8033.7042) : max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))))) * 9.1)), mix(float(_GLF_IDENTITY((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) / 1.0)), bool(true))))) * 9.1)), min((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bvec3(bool(true), true, true)), (bool(bvec3(bool(true), true, true))) || false)))))) * 9.1)), (86.42 - (_GLF_IDENTITY(_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1, mix(float(_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1), float(_GLF_FUZZED(-201.142)), bool(false)))))))), _GLF_IDENTITY(float(_GLF_FUZZED(-8.7)), mix(float(_GLF_FUZZED(1214.0066)), float(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY(-8.7, min(_GLF_IDENTITY(-8.7, (-8.7) - 0.0), -8.7)))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED(-8.7)), (float(_GLF_FUZZED(-8.7))) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-8.7)), (float(_GLF_FUZZED(-8.7))) * 1.0), (_GLF_IDENTITY(true ? float(_GLF_FUZZED(_GLF_IDENTITY(-8.7, (-8.7) / 1.0))) : _GLF_FUZZED(84.05), 1.0 * (true ? float(_GLF_FUZZED(_GLF_IDENTITY(-8.7, (-8.7) / 1.0))) : _GLF_FUZZED(84.05))))), _GLF_IDENTITY(float(_GLF_FUZZED(-8.7)), max(float(_GLF_FUZZED(-8.7)), float(_GLF_FUZZED(-8.7))))))), bool(true))), bool(false)))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), bvec2(true, false))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(_GLF_IDENTITY(458.637, 0.0 + (458.637)), max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), _GLF_IDENTITY(bool(true), false || (bool(true))))))) * 9.1))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))[_GLF_IDENTITY(1, (1) | 0)]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(3.5), (_GLF_FUZZED(_GLF_IDENTITY(3.5, 0.0 + (3.5)))) - 0.0)), bvec2(true, false))), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, _GLF_IDENTITY(max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_IDENTITY(_GLF_FUZZED(32.24), mix(float(_GLF_FUZZED(32.24)), float(_GLF_FUZZED(vec3(7775.1475, 5.0, 288.656).p)), bool(false)))), float(458.637), bool(true)))), (max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_IDENTITY(_GLF_FUZZED(32.24), mix(float(_GLF_FUZZED(32.24)), float(_GLF_FUZZED(vec3(7775.1475, 5.0, 288.656).p)), bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))))))), float(458.637), bool(true))))) + sin(0.0))) * 9.1))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), _GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(4.7)), bool(false))))), _GLF_FUZZED(3.5)), bvec2(true, false))), vec2(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1))), 0.0 + (_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(_GLF_IDENTITY(458.637, (458.637) / 1.0), mix(float(_GLF_FUZZED(32.24)), float(458.637), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), false, false, true))))))) * 9.1))))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), min(_GLF_IDENTITY((injectionSwitch)[0], (false ? _GLF_FUZZED(874.014) : _GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])))), (injectionSwitch)[0])), _GLF_FUZZED(3.5)), bvec2(_GLF_IDENTITY(true, (true) && true), false))), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0))), 0.0, 1.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((86.42 - _GLF_IDENTITY((_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) - sqrt(0.0))), bool(true))))) * 9.1), ((_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) - sqrt(0.0))), bool(true))))) * 9.1)) + 0.0)), 1.0 * (_GLF_IDENTITY((86.42 - _GLF_IDENTITY((_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) - sqrt(0.0))), bool(true))))) * 9.1), ((_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) - sqrt(0.0))), bool(true))))) * 9.1)) + 0.0)), ((86.42 - _GLF_IDENTITY((_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) - sqrt(0.0))), bool(true))))) * 9.1), ((_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(_GLF_IDENTITY(458.637, (458.637) - sqrt(0.0))), bool(true))))) * 9.1)) + 0.0))) / 1.0)))), (injectionSwitch)[_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0 + (1), 0 ^ (_GLF_IDENTITY(0 + (1), (true ? _GLF_IDENTITY(0 + (1), (0 + (1)) ^ 0) : _GLF_FUZZED((+ -94190))))))), (1) | 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), bvec2(true, false))), vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) / exp(log(1.0))), 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * _GLF_IDENTITY(9.1, float(mat3x2(9.1, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 1.0, exp(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)))))))))), (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY((1) | 0, (_GLF_IDENTITY((1) | 0, (true ? (1) | 0 : _GLF_FUZZED(1555)))) ^ 0))]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), _GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false)))))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1)), 1.0 * ((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1))))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), _GLF_IDENTITY(vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), 1.0))), (injectionSwitch)))[0], _GLF_FUZZED(3.5)), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat2(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0)), min(vec2(mat2(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0)), vec2(mat2(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0)))))), vec2(vec3((injectionSwitch), 1.0))), (injectionSwitch)))[0], float(mat4(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(vec2(mat2(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0)), min(vec2(mat2(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0)), vec2(mat2(vec2(mat2x3((injectionSwitch), 1.0, 1.0, 0.0, 1.0)), 1.0, 1.0)))))), vec2(vec3((injectionSwitch), 1.0))), (injectionSwitch)))[0], 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, log(1.0), abs(1.0), 0.0, 1.0, 0.0, abs(1.0), 0.0))), _GLF_FUZZED(3.5)), (_GLF_IDENTITY(false, bool(bvec3(false, false, false))) ? _GLF_FUZZED(vec2(9845.4500, _GLF_IDENTITY(-522.122, 0.0 + (-522.122)))) : vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), 1.0))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))))[0], _GLF_FUZZED(3.5)))), vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), 1.0))), (injectionSwitch)))[0], _GLF_FUZZED(3.5)), vec2(_GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), vec2(vec3((injectionSwitch), 1.0))), (injectionSwitch)))[0], _GLF_FUZZED(3.5)))), bvec2(_GLF_IDENTITY(true, (true) && true), false))), 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, 0.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), bvec2(true, false))), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1))), min(_GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1))), _GLF_FUZZED((86.42 - (_GLF_IDENTITY(458.637, max(458.637, _GLF_IDENTITY(458.637, mix(float(_GLF_FUZZED(32.24)), float(458.637), bool(true))))) * 9.1))))), (injectionSwitch)[_GLF_IDENTITY(1, (1) | 0)]), vec2((injectionSwitch)[0], _GLF_FUZZED(3.5)), bvec2(true, false))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), ! (! (true && (_GLF_DEAD(false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), true, true)))) || false))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(workgroup_id, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u | 0u), 0u), (uvec4(workgroup_id, (0u >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u | 0u), 0u)) >> uvec4(0u, 0u, 0u, 0u)))), (workgroup_size * workgroup_id) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), _GLF_IDENTITY(! (! (false)), true && (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (false)))))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(false)), false || (_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))) && true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY((_GLF_DEAD(false)), true && (_GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, false, true))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec2(bool(bvec2(false, false)), false)))), false, true)), (bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(false)), bool(bvec4((_GLF_DEAD(false)), true, false, true))), false, false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))) || false)))) && true)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), vec2(_GLF_FUZZED(2.4), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true ? workgroup_base : _GLF_FUZZED(workgroup_id), ~ (_GLF_IDENTITY(~ (true ? workgroup_base : _GLF_FUZZED(workgroup_id)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : ~ (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) : _GLF_FUZZED(workgroup_id)), (false ? _GLF_FUZZED(workgroup_base) : ~ (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) : _GLF_FUZZED(workgroup_id))) | (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_base) : ~ (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) : _GLF_FUZZED(workgroup_id)), uint(uvec4(false ? _GLF_FUZZED(workgroup_base) : ~ (true ? _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u) : _GLF_FUZZED(workgroup_id)), 1u, 1u, 0u))))))))))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(num_workgroup))))), (_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(num_workgroup)))))) + 0u) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u)))), max(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u)))), ((_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u))))) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u)))), (uint(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, 1u, 1u))))) << 0u)))))) - (0u << _GLF_IDENTITY(uint(3u), uint(3u)))) * _GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_size, 1u, 0u), (uvec3(subgroup_size, 1u, 0u)) + uvec3(0u, 0u, 0u)), (uvec3(subgroup_size, 1u, 0u)) - uvec3(0u, 0u, 0u)))))) + (_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(uint(uvec4((subgroup_local_id + 1), 1u, 1u, 0u)), (false ? _GLF_FUZZED(min(subgroup_id, subgroup_id)) : uint(uvec4((subgroup_local_id + 1), 1u, 1u, 0u))))) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) * (1u | 1u)), (subgroup_size) - 0u))));
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), clamp((buf[virtual_gid]), (buf[virtual_gid]), _GLF_IDENTITY((buf[virtual_gid]), clamp((buf[virtual_gid]), (buf[virtual_gid]), (buf[virtual_gid]))))) / 1u), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, max(64, 64)), ~ (~ (64))), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   int i = _GLF_IDENTITY(0, int(ivec2(0, 1)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, float(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), (false ? _GLF_FUZZED(cosh(-65.90)) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, float(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), mix(float(_GLF_FUZZED((-53.35 / -0.2))), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, float(vec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) + sqrt(vec2(0.0, 0.0))).x, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))), bool(true)))))) - 0.0) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, log(1.0), 0.0, log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, log(1.0), 0.0, log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-769.786) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(586.107)), float(injectionSwitch.y), bool(true))))), injectionSwitch.y))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false)))), true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false)))), true, true))))))), bool(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false))))), false, true))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false))))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false))))), false, true), bvec3(bvec4(bvec3(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), false))))), false, true), false)))))) && true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(17.20) : injectionSwitch.x)) > injectionSwitch.y)))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, 4)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, clamp(4, 4, 4))), (~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, clamp(4, 4, 4))), ~ (~ _GLF_IDENTITY((~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))), max(_GLF_IDENTITY((~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))), clamp((~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))), (~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))), (~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))))), (~ (_GLF_IDENTITY(4, clamp(4, 4, 4)))))))))))), 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))) / 1.0))))) > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, _GLF_IDENTITY(-576.331, mix(float(-576.331), float(_GLF_FUZZED(7.0)), bool(false))))))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-5.0), min(_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-5.0), (false ? _GLF_FUZZED(-64.94) : true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))))) / 1.0))))) > injectionSwitch.y))) && true)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-5.0, mix(float(-5.0), float(_GLF_FUZZED((-93.07))), bool(false))))))) / 1.0))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))) / 1.0))))) > injectionSwitch.y)))) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-5.0, mix(float(-5.0), float(_GLF_FUZZED((-93.07))), bool(false))))))) / 1.0))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))) / 1.0))))) > injectionSwitch.y)))) || false)), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-5.0, mix(float(-5.0), float(_GLF_FUZZED((-93.07))), bool(false))))))) / 1.0))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))) / 1.0))))) > injectionSwitch.y)))) || false)), true), false, true)))), (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-5.0, mix(float(-5.0), float(_GLF_FUZZED((-93.07))), bool(false))))))) / 1.0))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))) / 1.0))))) > injectionSwitch.y)))) || false)), true), bvec2(bvec4(bvec2((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - vec2(0.0, 0.0))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-5.0, mix(float(-5.0), float(_GLF_FUZZED((-93.07))), bool(false))))))) / 1.0))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bvec3(true, false, true))) ? injectionSwitch : _GLF_FUZZED(vec2(-1.6, -3771.1901)))), _GLF_IDENTITY((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331))), ((true ? injectionSwitch : _GLF_FUZZED(vec2(6.3, -576.331)))) - _GLF_IDENTITY(vec2(0.0, 0.0), vec2(1.0, 1.0) * (_GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) * vec2(1.0, 1.0)))))).x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0))), (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5.0)))) / 1.0))))) > injectionSwitch.y)))) || false)), true), false, true))))) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), _GLF_ONE(1.0, injectionSwitch.y), 0.0))).y) || false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
