#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), bool(bvec2(bool(bvec4(false, true, false, true)), true)))), true)), bool(bvec2(bool(bvec3(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), true && (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))) || false)))), true)), true))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), max(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_FUZZED(226.770)), float(_GLF_IDENTITY((injectionSwitch.y), mix(float((injectionSwitch.y)), float(_GLF_FUZZED(408.103)), bool(false)))), bool(true)))))), max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), clamp(_GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(vec2(9.5, -6.6)) : injectionSwitch)).y))), (max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) * 1.0), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), clamp(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))), max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))))), clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(-910.700), clamp(_GLF_FUZZED(-910.700), _GLF_IDENTITY(_GLF_FUZZED(-910.700), (_GLF_FUZZED(-910.700)) / 1.0), _GLF_FUZZED(-910.700)))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    return;
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), false || (! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec3(bool(! (false)), true, false)))))), false || (bool(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec3(bool(! (false)), true, false))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec3(bool(! (false)), true, false)))))), false || (bool(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(! (false)), bool(bvec3(bool(! (false)), true, false)))))))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(true, (true) || false), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, false)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec2((false) || false, true)), true && (bool(bvec2((false) || false, true)))))), true, false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-138.382))), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) && true)) && true))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, 0))))], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-138.382))), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) && true)) && true))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.3) : injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), _GLF_IDENTITY((false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2)), (false ? _GLF_FUZZED(-2824.2407) : (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))), max(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), _GLF_IDENTITY((false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2)), (false ? _GLF_FUZZED(-2824.2407) : (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), _GLF_IDENTITY((false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2)), (false ? _GLF_FUZZED(-2824.2407) : (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))), min(vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), _GLF_IDENTITY((false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2)), (false ? _GLF_FUZZED(-2824.2407) : (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), _GLF_IDENTITY((false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2)), (false ? _GLF_FUZZED(-2824.2407) : (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))))), _GLF_FUZZED(-1.2))), min(_GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.2), max(_GLF_FUZZED(-1.2), _GLF_FUZZED(-1.2))), _GLF_IDENTITY(_GLF_FUZZED(-1.2), (false ? _GLF_FUZZED(log2(-2.7)) : _GLF_FUZZED(-1.2))), _GLF_FUZZED(-1.2))))), _GLF_FUZZED((-51.68))))))), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, ~ (~ (0)))))))], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-138.382))), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)), ! (! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false))))))) && true)) && true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(-0.3)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) : _GLF_FUZZED(vec2(-8.1, -4.8)))).x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))), false || (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(bool(_GLF_DEAD(false)), (bool(_GLF_DEAD(false))) || false))))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))))).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) - 0.0)))), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(injectionSwitch.y), (float(injectionSwitch.y)) - 0.0)))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))), bool(bool(bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec2(true, false))), false))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), 0.0, 0.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0), abs(1.0), 0.0, 0.0)), min(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), _GLF_IDENTITY(0.0, determinant(mat4(1.0, 1.0, sin(0.0), abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)) * (0.0)), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0), abs(1.0), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0), abs(1.0), 0.0, 0.0)))))), ! (! ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0), abs(1.0), 0.0, 0.0)), min(float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0), abs(1.0), 0.0, 0.0)), float(mat4x3(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)), 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0), abs(1.0), 0.0, 0.0))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), ! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))))), bvec3(bvec3(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) || false), _GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))), true)), (bool(bvec2((_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))), true))) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), true && (! (false))))))), false || (! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))), false || (! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), true && (! (false))))))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, true))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), ! (! (bool(_GLF_IDENTITY(true, bool(bvec3(true, true, true))))))))))) || false)))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.6)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2314.0121)), float(0.0), bool(_GLF_IDENTITY(true, ! (! (true)))))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))), _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0), ((0.0)) * 1.0) / 1.0))), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 1.0), vec3(0.0, 0.0, 1.0))), (true ? _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), min(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(mat3(1.0) * (vec3(0.0, 0.0, 1.0)), (mat3(1.0) * (vec3(0.0, 0.0, 1.0))) - vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY(min(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, 822.127, 3.6), (vec3(-1.6, 822.127, 3.6)) / vec3(1.0, 1.0, 1.0)))))), min(min(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, 822.127, 3.6), (vec3(-1.6, 822.127, 3.6)) / vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), _GLF_IDENTITY((_GLF_IDENTITY(true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)), min(true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)), _GLF_IDENTITY(true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)), clamp(true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)), true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)), true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1))))))), (true ? (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, _GLF_IDENTITY(780.942, float(vec3(780.942, 1.0, 0.0))), 9.1))) : _GLF_FUZZED(vec3(4.7, 5.9, 1806.8710))))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, _GLF_IDENTITY(822.127, max(822.127, 822.127)), 3.6), (vec3(-1.6, 822.127, 3.6)) / vec3(1.0, 1.0, 1.0)))))), min(min(_GLF_IDENTITY(vec3(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, _GLF_IDENTITY(780.942, min(780.942, 780.942)), 9.1)))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, 822.127, 3.6), _GLF_IDENTITY((vec3(-1.6, _GLF_IDENTITY(822.127, mix(float(_GLF_FUZZED(6994.8953)), float(_GLF_IDENTITY(822.127, float(vec4(822.127, 1.0, sqrt(0.0), 0.0)))), bool(true))), 3.6)), (false ? _GLF_FUZZED(vec3(73.96, 2.8, -7.5)) : (vec3(-1.6, _GLF_IDENTITY(822.127, mix(float(_GLF_FUZZED(6994.8953)), float(_GLF_IDENTITY(822.127, float(vec4(822.127, 1.0, sqrt(0.0), 0.0)))), bool(true))), 3.6)))) / vec3(1.0, 1.0, 1.0)))))), _GLF_IDENTITY(min(_GLF_IDENTITY(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, 822.127, 3.6), (vec3(-1.6, 822.127, 3.6)) / vec3(1.0, 1.0, 1.0)))))), min(min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), mix(vec3(_GLF_FUZZED(6.2), (vec3(0.0, 0.0, 1.0))[1], (vec3(0.0, 0.0, 1.0))[2]), vec3(_GLF_IDENTITY((vec3(0.0, 0.0, 1.0))[0], clamp((vec3(0.0, 0.0, 1.0))[0], (vec3(0.0, 0.0, 1.0))[0], (vec3(0.0, 0.0, 1.0))[0])), _GLF_FUZZED(-2.0), _GLF_FUZZED(float((123055u + 98493u)))), bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)))), _GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, 822.127, 3.6), (vec3(-1.6, 822.127, 3.6)) / vec3(1.0, 1.0, 1.0)))))), min(_GLF_IDENTITY(vec3(0.0, 0.0, 1.0), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(vec3(-788.552, 780.942, 9.1)))), _GLF_IDENTITY(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))), (true ? vec3(0.0, 0.0, 1.0) : _GLF_FUZZED(_GLF_IDENTITY(vec3(-1.6, 822.127, 3.6), (vec3(-1.6, 822.127, 3.6)) / vec3(1.0, 1.0, 1.0)))))))))))))))), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))) : _GLF_FUZZED(-8974.3658))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))) * (injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) - _GLF_IDENTITY(0u, (0u) << 0u)) * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base)) + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, 0u + (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(floatBitsToUint(0.8)))), subgroup_local_id + 1, subgroup_local_id + 1))) | (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) * 1u), (subgroup_local_id + 1) >> 0u))), (~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) >> 0u)))) * 1u)))), _GLF_IDENTITY((subgroup_local_id + 1) << 0u, ((subgroup_local_id + 1) << 0u) / (1u | 1u)))))) % _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec4(bvec3(bvec3(false, false, true)), false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, log(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, log(1.0)))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x, injectionSwitch.x))) - 0.0))) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
    return;
   int i = _GLF_IDENTITY(0, ~ (~ (0)));
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, 0.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y)) : _GLF_FUZZED(((uvec3(61105u, 144847u, 37907u) / uvec3(49352u, 19454u, 123960u)) , 497.644))))))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))) && (false))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, uint(uint(_GLF_IDENTITY(read, ~ (~ (read)))))), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
