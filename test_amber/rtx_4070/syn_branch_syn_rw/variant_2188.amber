#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, (1.0) - 0.0))))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(3484.6735) : max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false)), (bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) || _GLF_IDENTITY(false, ! (! (false)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec3(622.585, -2.3, -26.76).p)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.1))))) > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))) || false)))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false)))))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY((bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool((bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(bool(bool((bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, false, true)))) || false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -7796.6524))), float(injectionSwitch.y), bool(true))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(8.9) : _GLF_ZERO(0.0, injectionSwitch.x)))) / 1.0)))))))), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), (bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))) || false))) && true)))))) && true))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))).x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, (GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size) >> 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, (GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size) >> 0u))), 0u | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, (GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size) >> 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, (GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size) >> 0u)))), ((_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, 0u ^ (_GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size, (GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z = workgroup_size) >> 0u))))) | 0u)) << 0u))) ^ 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.z * workgroup_id;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.2), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-276.693)), bvec2(true, false))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, true)))))))
          barrier();
         return;
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))), false, false)))) && true))))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4(max(injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), (mat4x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0)) * mat4(1.0)))), injectionSwitch.x), float(mat4(max(injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, abs(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), clamp(determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)))), 1.0, 0.0, 1.0, 1.0)))), mix(float(_GLF_FUZZED(5.2)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4(max(injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4(max(injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), max(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4(max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))), injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * exp(abs(vec2(0.0, 0.0)))).x), float(mat4(max(injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) - sqrt(0.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0)))) * cos(0.0)) : _GLF_FUZZED(-90.80))), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4(max(injectionSwitch.x, injectionSwitch.x), 1.0, 0.0, 0.0, sin(0.0), 0.0, abs(0.0), 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, tan(0.0), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2356.1198, 4604.7089)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-30.43)), vec2(_GLF_FUZZED(-8917.6805), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))) / vec2(1.0, 1.0)).y))))
    {
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (_GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      continue;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y = virtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) ^ 0u)) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | 0u))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) - (0 >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3)))))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true))))))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, sqrt(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.8)))), 1.0, 0.0, 0.0)), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-5.2)), float(_GLF_IDENTITY(mat2x3(float(_GLF_FUZZED(-5.2)), 0.0, 1.0, 1.0, 0.0, cos(0.0)), (true ? mat2x3(float(_GLF_FUZZED(-5.2)), 0.0, 1.0, 1.0, 0.0, cos(0.0)) : _GLF_FUZZED(mat2x3(-6.7, -2.8, -69.70, -24.35, -7472.4838, -3.1)))))), float(float(mat4(injectionSwitch.x, 1.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, sqrt(1.0), 1.0, 0.0, 0.0))), bool(true)))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(661.124)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(661.124)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y, false, false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
        barrier();
       barrier();
      }
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false)), true && (bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))))) || false)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y], 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x = read;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (2), (~ (2)) | 0), min(~ (2), ~ (_GLF_IDENTITY(2, (2) * 1)))))) : _GLF_FUZZED(-74567))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1), max((_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1), (_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1))), (_GLF_IDENTITY((_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1), max((_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1), (_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1)))) | 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(46462) : _GLF_IDENTITY((_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1), max((_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((_GLF_IDENTITY(2, int(ivec2(2, 1)))), ((2)) / 1), (_GLF_IDENTITY(2, _GLF_IDENTITY(max(_GLF_IDENTITY(2, int(ivec3(2, 1, 0))), 2), 0 ^ (max(2, 2))))) | _GLF_IDENTITY((2), ((2)) / 1))))))) == 0)
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) * 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(6.2)), float(injectionSwitch.y), bool(true)))))))))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, false)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, false)))))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, _GLF_IDENTITY(false, false || (false)))))))))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))
            break;
           barrier();
          }
         else
          {
          }
        }
       atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, 1 * (4)))));
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bvec2((! (false)), true), bvec2(bvec2(bvec2((! (false)), true)))))))))))) && true))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true), bool(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))))
              break;
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                continue;
               barrier();
              }
            }
          }
         break;
        }
      }
     while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))) && true))) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))) && true))) && true), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))) && true)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))), true && (bool(_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))) && true))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), false, true, true))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.9), _GLF_FUZZED(-543.875)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), sqrt(exp(0.0)), exp(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(vec3(0.0, 1.0, 1.0)))) - 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(cos(0.0), 0.0, 0.0))), sqrt(1.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0)), clamp(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0)), dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0)), dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0)))), dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0))), 1.0), (false ? _GLF_FUZZED(mat4x2(-8.0, 10.16, -4.6, -9.8, -6.1, 2.8, 798.635, -4.2)) : mat4x2(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.9), _GLF_FUZZED(-543.875)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), sqrt(exp(0.0)), exp(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(cos(0.0), 0.0, 0.0))), sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0)), dot(vec3(0.0, abs(1.0), 0.0), vec3(0.0, abs(1.0), 0.0))), 1.0))))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) : injectionSwitch)), injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) : injectionSwitch)), injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) : injectionSwitch)), injectionSwitch)).x)) > injectionSwitch.y)))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)), ! (! ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED((mat2(369.647, -1.4, -9.0, _GLF_IDENTITY(-9797.5748, mix(float(_GLF_FUZZED(-656.414)), float(-9797.5748), bool(true)))) * vec2(-4.6, -4.2))))).x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))))))))) && _GLF_IDENTITY(true, (true) || false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))) && true), false, true))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), (! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))) && true))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            break;
           barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec4((false), false, true, false))), true && (! (false)))), false || (! (_GLF_IDENTITY(! (false), true && (! (false)))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, true && ((false) && true)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, false))), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, false))), false, false), true))))))), ! (! ((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)) && true))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | 0), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | (0)))))), 1, 1, 0))) + (1)))))))), ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | 0), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | (0)))))), 1, 1, 0))) + (1))))))))) * 1), clamp(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), (true ? _GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY((~ (~ (1))) | 0, (_GLF_IDENTITY((~ (~ (1))) | 0, clamp((~ (~ (1))) | 0, (~ (~ (1))) | 0, (~ (~ (1))) | 0))) ^ 0)) : _GLF_FUZZED(-58700)))) | (~ (~ (1)))))))), ~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1))))))))), ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | 0), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | (0)))))), 1, 1, 0))) + (1)))))))), ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | 0), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | (0)))))), 1, 1, 0))) + (1))))))))) * 1), clamp(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), (true ? _GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY((~ (~ (1))) | 0, (_GLF_IDENTITY((~ (~ (1))) | 0, clamp((~ (~ (1))) | 0, (~ (~ (1))) | 0, (~ (~ (1))) | 0))) ^ 0)) : _GLF_FUZZED(-58700)))) | (~ (~ (1)))))))), ~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))))))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | 0), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | (0)))))), 1, 1, 0))) + (1)))))))), ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0)))) | 0), _GLF_IDENTITY(0, int(ivec4(_GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) | (0)))))), 1, 1, 0))) + (1))))))))) * 1), clamp(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) >> 0), (true ? _GLF_IDENTITY(~ (~ (1)), _GLF_IDENTITY((~ (~ (1))) | 0, (_GLF_IDENTITY((~ (~ (1))) | 0, clamp((~ (~ (1))) | 0, (~ (~ (1))) | 0, (~ (~ (1))) | 0))) ^ 0)) : _GLF_FUZZED(-58700)))) | (~ (~ (1)))))))), ~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1))))))))))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) / 1), max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0))), ~ (~ (1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), int(ivec2(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), 1)))) * 1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, ~ (~ (1)))), (max(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (_GLF_IDENTITY((~ (1)), ((~ (1))) | 0)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat2(float(float(0.0)), 1.0, 0.0, 0.0)))), injectionSwitch.x)))))) >> 0)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) / 1), max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0))), ~ (~ (1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), int(ivec2(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), 1)))) * 1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, ~ (~ (1)))), (max(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (_GLF_IDENTITY((~ (1)), ((~ (1))) | 0)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat2(float(float(0.0)), 1.0, 0.0, 0.0)))), injectionSwitch.x)))))) >> 0))))))) / 1)))) - 0u, min((uint(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) / 1), max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0))), ~ (~ (1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), int(ivec2(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), 1)))) * 1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, ~ (~ (1)))), (max(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (_GLF_IDENTITY((~ (1)), ((~ (1))) | 0)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat2(float(float(0.0)), 1.0, 0.0, 0.0)))), injectionSwitch.x)))))) >> 0)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) / 1), max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0))), ~ (~ (1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), int(ivec2(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), 1)))) * 1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, ~ (~ (1)))), (max(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (_GLF_IDENTITY((~ (1)), ((~ (1))) | 0)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat2(float(float(0.0)), 1.0, 0.0, 0.0)))), injectionSwitch.x)))))) >> 0))))))) / 1)))) - 0u, (uint(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) / 1), max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0))), ~ (~ (1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), int(ivec2(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), 1)))) * 1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, ~ (~ (1)))), (max(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (_GLF_IDENTITY((~ (1)), ((~ (1))) | 0)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat2(float(float(0.0)), 1.0, 0.0, 0.0)))), injectionSwitch.x)))))) >> 0)))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) * 1) / 1), max(1, _GLF_IDENTITY(1, ~ (~ (1)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0))), ~ (~ (1)))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), (_GLF_IDENTITY(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), int(ivec2(((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((1), 0 | (_GLF_IDENTITY((1), (_GLF_IDENTITY((1), int(ivec3((1), 0, 1)))) | (_GLF_IDENTITY((1), max((1), (1)))))))), (~ (~ (1))) / int(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (1))))))), 1)))) * 1) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (_GLF_IDENTITY(1, _GLF_IDENTITY(max(1, _GLF_IDENTITY(1, ~ (~ (1)))), (max(_GLF_IDENTITY(1, int(ivec2(1, 0))), _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (_GLF_IDENTITY((~ (1)), ((~ (1))) | 0)) ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), float(mat2(float(float(0.0)), 1.0, 0.0, 0.0)))), injectionSwitch.x)))))) >> 0))))))) / 1)))) - 0u))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, false))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(pow(float(-24584), -7.2)))))))))) && true)))
          return;
         if(_GLF_DEAD(false))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
        }
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0, float(float((_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0))))), _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), vec2(mat4x2(((injectionSwitch) * mat2(1.0)), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), tan(0.0)))) * vec2(1.0, 1.0))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) - 0.0)), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0)))) * _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), max(vec2(1.0, 1.0), vec2(1.0, 1.0)))))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0)))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))) : _GLF_FUZZED(mat2(-44.46, -833.412, 9.2, 788.547)))), ((injectionSwitch) * mat2(1.0)) * vec2(1.0, 1.0))).x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), (true ? _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))) : _GLF_FUZZED(mat2(6.9, -8118.6838, 4.5, 0.1)))) : _GLF_FUZZED(mat2(_GLF_IDENTITY(-44.46, (-44.46) - 0.0), -833.412, 9.2, 788.547)))), ((injectionSwitch) * mat2(1.0)) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-242.292), _GLF_FUZZED(4.9)), bvec2(false, false))), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(34.57), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(30.91)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))))))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), (true ? _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))) : _GLF_FUZZED(mat2(6.9, -8118.6838, 4.5, 0.1)))) : _GLF_FUZZED(mat2(_GLF_IDENTITY(-44.46, (-44.46) - 0.0), -833.412, 9.2, 788.547)))), ((injectionSwitch) * mat2(1.0)) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-242.292), _GLF_FUZZED(4.9)), bvec2(false, false))), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(34.57), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(30.91)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))))))).x > injectionSwitch.y)), (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), (true ? _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))) : _GLF_FUZZED(mat2(6.9, -8118.6838, 4.5, 0.1)))) : _GLF_FUZZED(mat2(_GLF_IDENTITY(-44.46, (-44.46) - 0.0), -833.412, 9.2, 788.547)))), ((injectionSwitch) * mat2(1.0)) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-242.292), _GLF_FUZZED(4.9)), bvec2(false, false))), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(34.57), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(30.91)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))))))).x > injectionSwitch.y)), bool(bvec2(! ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), (injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))), (true ? _GLF_IDENTITY(mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + (mat2(1.0))) : _GLF_FUZZED(mat2(6.9, -8118.6838, 4.5, 0.1)))) : _GLF_FUZZED(mat2(_GLF_IDENTITY(-44.46, (-44.46) - 0.0), -833.412, 9.2, 788.547)))), ((injectionSwitch) * mat2(1.0)) * _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2((vec2(1.0, 1.0))[0], (vec2(1.0, 1.0))[1]), vec2(_GLF_FUZZED(-242.292), _GLF_FUZZED(4.9)), bvec2(false, false))), vec2(1.0, 1.0), _GLF_IDENTITY(vec2(1.0, 1.0), mix(vec2(_GLF_FUZZED(34.57), (vec2(1.0, 1.0))[1]), vec2((vec2(1.0, 1.0))[0], _GLF_FUZZED(30.91)), bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))))))).x > injectionSwitch.y)), false)))) || false))) && true)) && true))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ((! (_GLF_DEAD(false)))) || false)))), _GLF_IDENTITY((_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec2(! (! (_GLF_DEAD(false))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), ((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))) || false)), bool(bvec4((_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec4(_GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec2(! (! (_GLF_DEAD(false))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))))), ((! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))) || false)), false, false, false))) && true)))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 subgroupBarrier();
 atomicStore(checker[GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.y], GLF_merged3_0_1_4_1_1_11_2_1_14readvirtual_gidworkgroup_size.x, 4, 64, _GLF_IDENTITY(4, (4) ^ 0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (0 << _GLF_IDENTITY(int(0), int(0))))); _injected_loop_counter ++)
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
