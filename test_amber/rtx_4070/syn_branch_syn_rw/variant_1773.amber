#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 uvec4 _f0;
 bool _f1;
 mat2x4 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_17 {
 uvec2 _f0;
 vec3 _f1;
 ivec3 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_16 {
 ivec3 _f0;
 mat4x3 _f1;
 uint _f2;
} ;

struct _GLF_struct_15 {
 bool _f0;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 bvec2 _f1;
 mat3x2 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_19 {
 vec2 _f0;
 _GLF_struct_14 _f1;
 _GLF_struct_15 _f2;
 _GLF_struct_16 _f3;
 _GLF_struct_17 _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_12 {
 ivec2 _f0;
 int _f1;
 int _f2;
 mat3x4 _f3;
 mat3 _f4;
 int _f5;
} ;

struct _GLF_struct_11 {
 uvec3 _f0;
 mat3 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_13 {
 mat2x3 _f0;
 _GLF_struct_11 _f1;
 bvec3 _f2;
 uvec3 _f3;
 bvec3 _f4;
 _GLF_struct_12 _f5;
} ;

struct _GLF_struct_10 {
 uint workgroup_base;
 bvec4 _f0;
} ;

struct _GLF_struct_8 {
 mat2x3 _f0;
 mat2x3 _f1;
 mat4x3 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_9 {
 uvec4 _f0;
 uvec2 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_20 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 mat3x4 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_19 _f4;
} ;

struct _GLF_struct_5 {
 int _f0;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 vec2 _f1;
 mat3x4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_6 {
 vec4 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_4 _f2;
 bvec3 _f3;
 bvec2 _f4;
 vec2 _f5;
 _GLF_struct_5 _f6;
} ;

struct _GLF_struct_1 {
 bvec2 _f0;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
} ;

struct _GLF_struct_0 {
 uint subgroup_id;
 ivec4 _f0;
 uint _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_0 _f0;
 vec4 _f1;
 ivec3 _f2;
 mat4x2 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_6 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), ! (! ((false)))), ! (! (! (false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_0(gl_SubgroupID, ivec4(1), 1u), vec4(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_IDENTITY(_GLF_FUZZED(-4.7), clamp(_GLF_FUZZED(-4.7), _GLF_FUZZED(-4.7), _GLF_FUZZED(-4.7)))), bool(false))), _GLF_IDENTITY(1.0, (1.0) + 0.0)))), ivec3(1), mat4x2(1.0), _GLF_struct_2(_GLF_struct_1(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), true, true)))))), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), true, true)))))), true))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true), false, true)), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(true), false, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(true), false, true))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec4(bvec2(true), false, true))), bvec2(bvec2(bvec2(bvec2(bvec4(bvec2(true), false, true)))))))))))), true, true)), bvec2(bvec2(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), true, true)))))), true))))))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), false, true))), false))))), _GLF_struct_6(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-7.2)), float(1.0), bool(true)))), _GLF_struct_3(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), (_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), _GLF_IDENTITY(vec3(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), vec3(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), clamp(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), vec3(mat3(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))))), 0.0, 1.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))))), sin(0.0), 1.0, sqrt(sqrt(0.0)))), clamp(vec3(mat3x2(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))) * (_GLF_IDENTITY(1.0, min(1.0, 1.0))))), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), sin(0.0), 1.0, sqrt(sqrt(0.0)))), vec3(mat3x2(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(_GLF_IDENTITY(mat3(1.0), (mat3(1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0))) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), sin(0.0), 1.0, sqrt(sqrt(0.0)))), vec3(mat3x2(_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0))), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0))))), sin(0.0), 1.0, sqrt(sqrt(0.0)))))))) / vec3(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4(1.0, 1.0, cos(0.0), 0.0, cos(0.0), log(round(length(normalize(1.0)))), 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, max(1.0, 1.0)))), 1.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec3(-5.6, 244.768, -0.3)) : _GLF_IDENTITY(vec3(1.0), (_GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), clamp(_GLF_IDENTITY(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), min(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), _GLF_IDENTITY(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(vec3(1.0), max(vec3(1.0), _GLF_IDENTITY(vec3(1.0), vec3(1.0, 1.0, 1.0) * (vec3(1.0)))))))), max(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), mix(vec3(_GLF_IDENTITY((min(vec3(1.0), vec3(1.0)))[0], ((min(vec3(1.0), vec3(1.0)))[0]) - 0.0), (min(vec3(1.0), vec3(1.0)))[1], _GLF_FUZZED(2.9)), vec3(_GLF_FUZZED(-2807.8233), _GLF_FUZZED(-4872.7480), (min(vec3(1.0), vec3(1.0)))[2]), bvec3(false, false, true))))), min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), (min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0))))) / vec3(1.0, 1.0, 1.0)), vec3(mat2(min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))), 1.0))), min(vec3(1.0), _GLF_IDENTITY(vec3(1.0), min(vec3(1.0), vec3(1.0)))))), min(_GLF_IDENTITY(min(vec3(1.0), vec3(1.0)), _GLF_IDENTITY(mat3(1.0) * (min(vec3(1.0), vec3(1.0))), clamp(mat3(1.0) * _GLF_IDENTITY((min(vec3(1.0), vec3(1.0))), max((min(vec3(1.0), vec3(1.0))), (min(vec3(1.0), vec3(1.0))))), mat3(1.0) * (min(vec3(1.0), vec3(1.0))), mat3(1.0) * (min(vec3(1.0), vec3(1.0)))))), min(vec3(1.0), vec3(1.0)))))) / vec3(1.0, 1.0, 1.0)))), vec2(1.0), mat3x4(1.0), mat4x3(1.0)), _GLF_struct_4(vec3(1.0), mat4x2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(_GLF_IDENTITY(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec3(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true)), true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))))))), false))), _GLF_IDENTITY(bvec2(true), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, false))), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, (true) && true))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(_GLF_IDENTITY(bvec2(true), bvec2(bvec4(bvec2(true), true, false))), false, true))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, max(0.0, 0.0)))) * (injectionSwitch)).y)), _GLF_IDENTITY(true, (true) && true))), true, true)))), vec2(1.0), _GLF_struct_5(1)));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! _GLF_IDENTITY(((! (false))), (((! (false)))) && true))))))
    return;
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(880.716)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))) > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(880.716)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(880.716)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))) > injectionSwitch.y)))) && true)), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(880.716)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(880.716)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))) > injectionSwitch.y)))) && true))) || false))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-329.647) : injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)) && true))) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(false || (! (false)), (false || _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))) * (injectionSwitch.x)) > injectionSwitch.y)), false)))) && true))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-75.62), _GLF_FUZZED(9203.2212)), bvec2(false, false))).x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))))), (bool(bvec2(_GLF_IDENTITY(false, true && (false)), false))) || false))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true)))))) || false), false))), false || (false)), false, false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-55.99, 4444.9694)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, sin(0.0)))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), true && (bool(bvec3(_GLF_DEAD(false), true, false))))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(false || (_GLF_IDENTITY(false, ! (! (false))))))), true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(false || (_GLF_IDENTITY(false, ! (! (false))))))), true, true, true)))), true, false)))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(false || (_GLF_IDENTITY(false, ! (! (false))))))), true, true, true)))), bool(bvec3(bool(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, ! (! (false)))), bool(bool(false || (_GLF_IDENTITY(false, ! (! (false))))))), true, true, true)))), true, false)))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))))) || false)))), (bool(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), (bool(false)) || false))))) || false))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(vec2(-77.79, -1210.8071).t), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(382.042)), float((injectionSwitch)[0]), bool(true))), _GLF_FUZZED(-3.9)), bvec2(true, false))))).y))), true, false, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_9(uvec4(1u), uvec2(1u), _GLF_struct_8(mat2x3(1.0), mat2x3(1.0), mat4x3(1.0), bvec2(true))), _GLF_struct_10(workgroup_size * workgroup_id, bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) && true))))), mat3x4(1.0), _GLF_struct_13(mat2x3(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_struct_11(uvec3(1u), mat3(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), min(_GLF_IDENTITY(_GLF_IDENTITY((1.0), max((1.0), (1.0))), min(_GLF_IDENTITY((1.0), max((1.0), (1.0))), _GLF_IDENTITY((1.0), max((1.0), (1.0))))), (1.0))) * _GLF_ONE(1.0, injectionSwitch.y))), uvec4(1u)), bvec3(true), uvec3(1u), bvec3(true), _GLF_struct_12(ivec2(1), 1, 1, mat3x4(1.0), _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) * 1.0)) - 0.0)))), (_GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0))), (mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 1.0, cos(0.0), 1.0, tan(0.0), tan(0.0), 1.0, 0.0), (mat2x4(1.0, 1.0, cos(0.0), 1.0, tan(0.0), tan(0.0), 1.0, 0.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), _GLF_IDENTITY(float(mat4x3(float(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), (float(float(0.0))) + 0.0)), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-9.5)), float(float(mat4x3(float(mat3(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(1.0))), 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(float(0.0)), (float(float(0.0))) + 0.0)), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 0.0, 1.0, 0.0, 1.0, 0.0))), bool(true))))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(2.5)), bool(false))))), 0.0, 0.0)), 0.0))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.7) : 0.0)), clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.7) : 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.7) : 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(4.7) : 0.0)))), _GLF_IDENTITY(0.0, float(vec3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (0.0) + 0.0))), _GLF_IDENTITY(0.0, float(mat4x3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, exp(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), 0.0)), 1.0, 0.0))))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), 0.0)), 0.0)), 1)), _GLF_struct_19(vec2(1.0), _GLF_struct_14(mat2x3(1.0), bvec2(true), mat3x2(1.0), bvec4(true)), _GLF_struct_15(true), _GLF_struct_16(ivec3(1), mat4x3(1.0), 1u), _GLF_struct_17(uvec2(1u), vec3(1.0), ivec3(1), uvec4(1u)), _GLF_struct_18(uvec4(1u), true, mat2x4(1.0), mat3x2(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec3(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))) && true)))))
            return;
           barrier();
          }
         return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          return;
         return;
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_base = _GLF_struct_replacement_7._f0.subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_20._f1.workgroup_base, ~ (~ (_GLF_struct_replacement_20._f1.workgroup_base))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (subgroup_base) >> (0u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (2u) * 1u))))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(tanh(vec2(-258.170, 7531.0755))))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(length(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(length(0.0), 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))))).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(tanh(vec2(-258.170, 7531.0755))))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(length(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(length(0.0), 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(tanh(vec2(-258.170, 7531.0755))))).x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))) - vec2(0.0, 0.0)), 0.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(dot(vec2(length(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(length(0.0), 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 1.0)))))).y)))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, false || (false)))), bool(bvec3(! (! (_GLF_IDENTITY(false, false || (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 uint next_virtual_gid = _GLF_struct_replacement_20._f1.workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> _GLF_IDENTITY(0u, (0u) / 1u)) % subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)))), (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u))))) | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)))), 1u * (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), clamp(uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)), uint(uvec3(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size, 0u, 1u)))))))))), ((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) >> 0u) % subgroup_size)) / 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, true)))) || false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false)))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(-227.921, -3.6)) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(-7.5, 7278.1400, -5.1).t)), float(injectionSwitch.y), bool(true))))))), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false))))))) || false))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(-227.921, -3.6)) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(-7.5, 7278.1400, -5.1).t)), float(injectionSwitch.y), bool(true))))))), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false))))))) || false)))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(-227.921, -3.6)) : _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(-7.5, 7278.1400, -5.1).t)), float(injectionSwitch.y), bool(true))))))), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))) || false), (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(bool(bvec2(false || (false), true)), false || (bool(bvec2(false || (false), true))))))), (! (_GLF_IDENTITY(false, false || (false)))) || false))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x < injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x < injectionSwitch.y, true), true))))))), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))), false || (bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))), 1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 1.0, 0.0, 1.0))))))).x < injectionSwitch.y)), false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(623.713, 997.201)))), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec4(8.7, 44.37, -445.613, 479.501).tq))))) + vec2(0.0, 0.0)).x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false))))))) || false))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true), false)))), bool(bool(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))), false, true)), false)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))))))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(false, false), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))), false)), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))), false)), false, false))))), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false)), bvec2(bvec2(bvec2(bvec3(bvec2(bvec4(bvec2(false, false), false, true)), false))))))), false)), false, false))))))))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(0.0)) > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), bool(bvec2((false), false)))) || false) || false), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false)) && true))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0))).y)) && (false))), bool(_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), (_GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))) || false)) && true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if((subgroup_local_id % 2) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, (1) | (1))), 0u ^ _GLF_IDENTITY((uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((_GLF_IDENTITY(1, ~ (~ (1)))) | (1)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) << 0))))), ((uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((_GLF_IDENTITY(1, ~ (~ (1)))) | (1)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) << 0)))))) | (_GLF_IDENTITY((uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((_GLF_IDENTITY(1, ~ (~ (1)))) | (1)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) << 0))))), max((uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(1, ~ (~ (1))))) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) << 0))))), (uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((_GLF_IDENTITY(1, ~ (~ (1)))) | (1)) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 1 * (0))) << 0)))))))))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(9980.9790) : injectionSwitch.x)) > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, true)))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.9) : _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(346.669)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, 0.0, 0.0)), (float(vec3(injectionSwitch.x, 0.0, 0.0))) - 0.0)) > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.9), _GLF_FUZZED(-571.787)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, float(mat2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), 1.0 * (min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))) : _GLF_FUZZED(-4.3)))), 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(316.937)), bool(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1), max(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1)))), (false ? _GLF_FUZZED(72808) : _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1), max(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1)))), (true ? int(_GLF_IDENTITY(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1), max(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1), ivec3((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) | (4))) | (4)), (4) / 1), (4) >> _GLF_IDENTITY(0, (0) << 0))), 0, 1)))) : _GLF_FUZZED(-69699)))))) >> 0), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-627.133), _GLF_FUZZED(-1.3)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(normalize(-869.020)) : (injectionSwitch)[1]))), bvec2(true, true))).y)), true, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5814.7973)))))) > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))) || false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
