#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-60999 & 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), injectionSwitch)).x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     else
      {
      }
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
        return;
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), min(uvec3(1u, 1u, 1u) * (gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))) / uvec3(1u, 1u, 1u)).x;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, min(1.0, 1.0)), exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) + 0.0)) * 1.0), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))), injectionSwitch.x), (clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))), injectionSwitch.x)) - _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, cos(0.0) * (1.0))) / 1.0), exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), mix(float(_GLF_FUZZED((7.1 + -133.102))), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(9045.0778)), bool(false)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))))))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5483.1163)), bool(false))), 0.0, abs(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0), mat3x4(mat4(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5483.1163)), bool(false))), 0.0, abs(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - 0.0)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(exp(0.0), (false ? _GLF_FUZZED(2.7) : exp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0))))))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.4))), 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-5.0, max(-5.0, -5.0)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4346.5525)), float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.8)))))), bool(true))))))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))))))), (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))), injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0)))))))))) || false))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5483.1163)), bool(false))), 0.0, abs(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0), mat3x4(mat4(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5483.1163)), bool(false))), 0.0, abs(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - 0.0)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(exp(0.0), (false ? _GLF_FUZZED(2.7) : exp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0))))))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.4))), 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-5.0, max(-5.0, -5.0)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4346.5525)), float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.8)))))), bool(true))))))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))))))), (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))), injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0)))))))))) || false)))), (bool((! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5483.1163)), bool(false))), 0.0, abs(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0), mat3x4(mat4(mat3x4(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5483.1163)), bool(false))), 0.0, abs(1.0), 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, sqrt(1.0), 1.0, abs(_GLF_ZERO(0.0, injectionSwitch.x)), 0.0, 0.0)))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + _GLF_IDENTITY((injectionSwitch.x), ((injectionSwitch.x)) - 0.0)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-6.0))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(exp(0.0), (false ? _GLF_FUZZED(2.7) : exp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, abs(0.0))))))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.4))), 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-5.0, max(-5.0, -5.0)))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4346.5525)), float(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(3.8)))))), bool(true))))))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))))))), (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), min(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), float(_GLF_IDENTITY(_GLF_FUZZED(-64.62), mix(float(_GLF_FUZZED(-64.62)), float(_GLF_FUZZED(6.4)), bool(false)))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(injectionSwitch.x, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0))), injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, max(1.0, 1.0)), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) / 1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0)))))))))) || false))))) && true))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-591.618), (_GLF_FUZZED(-591.618)) / determinant(mat2(1.0, log(1.0), 1.0, 1.0)))), bool(false)))), float(_GLF_FUZZED(2.0)), bool(false))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, cos(0.0) * (1.0))) / 1.0), exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((7.1 + -133.102))), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(9045.0778)), bool(false)))))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, _GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0))), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0), mix(float(_GLF_FUZZED(-1.4)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0)), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0, min(0.0, 0.0)) + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))))), true && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), min(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0)))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-6.9), _GLF_FUZZED(-3.6)), vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), bvec2(true, true)))).x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0)))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))) / 1.0), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (max(injectionSwitch.x, injectionSwitch.x)) / 1.0)))))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(cos(0.0) * (1.0), min(cos(0.0) * (1.0), cos(0.0) * (1.0))))) / 1.0), exp(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uintBitsToFloat(126147u)) : _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(9539.7156) : 0.0))))), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((7.1 + -133.102))), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_IDENTITY(_GLF_FUZZED(9045.0778), mix(float(_GLF_FUZZED(9045.0778)), float(_GLF_FUZZED(-51.47)), bool(false)))), bool(false)))))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-5.0)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-5.0)), float(vec3(float(_GLF_FUZZED(-5.0)), 1.0, 0.0))), float(_GLF_FUZZED(-5.0)))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(float(_GLF_FUZZED(-5.0)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-5.0)), float(vec3(float(_GLF_FUZZED(-5.0)), 1.0, 0.0))), float(_GLF_FUZZED(-5.0)))), 1.0, tan(0.0), length(sqrt(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, tan(0.0), 0.0, 0.0)), (false ? _GLF_FUZZED(7583.4035) : float(mat4x3(_GLF_IDENTITY(float(_GLF_FUZZED(-5.0)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-5.0)), float(vec3(float(_GLF_FUZZED(-5.0)), 1.0, 0.0))), float(_GLF_FUZZED(-5.0)))), 1.0, tan(0.0), length(sqrt(vec3(0.0, 0.0, 0.0))), 1.0, 0.0, sin(0.0), determinant(mat2(1.0, 0.0, 0.0, 1.0)), 1.0, tan(0.0), 0.0, 0.0))))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), true && (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.9)), float(injectionSwitch.x), bool(true)))) - 0.0), 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)))) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0)))))))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), max(max(injectionSwitch.x, injectionSwitch.x), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), (max(injectionSwitch.x, injectionSwitch.x)) / 1.0))))))), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(2968.0661)), bool(false))), (_GLF_IDENTITY(1.0, cos(0.0) * (1.0))) / 1.0), exp(0.0), 0.0, 1.0, _GLF_IDENTITY(abs(1.0), min(_GLF_IDENTITY(abs(1.0), mix(float(_GLF_IDENTITY(abs(1.0), clamp(abs(1.0), abs(1.0), abs(1.0)))), float(_GLF_FUZZED((+ -9.7))), bool(false))), abs(1.0))), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((7.1 + -133.102))), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), float(_GLF_FUZZED(9045.0778)), bool(false)))))), _GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), clamp(max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x), max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, sqrt(0.0) + (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), 1.0, _GLF_IDENTITY(exp(0.0), min(_GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0))), _GLF_IDENTITY(exp(0.0), (true ? exp(0.0) : _GLF_FUZZED(580.769))))), 0.0, 1.0, abs(1.0), 1.0))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), max((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y))) - 0.0))))), _GLF_IDENTITY(true, bool(bvec4(true, false, false, false))) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) + 0.0), clamp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), 1.0, abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y)) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))), true && (bool(bool(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(474.397) : 1.0)), abs(1.0), 1.0))).y, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))) * (injectionSwitch.x)), 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-5.0, float(vec2(_GLF_IDENTITY(-5.0, _GLF_IDENTITY(float(mat3x4(-5.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0)), float(vec4(float(mat3x4(-5.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 1.0, 1.0)), 0.0, 0.0, 0.0)))), 0.0))))), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-9.2) : (injectionSwitch.x))), (injectionSwitch.x))), min(_GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-9.2) : (injectionSwitch.x))), (injectionSwitch.x))), _GLF_IDENTITY((injectionSwitch.x), clamp((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (false ? _GLF_FUZZED(-9.2) : (injectionSwitch.x))), (injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5.0)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y, true))))) ? _GLF_FUZZED(0.0) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, exp(0.0), 0.0, 1.0, abs(1.0), 1.0))).y) - 0.0))))))))))))))))) && true))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, min(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, vec2(mat2x4(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))), false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))) || false)) && true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       continue;
      }
     do
      {
       for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (false) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (false) || false))) && true))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))) && true)))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) / 1u, ((_GLF_IDENTITY(0u ^ 0u, min(0u ^ 0u, 0u ^ 0u))) | 0u) ^ ((workgroup_base + subgroup_id * subgroup_size) / 1u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), max(~ (_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base))) * 1u)), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))))) + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) | 0u) + subgroup_local_id, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) / 1u, ((0u ^ 0u) | 0u) ^ ((workgroup_base + subgroup_id * subgroup_size) / 1u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), max(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))))) + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) | 0u) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) / 1u, ((0u ^ 0u) | 0u) ^ ((workgroup_base + subgroup_id * subgroup_size) / 1u))), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), max(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u), (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)) | 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))))) + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)) + subgroup_id * subgroup_size))))) | 0u) + subgroup_local_id) | 0u)), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) / 1u, _GLF_IDENTITY(((0u ^ 0u) | 0u), min(((0u ^ 0u) | 0u), _GLF_IDENTITY(((0u ^ 0u) | 0u), (((0u ^ 0u) | 0u)) - (0u | 0u)))) ^ ((workgroup_base + subgroup_id * subgroup_size) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), max(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))))) + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) | 0u) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size) / 1u, ((0u ^ 0u) | 0u) ^ ((workgroup_base + subgroup_id * subgroup_size) / 1u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), max(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u))))), 1u * ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), max(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)), ~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) * 1u)))))))) + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))))) | 0u) + subgroup_local_id) | 0u))) | 0u)));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(-95476)))) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bool(bool(bvec4(false, false, false, true)))))), bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))))))))), (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)) >> 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) ^ (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)) >> 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ _GLF_IDENTITY((0u), ~ (~ (_GLF_IDENTITY((0u), min((0u), _GLF_IDENTITY((0u), ((0u)) << 0u)))))))))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (_GLF_IDENTITY(~ (0u), 0u + (_GLF_IDENTITY(~ (0u), min(~ (0u), ~ (0u)))))) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (0u), max(_GLF_IDENTITY(~ (0u), 1u * (~ (0u))), _GLF_IDENTITY(~ (0u), ~ (~ (~ (0u)))))), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 1u)), max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), 0u ^ (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))) ^ 0u)))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) >> (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u)))))))))), 1u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), 0u ^ (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))) ^ 0u)))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) >> (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u)))))))))), 1u)), clamp(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), 0u ^ (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))) ^ 0u)))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) >> (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u)))))))))), 1u)), (uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), 0u ^ (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))) ^ 0u)))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) >> (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u)))))))))), 1u))) / 1u), uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), 0u ^ (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))) ^ 0u)))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) >> (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u)))))))))), 1u)), uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, 0u ^ (virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), 0u ^ (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u)))), (~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))) ^ 0u)))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY((~ (0u)) | (~ (0u)), ((~ (0u)) | (~ (0u))) >> (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u)))))))))), 1u)))))), uint(uvec2(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u)) + 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), clamp(uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ 0u), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))), uint(uvec2(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) ^ _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(next_virtual_gid)))), _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), (~ (0u)) | (~ (0u))))))))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(workgroup_base))))))))), _GLF_IDENTITY(4, _GLF_IDENTITY((4) * 1, (_GLF_IDENTITY((4) * 1, int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(4, max(4, 4))) * 1, _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) / 1) : _GLF_FUZZED(-10848))), 1)), 1, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, min(0, 0))))), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(_GLF_IDENTITY(ivec4((4) * 1, 1, 1, 0), ivec4(0, 0, 0, 0) | (_GLF_IDENTITY(ivec4((4) * 1, 1, 1, 0), ~ (~ (ivec4((4) * 1, 1, 1, 0)))))), ~ (~ (_GLF_IDENTITY(ivec4((4) * 1, 1, 1, 0), (_GLF_IDENTITY(ivec4((4) * 1, _GLF_IDENTITY(1, ~ (~ (1))), 1, 0), (ivec4((4) * 1, _GLF_IDENTITY(1, ~ (~ (1))), 1, 0)) >> ivec4(0, 0, 0, 0))) << ivec4(0, 0, 0, 0)))))))))) | 0)), 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          {
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).y), ((injectionSwitch.x > injectionSwitch.y)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-1570.5057, -9.5)) : injectionSwitch)).x > injectionSwitch.y)) || false))))) || false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), bvec2(bvec4(bvec2(bvec2(bvec2(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), true, true))))), true, false))))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
                  {
                   return;
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(0, ~ (~ (0))) << _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   return;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 do
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, int(ivec4(64, 1, 1, 0))))), 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), true && (bool(bvec2(false, true))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), (false ? _GLF_FUZZED(-9.0) : (injectionSwitch.y))) - 0.0)))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(mat2x3(vec2(1.0, 1.0), 0.0, 0.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec2(mat2x3(vec2(1.0, 1.0), 0.0, 0.0, 1.0, 1.0)), clamp(vec2(mat2x3(vec2(1.0, 1.0), 0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(843.811)), bool(false)))) / 1.0))), 1.0, 1.0)), vec2(mat2x3(vec2(1.0, 1.0), 0.0, 0.0, 1.0, 1.0)), vec2(mat2x3(vec2(1.0, 1.0), 0.0, 0.0, 1.0, 1.0)))), vec2(mat2x3(vec2(1.0, 1.0), 0.0, 0.0, 1.0, 1.0)))))).y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), (_GLF_IDENTITY(subgroup_size, (subgroup_size) << 0u)) >> _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) >> 0u), 0u))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(8743.4632) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)) > injectionSwitch.y)))), ! (! (bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-7.4)), mix(float(_GLF_FUZZED((-60.39))), float(float(_GLF_FUZZED(-7.4))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)))))))), bool(bvec2(false, true)))))
          {
           do
            {
             do
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(true, true && (true)), false)))))))))
                  {
                   do
                    {
                     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? int(7) : _GLF_FUZZED(91616))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)), bool(bool(bool(bvec3(bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
              {
               for(int _injected_loop_counter = (1 | (0 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, 0 ^ (0))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     return;
                    }
                  }
                }
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       else
        {
        }
       int i = 0;
       for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1)))))))), 0 ^ (int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1)))))))))))) >> _GLF_IDENTITY(int(1), int(1)), 0 | ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1)))))))), 0 ^ (int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1)))))))))))) >> _GLF_IDENTITY(int(1), int(1)))), max((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1)))))))), 0 ^ (int(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1))))))), (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) | (0)) | (_GLF_IDENTITY(1, int(int(1)))))))) / 1)))))) >> _GLF_IDENTITY(int(1), int(1)), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, int(int(1)))), (0 | (_GLF_IDENTITY(1, int(int(1))))) ^ 0))))), 0 ^ (int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(int(1)))))))))))) >> _GLF_IDENTITY(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, _GLF_IDENTITY(0 | (4), (false ? _GLF_FUZZED(_injected_loop_counter) : 0 | (4)))), _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(64, int(ivec4(64, 1, 0, 0)))))), ((_GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(64, int(ivec4(64, 1, 0, 0))))))) / ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))) | (64)), 4);
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = (_GLF_IDENTITY(1, (1) >> (0 | 0)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(bitfieldReverse(-21815))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
              break;
             break;
            }
           continue;
           if(_GLF_DEAD(false))
            return;
          }
         atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = ((0 >> _GLF_IDENTITY(int(5), int(5))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
            }
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec4(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, 0.0))), (injectionSwitch.x > injectionSwitch.y) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), false))))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) || false))))
                  break;
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), true && (false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            return;
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) && true))))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(_GLF_IDENTITY(8, (_GLF_IDENTITY(8, max(8, 8))) ^ 0)), clamp(int(8), int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 << _GLF_IDENTITY(int(1), int(1))) | 1)); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
                      return;
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 ^ _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), ~ _GLF_IDENTITY((~ (~ (0))), ((~ (~ (0)))) | ((~ (~ (0))))))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
