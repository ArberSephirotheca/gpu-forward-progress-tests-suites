#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> (0 << _GLF_IDENTITY(int(5), int(5)))), (0) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, exp(0.0), 1.0, 0.0, 1.0, cos(0.0), tan(0.0), 1.0, 0.0, 0.0, 1.0))))) > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 0.0, 0.0, 1.0))))), (true ? float(mat2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-4.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 1.0)) : _GLF_FUZZED(22.01))))))))
          {
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | (1 | 0), 0 ^ (1 | (1 | 0))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! _GLF_IDENTITY((! (false)), bool(bool((! (false)))))) && true)))), true, false))))))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (true)))), (bool(_GLF_IDENTITY(true, ! (! (true))))) || false)))) && true) && (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, (true) && true) && (injectionSwitch.x < injectionSwitch.y)))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 0.0, 0.0), (vec3(injectionSwitch.x, 0.0, 0.0)) - vec3(0.0, 0.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0))))) < injectionSwitch.y)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, bool(bool(false))), false, true)))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((true) && true), _GLF_IDENTITY(! (! (bool((true) && true))), (! (! (bool((true) && true)))) && true))), false || (bool(_GLF_IDENTITY(bool((true) && true), ! (! (bool((true) && true))))))))) && (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, true, false, false)))) && true), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), bvec3(bvec3(bvec3(bvec3(false, true, true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), false)))))))))))))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), false || (! (_GLF_IDENTITY(false, true && (false))))))), true, true, true)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), max(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(58.80)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y) && true)))))))))), ! (! (bool(bvec4(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), max(_GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))))), float(_GLF_FUZZED(58.80)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y) && true)))))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(false, true, true))))))))), false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, 0.0), min(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0)))).x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y) * 1.0))))))))
    {
    }
   else
    {
     GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = subgroup_size;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = (_GLF_IDENTITY((0 & -2458), ((0 & -2458)) / _GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), max(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), max(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))), (int(_GLF_IDENTITY(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), max(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))) ^ 0), 1, 1, 0), ivec4(1, 1, 1, 1) * (ivec4(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), max(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))), (int(_GLF_IDENTITY(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), max(ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1), ivec4(1, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1))))) ^ 0), 1, 1, 0))))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY(0, 0 | (0)) ^ (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             return;
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(31.59), _GLF_FUZZED(-7890.9899)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))), true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))), true, true, true))), (! (bool(bvec4(bool(bool(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))))), true, true, true)))) && true))))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ((true)) || false))) && true)))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)) && true), false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-7.6)), bool(false))) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_DEAD(false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            return;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              return;
                             if(_GLF_DEAD(false))
                              barrier();
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                              }
                             else
                              {
                              }
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                            break;
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         break;
                        }
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       return;
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                  }
                }
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, 1 * (1)) ^ 1) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), (true ? _GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), mat2(1.0) * (vec2(injectionSwitch.y, 1.0))) : _GLF_FUZZED(vec2(_GLF_IDENTITY(884.651, min(884.651, 884.651)), 9.2)))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(step(min(injectionSwitch, injectionSwitch), vec2(9500.5920, -150.274))))).x, max(injectionSwitch.x, injectionSwitch.x)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(step(min(injectionSwitch, injectionSwitch), vec2(9500.5920, -150.274))))).x, max(injectionSwitch.x, injectionSwitch.x)))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-580.427)), bool(false))))))) ? _GLF_FUZZED(-9217.5301) : 0.0)), _GLF_IDENTITY(0.0, 0.0 + (0.0)))).y)))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, false, true)), (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, false, true))) || false)); _injected_loop_counter ++)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(678.092, -3.0)) : injectionSwitch)).x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(678.092, -3.0)) : injectionSwitch)).x < injectionSwitch.y), false, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(678.092, -3.0)) : injectionSwitch)).x < injectionSwitch.y), false, true, true)))))))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) > _GLF_IDENTITY(0, _GLF_IDENTITY((0) << 0, min((0) << 0, (0) << 0)))); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             return;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), (0 << _GLF_IDENTITY(int(2), int(2))) | 0)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) | (~ (_injected_loop_counter))))) != _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), min(1, 1))) || false)); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                continue;
                               continue;
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                           barrier();
                          }
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     return;
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                 for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_DEAD(false))))
                    barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
        barrier();
       return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y) && true)) && true)))))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && _GLF_IDENTITY((false), ! (! ((false)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec2(true && (false), true)))) && true)), true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))))) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-5338.4067)), bool(false))) < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, _GLF_IDENTITY(true, (true) || false), true), bvec3(bvec3(bvec3(true, true, true))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
           else
            {
            }
          }
         do
          {
           return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), false || (_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))), (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))) && (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) || false)));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), _GLF_IDENTITY(int(4), 0 ^ (int(4))), int(4))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), mat2(1.0) * (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(mat2x4(mat2(1.0) * (injectionSwitch), 0.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))).y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) / 1u)), uint(_GLF_IDENTITY(uvec2(min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, max(_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | 0u), gl_NumWorkGroups.x))) / _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)), clamp(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)), (uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u))) ^ 0u), uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u))))), (uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)), clamp(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)), _GLF_IDENTITY(uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)), (uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u))) ^ 0u), uint(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) << 0u)))))) ^ 0u)))), 0u), max(uvec2(min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) / 1u)), 0u), uvec2(min(gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)), (gl_NumWorkGroups.x) / 1u)), 0u)))))), (false ? _GLF_FUZZED(14370u) : gl_NumWorkGroups.x))) / 1u);
 do
  {
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-7.9)), bool(false))), _GLF_ONE(1.0, injectionSwitch.y)))) * determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, 0 ^ (1)), 1, 1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             break;
            }
          }
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0)), (_GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0)), _GLF_IDENTITY((vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0))) * mat2(1.0), max((vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0))) * mat2(1.0), (vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0))) * mat2(1.0))))) - vec2(0.0, 0.0))).y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0))).y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, -18.82, 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(_GLF_IDENTITY(1.0, (1.0) / _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 0.0)), abs(0.0), 1.0))).y, false, false))))))))), false || (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(778.763, -37.60))), clamp((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(778.763, -37.60))), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(778.763, -37.60))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(778.763, -37.60)))) / vec2(1.0, 1.0)), _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(778.763, -37.60))), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(778.763, -37.60)))) - vec2(0.0, 0.0))))), vec2(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(vec2(-4688.4302, -938.288)))), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(vec2(-667.463, -66.15).t)), float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), bool(true))), 0.0, 0.0)), _GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.1)), bool(false))), injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0), (false ? _GLF_FUZZED(mat2x4(4.7, 4.6, 446.817, -494.634, -3.9, 3.6, _GLF_IDENTITY(-18.82, clamp(-18.82, -18.82, -18.82)), 87.61)) : mat2x4(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, sqrt(1.0), 1.0))))), 0.0, length(vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 0.0, 0.0)), abs(0.0), 1.0))).y))))));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
  return;
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.x = num_workgroup;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || (_GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || false))) || _GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-79.53)), bool(false))), 0.0), (vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-79.53)), bool(false))), 0.0)) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (~ (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) / uvec3(1u, 1u, 1u)), ~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(92199u, 142233u, 90568u)))))), clamp(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), min(_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) * uvec3(1u, 1u, 1u)), max(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize))), ~ (gl_WorkGroupSize))), ~ (gl_WorkGroupSize))))).x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(_GLF_IDENTITY(true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(102596u, 65496u, _GLF_IDENTITY(45473u, 0u + (45473u)))), uvec3(0u, 0u, 0u) | (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(102596u, 65496u, _GLF_IDENTITY(45473u, 0u + (45473u)))))), _GLF_IDENTITY(_GLF_IDENTITY((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(102596u, 65496u, 45473u))), min((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(102596u, 65496u, 45473u))), (true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(102596u, 65496u, 45473u))))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec4(1u, 0u, 0u, 1u)), ~ (~ (uint(uvec4(1u, 0u, 0u, 1u)))))), 1u)) * (0u))), ((true ? gl_WorkGroupID : _GLF_FUZZED(uvec3(102596u, 65496u, 45473u))) - uvec3(0u, 0u, _GLF_IDENTITY(0u, 1u * (0u)))) >> uvec3(0u, 0u, 0u))))).x;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), int(1)), min(1 << _GLF_IDENTITY(int(1), int(1)), 1 << _GLF_IDENTITY(int(1), int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y))) * 1.0)))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).y))) * 1.0)))), false, true))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), true, true, true)))) && true)));
     if(_GLF_DEAD(false))
      barrier();
     continue;
    }
   do
    {
     GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.w = workgroup_id;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     barrier();
    }
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.w, (true ? _GLF_IDENTITY(workgroup_size, (workgroup_size) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) * GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.w : _GLF_FUZZED(_GLF_IDENTITY(write_val, (write_val) | (write_val)))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), min((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), tan(vec2(0.0, 0.0)) + ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))))))) / vec2(1.0, 1.0)).x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(unpackSnorm2x16(write_val)) : injectionSwitch)))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), false, false, true))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, log(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ! (! ((_GLF_IDENTITY(false, true && (false))))))))))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
        }
       return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(1, max(1, 1)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (1) << 0), 1, 0))) ^ 0)); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), true, true, true))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), max(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, false))), _GLF_IDENTITY(false, false || (false))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))))))))) && true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(9.2)), bool(false))) > injectionSwitch.y)))) && true))) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))), (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))) && true))))))))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) >> 0) : _GLF_FUZZED(91374)))))))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))) && true)) || false), true, true, true)))))))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))))))))) && true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(9.2)), bool(false))) > injectionSwitch.y)))) && true))) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))), (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))) && true))))))))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) >> 0) : _GLF_FUZZED(91374)))))))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))) ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))) && true)) || false), true, true, true)))))))))))))))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))))))))) && true))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(9.2)), bool(false))) > injectionSwitch.y)))) && true))) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))), 0 ^ (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((true ? 0 : _GLF_FUZZED(91374)), ~ (~ ((true ? 0 : _GLF_FUZZED(91374))))))))) && true))))))))))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), false || ((_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > 0)), true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, (0) << 0))), (0) >> 0) : _GLF_FUZZED(91374)))))))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, _GLF_IDENTITY(0, clamp(0, 0, 0)))), (true ? 0 : _GLF_FUZZED(91374))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), true && (bool(bvec4(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))) ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374))))))), (_GLF_IDENTITY(_injected_loop_counter > 0, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(_injected_loop_counter > 0, true && (_injected_loop_counter > _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(91374)))))))) && true)) || false), true, true, true)))))))))))))))))))))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 1.0))), 1.0, 1.0, 1.0), _GLF_IDENTITY((mat2x4(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), vec2(1.0, 1.0))), 1.0, 1.0, 1.0)) * mat2(1.0), (true ? (mat2x4(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2735.3910) : _GLF_IDENTITY(0.0, (0.0) * 1.0))), _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 1.0)), dot(vec2(0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec2(1.0, 1.0))), 1.0, 1.0, 1.0)) * mat2(1.0) : _GLF_FUZZED(mat2x4(7.2, -2.2, -3.3, 2636.4955, -6.9, -93.22, -9.5, -4.1))))))), mix(float(_GLF_FUZZED(-15.73)), float(1.0), bool(true))), injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
          {
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 ^ (1)))) || false); _injected_loop_counter ++)
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               continue;
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + 0)), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(8), int(8)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(8), int(8)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(8), int(8)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_injected_loop_counter != (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(8), int(8)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), true, true), bvec3(bvec4(bvec3(_injected_loop_counter != (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(8), int(8)))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), true, true), true)))))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))) || (_injected_loop_counter != (0 | _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), max(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8)))) : _GLF_FUZZED(-166))))))), max((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), max(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8)))) : _GLF_FUZZED(-166))))))), _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), max(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8)))) : _GLF_FUZZED(-166))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (false ? _GLF_FUZZED(_injected_loop_counter) : (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), (true ? _GLF_IDENTITY(0 << _GLF_IDENTITY(int(8), int(8)), max(0 << _GLF_IDENTITY(int(8), int(8)), 0 << _GLF_IDENTITY(int(8), int(8)))) : _GLF_FUZZED(-166))))))))))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false)), true && (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false))))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(8), int(8))), max((_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(8), int(8))), (_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(8), int(8))))) | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)), vec2(1.0, 1.0) * (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)), max(mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)), mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true))))))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)))), vec2(mat3x2(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(6.6), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))))))), 0.0, 1.0, 0.0, 1.0))))[1])), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))))))) ? _GLF_FUZZED(vec2(4680.7477, _GLF_IDENTITY(-802.494, mix(float(_GLF_FUZZED(-5699.4871)), float(-802.494), bool(true))))) : injectionSwitch)))).y, float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)), vec2(1.0, 1.0) * (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)), max(mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)), mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true))))))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)))), vec2(mat3x2(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-4.7)), vec2(_GLF_FUZZED(6.6), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))))))), 0.0, 1.0, 0.0, 1.0))))[1])), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))))))) ? _GLF_FUZZED(vec2(4680.7477, _GLF_IDENTITY(-802.494, mix(float(_GLF_FUZZED(-5699.4871)), float(-802.494), bool(true))))) : injectionSwitch)))).y, 1.0, abs(1.0), 1.0, 0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), max(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true))), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)))), vec2(mat3x2(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && (true)))), _GLF_FUZZED(-2480.5519)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)))), 0.0, 1.0, 0.0, 1.0))))[1])), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, true))), bvec2(bvec2(bvec2(bvec2(bvec2(false, true))))))))) ? _GLF_FUZZED(vec2(4680.7477, _GLF_IDENTITY(-802.494, mix(float(_GLF_FUZZED(-5699.4871)), float(-802.494), bool(true))))) : injectionSwitch)))).y) - _GLF_ZERO(0.0, injectionSwitch.x))))))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true && (! (_GLF_IDENTITY(false, true && (false)))), bool(bvec4(_GLF_IDENTITY(true, true && (true)) && (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false))))), true && (false)))), true, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (_GLF_IDENTITY(! (! (! (true))), bool(bool(! (! (! (true)))))))))))))))))), _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(bool(bvec3(! (! (false)), false, false)), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(false, (false) && true))), false, false)), (bool(bvec3(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, (_GLF_IDENTITY((false) && true, ! (! ((false) && true)))) && true)))), false, false))) && true), ! (! (bool(bvec3(! (! (false)), false, false)))))) && true)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      continue;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z = subgroup_base;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), true)))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(-30289) : int(1))))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, max(workgroup_base + GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z, (workgroup_base + GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z) - 0u) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x, 0u | (_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z, (workgroup_base + GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.z) - 0u) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x))));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 atomicStore(write_val, uint(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_IDENTITY(clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u), (uvec3(_GLF_IDENTITY(89900u, (true ? _GLF_IDENTITY(89900u, (89900u) + 0u) : _GLF_FUZZED(workgroup_id))), 128078u, 165141u)) - uvec3(0u, 0u, 0u)).x), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u).x, (uvec3(89900u, 128078u, 165141u).x) | 0u))), uint(uvec4(_GLF_IDENTITY(clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) << 0u)) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u), _GLF_IDENTITY((uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u), (_GLF_IDENTITY((uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u), max((uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u), (uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))).x), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(91.29), _GLF_FUZZED(float(true))), bvec2(false, false))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x)), _GLF_IDENTITY((_GLF_IDENTITY(clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u), (uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u)).x), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x)), (clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u), (uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u)).x), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x))) ^ 0u)) - 0u, ((_GLF_IDENTITY(clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u), (uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u)).x), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x)), (clamp(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(89900u, 128078u, 165141u), (uvec3(89900u, 128078u, 165141u)) - uvec3(0u, 0u, 0u)).x), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x < injectionSwitch.y)) ? _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u) : _GLF_FUZZED(uvec3(89900u, 128078u, 165141u).x))) ^ 0u)) - 0u) ^ 0u)), 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))))))), 4, 64, 0);
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + sin(0.0)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint read_val = atomicLoad(write_val, 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(_GLF_IDENTITY(ivec2(64, int(_GLF_ZERO(0.0, injectionSwitch.x))), ivec2(_GLF_IDENTITY(ivec4(ivec2(64, int(_GLF_ZERO(0.0, injectionSwitch.x))), 1, 0), _GLF_IDENTITY((ivec4(ivec2(64, int(_GLF_ZERO(0.0, injectionSwitch.x))), 1, _GLF_IDENTITY(0, 0 | (0)))) | (ivec4(ivec2(64, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 ^ (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0)))), 1, 0)), ((ivec4(ivec2(_GLF_IDENTITY(64, (64) * 1), int(_GLF_ZERO(0.0, injectionSwitch.x))), 1, 0)) | (ivec4(ivec2(64, _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))), 1, 0))) * ivec4(1, 1, 1, 1))))))), (false ? _GLF_FUZZED((int(false) ^ -64010)) : 64)), 0);
 for(int _injected_loop_counter = (1 ^ (1 ^ 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), true && (bool(_GLF_IDENTITY(false, false || (false))))))), true && (false)), (injectionSwitch.x > injectionSwitch.y)))), false))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(609.695) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1493.7878), _GLF_FUZZED(-0.1)), bvec2(false, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), true)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), true)))), false, true, false)))) && true)))))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, (false) || false))) || false))), false, false)), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec3((false) || false, false, false)), ! (! (bool(bvec3((false) || false, false, false))))))))) || false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec3((false) || false, false, false)), ! (! (bool(bvec3((false) || false, false, false))))))))) || false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (false)) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, _GLF_IDENTITY(bool(bvec3((false) || false, false, false)), ! (! (bool(bvec3((false) || false, false, false))))))))) || false))), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false))))))))) && true), ! (! (bool(bvec3(_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) || false, bool(bvec2((! (false)) || false, false)))), false, false))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       return;
      }
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), vec2(0.0, 0.0) + (min(injectionSwitch, injectionSwitch)))).x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y = read_val;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       buf[virtual_gid] = _GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y)), (uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y)), (uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id, (true ? GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id : _GLF_FUZZED(uvec4(62473u, 76399u, 183910u, 57448u))))) / uvec4(1u, 1u, 1u, 1u)).y))) | 0u), ~ (~ (_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y)), _GLF_IDENTITY((uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u, (true ? _GLF_IDENTITY((uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u, ((uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u) ^ 0u) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_local_id))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y)), (uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u), ~ (~ (_GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y)), _GLF_IDENTITY((uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u, (true ? _GLF_IDENTITY((uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u, ((uint(subgroupAllEqual(GLF_merged4_0_1_13_1_1_8_2_1_13_3_1_12num_workgroupread_valsubgroup_baseworkgroup_id.y))) | 0u) ^ 0u) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_local_id)))))))))) ^ 0u) + uint(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(float(18063))), bool(false)))) - 0.0))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
