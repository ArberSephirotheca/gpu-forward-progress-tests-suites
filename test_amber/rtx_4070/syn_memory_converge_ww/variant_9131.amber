#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) || (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED((+ 6.7))), bool(false))) > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, sqrt(1.0), 0.0, 1.0, 1.0, sin(0.0)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.6), _GLF_FUZZED(82.67)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bool(! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, true, false)))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), clamp((injectionSwitch) * vec2(1.0, 1.0), (injectionSwitch) * vec2(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(injectionSwitch))) * vec2(1.0, 1.0), ((injectionSwitch) * _GLF_IDENTITY(vec2(1.0, 1.0), min(vec2(1.0, 1.0), vec2(1.0, 1.0)))) - vec2(0.0, 0.0)), (_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) - vec2(0.0, 0.0)), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) - _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), (vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))) + vec2(0.0, 0.0)))))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, (1.0) * 1.0)), clamp((injectionSwitch) * vec2(1.0, 1.0), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch))), _GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(8.0)), vec2(_GLF_FUZZED(1.2), ((injectionSwitch))[1]), bvec2(false, true))), (injectionSwitch))) * _GLF_IDENTITY(vec2(1.0, 1.0), _GLF_IDENTITY(_GLF_IDENTITY((vec2(1.0, 1.0)) * mat2(1.0), ((vec2(1.0, 1.0)) * mat2(1.0)) / vec2(1.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY((vec2(1.0, 1.0)) * mat2(1.0), ((vec2(1.0, 1.0)) * mat2(1.0)) / vec2(1.0, 1.0))) * mat2(1.0), vec2(1.0, 1.0) * ((_GLF_IDENTITY((vec2(1.0, 1.0)) * mat2(1.0), ((vec2(1.0, 1.0)) * mat2(1.0)) / vec2(1.0, 1.0))) * mat2(1.0))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6.2) : _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) / 1.0))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(7.0) : 1.0))), (false ? _GLF_FUZZED(vec2(-12.00, -42.54)) : vec2(1.0, 1.0))), (_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), mix(vec2(((injectionSwitch) * vec2(1.0, 1.0))[0], _GLF_FUZZED(-29.08)), vec2(_GLF_FUZZED(-804.175), (_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), vec2(1.0, 1.0) * ((injectionSwitch) * vec2(1.0, 1.0))))[1]), bvec2(false, true)))) - vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0)) * vec2(1.0, 1.0), ((_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) * vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 1.0)), max(float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 1.0)), float(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, tan(0.0), 1.0, 1.0))))), 1.0)), 1.0)) - vec2(0.0, 0.0)), (_GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(659.309, (659.309) * 1.0)) : 1.0)), 1.0), _GLF_IDENTITY((vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(659.309) : 1.0)), 1.0)) * mat2(1.0), (true ? (vec2(_GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(659.309), mix(float(_GLF_FUZZED((- 1.1))), float(_GLF_FUZZED(659.309)), bool(true))) : 1.0)), 1.0)) * mat2(1.0) : _GLF_FUZZED(vec2(-27.15, -231.912)))))) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, tan(0.0), sin(0.0), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((22.43 + (- -279.237)))), float(injectionSwitch.x), bool(true)))), exp(0.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, sqrt(0.0)), vec4(0.0, cos(0.0), 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, sqrt(0.0)), vec4(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(dot(vec3(-75.36, -1.9, 94.61), vec3(76.22, -9860.2787, 5897.6957))))), cos(0.0), 1.0, 1.0))), 1.0)))), ((injectionSwitch) * vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0)) - vec2(0.0, 0.0)), _GLF_IDENTITY((injectionSwitch) * vec2(1.0, 1.0), ((injectionSwitch) * vec2(1.0, 1.0)) - vec2(0.0, 0.0))))))).y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)) && _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), (bool(bool(_GLF_IDENTITY(false, true && (false))))) || false)))), ! (! ((_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true, false))))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ! (! ((_GLF_DEAD(false)) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0), (true ? mat3(injectionSwitch, 1.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0) : _GLF_FUZZED(mat3(3309.8485, -0.1, 5850.0852, -3.1, 2.4, 5.8, -593.107, 6470.3283, 6934.1780)))))))).y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY(true && (injectionSwitch.x > injectionSwitch.y), true && (true && (injectionSwitch.x > injectionSwitch.y)))) && true)))))) && true)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) && true), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))))) && true)))))))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) || false), true))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, min(_GLF_IDENTITY(write_val, 0u | (write_val)), _GLF_IDENTITY(write_val, clamp(write_val, _GLF_IDENTITY(write_val, (false ? _GLF_FUZZED(workgroup_base) : write_val)), write_val)))), 4, 64, 0);
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (false)), ((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false), (! _GLF_IDENTITY((! (false)), ((! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))) || false)) && true))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true))))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true))))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true)))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true))))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true)))))))), bool(bvec3(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true))))), false || (bool(_GLF_IDENTITY(bvec3(false, true, false), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, false))), bvec3(bvec4(bvec3(bvec3(bvec3(false, true, false))), true)))))))), true, true)))) && true))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), (! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), ! (! ((! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))), ((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))))) - 0.0) / 1.0))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, (true) && true))))) / 1.0)))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, (true) && true))))) / 1.0))))))) && true)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), bool(bvec4(bool(true), true, false, true)))))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)), 0.0 + (mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))), _GLF_IDENTITY((mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))), clamp(_GLF_IDENTITY((mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))), determinant(mat4(1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) * ((mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))))), _GLF_IDENTITY((mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))), clamp((mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))), (mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))), (mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))))), (mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, false || (true)), true), bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bvec2(true, _GLF_IDENTITY(true, true && (true))), bvec2(bvec4(bvec2(true, _GLF_IDENTITY(true, true && (true))), true, true))))), false, false)))), bvec2(bvec4(bvec2(true, true), true, true))), false)))))))))) - 0.0))) / 1.0)))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, false, false))))), _GLF_IDENTITY(bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, false, false))))), true, true, true)), ! (! (bool(bvec4((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, false, false))))), true, true, true))))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(213.185), _GLF_FUZZED(float(129631u))), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_IDENTITY(vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])), min(vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])), vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1]))))), min(vec2(_GLF_IDENTITY(vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])), min(vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])), vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1]))))), vec2(_GLF_IDENTITY(vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])), min(vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])), vec2(vec2((injectionSwitch)[0], (injectionSwitch)[1])))))))), bvec2(true, true))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0, mix(float(_GLF_FUZZED(-85.94)), float((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0), bool(true))))), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(213.185), _GLF_FUZZED(float(129631u))), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) >> 0)]), bvec2(true, true))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)), (true ? _GLF_IDENTITY(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)), float(_GLF_IDENTITY(float(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))), min(float(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))), float(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true))))))) : _GLF_FUZZED(-139.413))))) / 1.0, mix(float(_GLF_FUZZED(-85.94)), float((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), float(vec2(float(true), 0.0))))), float(injectionSwitch.y), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true)))))))))))) / 1.0), bool(true))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(213.185), _GLF_IDENTITY(_GLF_FUZZED(float(129631u)), (true ? _GLF_FUZZED(float(129631u)) : _GLF_FUZZED((8507.0983 * 635.309))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0, mix(float(_GLF_FUZZED(-85.94)), float((_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(float(true)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)), (true ? dot(vec4(0.0, 1.0, 1.0, 1.0), vec4(1.0, 0.0, sqrt(0.0), 0.0)) : _GLF_FUZZED(-5833.2337)))) + (_GLF_FUZZED(float(true))))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), ! (! (bool(true))))))) / 1.0), bool(true)))))) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), true, true, true))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), _GLF_IDENTITY(float(injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-2.9)), bool(false))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), clamp(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))) / 1.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0)))))) && true)), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), _GLF_IDENTITY(float(injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-2.9)), bool(false))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), clamp(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))) / 1.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0)))))) && true)), true, true)), true && (bool(bvec3(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), _GLF_IDENTITY(float(injectionSwitch.y), float(mat3x4(_GLF_IDENTITY(float(injectionSwitch.y), mix(float(float(injectionSwitch.y)), float(_GLF_FUZZED(-2.9)), bool(false))), 1.0, _GLF_IDENTITY(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), _GLF_IDENTITY(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), clamp(dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0)), dot(vec4(1.0, sin(0.0), 0.0, 1.0), vec4(0.0, 1.0, abs(1.0), 0.0))))), 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false))))))) / 1.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0)))))) && true)), true, true))))), bool(bvec4(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))))))))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(_GLF_IDENTITY(float(_GLF_FUZZED(float(true))), (float(_GLF_FUZZED(float(true)))) / 1.0), float(injectionSwitch.y), bool(true)), float(mat4x3(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)), tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0))), float(mat3x2(_GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 1.0))), 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0))))) / 1.0)))) && true)), true, true, true)))), _GLF_IDENTITY(bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), float(mat2x4(float(true), sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), float(_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0, 0.0, 1.0)))), bool(true)))) / 1.0)) || false))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(float(true), min(_GLF_IDENTITY(float(true), (false ? _GLF_FUZZED(-8.2) : float(true))), float(true))))), float(injectionSwitch.y), bool(true)))) / 1.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0)))))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)), float(mat4x3(mix(float(_GLF_FUZZED(float(_GLF_IDENTITY(true, ! (! (true)))))), float(injectionSwitch.y), bool(true)), tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (0.0) / 1.0)), float(_GLF_FUZZED(-686.378)), bool(false))), _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0))), 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0))))) / 1.0)))) && true)), true, true, true)))), true, true, true)), (bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-51.48)))), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)).y), bool(true)))) / 1.0)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)))) / 1.0))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_FUZZED(float(true))), float(injectionSwitch.y), bool(true)), float(mat4x3(mix(float(_GLF_FUZZED(float(true))), _GLF_IDENTITY(float(injectionSwitch.y), (true ? float(injectionSwitch.y) : _GLF_FUZZED(57.68))), bool(true)), tan(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(sin(0.0), 0.0, 1.0, 0.0))), 0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0))))) / 1.0)))) && true)), true, true, true)))), true, true, true))) || false)))) && true))))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (true ? buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, (true ? read_val : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, (true ? read_val : _GLF_FUZZED(workgroup_size))))), (uint(subgroupAllEqual(_GLF_IDENTITY(read_val, (true ? read_val : _GLF_FUZZED(workgroup_size)))))) << 0u)) / 1u) : _GLF_FUZZED(num_workgroup))) : _GLF_FUZZED(max(subgroup_id, subgroup_local_id)))), ~ (~ (buf[virtual_gid] = uint(subgroupAllEqual(read_val)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED((+ 2.6)), _GLF_FUZZED((966.806 - float(false)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), true)), bvec2(bvec2(_GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), true)), bvec2(bvec2(bvec2(bvec3(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))), true)))))))))), mix(vec2(_GLF_FUZZED(9.5), _GLF_FUZZED(-80.71)), vec2(_GLF_IDENTITY((mix(vec2(_GLF_FUZZED((+ 2.6)), _GLF_FUZZED((966.806 - float(false)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[0], mix(float((mix(vec2(_GLF_FUZZED((+ 2.6)), _GLF_FUZZED((966.806 - float(false)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))[0]), float(_GLF_FUZZED(2.6)), bool(false))), (mix(vec2(_GLF_FUZZED((+ 2.6)), _GLF_FUZZED((966.806 - float(false)))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))[1]), bvec2(true, true)))[1]), bvec2(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))))))), true)))).y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false)))), true && (bool(_GLF_IDENTITY((false), true && ((false)))))))))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false)))), true && (bool(_GLF_IDENTITY((false), true && ((false))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false)))), true && (bool(_GLF_IDENTITY((false), true && ((false))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false)))), true && (bool(_GLF_IDENTITY((false), true && ((false)))))))))))), ! (! (! (_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false)))), true && _GLF_IDENTITY((bool(_GLF_IDENTITY((false), true && ((false))))), ! (! ((bool(_GLF_IDENTITY((false), true && ((false))))))))))))))))))))) && true))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, true, true))) || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ((false)) && true))), true, true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, (true) && true) && ((false)))), true && (bool(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) || false)))))))))))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (true) && true) && ((false)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY((false), true && ((false))))), true && (true && (bool(_GLF_IDENTITY((false), _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) && true))) && ((false))))))))))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), bool(_GLF_IDENTITY(bool(! ((false) || false)), true && (bool(! ((false) || false)))))))))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) / exp(0.0)) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), bool(bvec3(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), false, false))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
