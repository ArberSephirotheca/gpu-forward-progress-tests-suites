#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_27 {
 int _f0;
 uint _f1;
 bvec4 _f2;
 float _f3;
 mat2 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_28 {
 uint workgroup_base;
 uvec2 _f0;
 mat4x2 _f1;
 int _f2;
 _GLF_struct_27 _f3;
} ;

struct _GLF_struct_25 {
 mat4 _f0;
 uvec4 _f1;
 mat4x2 _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_24 {
 vec2 _f0;
} ;

struct _GLF_struct_23 {
 ivec2 _f0;
 float _f1;
 bool _f2;
 mat4x2 _f3;
 bool _f4;
} ;

struct _GLF_struct_26 {
 _GLF_struct_23 _f0;
 _GLF_struct_24 _f1;
 mat2x3 _f2;
 _GLF_struct_25 _f3;
 vec2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_29 {
 _GLF_struct_26 _f0;
 _GLF_struct_28 _f1;
 int _f2;
 vec2 _f3;
} ;

struct _GLF_struct_20 {
 vec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_19 {
 uint _f0;
 uvec3 _f1;
 mat2x3 _f2;
 vec3 _f3;
 uvec3 _f4;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 int _f1;
} ;

struct _GLF_struct_17 {
 mat3x4 _f0;
 mat3x4 _f1;
 mat3 _f2;
 uvec3 _f3;
} ;

struct _GLF_struct_16 {
 float _f0;
 mat2x4 _f1;
 bvec4 _f2;
 mat2x3 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_21 {
 _GLF_struct_16 _f0;
 _GLF_struct_17 _f1;
 _GLF_struct_18 _f2;
 uint subgroup_id;
 _GLF_struct_19 _f3;
 _GLF_struct_20 _f4;
} ;

struct _GLF_struct_22 {
 vec2 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 _GLF_struct_21 _f3;
} ;

struct _GLF_struct_13 {
 mat3 _f0;
 ivec4 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
 int _f1;
 vec3 _f2;
 ivec4 _f3;
 mat2x4 _f4;
} ;

struct _GLF_struct_11 {
 uvec2 _f0;
 vec4 _f1;
 mat3 _f2;
 uvec3 _f3;
 vec3 _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_14 {
 uvec3 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_12 _f2;
 _GLF_struct_13 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_15 {
 uvec2 _f0;
 uint workgroup_size;
 mat4 _f1;
 _GLF_struct_14 _f2;
 ivec3 _f3;
 int _f4;
 vec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_8 {
 vec4 _f0;
 mat4 _f1;
 uint _f2;
 mat2x4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_7 {
 uvec3 _f0;
 mat4x2 _f1;
 vec2 _f2;
 mat3 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_9 {
 uint _f0;
 uint _f1;
 vec3 _f2;
 _GLF_struct_7 _f3;
 mat4x2 _f4;
 _GLF_struct_8 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 mat2x3 _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 bvec2 _f1;
 vec3 _f2;
 ivec3 _f3;
 ivec4 _f4;
 ivec2 _f5;
 vec3 _f6;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 uvec4 _f1;
 mat3 _f2;
 _GLF_struct_5 _f3;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 vec2 _f1;
 uvec3 _f2;
 mat3 _f3;
 mat2x3 _f4;
 float _f5;
} ;

struct _GLF_struct_1 {
 mat2x3 _f0;
 bvec4 _f1;
 uint _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 uint num_workgroup;
} ;

struct _GLF_struct_10 {
 _GLF_struct_3 _f0;
 bvec2 _f1;
 mat4x2 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 mat2 _f1;
 uint subgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(vec2(1.0), mat2x4(1.0), mat3x2(1.0), _GLF_struct_21(_GLF_struct_16(1.0, mat2x4(1.0), bvec4(true), mat2x3(1.0), mat4x3(1.0)), _GLF_struct_17(mat3x4(1.0), mat3x4(1.0), mat3(1.0), uvec3(1u)), _GLF_struct_18(bvec3(true), 1), gl_SubgroupID, _GLF_struct_19(1u, uvec3(1u), mat2x3(1.0), vec3(1.0), uvec3(1u)), _GLF_struct_20(vec3(1.0), ivec3(1))));
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec2(1u), mat2(1.0), gl_SubgroupSize);
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_3(_GLF_struct_1(mat2x3(1.0), bvec4(true), 1u, mat3x2(1.0)), _GLF_struct_2(vec2(1.0), vec2(1.0), uvec3(1u), mat3(1.0), mat2x3(1.0), 1.0), gl_NumWorkGroups.x), bvec2(true), mat4x2(1.0), _GLF_struct_6(_GLF_struct_4(ivec3(1), bvec2(true), vec3(1.0), ivec3(1), ivec4(1), ivec2(1), vec3(1.0)), uvec4(1u), mat3(1.0), _GLF_struct_5(bvec4(true), mat2x3(1.0), bvec3(true))), _GLF_struct_9(1u, 1u, vec3(1.0), _GLF_struct_7(uvec3(1u), mat4x2(1.0), vec2(1.0), mat3(1.0), vec4(1.0)), mat4x2(1.0), _GLF_struct_8(vec4(1.0), mat4(1.0), 1u, mat2x4(1.0), ivec4(1)), bvec3(true)));
 _GLF_struct_15 _GLF_struct_replacement_15 = _GLF_struct_15(uvec2(1u), gl_WorkGroupSize.x, mat4(1.0), _GLF_struct_14(uvec3(1u), _GLF_struct_11(uvec2(1u), vec4(1.0), mat3(1.0), uvec3(1u), vec3(1.0), mat3x4(1.0)), _GLF_struct_12(vec3(1.0), 1, vec3(1.0), ivec4(1), mat2x4(1.0)), _GLF_struct_13(mat3(1.0), ivec4(1), vec2(1.0)), vec2(1.0)), ivec3(1), 1, vec3(1.0), uvec3(1u));
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_26(_GLF_struct_23(ivec2(1), 1.0, true, mat4x2(1.0), true), _GLF_struct_24(vec2(1.0)), mat2x3(1.0), _GLF_struct_25(mat4(1.0), uvec4(1u), mat4x2(1.0), mat3x2(1.0)), vec2(1.0), mat4x2(1.0)), _GLF_struct_28(_GLF_struct_replacement_15.workgroup_size * workgroup_id, uvec2(1u), mat4x2(1.0), 1, _GLF_struct_27(1, 1u, bvec4(true), 1.0, mat2(1.0), mat2x4(1.0))), 1, vec2(1.0));
 uint virtual_gid = _GLF_struct_replacement_29._f1.workgroup_base + _GLF_struct_replacement_22._f3.subgroup_id * _GLF_struct_replacement_0.subgroup_size + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
