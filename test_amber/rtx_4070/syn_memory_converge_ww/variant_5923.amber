#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y)) << _GLF_IDENTITY(int(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec2(1, 0)))))), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), int(int(int(1)))), int(1))))), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) - sqrt(vec2(0.0, 0.0))).x > injectionSwitch.y) || _GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-4.7) : injectionSwitch.x)) : _GLF_FUZZED(float(subgroup_id)))) > injectionSwitch.y))), false, false, true)))) && true), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))) || false))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_TRUE(true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))), true, true))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! _GLF_IDENTITY((false), bool(bvec3((false), true, false))))), (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (_GLF_IDENTITY(! (bool(bvec3(false, true, true))), false || (! (bool(bvec3(false, true, true))))))))), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3((false), true, false)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3((false), true, false)), bvec3(bvec3(bvec3(bvec3((false), true, false)))))))))))))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec3((false), true, false))))), (injectionSwitch.x > injectionSwitch.y)), true, false, false)))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-2544.8763, min(_GLF_IDENTITY(-2544.8763, mix(float(_GLF_IDENTITY(-2544.8763, (-2544.8763) / 1.0)), float(_GLF_FUZZED(-31.95)), bool(false))), _GLF_IDENTITY(-2544.8763, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(-2544.8763, min(_GLF_IDENTITY(-2544.8763, float(mat3x2(-2544.8763, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0))), -2544.8763)), 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 1.0)), 0.0 + (float(mat4x3(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 1.0))))), 0.0, 0.0)), 1.0, 0.0, 1.0), (true ? mat4x3(-2544.8763, 1.0, tan(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0) : _GLF_FUZZED(mat4x3(454.785, -2.5, -35.27, -407.414, 938.408, 26.50, 363.689, 2.4, 3249.7212, -2.6, -79.74, 7959.4025)))))))), -6.2)) : injectionSwitch)), mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(-57.85), (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), vec2(_GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY((true ? (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0] : _GLF_FUZZED(-0.8)), min((true ? (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0] : _GLF_FUZZED(-0.8)), (true ? (clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0] : _GLF_FUZZED(-0.8))))), _GLF_FUZZED((- -64.24))), bvec2(true, false)))))[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED(14.47), _GLF_IDENTITY(_GLF_FUZZED(-1.8), max(_GLF_IDENTITY(_GLF_FUZZED(-1.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.8), mix(float(_GLF_FUZZED(-1.8)), float(_GLF_FUZZED((false ? vec3(-580.909, 994.811, -56.82).r : 4.5))), bool(false))), _GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))), _GLF_FUZZED(-1.8)))), mix(vec2(_GLF_FUZZED(8504.6222), _GLF_FUZZED(0.0)), vec2(_GLF_IDENTITY((vec2(_GLF_FUZZED(14.47), _GLF_IDENTITY(_GLF_FUZZED(-1.8), max(_GLF_IDENTITY(_GLF_FUZZED(-1.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.8), mix(float(_GLF_FUZZED(-1.8)), float(_GLF_FUZZED((false ? vec3(-580.909, 994.811, -56.82).r : 4.5))), bool(false))), _GLF_FUZZED(-1.8), _GLF_FUZZED(_GLF_IDENTITY(-1.8, max(-1.8, _GLF_IDENTITY(-1.8, max(-1.8, -1.8))))))), _GLF_FUZZED(-1.8)))))[0], mix(float((vec2(_GLF_FUZZED(14.47), _GLF_IDENTITY(_GLF_FUZZED(-1.8), max(_GLF_IDENTITY(_GLF_FUZZED(-1.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.8), mix(float(_GLF_FUZZED(-1.8)), float(_GLF_FUZZED((false ? vec3(-580.909, 994.811, -56.82).r : 4.5))), bool(false))), _GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))), _GLF_FUZZED(-1.8)))))[0]), float(_GLF_FUZZED(847.022)), bool(false))), (vec2(_GLF_FUZZED(14.47), _GLF_IDENTITY(_GLF_FUZZED(-1.8), max(_GLF_IDENTITY(_GLF_FUZZED(-1.8), clamp(_GLF_IDENTITY(_GLF_FUZZED(-1.8), mix(float(_GLF_FUZZED(-1.8)), float(_GLF_FUZZED((false ? vec3(-580.909, 994.811, -56.82).r : 4.5))), bool(false))), _GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))), _GLF_FUZZED(-1.8)))))[1]), bvec2(true, true))), bvec2(false, false))).y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), true && (bool(bvec2(_GLF_DEAD(false), true))))))
          barrier();
        }
       else
        {
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = (1 ^ int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 0.0 + (_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_ZERO(0.0, injectionSwitch.x))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y)))))), false || ((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false)), true && (bool(bvec4(false, true, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true))))), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), bool(bool(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), true && (bool(bvec4(false, true, _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, false)))) && true), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x < injectionSwitch.y))), (bool(bool((injectionSwitch.x < injectionSwitch.y)))) || false))) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), ! (! (! (true))))))))), bool(bvec2(! (true), true))))), ((false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))))) && true)))))))) || (true)), false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), bool(bool(((injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, false || (true)), true, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bool(bool(bvec4(false, true, true, true))))))))))), true && (bool(bvec4(false, true, _GLF_IDENTITY(true, false || (true)), false))))), (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_ONE(1.0, injectionSwitch.y))))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), injectionSwitch.y, injectionSwitch.y)))))))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)) || (true)), ! (! (_GLF_IDENTITY(true, (true) && true)))), true, true, false)), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), ! (! (_GLF_IDENTITY(true, (true) && true)))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), false, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(true, bool(bool(true))), false, false, false))))))))), true, false))) && true)), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             barrier();
                            }
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
                            {
                             barrier();
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 barrier();
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * exp(0.0)), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))))))))
                                barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             barrier();
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
                        barrier();
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > injectionSwitch.y))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), vec2(_GLF_FUZZED(-5686.9136), _GLF_FUZZED((78.76 * 7.2))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), vec2(_GLF_FUZZED(-5686.9136), _GLF_FUZZED((78.76 * 7.2))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (true ? vec2((injectionSwitch)[0], (injectionSwitch)[1]) : _GLF_FUZZED(vec2(-4946.1814, 6417.8224))))) + tan(vec2(0.0, 0.0))), bvec2(true, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-8.2, 1819.3602)) : vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]))), vec2(_GLF_FUZZED(-5686.9136), _GLF_FUZZED((78.76 * 7.2))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)), clamp(vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)), vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)), vec2(_GLF_FUZZED(-6662.9100), _GLF_FUZZED(-1.0)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))]), vec2(_GLF_FUZZED(-5686.9136), _GLF_FUZZED((78.76 * 7.2))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true)))))))), true, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((false))) && true)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, true, true))))))) || false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))) || false, bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))) || false, false), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(6.0)), vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), bvec2(false, true))).y)))))) && true))))) || false, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))), true && ((! (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))) || false, bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true))))) || false, false), bvec2(bvec4(bvec2((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0])), _GLF_FUZZED(6.0)), vec2(_GLF_FUZZED(9.2), (injectionSwitch)[1]), bvec2(false, true))).y)))))) && true))))) || false, false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && true))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = ((0 ^ 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.4)), float(injectionSwitch.y), bool(true))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(0u)), 0u ^ (uint(uint(0u))))), 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u))) - _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ (0u | 0u))) ^ _GLF_IDENTITY((0u ^ 0u), _GLF_IDENTITY(((0u ^ 0u)), 0u ^ (((0u ^ 0u)))) - 0u)), 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u)))), clamp(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec3(_GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) >> uvec3(0u, 0u, 0u))))) + uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - (147728u & 0u), clamp((0u) - (147728u & 0u), (0u) - (147728u & 0u), _GLF_IDENTITY((0u) - (147728u & 0u), 1u * ((0u) - (147728u & 0u)))))), 0u)), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) + uvec3(_GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | 0u))), uint(uint(0u))), 0u, 0u)), _GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4((gl_WorkGroupID), 1u)))) | ((gl_WorkGroupID))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), (gl_WorkGroupID) | (gl_WorkGroupID)), 1u), _GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)), 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), ((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))) / uvec4(1u, 1u, 1u, 1u))))), _GLF_IDENTITY((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))), ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(0u), _GLF_IDENTITY(uvec4(0u), (false ? _GLF_FUZZED(uvec4(67073u, 152714u, 160325u, 5556u)) : uvec4(0u))))) >> _GLF_IDENTITY(uvec4(0u), uvec4(0u))) * ((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))))) - uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))), (~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))) - uvec4(0u, 0u, 0u, 0u)))) / uvec4(1u, 1u, 1u, 1u))))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) | (gl_WorkGroupID)))))) + uvec3(0u, 0u, 0u)) + _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, _GLF_IDENTITY(0u, (0u) << 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u + (0u))) | (uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4((gl_WorkGroupID), 1u)))) | ((gl_WorkGroupID))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), (gl_WorkGroupID) | (gl_WorkGroupID)), 1u), _GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)), 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), ((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))) / uvec4(1u, 1u, 1u, 1u))))), _GLF_IDENTITY((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))), ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(0u), _GLF_IDENTITY(uvec4(0u), (false ? _GLF_FUZZED(uvec4(67073u, 152714u, 160325u, 5556u)) : uvec4(0u))))) >> _GLF_IDENTITY(uvec4(0u), uvec4(0u))) * ((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))))) - uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))), (~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))) - uvec4(0u, 0u, 0u, 0u)))) / uvec4(1u, 1u, 1u, 1u))))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) | (gl_WorkGroupID)))))) + uvec3(0u, 0u, 0u)) + _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, _GLF_IDENTITY(0u, (0u) << 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u + (0u))) | (uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4((gl_WorkGroupID), 1u)))) | ((gl_WorkGroupID))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), (gl_WorkGroupID) | (gl_WorkGroupID)), 1u), _GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)), 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), ((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))) / uvec4(1u, 1u, 1u, 1u))))), _GLF_IDENTITY((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))), ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(0u), _GLF_IDENTITY(uvec4(0u), (false ? _GLF_FUZZED(uvec4(67073u, 152714u, 160325u, 5556u)) : uvec4(0u))))) >> _GLF_IDENTITY(uvec4(0u), uvec4(0u))) * ((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))))) - uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))), (~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))) - uvec4(0u, 0u, 0u, 0u)))) / uvec4(1u, 1u, 1u, 1u))))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) | (gl_WorkGroupID)))))) + uvec3(0u, 0u, 0u)) + _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, _GLF_IDENTITY(0u, (0u) << 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u + (0u))) | (uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4(_GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), uvec3(uvec4((gl_WorkGroupID), 1u)))) | ((gl_WorkGroupID))), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(gl_WorkGroupID, min(_GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, max(gl_WorkGroupID, gl_WorkGroupID)), (gl_WorkGroupID) | (gl_WorkGroupID)), 1u), _GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, _GLF_IDENTITY((gl_WorkGroupID), ((gl_WorkGroupID)) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))) | (gl_WorkGroupID)), 1u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)), ((uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))) / uvec4(1u, 1u, 1u, 1u))))), _GLF_IDENTITY((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))), ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(0u), _GLF_IDENTITY(uvec4(0u), (false ? _GLF_FUZZED(uvec4(67073u, 152714u, 160325u, 5556u)) : uvec4(0u))))) >> _GLF_IDENTITY(uvec4(0u), uvec4(0u))) * ((~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))))) - uvec4(0u, 0u, 0u, 0u))), (~ (_GLF_IDENTITY(~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u))), (~ (~ (uvec4(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)), 1u)))) - uvec4(0u, 0u, 0u, 0u)))) / uvec4(1u, 1u, 1u, 1u))))))), _GLF_IDENTITY(gl_WorkGroupID, uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u) | (gl_WorkGroupID)))))) + uvec3(0u, 0u, 0u)) + _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), max(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, _GLF_IDENTITY(0u, (0u) << 0u)), uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u + (0u))) | (uvec3(_GLF_IDENTITY(0u, uint(uint(0u))), 0u, 0u)))))))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       do
        {
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (false))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false), (! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! ((_GLF_IDENTITY(! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (((injectionSwitch.x > injectionSwitch.y))) || false), (! ((injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))), bool(bvec2((_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (_GLF_IDENTITY(! (! (! (false))), _GLF_IDENTITY(bool(bool(! (! (! (false))))), bool(bvec2(bool(bool(! (! (! (false))))), false)))))))) && true))), false))))), true && _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))) || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))), ! (! (((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))) || (_GLF_DEAD(false))))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) + 0, ((int(5)) + 0) ^ 0)))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), 1 * (_GLF_IDENTITY(0, 0 | (0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(19.46) : _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), ! (! (true && _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false)))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool((false))), false || (bool(bool((false)))))))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(vec4(7822.1425, 9.8, 71.69, 397.062).b)), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 0u)))) | (_GLF_IDENTITY(workgroup_base + subgroup_base, uint(uvec3(workgroup_base + subgroup_base, 1u, 0u)))))) * 1u)) - 0u), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 0u))))) + subgroup_base)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)).y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, 0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) || false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), ! (! (_GLF_IDENTITY(injectionSwitch.x, float(mat3(_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), 1.0, 1.0, 1.0, abs(0.0), 0.0))), 0.0, 1.0, 0.0, sqrt(determinant(mat2(1.0, 0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, exp(0.0)))) > injectionSwitch.y)))), (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || false))), false, true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (bool(_GLF_IDENTITY(bvec3(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true)))))), false, false)), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), _GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true)))))), false, false)), false, false))), bvec2(bvec4(bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), false), false, true)), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), false), false, true))))), bvec2(bvec2(bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, (false) || false)), false, true)))))), false, false)), true, false))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         atomicStore(write_val, uint(virtual_gid), _GLF_IDENTITY(4, (4) | _GLF_IDENTITY(0, (0) + _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), 0 ^ ((0 >> _GLF_IDENTITY(int(2), int(2))))))), 64, 0);
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))));
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read_val = atomicLoad(write_val, 4, _GLF_IDENTITY(64, (64) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | 0))))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), (int(6)) << 0)), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> 0), 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), (int(6)) << 0)), clamp(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, (0) >> 0), 0))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 | (6))), (int(6)) << 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), 0 ^ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> 0), 0)))))))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, 1, 0, 1)), clamp(int(ivec4(0, 1, 0, 1)), int(ivec4(0, 1, 0, 1)), int(ivec4(0, 1, 0, 1)))))))), 0 | (min(_GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), 0 ^ (int(6))), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), int(ivec4(int(6), 1, 1, 1))), int(6), int(6))))), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) << 0)))))))))), 0);
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)) && _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(! (! ((_GLF_DEAD(false)))), (! (! _GLF_IDENTITY(((_GLF_DEAD(false))), false || (((_GLF_DEAD(false))))))) || false))))
  {
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | (0 >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   buf[virtual_gid] = uint(subgroupAllEqual(read_val));
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
