#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 mat2x3 _f0;
 mat4x2 _f1;
 vec3 _f2;
 uint read_val;
 vec2 _f3;
} ;

struct _GLF_struct_6 {
 uvec3 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_5 {
 mat2x4 _f0;
 bvec4 _f1;
 ivec3 _f2;
 mat3x2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_4 {
 bvec3 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_8 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 uvec4 _f3;
 _GLF_struct_7 _f4;
 ivec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
} ;

struct _GLF_struct_1 {
 vec3 _f0;
 vec2 _f1;
 vec4 _f2;
 bvec2 _f3;
 mat2 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_0 {
 mat2x4 _f0;
 ivec2 _f1;
 vec4 _f2;
 mat2 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
 vec4 _f1;
 _GLF_struct_0 _f2;
 _GLF_struct_1 _f3;
 mat2x3 _f4;
 _GLF_struct_2 _f5;
 uint _f6;
} ;

struct _GLF_struct_9 {
 mat4x2 _f0;
 _GLF_struct_3 _f1;
 uint _f2;
 _GLF_struct_8 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) / 1u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat4x2(1.0), _GLF_struct_3(mat3x4(1.0), vec4(1.0), _GLF_struct_0(mat2x4(1.0), ivec2(1), vec4(1.0), mat2(1.0), mat2x3(1.0)), _GLF_struct_1(vec3(1.0), vec2(1.0), vec4(1.0), bvec2(true), mat2(1.0), mat4x2(1.0)), mat2x3(1.0), _GLF_struct_2(vec4(1.0)), _GLF_IDENTITY(1u, (1u) - _GLF_IDENTITY(0u, 0u ^ (0u)))), 1u, _GLF_struct_8(_GLF_struct_4(bvec3(true), mat4x3(1.0)), _GLF_struct_5(mat2x4(1.0), bvec4(true), _GLF_IDENTITY(ivec3(1), ivec3(0, 0, 0) ^ (_GLF_IDENTITY(ivec3(1), clamp(ivec3(1), ivec3(1), ivec3(1))))), mat3x2(1.0), uvec2(1u)), _GLF_struct_6(uvec3(1u), mat2(1.0)), uvec4(1u), _GLF_struct_7(mat2x3(1.0), mat4x2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4.8)))), _GLF_IDENTITY(vec3(1.0), vec3(_GLF_IDENTITY(vec3(vec3(1.0)), max(_GLF_IDENTITY(vec3(vec3(1.0)), min(vec3(vec3(1.0)), vec3(vec3(1.0)))), vec3(vec3(1.0)))))), atomicLoad(write_val, 4, 64, 0), vec2(1.0)), ivec3(1), bvec3(true)));
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f4.read_val, max(_GLF_IDENTITY(_GLF_struct_replacement_9._f3._f4.read_val, (_GLF_IDENTITY(true, (true) && true) ? _GLF_struct_replacement_9._f3._f4.read_val : _GLF_FUZZED(subgroup_size))), _GLF_struct_replacement_9._f3._f4.read_val))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
