#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 mat2x4 _f0;
 bool _f1;
 vec4 _f2;
 bvec3 _f3;
 mat3x4 _f4;
 mat3 _f5;
 mat3 _f6;
} ;

struct _GLF_struct_13 {
 vec3 _f0;
 _GLF_struct_12 _f1;
 uint workgroup_id;
 uint _f2;
} ;

struct _GLF_struct_10 {
 mat4 _f0;
 mat3x2 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
 mat3x2 _f1;
 mat4 _f2;
 bvec4 _f3;
 bvec2 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_11 {
 mat2 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_14 {
 _GLF_struct_11 _f0;
 _GLF_struct_13 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 mat2x3 _f1;
 mat4 _f2;
} ;

struct _GLF_struct_7 {
 uvec2 _f0;
 mat3x2 _f1;
 mat2x4 _f2;
 _GLF_struct_6 _f3;
} ;

struct _GLF_struct_4 {
 uvec2 _f0;
 mat3 _f1;
 vec4 _f2;
 mat4x3 _f3;
 ivec4 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_3 {
 vec4 _f0;
 bvec4 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 mat4 _f1;
 bvec2 _f2;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 mat3 _f1;
 vec4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 bvec2 _f3;
 _GLF_struct_4 _f4;
} ;

struct _GLF_struct_8 {
 _GLF_struct_5 _f0;
 uint subgroup_base;
 _GLF_struct_7 _f1;
 mat2x3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_0 {
 float _f0;
 uint workgroup_size;
 mat3x4 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))) && true))), ! (! (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), max(vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), min(vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), vec2(_GLF_IDENTITY(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0), transpose(transpose(mat4(injectionSwitch, log(round(length(normalize(1.0)))), 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))))))[0], injectionSwitch[1])), (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y))))))))))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), false, true))))))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              {
                               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, ~ (~ (5))))) >> 0)))); _injected_loop_counter ++)
                                {
                                 for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((_GLF_IDENTITY(1, 0 + (1)) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))) || false); _injected_loop_counter ++)
                                  {
                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.1)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(6.1))))))) || false))
                                    {
                                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 & (33889 & 80128), clamp(0 & (33889 & 80128), _GLF_IDENTITY(0 & (33889 & 80128), max(0 & (33889 & 80128), _GLF_IDENTITY(0 & (33889 & 80128), clamp(0 & (33889 & 80128), 0 & (33889 & 80128), 0 & (33889 & 80128))))), 0 & (33889 & 80128))))); _injected_loop_counter --)
                                      {
                                       for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))), min(~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))), ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1))))))), (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(70293) : 1)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))), bool(bool((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))))) || false)), ((! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))) && _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))) || false)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), false, false))))), (bool(_GLF_IDENTITY(bvec3((injectionSwitch.x < injectionSwitch.y), false, false), bvec3(bvec3(bvec3((injectionSwitch.x < injectionSwitch.y), false, false)))))) && true))))))) || false), ! (! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))), false || ((! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))))))))))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(max(0, 0), (max(0, 0)) | (_GLF_IDENTITY(max(0, 0), min(max(0, 0), max(0, 0)))))), 0, 0)), 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(int(ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0)), (int(ivec3(_GLF_IDENTITY(0, max(0, 0)), 0, 0))) - 0))))))
                                        {
                                         return;
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
  }
 else
  {
  }
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(1.0, _GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) + 0u, (_GLF_IDENTITY((gl_WorkGroupSize.x) + 0u, ((gl_WorkGroupSize.x) + 0u) | 0u)) | 0u)), mat3x4(1.0));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec3(int(2), (1 & 1), 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(2, min(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(27982) : _GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 0 ^ (2)), 2))))) >> (0 >> _GLF_IDENTITY(int(0), int(0)))), 2))), int(2))) / 1), (_GLF_IDENTITY(int(2), int(2))) >> 0)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, max(1, 1))), clamp(int(_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_injected_loop_counter) : int(1))))), 1)), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) ^ 0), 1))), int(_GLF_IDENTITY(1, max(1, 1))), int(_GLF_IDENTITY(1, max(1, 1))))), int(1))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(61163) : _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 | 0, int(ivec2(1 | 0, int(_GLF_ONE(1.0, injectionSwitch.y))))))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         do
                          {
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   do
                                    {
                                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                          {
                                           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), (_GLF_IDENTITY((false), false || ((false)))) || false), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false || _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))), true, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (false), (false || (false)) && true))))))))), ((_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (false), (false || (false)) && true)))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                                            {
                                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                              }
                                             else
                                              {
                                               do
                                                {
                                                 do
                                                  {
                                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))) || false), (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))))))
                                                    {
                                                    }
                                                   else
                                                    {
                                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                                      {
                                                      }
                                                     else
                                                      {
                                                       do
                                                        {
                                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                                          {
                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                            {
                                                             do
                                                              {
                                                               for(int _injected_loop_counter = (0 & 19872); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                {
                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                  {
                                                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                      {
                                                                      }
                                                                     else
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-24.05) : 1.0))))) / vec2(1.0, 1.0))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(471.632)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))))), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0)), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)), mix(vec2(_GLF_FUZZED((vec2(1865.8409, 4.7).s + -0.5)), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))[1]), vec2((_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)))[0], _GLF_FUZZED(485.871)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))) / vec2(1.0, 1.0))).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(1.0, 1.0) * ((injectionSwitch))), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0))) / vec2(1.0, 1.0))).y))) || false)))))))
                                                                        {
                                                                        }
                                                                       else
                                                                        {
                                                                         do
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(-918.131) : (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0))) / vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, sqrt(0.0)))).y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(-918.131) : (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0))) / vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, sqrt(0.0)))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), (false ? _GLF_FUZZED(-918.131) : (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) * mat2(1.0))) / vec2(1.0, 1.0)))), 0.0, 0.0, 0.0, sqrt(0.0)))).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, true, false)))))))
                                                                            {
                                                                            }
                                                                           else
                                                                            {
                                                                             do
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                {
                                                                                }
                                                                               else
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                    {
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) - (0 << _GLF_IDENTITY(int(0), int(0))))), ((0 | 0)) >> 0)); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))))
                                                                                      {
                                                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                                        {
                                                                                         for(int _injected_loop_counter = ((-43796 / -8708) & (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(int(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), clamp(int(int(_GLF_ONE(1.0, injectionSwitch.y))), int(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(9122.6379)))) + 0.0)))), int(int(_GLF_ONE(1.0, injectionSwitch.y)))))))) - 0), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_IDENTITY(int(int(_GLF_ONE(1.0, injectionSwitch.y))), clamp(int(int(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec2(1.0, 0.0), (vec2(1.0, 0.0)) / vec2(1.0, 1.0)))), injectionSwitch.y))), int(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), int(int(_GLF_ONE(1.0, injectionSwitch.y)))))))) - 0)) / (1 ^ 0))); _injected_loop_counter ++)
                                                                                          {
                                                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                                                            {
                                                                                             return;
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                  }
                                                                                }
                                                                              }
                                                                             while(_GLF_WRAPPED_LOOP(false));
                                                                            }
                                                                          }
                                                                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                        }
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                                                            }
                                                           else
                                                            {
                                                            }
                                                          }
                                                         else
                                                          {
                                                          }
                                                        }
                                                       while(_GLF_WRAPPED_LOOP(false));
                                                      }
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                               while(_GLF_WRAPPED_LOOP(false));
                                              }
                                            }
                                          }
                                         else
                                          {
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec2(true, true))), true)))));
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))), true && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))))), (bool(bool(! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (false)), false), bvec2(bvec2(bvec2(false, false)))))))))) && true)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)) > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch)).y, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))), ! (! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.4), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(63.54)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), injectionSwitch)).y, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)))))))), ! (! (! ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, _GLF_IDENTITY(true, true && (true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))), bool(bool(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true))))))))))))))))))))))))))) && true))));
    }
  }
 else
  {
  }
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(_GLF_struct_11(mat2(1.0), _GLF_struct_9(ivec3(1), mat3x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-34.53) : _GLF_IDENTITY(min(1.0, 1.0), clamp(min(1.0, 1.0), min(1.0, 1.0), min(1.0, 1.0))))))), mat4(1.0), bvec4(true), bvec2(true), uvec4(1u)), _GLF_struct_10(_GLF_IDENTITY(mat4(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat4(-0.3, _GLF_IDENTITY(33.59, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(6.2), min(_GLF_IDENTITY(_GLF_FUZZED(6.2), _GLF_IDENTITY(float(vec2(_GLF_FUZZED(6.2), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))))), (float(vec2(_GLF_FUZZED(6.2), _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))))) / 1.0)), _GLF_IDENTITY(_GLF_FUZZED(6.2), clamp(_GLF_FUZZED(6.2), _GLF_FUZZED(6.2), _GLF_FUZZED(6.2)))))), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))), injectionSwitch)).y)))), float(mat2x3(_GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(6.2, max(6.2, _GLF_IDENTITY(6.2, max(6.2, _GLF_IDENTITY(6.2, max(6.2, 6.2)))))))), float(_GLF_IDENTITY(33.59, _GLF_IDENTITY(0.0 + (33.59), max(0.0 + (33.59), 0.0 + (33.59))))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(_GLF_IDENTITY(5.9, (true ? 5.9 : _GLF_FUZZED(678.146))))), vec2(((injectionSwitch) * mat2(1.0))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], 1.0 * (((injectionSwitch) * mat2(1.0))[1]))), bvec2(true, true)))), injectionSwitch)).y)))), clamp(mix(float(_GLF_FUZZED(6.2)), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(mat2(1.0) * ((injectionSwitch) * mat2(1.0)), vec2(1.0, 1.0) * (mat2(1.0) * ((injectionSwitch) * mat2(1.0))))))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(1.0)), mat2(1.0) * (((injectionSwitch) * mat2(1.0))))[1]), bvec2(true, _GLF_IDENTITY(true, (true) && true))))), injectionSwitch)).y)))), mix(float(_GLF_FUZZED(6.2)), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2((_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0)) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))), injectionSwitch)).y)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(6.2)), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))), injectionSwitch)).y)))), clamp(mix(float(_GLF_IDENTITY(_GLF_FUZZED(6.2), min(_GLF_FUZZED(6.2), _GLF_FUZZED(6.2)))), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2(((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) * mat2(1.0))) - mat2(0.0, 0.0, 0.0, 0.0)))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))), injectionSwitch)).y)))), mix(float(_GLF_FUZZED(6.2)), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), false, _GLF_IDENTITY(true, true && (true))))))))))), injectionSwitch), (true ? max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))), _GLF_IDENTITY(injectionSwitch, sqrt(vec2(0.0, 0.0)) + (injectionSwitch))) : _GLF_FUZZED(vec2(8594.9234, 236.907))))).y)))), mix(float(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(6.2, min(6.2, _GLF_IDENTITY(6.2, clamp(6.2, _GLF_IDENTITY(6.2, clamp(6.2, 6.2, 6.2)), 6.2))))), max(_GLF_FUZZED(_GLF_IDENTITY(6.2, min(6.2, _GLF_IDENTITY(6.2, clamp(6.2, _GLF_IDENTITY(6.2, clamp(6.2, 6.2, 6.2)), 6.2))))), _GLF_FUZZED(_GLF_IDENTITY(6.2, min(6.2, _GLF_IDENTITY(6.2, clamp(6.2, _GLF_IDENTITY(6.2, clamp(6.2, 6.2, 6.2)), 6.2)))))))), float(_GLF_IDENTITY(33.59, 0.0 + (33.59))), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-68.85)), vec2(_GLF_FUZZED(-38.43), (injectionSwitch)[1]), bvec2(false, true))), 1.0, 0.0)))) * mat2(1.0), mix(vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(5.9)), vec2((_GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(_GLF_IDENTITY(mat3(mat2(1.0)), (mat3(mat2(1.0))) * mat3(1.0)))))[0], _GLF_IDENTITY(((injectionSwitch) * mat2(1.0))[1], 1.0 * (((injectionSwitch) * mat2(1.0))[1]))), vec2(_GLF_FUZZED(-1.1), _GLF_FUZZED(38.33)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))), injectionSwitch)).y)))))))), 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-848.207))))), 0.0, 1.0, round(length(normalize(vec2(1.0, 1.0)))))))), -1.4, -629.174, -4844.9505, -9.2, 5471.7817, -88.40, 9639.8396, 41.62, _GLF_IDENTITY(_GLF_IDENTITY(-778.730, mix(float(_GLF_FUZZED(9.7)), float(-778.730), bool(true))), 1.0 * (-778.730)), _GLF_IDENTITY(2036.3136, float(mat3(2036.3136, 0.0, 1.0, log(1.0), 1.0, 1.0, determinant(mat2(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec3(1.0, 1.0, 1.0))))), mix(float(_GLF_IDENTITY(1.0, (1.0) / round(length(normalize(vec3(1.0, 1.0, 1.0)))))), float(_GLF_FUZZED(6370.4756)), bool(false))), 1.0))))), cos(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, abs(1.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))))), 1.0, abs(1.0), 1.0, tan(0.0)))), 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2293.7324)), bool(false))) : _GLF_FUZZED(vec3(_GLF_IDENTITY(1.2, float(_GLF_IDENTITY(mat4x2(1.2, 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0)), 0.0, 1.0), transpose(transpose(mat4x2(1.2, 1.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), 1.0)))))), -221.327, 75.56)[0]))), 1.0)))), log(1.0)))), 81.68, -56.65, 5.8, -447.723)) : mat4(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)) : _GLF_FUZZED(-186.168)))))), mat3x2(1.0), mat3x4(1.0))), _GLF_struct_13(vec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(min(1.0, 1.0), max(min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-120.661)), bool(false))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(sign(5487.2848))))))), min(1.0, 1.0)))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-39.86)), bool(false))))), max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), float(mat4x2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(max(1.0, 1.0), (max(1.0, 1.0)) - 0.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - abs(0.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, 1.0, round(length(normalize(1.0))), 1.0, 1.0))))), 1.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(258.058)), float(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0), transpose(transpose(mat4x3(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(1.0, 0.0)), dot(vec2(0.0, 1.0), vec2(1.0, 0.0))), tan(0.0), _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)))))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(9052.2007, 39.11, -23.84, 1.7))))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat2(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4.0))), injectionSwitch.y), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(9052.2007, 39.11, -23.84, 1.7))))) : _GLF_FUZZED(8.9), sqrt(abs(0.0)) + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? float(_GLF_IDENTITY(mat2(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)), _GLF_ONE(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4.0))), injectionSwitch.y), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-28.67)), float(1.0), bool(true)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(9052.2007, 39.11, -23.84, 1.7))))) : _GLF_FUZZED(8.9)))))))), bool(true))), min(1.0, 1.0))))), _GLF_struct_12(mat2x4(1.0), true, vec4(1.0), bvec3(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))), mat3x4(1.0), mat3(1.0), mat3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, mix(float(1.0), _GLF_IDENTITY(float(_GLF_FUZZED(-15.02)), (true ? float(_GLF_FUZZED(-15.02)) : _GLF_FUZZED(40.60))), bool(false))), 1.0)))), gl_WorkGroupID.x, 1u), mat2x3(1.0));
 uint workgroup_base = _GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_14._f1.workgroup_id;
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_5(_GLF_struct_1(_GLF_IDENTITY(vec4(1.0), clamp(vec4(1.0), _GLF_IDENTITY(vec4(1.0), max(vec4(1.0), vec4(1.0))), vec4(1.0))), mat3(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mix(float(float(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), float(_GLF_FUZZED(-4.5)), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(mat4x3(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0))), float(_GLF_IDENTITY(1.0, min(1.0, 1.0))))), bool(true)))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0))), _GLF_struct_2(ivec2(1), mat4(1.0), bvec2(true)), _GLF_struct_3(vec4(1.0), bvec4(true), vec3(1.0)), bvec2(true), _GLF_struct_4(uvec2(1u), mat3(1.0), vec4(1.0), mat4x3(1.0), ivec4(1), mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(760.600)), float(1.0), bool(true)))))), subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u ^ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size))))))), ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_size)), 0u + ((_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u)), clamp(~ (subgroup_size), ~ (subgroup_size), _GLF_IDENTITY(~ (subgroup_size), min(~ (subgroup_size), ~ (subgroup_size)))))))))), 0u ^ _GLF_IDENTITY(_GLF_IDENTITY(((~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(((~ (subgroup_size))), uint(uvec3(_GLF_IDENTITY(((~ (subgroup_size))), (((~ (subgroup_size)))) | (1u ^ 1u)), 1u, 0u))), max(((~ (subgroup_size))), ((~ (subgroup_size)))))) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), 0u | (_GLF_IDENTITY(((~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(((~ (subgroup_size))), uint(uvec3(_GLF_IDENTITY(((~ (subgroup_size))), (((~ (subgroup_size)))) | (1u ^ 1u)), 1u, 0u))), max(((~ (subgroup_size))), ((~ (subgroup_size)))))) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))))))), _GLF_struct_7(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) / uvec2(1u, 1u)), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(1u), (uvec2(1u)) / uvec2(1u, 1u)))), mat3x2(1.0), mat2x4(1.0), _GLF_struct_6(mat2x4(1.0), mat2x3(1.0), mat4(1.0))), mat2x3(1.0), ivec2(1));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u, clamp(_GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u, _GLF_IDENTITY(_GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u, ~ (~ (_GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u))), _GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u)))), clamp(~ (_GLF_IDENTITY(~ ((workgroup_base)), _GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u)), ~ (_GLF_IDENTITY(~ ((workgroup_base)), _GLF_IDENTITY((~ (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | 0u))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u)), ~ (_GLF_IDENTITY(~ ((workgroup_base)), _GLF_IDENTITY((~ ((workgroup_base))), (true ? (~ ((workgroup_base))) : _GLF_FUZZED(subgroup_local_id))) / 1u))))), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ _GLF_IDENTITY(((workgroup_base)), (0u | 0u) | (_GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) - 0u)))) / 1u)))) / 1u)))), ((~ _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((workgroup_base)), (_GLF_IDENTITY(~ _GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) | (_GLF_IDENTITY(((workgroup_base)), (true ? ((workgroup_base)) : _GLF_FUZZED(workgroup_base))))), uint(uvec3(~ ((workgroup_base)), 0u, 0u)))) / 1u)), (~ (_GLF_IDENTITY(~ ((workgroup_base)), (_GLF_IDENTITY(~ ((workgroup_base)), uint(uvec3(~ ((workgroup_base)), 0u, 0u)))) / 1u))) - 0u)), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), _GLF_IDENTITY((~ (_GLF_IDENTITY((workgroup_base), (true ? _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))) : _GLF_FUZZED(28085u))))), min((~ (_GLF_IDENTITY((workgroup_base), (true ? _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))) : _GLF_FUZZED(28085u))))), (~ (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(max((workgroup_base), (workgroup_base)), (_GLF_IDENTITY(max((workgroup_base), (workgroup_base)), (max((workgroup_base), (workgroup_base))) / 1u)) | 0u)), (_GLF_IDENTITY(true ? _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))) : _GLF_FUZZED(28085u), _GLF_IDENTITY(uint(uvec2(true ? _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))) : _GLF_FUZZED(28085u), 1u)), (_GLF_IDENTITY(true, (true) && true) ? uint(uvec2(true ? _GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))) : _GLF_FUZZED(28085u), 1u)) : _GLF_FUZZED(113561u)))))))))) / 1u)))) / 1u))))) | ((~ _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ ((workgroup_base)), (~ ((workgroup_base))) / 1u)), clamp(_GLF_IDENTITY((_GLF_IDENTITY(~ ((workgroup_base)), (~ ((workgroup_base))) / 1u)), ((_GLF_IDENTITY(~ ((workgroup_base)), (~ ((workgroup_base))) / 1u))) << 0u), (_GLF_IDENTITY(~ ((workgroup_base)), (_GLF_IDENTITY(~ ((workgroup_base)), (false ? _GLF_FUZZED(subgroup_id) : ~ ((workgroup_base))))) / 1u)), (_GLF_IDENTITY(~ ((workgroup_base)), (~ ((workgroup_base))) / 1u))))), (_GLF_IDENTITY((workgroup_base), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), 0u), (true ? uvec2(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), 0u) : _GLF_FUZZED(uvec2(92065u, 198813u)))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), _GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), _GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), (true ? _GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)) | (workgroup_base)))), (~ ((workgroup_base))) / 1u) : _GLF_FUZZED(subgroup_local_id))))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ _GLF_IDENTITY(((workgroup_base)), (((workgroup_base))) / 1u)) / 1u), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u)) >> 0u), _GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / 1u), (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)))), (~ ((workgroup_base))) / _GLF_IDENTITY(1u, max(1u, 1u)))) + 0u)))))) / 1u))))))) + _GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_struct_replacement_8.subgroup_base), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))) ? ~ (_GLF_struct_replacement_8.subgroup_base) : _GLF_FUZZED(packUnorm4x8(vec4(961.804, -3.3, 4.6, -8068.8906))))), (true ? _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_struct_replacement_8.subgroup_base), ((_GLF_struct_replacement_8.subgroup_base)) >> 0u), (~ (_GLF_struct_replacement_8.subgroup_base)) << 0u) : _GLF_FUZZED(num_workgroup)))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_8.subgroup_base), (true ? _GLF_IDENTITY(~ (_GLF_struct_replacement_8.subgroup_base), (~ (_GLF_struct_replacement_8.subgroup_base)) << 0u) : _GLF_FUZZED(num_workgroup))))) << 0u)), uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_struct_replacement_8.subgroup_base, min(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base)), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_base, (_GLF_struct_replacement_8.subgroup_base) << 0u), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + _GLF_struct_replacement_8.subgroup_base), max((_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, 0u ^ (_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))) + _GLF_struct_replacement_8.subgroup_base), (workgroup_base + _GLF_struct_replacement_8.subgroup_base))))))), _GLF_IDENTITY(0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + _GLF_struct_replacement_8.subgroup_base))), (_GLF_IDENTITY(0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + _GLF_struct_replacement_8.subgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + _GLF_struct_replacement_8.subgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + _GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u) + _GLF_struct_replacement_8.subgroup_base))) << 0u), workgroup_base + _GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, 0u | (workgroup_base + _GLF_struct_replacement_8.subgroup_base))))), _GLF_IDENTITY(~ (~ (0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, (workgroup_base + _GLF_struct_replacement_8.subgroup_base) * 1u), _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) ^ 0u), workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), workgroup_base)) + _GLF_struct_replacement_8.subgroup_base))))), (~ (~ _GLF_IDENTITY((0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_base, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_base, ~ (~ (_GLF_struct_replacement_8.subgroup_base))))))))), ~ (~ (_GLF_IDENTITY((0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base)))), 0u + (_GLF_IDENTITY((0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(workgroup_base + _GLF_struct_replacement_8.subgroup_base, _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base)))), uint(uvec2((0u + (_GLF_IDENTITY(workgroup_base + _GLF_struct_replacement_8.subgroup_base, clamp(workgroup_base + _GLF_IDENTITY(_GLF_struct_replacement_8.subgroup_base, (_GLF_struct_replacement_8.subgroup_base) | (_GLF_struct_replacement_8.subgroup_base)), workgroup_base + _GLF_struct_replacement_8.subgroup_base, workgroup_base + _GLF_struct_replacement_8.subgroup_base)))), 1u)))))))))) >> 0u))) * 1u))))))) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((true && (false)), ! (! ((true && (false))))), false || (_GLF_IDENTITY(! (true && (false)), _GLF_IDENTITY(bool(bvec4(! (true && (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false || (bool(bvec4(! (true && (false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) || false))))) && true)))), clamp(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4.7))), injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(-9019.5206)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((vec2(-9.1, -8.1) * mat2(22.06, -6454.3997, _GLF_IDENTITY(57.61, min(_GLF_IDENTITY(57.61, (57.61) / 1.0), 57.61)), 175.477))) : injectionSwitch)).x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2(mat2(mat2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2(mat2(mat2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))), float(mat4(float(_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat2(mat2(mat2(_GLF_ONE(1.0, injectionSwitch.y), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0)))) - 0.0)), 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_ONE(1.0, injectionSwitch.y), 1.0), vec2(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 1.0, 1.0, 1.0, 0.0)))) / 1.0)), float(_GLF_FUZZED(-9298.8926)), bool(false)))))), 1.0, round(length(_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (_GLF_IDENTITY(normalize(vec3(1.0, 1.0, 1.0)), (normalize(vec3(1.0, 1.0, 1.0))) / vec3(1.0, 1.0, 1.0))) * vec3(1.0, 1.0, 1.0)))), abs(1.0), sqrt(0.0), abs(1.0), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4979.3230))), 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))), false, false))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(-0.8, -2.7)))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(mix(float(_GLF_FUZZED(681.433)), float(injectionSwitch[0]), bool(true)), mix(float(_GLF_FUZZED((vec4(228.555, -4.5, 98.66, 6140.9242) * mat3x4(-4.5, -97.28, -1.0, -6.9, 365.176, -3.2, -5.7, 5.7, -8.8, -3502.2029, 0.7, 6.3)).r)), float(mix(_GLF_IDENTITY(float(_GLF_FUZZED(681.433)), (float(_GLF_FUZZED(681.433))) * 1.0), float(injectionSwitch[0]), bool(true))), bool(true)))), injectionSwitch[1])))), _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) / vec2(1.0, 1.0))).y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
        }
      }
    }
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, (_GLF_IDENTITY(write_val, max(write_val, _GLF_IDENTITY(write_val, max(_GLF_IDENTITY(write_val, (write_val) | (_GLF_IDENTITY(write_val, (write_val) / 1u))), write_val))))) << 0u), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(float(false)) : injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           do
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat3x2(0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 1.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(8.4, min(_GLF_IDENTITY(8.4, (8.4) / 1.0), _GLF_IDENTITY(8.4, (false ? _GLF_FUZZED(9.6) : 8.4))))), _GLF_FUZZED(-1.4)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]) - 0.0)) * 1.0)), bvec2(true, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bool(bool(! (_GLF_IDENTITY(true, bool(bool(true))))))))))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(true, ! (! (true))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bool(bool(! (_GLF_IDENTITY(true, bool(bool(true))))))))))))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false))))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(_GLF_IDENTITY(8.4, min(_GLF_IDENTITY(8.4, (8.4) / 1.0), _GLF_IDENTITY(8.4, (false ? _GLF_FUZZED(9.6) : 8.4))))), _GLF_FUZZED(-1.4)), clamp(vec2(_GLF_FUZZED(_GLF_IDENTITY(8.4, min(_GLF_IDENTITY(8.4, (8.4) / 1.0), _GLF_IDENTITY(8.4, (false ? _GLF_FUZZED(9.6) : 8.4))))), _GLF_FUZZED(-1.4)), vec2(_GLF_FUZZED(_GLF_IDENTITY(8.4, min(_GLF_IDENTITY(8.4, (8.4) / 1.0), _GLF_IDENTITY(8.4, (false ? _GLF_FUZZED(9.6) : 8.4))))), _GLF_FUZZED(-1.4)), vec2(_GLF_FUZZED(_GLF_IDENTITY(8.4, min(_GLF_IDENTITY(8.4, (8.4) / 1.0), _GLF_IDENTITY(8.4, (false ? _GLF_FUZZED(9.6) : 8.4))))), _GLF_FUZZED(-1.4)))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch)[1], (_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch)))[1]) - 0.0)) * 1.0)), bvec2(true, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bool(bool(! (_GLF_IDENTITY(true, bool(bool(true))))))))))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(true)))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bool(bool(! (_GLF_IDENTITY(true, bool(bool(true))))))))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bool(true)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bool(bool(! (_GLF_IDENTITY(true, bool(bool(true))))))))))), false || (! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(true)))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(true, bool(bool(true))))), bool(bool(bool(! (_GLF_IDENTITY(true, bool(bool(true)))))))))))))))))))), (injectionSwitch.x < injectionSwitch.y))))).x)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-9.0)))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), false || (_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)))))) && true)) && true); _injected_loop_counter ++)
              {
               _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (true ? _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) * 1u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (~ _GLF_IDENTITY((buf[virtual_gid] = uint(subgroupAllEqual(read_val))), ((buf[virtual_gid] = uint(subgroupAllEqual(read_val)))) + 0u))) : _GLF_FUZZED(subgroup_id))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_base), clamp(_GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base), _GLF_FUZZED(workgroup_base)))))) >> 0u);
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
          }
        }
      }
     else
      {
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
