#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)) && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (! (false || ((injectionSwitch.x > injectionSwitch.y))))))))))), (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), _GLF_IDENTITY(true, false || (true)) && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (false || ((injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(! (false || ((injectionSwitch.x > injectionSwitch.y))), false), bvec2(bvec4(bvec2(! (false || ((injectionSwitch.x > injectionSwitch.y))), false), false, true)))))))))))))) && true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bool((_GLF_IDENTITY(false, ! (! (false)))))), ! (! (bool(bool((_GLF_IDENTITY(false, ! (! (false)))))))))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(injectionSwitch), vec2(injectionSwitch), vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), vec2(mat4x2(vec2(vec4(injectionSwitch, 1.0, 0.0)), determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 1.0, 0.0))))))), vec2(injectionSwitch), vec2(injectionSwitch))))), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), clamp(vec2(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(min(injectionSwitch, injectionSwitch)) : injectionSwitch))), _GLF_IDENTITY(vec2(injectionSwitch), _GLF_IDENTITY(max(vec2(injectionSwitch), vec2(injectionSwitch)), (max(vec2(injectionSwitch), vec2(injectionSwitch))) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(vec2(injectionSwitch), min(_GLF_IDENTITY(vec2(injectionSwitch), vec2(mat2(_GLF_IDENTITY(vec2(injectionSwitch), clamp(_GLF_IDENTITY(vec2(injectionSwitch), min(vec2(injectionSwitch), vec2(injectionSwitch))), vec2(injectionSwitch), _GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) * mat2(1.0)))), 0.0, 1.0))), vec2(injectionSwitch))))), vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))), vec2(injectionSwitch)))))) / vec2(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-0.2)), (float(_GLF_FUZZED(-0.2))) - 0.0), float(1.0), bool(true))))).x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) * 1.0)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2(! (true), false)), ! (! (bool(bvec2(! (true), false))))))))))))), true, _GLF_IDENTITY(true, _GLF_IDENTITY((true), true && ((true))) || false))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, true))), true, true, true)), true && (bool(bvec4(_GLF_DEAD(false), true, true, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))))))))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)) | int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), max(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch))))) / vec2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, sin(0.0), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0), mat3x4(mat4(mat3x4(_GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, sin(0.0), 1.0, determinant(mat2(0.0, sqrt(0.0), 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))), 1.0)).x))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, (0) | 0))) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, sqrt(0.0), 1.0, 1.0), (vec4(0.0, sqrt(0.0), 1.0, 1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x))), ((_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0)) | int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0))), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).x)))) - 0) : _GLF_FUZZED(-27163)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))))), injectionSwitch)).y), (_GLF_ONE(1.0, injectionSwitch.y)) - 0.0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, true)))))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 | 0), ((1 | 0)) | ((1 | 0)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(2), int(2)), ~ (~ (0 << _GLF_IDENTITY(int(2), int(2))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && ((injectionSwitch.x > injectionSwitch.y)))), true, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-510.934)), bool(false))))) > injectionSwitch.y)))), true, true)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(cosh(-1745.0194)))) : _GLF_FUZZED(-2034.6604))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) || false), true))))))) || false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), true && ((injectionSwitch.x > injectionSwitch.y)))), true, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true && ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-510.934)), bool(false))))) > injectionSwitch.y)))), true, true)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat4(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))) : _GLF_FUZZED(cosh(-1745.0194)))) : _GLF_FUZZED(-2034.6604))))))), bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) && true)))), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) || false), true))))))) || false))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), mix(vec2(_GLF_FUZZED(347.465), (max(injectionSwitch, injectionSwitch))[1]), vec2(_GLF_IDENTITY((max(injectionSwitch, injectionSwitch))[0], ((max(injectionSwitch, injectionSwitch))[0]) / 1.0), _GLF_FUZZED(-827.632)), bvec2(true, false)))).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(839.518) : _GLF_IDENTITY(injectionSwitch.x, float(vec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), 0.0))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(6.8) : injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((-1.0 / log2(injectionSwitch))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, _GLF_IDENTITY(dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0)), dot(vec2(0.0, sqrt(1.0)), vec2(0.0, 1.0))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))).y, (false ? _GLF_FUZZED(6.8) : injectionSwitch.y)))))))) || false)))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))) && true))
                {
                 for(int _injected_loop_counter = (((1 ^ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | 0))) << _GLF_IDENTITY(int(0), int(0)))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(int(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(72547) : 5))), int(5)))), max(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), int(5)))) / 1), int(5)))), _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), min(_GLF_IDENTITY(int(5), min(int(5), int(5))), _GLF_IDENTITY(int(5), min(int(5), int(5))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) >> 0)))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) / 1)); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(faceforward(distance(_GLF_IDENTITY(vec4(-218.708, _GLF_IDENTITY(6.1, mix(float(6.1), float(_GLF_FUZZED(-901.844)), bool(false))), 854.620, -91.17), clamp(vec4(-218.708, _GLF_IDENTITY(6.1, mix(float(6.1), float(_GLF_FUZZED(-901.844)), bool(false))), 854.620, -91.17), vec4(-218.708, _GLF_IDENTITY(6.1, mix(float(6.1), float(_GLF_FUZZED(-901.844)), bool(false))), 854.620, -91.17), vec4(-218.708, _GLF_IDENTITY(6.1, mix(float(6.1), float(_GLF_IDENTITY(_GLF_FUZZED(-901.844), min(_GLF_IDENTITY(_GLF_FUZZED(-901.844), min(_GLF_FUZZED(-901.844), _GLF_FUZZED(-901.844))), _GLF_IDENTITY(_GLF_FUZZED(-901.844), (false ? _GLF_FUZZED(397.203) : _GLF_FUZZED(-901.844)))))), bool(false))), 854.620, -91.17))), vec4(5.2, -839.243, 7.1, -90.01)), -6.1, 488.022)), clamp(_GLF_FUZZED(_GLF_IDENTITY(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), _GLF_IDENTITY(-6.1, clamp(-6.1, _GLF_IDENTITY(-6.1, (-6.1) - 0.0), -6.1)), 488.022), mix(float(_GLF_FUZZED(-90.16)), float(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), _GLF_IDENTITY(-6.1, clamp(-6.1, _GLF_IDENTITY(-6.1, (-6.1) - 0.0), -6.1)), 488.022)), bool(true)))), _GLF_FUZZED(faceforward(distance(vec4(_GLF_IDENTITY(-218.708, mix(float(-218.708), float(_GLF_FUZZED(5801.8065)), bool(false))), 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), -6.1, 488.022)), _GLF_IDENTITY(_GLF_FUZZED(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), _GLF_IDENTITY(vec4(5.2, -839.243, 7.1, -90.01), vec4(0.0, 0.0, 0.0, 0.0) + (vec4(5.2, -839.243, 7.1, -90.01)))), -6.1, 488.022)), max(_GLF_IDENTITY(_GLF_FUZZED(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), -6.1, 488.022)), max(_GLF_IDENTITY(_GLF_FUZZED(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), -6.1, 488.022)), (true ? _GLF_IDENTITY(_GLF_FUZZED(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), -6.1, 488.022)), _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, sqrt(1.0), abs(1.0), 1.0, 0.0, _GLF_IDENTITY(log(cos(0.0)), max(log(cos(0.0)), log(cos(0.0)))))), max(_GLF_IDENTITY(float(mat2x3(0.0, _GLF_IDENTITY(sqrt(1.0), clamp(sqrt(1.0), sqrt(1.0), sqrt(1.0))), abs(1.0), 1.0, 0.0, log(cos(0.0)))), (float(mat2x3(0.0, sqrt(1.0), abs(1.0), 1.0, 0.0, log(cos(0.0))))) / 1.0), float(mat2x3(0.0, sqrt(1.0), abs(1.0), 1.0, 0.0, log(cos(0.0))))))) + (_GLF_FUZZED(faceforward(distance(vec4(-218.708, _GLF_IDENTITY(6.1, float(float(_GLF_IDENTITY(6.1, float(mat4(_GLF_IDENTITY(6.1, max(6.1, _GLF_IDENTITY(6.1, 0.0 + (6.1)))), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0, 1.0, 0.0, 0.0)))))), 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), -6.1, 488.022)))) : _GLF_FUZZED(680.462))), _GLF_FUZZED(faceforward(distance(vec4(-218.708, 6.1, 854.620, -91.17), vec4(5.2, -839.243, 7.1, -90.01)), _GLF_IDENTITY(-6.1, (false ? _GLF_FUZZED(mix(sign(-2.5), -42.37, -659.973)) : -6.1)), 488.022)))), _GLF_FUZZED(faceforward(distance(vec4(-218.708, 6.1, 854.620, _GLF_IDENTITY(-91.17, min(-91.17, _GLF_IDENTITY(-91.17, max(-91.17, -91.17))))), vec4(5.2, _GLF_IDENTITY(-839.243, (false ? _GLF_FUZZED(42.67) : -839.243)), 7.1, -90.01)), -6.1, 488.022)))))) : _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), (bool(bvec4(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))) || false)), _GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) : _GLF_FUZZED(4.9))), bool(bvec2(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) : _GLF_FUZZED(4.9))), false))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))), false || (_GLF_IDENTITY(bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! _GLF_IDENTITY((bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ((bool(bvec4(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))) || false))))))));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)))))), (! (_GLF_DEAD(false))) || false))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-158.344, mix(float(_GLF_FUZZED(876.549)), float(-158.344), bool(true)))), _GLF_FUZZED(-5.6)), _GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), false))), bvec2(bvec3(bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)), false))), false)))))), injectionSwitch)).x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / (_GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | (5))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, max(5, 5))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, max(5, 5))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0)), int(5))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) | 0), clamp(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), min(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(int(5), int(5)))) | ((_GLF_IDENTITY(int(5), int(5))))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), (~ ((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) - 0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << 0), ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))))), ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), 0 ^ (~ (_GLF_IDENTITY(int(5), int(5))))))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), ~ (~ (~ (_GLF_IDENTITY(int(5), int(5))))))))))))))))) << 0) >> _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) | (5))))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, max(5, 5))))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, max(5, 5))))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0)), int(5))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), (((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) | 0), clamp(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), min(_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ _GLF_IDENTITY((_GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(int(5), int(5)))) | ((_GLF_IDENTITY(int(5), int(5))))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), (~ ((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) - 0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5)))))))))) << 0), ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))))), ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), 0 ^ (~ (_GLF_IDENTITY(int(5), int(5))))))), max(~ (_GLF_IDENTITY(int(5), int(5))), ~ (_GLF_IDENTITY(int(5), int(5))))))))), ~ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), max(~ (_GLF_IDENTITY(int(5), int(5))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), int(5))), ~ (~ (~ (_GLF_IDENTITY(int(5), int(5))))))))))))))))) << 0) >> _GLF_IDENTITY(int(5), int(5))) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, int(ivec3(0, 0, 0))), 0)), (0) ^ (1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 >> _GLF_IDENTITY(int(4), int(4))) | (int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * (_GLF_ZERO(0.0, injectionSwitch.x)))))), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(4), int(4))) | (int(_GLF_ZERO(0.0, injectionSwitch.x))))), ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(0, (0) >> 0) >> _GLF_IDENTITY(int(4), int(4))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0) - 0) | _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) << 0)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter --, ~ (~ _GLF_IDENTITY((_injected_loop_counter --), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED((48995 | _injected_loop_counter)) : (_injected_loop_counter --)))))), 0 | ((_GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(~ (~ (_injected_loop_counter --)), (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | (1 ^ 1))) << 0)))) / 1))))))))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), mix(float(_GLF_FUZZED((2050.4228 * 115.037))), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true)))))), true), bvec3(bvec4(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true), false)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true), bvec3(bvec4(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), true), false)))), false, true)))), bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), false || (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0, min(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0, ((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0, min((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x))) - 0.0))))) > injectionSwitch.y))), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), true, false))), bvec2(bvec4(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), mat2(mat4x2(mat2(1.0)))) * (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)) : _GLF_FUZZED((mat2(2.1, 9139.3917, -61.61, -4.4) , vec2(-45.42, 6682.0900))))))).x > injectionSwitch.y))), false, false))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) || false)))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                }
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))))), bool(bvec4(bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, false, false))))))), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))))) && true)), ! (! (_GLF_DEAD(false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
            }
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
          {
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(0.0, 0.0) + (injectionSwitch)).y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), max(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))).x, log(1.0) + (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), max(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))).x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 | 0), bool(bool(_injected_loop_counter != (0 | 0))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (0) - 0)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, int(_GLF_IDENTITY(ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec2(-39831, 50524)))))))), ((0 | _GLF_IDENTITY(0, (0) - 0))) | ((0 | _GLF_IDENTITY(0, (0) - 0)))), max(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, int(_GLF_IDENTITY(ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec2(-39831, 50524)))))))), ((0 | _GLF_IDENTITY(0, (0) - 0))) | ((0 | _GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, int(_GLF_IDENTITY(ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec2(-39831, 50524)))))))), ((0 | _GLF_IDENTITY(0, (0) - 0))) | ((0 | _GLF_IDENTITY(0, (0) - 0)))), max(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, int(_GLF_IDENTITY(ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec2(-39831, 50524)))))))), ((0 | _GLF_IDENTITY(0, (0) - 0))) | ((0 | _GLF_IDENTITY(0, (0) - 0)))), _GLF_IDENTITY((0 | _GLF_IDENTITY(0, _GLF_IDENTITY((0) - 0, int(_GLF_IDENTITY(ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? ivec2((0) - 0, int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(ivec2(-39831, 50524)))))))), ((0 | _GLF_IDENTITY(0, (0) - 0))) | ((0 | _GLF_IDENTITY(0, (0) - 0))))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) ^ 0), 0)) | 0), (_GLF_IDENTITY((0 | 0), max(_GLF_IDENTITY((0 | 0), min((0 | 0), (0 | 0))), _GLF_IDENTITY((0 | 0), int(ivec4((0 | _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) ^ 0)))), 1, 1, 1)))))) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> 0)), int(0))))), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (0) - 0)), _GLF_IDENTITY(0, (0) << 0) | ((0 | _GLF_IDENTITY(0, (0) - 0)))))), bool(_GLF_IDENTITY(bool((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (0) - 0)), _GLF_IDENTITY(0, (0) << 0) | ((0 | _GLF_IDENTITY(0, (0) - 0))))))), (bool((_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | _GLF_IDENTITY(0, (0) - 0)), _GLF_IDENTITY(0, (0) << 0) | ((0 | _GLF_IDENTITY(0, (0) - 0)))))))) || false))) && true))), true, true, false))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), (clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.2)), bool(false))))), 1.0), min(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.2)), bool(false))))), 1.0), _GLF_IDENTITY(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.2)), bool(false))))), 1.0), min(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.2)), bool(false))))), 1.0), vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(3.2)), bool(false))))), 1.0))))) * (injectionSwitch)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), 0.0, 0.0, 1.0, 1.0, 0.0, exp(0.0)))))) - vec2(0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))) / vec2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), mix(float(_GLF_FUZZED(-4.6)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), min(_GLF_IDENTITY(1.0, 0.0 + (1.0)), _GLF_IDENTITY(1.0, 0.0 + (1.0))))), bool(true))), 1.0)))))).y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-599.371)), float(injectionSwitch.x), bool(true))) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.1)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) >> 0)); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, round(length(normalize(1.0))), 1.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0)), mix(float(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0))), float(_GLF_FUZZED((48.66 * 8176.8752))), bool(false)))), _GLF_IDENTITY((mat4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(1.0))), min(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), float(mat2x4(round(length(normalize(1.0))), 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))))), 1.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0)))), (false ? _GLF_FUZZED(mat4(44.27, -2913.3058, 291.862, 288.238, 67.72, 24.25, 65.12, -81.10, 7.8, 7.1, 37.55, 845.346, 9.4, -807.955, -11.98, -2.9)) : _GLF_IDENTITY((mat4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(1.0))), min(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), float(mat2x4(round(length(normalize(1.0))), 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))))), 1.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0)))), (true ? (mat4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(1.0))), min(round(length(normalize(1.0))), _GLF_IDENTITY(round(length(normalize(1.0))), float(mat2x4(round(length(normalize(1.0))), 0.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0))))), 1.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0)))) : _GLF_FUZZED(mat4(66.59, -8483.0374, 6.2, 4688.4827, 8.8, 6.6, 7.5, -2601.3141, 97.36, -727.708, -1.4, -6.7, 3.6, 63.62, 872.017, 442.361)))))) * mat4(1.0))), (float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, sqrt(0.0), 1.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0))), (mat4(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 0.0))), sqrt(0.0), 1.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, abs(1.0), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, length(0.0), 0.0, 0.0, 0.0)))) * mat4(1.0)))) * 1.0)) > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (_GLF_IDENTITY(0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(int(8), 1, 0)), min(_GLF_IDENTITY(int(ivec3(int(8), 1, 0)), (int(ivec3(int(8), 1, 0))) << 0), _GLF_IDENTITY(int(ivec3(int(8), 1, 0)), (int(ivec3(int(8), 1, 0))) | 0))), (-64858 & 0) ^ (int(ivec3(int(_GLF_IDENTITY(8, min(8, _GLF_IDENTITY(8, max(_GLF_IDENTITY(8, 1 * (8)), 8))))), 1, 0))))), _GLF_IDENTITY(int(8), (int(8)) << 0)), 1 * (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(8), _GLF_IDENTITY(int(ivec3(int(8), 1, 0)), (-64858 & 0) ^ (int(ivec3(int(_GLF_IDENTITY(8, (8) ^ 0)), 1, 0))))), _GLF_IDENTITY(int(8), (int(8)) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1), min(~ (1), ~ (1))), (_GLF_IDENTITY(~ (1), min(~ (1), ~ (1)))) / 1))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) << 0)))) + 0), _GLF_IDENTITY(1, 0 | (1))))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (70067 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) - 0.0) > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((5738.4427 * 3.3)), _GLF_FUZZED(-703.882)), bvec2(false, false))), (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)).x) - 0.0) > injectionSwitch.y))))))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (0)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_IDENTITY(true, true && (true)), true))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _injected_loop_counter)) != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)))))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, abs(1.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), min(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), mix(float(_GLF_FUZZED(-1.9)), float(dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), bool(true))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))))))) < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))))))) && (_GLF_DEAD(false))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false))
              barrier();
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0) * ((injectionSwitch))) * mat2(1.0)), injectionSwitch))) * vec2(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0))), 1.0, 1.0)), 1.0)).x > injectionSwitch.y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)) * workgroup_id, (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY(0u ^ (workgroup_size), (0u ^ (workgroup_size)) | (0u ^ (workgroup_size)))) * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(workgroup_id, (workgroup_id) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (_GLF_IDENTITY(workgroup_id, (workgroup_id) | uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) ^ 0u);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bvec4(true && (true), true, false, true))))))), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(true && (_GLF_IDENTITY(true, true && (true))), true && (_GLF_IDENTITY(true && (_GLF_IDENTITY(true, true && (true))), ! (_GLF_IDENTITY(! (true && (_GLF_IDENTITY(true, true && (true)))), (! (true && (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), true && (true))))) || false)))))))))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))), ! (! (bool(bool(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))))))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(6.5, _GLF_IDENTITY(5.4, (5.4) - 0.0))))).x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), false || (bool(bvec4(true, true, false, true))))), bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))), _GLF_IDENTITY((true) || false, ! (! ((_GLF_IDENTITY(true, true && (true))) || false))))), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), false || (bool(bvec4(true, true, false, true))))), bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))), _GLF_IDENTITY((true) || false, ! (! ((_GLF_IDENTITY(true, true && (true))) || false))))))))))) - 0.0, _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0), mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0))))))).x, mix(float(_GLF_FUZZED(7.4)), float(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(-8.2, (-8.2) - 0.0)), _GLF_FUZZED(7.7)), bvec2(false, false))))).x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), false || ((_GLF_IDENTITY(! (true), ! (! (! (true))))))))))), (bool(_GLF_IDENTITY(true, _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(true, ! (! (true))))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))))) || false))))) - 0.0), (true ? (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat2x3(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0))), 0.0, 0.0, 0.0, sqrt(0.0))))).x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat2x3(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0))), 0.0, 0.0, 0.0, sqrt(0.0))))).x, 0.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), min(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))))))), 1.0 * ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat2x3(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0))), 0.0, 0.0, 0.0, sqrt(0.0))))).x, float(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), vec2(mat2x3(_GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), clamp((injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0), (injectionSwitch) + vec2(0.0, 0.0))), 0.0, 0.0, 0.0, sqrt(0.0))))).x, 0.0, 0.0, 1.0, 0.0, tan(0.0), 1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(1.0, 1.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), min(mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))), mix(float(_GLF_FUZZED(7.4)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), bool(bvec3(bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (true) && true) && (_GLF_IDENTITY(true, ! (! (true)))))))), (bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))) || false)))))) || _GLF_IDENTITY(false, ! (! (false)))))))))))) - _GLF_IDENTITY(0.0, (0.0) / 1.0)) : _GLF_FUZZED(float(true)))) - 0.0))) * _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (1.0) / 1.0)))) / 1.0), 1.0, 0.0, determinant(mat2(1.0, log(1.0), 0.0, 1.0)), 0.0), (mat2x4(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), sqrt(1.0), 0.0, sqrt(1.0), 0.0, 1.0, log(exp(0.0)), 1.0))), 0.0, 1.0, 1.0, 0.0, determinant(mat2(1.0, log(1.0), 0.0, 1.0)), 0.0)) + mat2x4(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, sqrt(0.0), 1.0), transpose(transpose(mat2x4(0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, sqrt(0.0), 1.0)))))), 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - sqrt(0.0)), 0.0, 0.0, 0.0, 0.0))))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, abs(0.0), 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - mat3(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), max(_GLF_IDENTITY(min(0.0, 0.0), _GLF_IDENTITY(clamp(min(0.0, 0.0), min(0.0, 0.0), min(0.0, 0.0)), mix(float(clamp(min(0.0, 0.0), min(0.0, 0.0), min(0.0, 0.0))), float(_GLF_FUZZED((true ? 2.7 : 74.82))), bool(false)))), min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(65.52)), float(0.0), bool(true))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, log(1.0), 1.0, 0.0, round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, log(abs(1.0)), 1.0, 0.0, 0.0, 1.0), (mat4x3(0.0, log(1.0), 1.0, 0.0, round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, log(abs(1.0)), 1.0, 0.0, 0.0, 1.0)) * mat4(1.0)))), determinant(mat2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0), mix(float(_GLF_FUZZED(-4.0)), float(_GLF_IDENTITY(1.0, (1.0) - determinant(mat4(0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0), (mat3(injectionSwitch.y, 1.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), mix(float(max(0.0, 0.0)), float(_GLF_FUZZED(vec3(822.614, 4.5, -474.478).r)), bool(false)))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(vec3(vec3(0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(mat3x4(1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), mix(float(max(0.0, 0.0)), float(_GLF_FUZZED(vec3(822.614, 4.5, -474.478).r)), bool(false)))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(vec3(vec3(0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))))), 1.0 * (float(mat3x4(1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), mix(float(max(0.0, 0.0)), float(_GLF_FUZZED(vec3(822.614, 4.5, -474.478).r)), bool(false)))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(vec3(vec3(0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))))))) : _GLF_FUZZED(determinant(mat4(-55.96, 1.3, 6.6, -78.11, 99.89, -4470.3292, 960.075, 79.21, -159.879, 49.63, 7.1, -5.8, -5.7, 9.4, 91.92, -2.4))))))) - 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)) - mat3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(930.637)), bool(false))), cos(0.0)), vec2(0.0, 1.0)))), float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(710.566))), (0.0) * _GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)), dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), clamp(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), min(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), 0.0, 0.0)))), mix(float(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), 1.0, 1.0, 0.0, determinant(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)), (mat3(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec4(1.0, abs(0.0), 1.0, 1.0))), 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))) - mat3(0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), max(_GLF_IDENTITY(min(0.0, 0.0), _GLF_IDENTITY(clamp(min(0.0, 0.0), min(0.0, 0.0), min(0.0, 0.0)), mix(float(clamp(min(0.0, 0.0), min(0.0, 0.0), min(0.0, 0.0))), float(_GLF_FUZZED((true ? 2.7 : 74.82))), bool(false)))), min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))), 0.0)), 0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(65.52)), float(0.0), bool(true))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x3(0.0, log(1.0), 1.0, 0.0, round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, log(abs(1.0)), 1.0, 0.0, 0.0, 1.0), (mat4x3(0.0, log(1.0), 1.0, 0.0, round(length(normalize(1.0))), _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 0.0, log(abs(1.0)), 1.0, 0.0, 0.0, 1.0)) * mat4(1.0)))), determinant(mat2(round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 0.0, 1.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) / 1.0), mix(float(_GLF_FUZZED(-4.0)), float(_GLF_IDENTITY(1.0, (1.0) - determinant(mat4(0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0), (mat3(injectionSwitch.y, 1.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x4(1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), mix(float(max(0.0, 0.0)), float(_GLF_FUZZED(vec3(822.614, 4.5, -474.478).r)), bool(false)))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(vec3(vec3(0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(float(mat3x4(1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), mix(float(max(0.0, 0.0)), float(_GLF_FUZZED(vec3(822.614, 4.5, -474.478).r)), bool(false)))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(vec3(vec3(0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))))), 1.0 * (float(mat3x4(1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(max(0.0, 0.0), mix(float(max(0.0, 0.0)), float(_GLF_FUZZED(vec3(822.614, 4.5, -474.478).r)), bool(false)))))), dot(_GLF_IDENTITY(vec3(0.0, 1.0, 1.0), vec3(vec3(vec3(0.0, 1.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, log(1.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-9.1))))))) : _GLF_FUZZED(determinant(mat4(-55.96, 1.3, 6.6, -78.11, 99.89, -4470.3292, 960.075, 79.21, -159.879, 49.63, 7.1, -5.8, -5.7, 9.4, 91.92, -2.4))))))) - 0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)) - mat3(0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) * _GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)), dot(vec2(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(930.637)), bool(false))), cos(0.0)), vec2(0.0, 1.0)))), float(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(710.566))), (0.0) * _GLF_IDENTITY(dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)), dot(vec2(0.0, cos(0.0)), vec2(0.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), clamp(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), min(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))))), 0.0, 0.0))))), float(_GLF_FUZZED(498.380)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || ((_GLF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(int(_GLF_IDENTITY(64, (64) ^ _GLF_IDENTITY(0, 0 ^ (0))))))) - 0), 0);
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-61831) : 0)) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (int(5))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = ((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), (0 << _GLF_IDENTITY(int(6), int(6))) / 1)) ^ _GLF_IDENTITY(1, (1) | (0 | (1 ^ 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_ZERO(0.0, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))), false))))))), (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint read_val = atomicLoad(write_val, 4, _GLF_IDENTITY(64, (64) - 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)), 0 ^ (0)), _GLF_IDENTITY((0), int(_GLF_IDENTITY(int((0)), (int((0))) | (_GLF_IDENTITY(int((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-90638, (false ? _GLF_FUZZED(6721) : -90638))) : _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(0, ~ (~ (0))), 0)))), max(int((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-90638, (false ? _GLF_FUZZED(6721) : -90638))) : _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(0, ~ (~ (0))), 0)))), _GLF_IDENTITY(int((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-90638, (false ? _GLF_FUZZED(6721) : -90638))) : _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(0, ~ (~ (0))), 0)))), (int((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(_GLF_IDENTITY(-90638, (false ? _GLF_FUZZED(6721) : -90638))) : _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(0, ~ (~ (0))), 0))))) << 0))))))) | 0));
 do
  {
   buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) * 1u);
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
