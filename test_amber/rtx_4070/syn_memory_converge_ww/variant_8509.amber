#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), (false || _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0)) / 1.0) > injectionSwitch.y)), bool(bvec3(((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0)) / 1.0) > injectionSwitch.y)), true, true)))) || false)) && true)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), true, false, true)))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), _GLF_IDENTITY(false || ((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(false || ((injectionSwitch.x > injectionSwitch.y)), true, false))))))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))) && true)), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0))), injectionSwitch)).y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, false))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9.6)), vec2(_GLF_FUZZED(-4412.3585), (injectionSwitch)[1]), bvec2(false, true))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), true), bvec3(bvec3(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), true)))))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), bvec2(_GLF_IDENTITY(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), true), bvec3(bvec3(bvec3(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(4.1, -0.1)) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) * vec2(1.0, 1.0))) / sqrt(vec2(1.0, 1.0))))).y), true), true)))))), false)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_IDENTITY(true, false || (true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false))) || false))), (false) && true), _GLF_IDENTITY(false, (false) || false), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false))) || false))), (false) && true), _GLF_IDENTITY(false, (false) || false), true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))), false || ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec4((false) && true, true, true, false)), (bool(bvec4((false) && true, true, true, false))) || false)))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, _GLF_IDENTITY(true, false || (true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false))) || false))), (false) && true), _GLF_IDENTITY(false, (false) || false), true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false)), (bool(bvec4(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), true, false, false))) || false))), (false) && true), _GLF_IDENTITY(false, (false) || false), true))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)))))), _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (false) && true), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))))), (false) && true), false, true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))), (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) && true), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (false) && true), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), ! (! (bool(_GLF_IDENTITY(false, (false) && true))))))), (false) && true), false, true)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))) && true) || false)))))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) / exp(0.0))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), true && ((false)))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4((false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y)))), false, false, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, true))), bool(bvec2(_GLF_IDENTITY(bool(bvec2(false, false)), bool(bvec3(bool(bvec2(false, false)), false, true))), false))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, uint(uint(0u)))), uint(_GLF_IDENTITY(0u, 0u | (0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), min(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), (0u ^ 1u), 1u, 1u)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), (0u ^ 1u), 1u, 1u)))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)) * 1u), (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), (0u ^ 1u), 1u, 1u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))), (_GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))), ~ (~ (uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))))))) | (uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))))))).x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_size) : gl_WorkGroupSize.x))) - (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, 0u)) | (0u & _GLF_IDENTITY(94058u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(94058u, min(94058u, 94058u)) : _GLF_FUZZED(79609u)))))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)), 0u))).x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)), 0u))).x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ((gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) / 1u)), (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x))))) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, uint(uint(0u)))), uint(_GLF_IDENTITY(0u, 0u | (0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), min(_GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY(uint(0u), uint(_GLF_IDENTITY(0u, 0u | (0u)))))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), (0u ^ 1u), 1u, 1u)))))), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), (0u ^ 1u), 1u, 1u)))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u), (_GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) - 0u)) * 1u), (gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), (0u ^ 1u), 1u, 1u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))), (_GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))), ~ (~ (uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))))))) | (uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) - uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u))) | (gl_WorkGroupSize), (1u & 1u))))))).x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_size) : gl_WorkGroupSize.x))) - (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (min(0u, 0u)) | (0u & _GLF_IDENTITY(94058u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(94058u, min(94058u, 94058u)) : _GLF_FUZZED(79609u)))))) >> _GLF_IDENTITY(uint(0u), uint(0u)))), _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)), 0u))).x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u, ((_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | (gl_WorkGroupSize)), 0u))).x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))), ((gl_WorkGroupSize.x) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))) / 1u)), (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(gl_WorkGroupSize.x, 1u * (gl_WorkGroupSize.x))))) - (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))) << 0u)))))) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u))));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false || (_GLF_DEAD(false)))) && true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))), (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | ((_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))))) + 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), (bool(bool(_GLF_DEAD(false)))) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false) && true, true && ((false) && true)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id))))) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0u) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) + 0u, ((subgroup_id) + 0u) | ((subgroup_id) + 0u)), clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | (_GLF_IDENTITY((subgroup_id), 0u | ((subgroup_id))) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))) + 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))) + (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))))) * subgroup_size, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u))) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)) - 0u), (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))))) * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, (0u) >> 0u) | (subgroup_id))) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, (_GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u) + 0u) - 0u), _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))))))) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))))))) * subgroup_size)), 1u), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))) | (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))), uint(_GLF_ZERO(_GLF_IDENTITY(0.0, exp(0.0) * (0.0)), injectionSwitch.x)) ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))), min(~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))), ~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id))))) + 0u)))))))) * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u))))), min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u))))), clamp(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u))))), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u))))), _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)) * 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))))) * subgroup_size)), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, min(_GLF_IDENTITY((subgroup_id) + 0u, 0u ^ ((subgroup_id) + 0u)), _GLF_IDENTITY((subgroup_id) + 0u, _GLF_IDENTITY(uint(uvec4((subgroup_id) + 0u, 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (uint(uvec4((subgroup_id) + 0u, 0u, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (subgroup_id) + 0u)), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * abs(1.0)))) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp(_GLF_IDENTITY((subgroup_id) + 0u, ((subgroup_id) + 0u) | 0u), (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))))) * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0))) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((_GLF_IDENTITY(subgroup_id, uint(_GLF_IDENTITY(uvec2(subgroup_id, 0u), (uvec2(subgroup_id, 0u)) >> (uvec2(102786u, 169798u) & uvec2(0u, 0u)))))) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u))))), (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))) << 0u)) | 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)))))))))) * subgroup_size)), 1u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_size)))) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 0u, (((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) | 1u), 1u))), (subgroup_id) + 0u)))))))) * subgroup_size, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (~ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) + 0u, clamp((subgroup_id) + 0u, (subgroup_id) + 0u, _GLF_IDENTITY((subgroup_id) + 0u, 0u | ((subgroup_id) + 0u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u ^ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), uint(_GLF_IDENTITY(uvec2(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u), ~ (~ (uvec2(~ (_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u)), 0u)))))))))))) * subgroup_size)), 1u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), workgroup_base, _GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))) + subgroup_base + subgroup_local_id;
 atomicStore(write_val, uint(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec3(64, 0, 1))), min(64, _GLF_IDENTITY(64, min(64, 64)))), _GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (false ? _GLF_FUZZED(-57901) : _GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (false ? _GLF_FUZZED(int(workgroup_base)) : ~ (0))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1)))), (clamp(_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), max(~ (~ (0)), ~ (~ (0))))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))))) * 1))))), (_GLF_IDENTITY(0, (0) >> _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), min(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1)), (int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))) - 0)))), (false ? _GLF_FUZZED(-57901) : _GLF_IDENTITY(0, ~ (~ (0)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), ~ (~ (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), 0 + (~ (0)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), max(_GLF_IDENTITY(~ (0), min(_GLF_IDENTITY(~ (0), (~ (0)) | (~ (0))), ~ (0))), ~ (0))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (_GLF_IDENTITY(0, ~ (~ (0)))) << 0)) | 0), _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec3(0, ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3))), 1)), (int(ivec3(0, ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3))), 1))) | (int(ivec3(0, ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3))), 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(0, ~ _GLF_IDENTITY((~ (0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(32057)))), (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(32057)))), (false ? _GLF_FUZZED(71120) : ~ (_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(32057))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(32057)))), min(~ (_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(32057)))), ~ (_GLF_IDENTITY((~ (0)), (true ? (~ (0)) : _GLF_FUZZED(32057))))))))))), int(ivec2(_GLF_IDENTITY(0, ~ (~ (0))), 1))))))))) * (1 ^ 0)));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
  barrier();
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) / 1)) * int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(4, (4) | (4))) << 0), 0 | (4)), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
