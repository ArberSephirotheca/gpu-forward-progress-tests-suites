#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_12 {
 mat3x2 _f0;
 ivec3 _f1;
 mat2x3 _f2;
 mat2 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_11 {
 mat3x4 _f0;
 mat3 _f1;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 mat3x2 _f1;
 bvec3 _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_10 {
 uvec3 _f0;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 uvec3 _f1;
 vec3 _f2;
 uint _f3;
} ;

struct _GLF_struct_6 {
 uint workgroup_base;
 uvec2 _f0;
 ivec2 _f1;
 int _f2;
} ;

struct _GLF_struct_5 {
 uint _f0;
} ;

struct _GLF_struct_4 {
 mat4 _f0;
 vec2 _f1;
 vec3 _f2;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_8 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 float _f1;
 uint _f2;
 mat3x2 _f3;
 mat4 _f4;
 bool _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_1 {
 vec2 _f0;
 mat4x3 _f1;
 mat4x3 _f2;
 ivec4 _f3;
 float _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_0 {
 vec3 _f0;
 ivec3 _f1;
 bvec4 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 int _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_14 {
 bvec4 _f0;
 mat4 _f1;
 _GLF_struct_3 _f2;
 _GLF_struct_9 _f3;
 mat4x3 _f4;
 _GLF_struct_10 _f5;
 _GLF_struct_13 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.z = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.w = workgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_14 _GLF_struct_replacement_14 = _GLF_struct_14(bvec4(true), mat4(1.0), _GLF_struct_3(_GLF_struct_0(vec3(1.0), ivec3(1), bvec4(true), _GLF_IDENTITY(ivec4(1), (ivec4(1)) / ivec4(1, 1, 1, 1))), 1, _GLF_struct_1(vec2(1.0), mat4x3(1.0), mat4x3(1.0), ivec4(1), 1.0, mat2x3(1.0)), _GLF_struct_2(ivec2(_GLF_IDENTITY(1, 0 + (1))), 1.0, _GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))), min(_GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(_GLF_IDENTITY(3u, 0u | (3u)))))), _GLF_IDENTITY(1u, (1u) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u))))))))))), mat3x2(1.0), mat4(1.0), true, ivec2(1))), _GLF_struct_9(bvec4(true), _GLF_struct_4(mat4(1.0), vec2(1.0), vec3(1.0)), _GLF_struct_5(1u), _GLF_struct_6(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.w * workgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.w * workgroup_id) | 0u), uvec2(1u), ivec2(1), 1), _GLF_struct_7(ivec2(1), uvec3(1u), vec3(1.0), 1u), _GLF_struct_8(mat4x3(1.0)), mat4x2(1.0)), mat4x3(1.0), _GLF_struct_10(uvec3(1u)), _GLF_struct_13(_GLF_struct_11(mat3x4(1.0), mat3(1.0)), mat3x2(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))))), bvec3(true), _GLF_struct_12(mat3x2(1.0), ivec3(1), mat2x3(1.0), mat2(1.0), vec4(1.0))));
 uint subgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.y * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size) * uvec4(1u, 1u, 1u, 1u)).z, (GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.z) - (0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(4u, ~ (~ (_GLF_IDENTITY(4u, clamp(4u, 4u, 4u)))))))))));
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.x = subgroup_base;
 uint virtual_gid = _GLF_struct_replacement_14._f3._f3.workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_14subgroup_basesubgroup_idsubgroup_sizeworkgroup_size.x + subgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 uint read_val = _GLF_IDENTITY(atomicLoad(write_val, 4, 64, 0), (true ? atomicLoad(write_val, 4, 64, 0) : _GLF_FUZZED(num_workgroup)));
 buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, (read_val) | 0u)));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
