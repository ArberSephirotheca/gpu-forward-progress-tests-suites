#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true)))))))) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))) && true, true && ((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))) && _GLF_IDENTITY(true, true && (true)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), vec2(vec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) / _GLF_IDENTITY(vec2(1.0, 1.0), clamp(_GLF_IDENTITY(vec2(1.0, 1.0), (false ? _GLF_FUZZED(vec2(37.88, 8.9)) : vec2(1.0, 1.0))), vec2(1.0, 1.0), vec2(1.0, 1.0)))), 0.0))).y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_8_1_1_11read_valsubgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y = subgroup_id, 1u * (GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.y = _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ((false)) || false)))))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (false), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (false), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (false)) || false), true, false))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (_GLF_IDENTITY(false, false || (false))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.6))), 1.0, 0.0, log(1.0), 1.0, 0.0)), max(float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.0) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) : _GLF_FUZZED(-2.6))), 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), log(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(-4.9) : 1.0), (true ? _GLF_IDENTITY((false ? _GLF_FUZZED(-4.9) : 1.0), ((false ? _GLF_FUZZED(-4.9) : 1.0)) + _GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(5.9)))), 1.0))), 1.0, 0.0)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-2.6))), 1.0, 0.0, log(1.0), 1.0, 0.0)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false)))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (false), false)), bvec2(bvec3(bvec2(bvec2(! (false), false)), false)))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, true, true)))) || false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-76.04), _GLF_FUZZED(-6195.2073)), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat4x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0), (mat4x2((injectionSwitch)[1], _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), max(vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) / 1)))], max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat4x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0), (mat4x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)) - mat4x2(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))) ? _GLF_FUZZED(3.3) : 0.0)), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(_GLF_IDENTITY(mat4x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0), (mat4x2((injectionSwitch)[1], 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)) - mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), bvec2(true, true))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6511.0949) : injectionSwitch[1])))).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))))) && true))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8.2)), float(injectionSwitch.y), bool(true))))))))) && _GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), false || ((true)))))))))), false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, true)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, true)), true && (bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), false, true)))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), mix(vec2((vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))[0], _GLF_FUZZED(-5.3)), vec2(_GLF_FUZZED(7844.3437), (vec2(mat3x4(injectionSwitch, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)))[1]), bvec2(false, true)))).y)))))))), false, true))), ! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true)))), bool(bool(! (! (bool(bvec4(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(149.034, 3.9).ts) : injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id, (GLF_merged2_0_1_8_1_1_11read_valsubgroup_id) | (GLF_merged2_0_1_8_1_1_11read_valsubgroup_id)).y * subgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false), (_GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)) && true))) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | 0), min(_GLF_IDENTITY(64, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), min(_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), (_GLF_IDENTITY(64, min(64, 64))) * 1)))), _GLF_IDENTITY(64, min(64, 64)))))), 64)), 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(exp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(1.5)))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint read_val = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(write_val, 4, 64, 0), (atomicLoad(write_val, 4, 64, 0)) | (atomicLoad(write_val, 4, _GLF_IDENTITY(64, ~ (~ (64))), 0))), max(atomicLoad(write_val, 4, 64, 0), atomicLoad(write_val, 4, 64, 0)));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val, _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u, ((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u) / uint(_GLF_ONE(_GLF_IDENTITY(1.0, max(1.0, 1.0)), injectionSwitch.y))), ((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u) | 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u, ((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u) / uint(_GLF_ONE(1.0, injectionSwitch.y))), ((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u) | 0u))))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (_GLF_IDENTITY((0u), min((0u), (0u)))) | (_GLF_IDENTITY((0u), ((0u)) >> 0u))) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(read_val) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) / 1u)) << 0u), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : 0u))) << 0u)))) ^ 0u), (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val, _GLF_IDENTITY((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u, ((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u) | 0u))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), clamp(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))))), _GLF_IDENTITY(0u, (0u) << 0u)))) ^ 0u), ((_GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val, _GLF_IDENTITY((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u, ((GLF_merged2_0_1_8_1_1_11read_valsubgroup_id.x = read_val) - 0u) | 0u))) >> _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), (false ? _GLF_FUZZED(workgroup_base) : (0u))) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, uint(uint(0u)))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(1u, (1u) | (1u))))) | (1u)) * (min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY(0u, min(0u, 0u))))) << 0u) ^ 0u)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY(0u, min(0u, 0u))))) << 0u) ^ 0u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY(0u, min(0u, 0u))))) << 0u) ^ 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY(0u, min(0u, 0u))))) << 0u) ^ 0u)))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY(0u, min(0u, 0u))))) << 0u) ^ 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) << 0u)) | (_GLF_IDENTITY(0u, min(0u, 0u))))) << 0u) ^ 0u)))))), _GLF_IDENTITY(0u, (0u) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) << 0u)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(read_val) : _GLF_IDENTITY(0u, (0u) << 0u)))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u)))))) << 0u)))) ^ 0u, _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, min((0u) << 0u, _GLF_IDENTITY((0u) << 0u, clamp((0u) << 0u, _GLF_IDENTITY((0u) << 0u, max((0u) << 0u, (0u) << 0u)), (0u) << 0u))))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) - 0u)) | (_GLF_IDENTITY(0u, (0u) | (0u))))), ((0u)) / 1u) << 0u))))), _GLF_IDENTITY((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, 0u | (0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (0u) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), max(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), min(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u)) * 1u))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) << 0u))))))) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ ((1u ^ 1u) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u))))))) << 0u)))))) << 0u)), ((false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, 0u | (0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (0u) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), max(_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), min(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u)) * 1u))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) << 0u))))))) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ ((1u ^ 1u) >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), min(uint(3u), uint(3u))))))) << 0u)))))) << 0u))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))) ^ 0u)), clamp(~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) / 1u) << 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << _GLF_IDENTITY(0u, uint(uvec4(0u, 0u, (0u << _GLF_IDENTITY(uint(0u), uint(0u))), 0u)))), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, uint(uint(_GLF_IDENTITY((0u) << 0u, clamp((0u) << 0u, (0u) << 0u, (0u) << 0u)))))), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, _GLF_IDENTITY(((0u) << 0u) ^ 0u, 0u | (_GLF_IDENTITY(((0u) << 0u) ^ 0u, max(((0u) << 0u) ^ 0u, ((0u) << 0u) ^ 0u)))))))), _GLF_IDENTITY(0u, (0u) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (uint(0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uint(0u)) << 0u))))))) << 0u)), 1u * _GLF_IDENTITY((min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u))), ((min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u)))) | 0u)))) << 0u)))) ^ 0u), (((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) / 1u) << 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) << 0u))))))) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u)))))) << 0u)))) ^ 0u)) - 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, min((0u) << 0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) | ((0u) << 0u))))))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) / 1u) << 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u))), (uint(uint(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u)))) | 0u)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) << 0u))))))) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u)))))) << 0u)))) ^ 0u)), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) * 1u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) << 0u), (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)), 1u * (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, ((0u) << 0u) ^ 0u)))))), _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((0u)) / 1u) << 0u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (_GLF_IDENTITY(0u, (0u) << 0u)) * 1u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (0u) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, _GLF_IDENTITY(((0u) << 0u), (((0u) << 0u)) / 1u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, (0u) << 0u))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(0u), (uint(0u)) << 0u))))))) << 0u)), 1u * (min(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) << 0u), (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - (1u ^ 1u))) << 0u, ((0u) << 0u) ^ 0u)))), _GLF_IDENTITY(0u, (0u) << 0u)))))) << 0u)))) ^ 0u))))))) + 0u)) >> 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 1.0, 0.0, length(vec2(0.0, 0.0)), 1.0))))).x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.5, -17.81)) : injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true) || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7.9) : injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id, _GLF_IDENTITY(min(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id), max(min(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id), min(GLF_merged2_0_1_8_1_1_11read_valsubgroup_id, GLF_merged2_0_1_8_1_1_11read_valsubgroup_id)))).x));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4(injectionSwitch.y, 0.0, abs(1.0), 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(abs(1.0), float(_GLF_IDENTITY(vec3(abs(1.0), sqrt(0.0), 1.0), clamp(_GLF_IDENTITY(vec3(abs(1.0), sqrt(0.0), 1.0), (vec3(abs(1.0), sqrt(0.0), 1.0)) * mat3(1.0)), vec3(abs(1.0), sqrt(0.0), 1.0), vec3(abs(1.0), sqrt(0.0), 1.0))))), 1.0, 1.0)), 0.0, 1.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(1.0, log(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, log(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0), (mat4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2245.8731) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), 0.0, abs(1.0), 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, exp(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) - 0.0), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(7.6)), bool(false))), 0.0, 0.0, abs(1.0), 1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0)), sqrt(1.0) * (determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, log(1.0), 0.0, 0.0, 0.0, 0.0)))), 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, 0.0), vec3(1.0, log(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, 1.0, 1.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(1.0, log(1.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
