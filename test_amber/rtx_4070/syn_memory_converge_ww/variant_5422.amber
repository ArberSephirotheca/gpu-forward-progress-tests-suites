#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))), false))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false), bvec2(bvec2(bvec2(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), false))))))))), ! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))), false, false, false))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))), bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))))))), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))), bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))))))), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))), bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, false || (false)), true), _GLF_IDENTITY(false, bool(bvec2(false, true))))))))), true)), false)))))))))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, true)))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(false, true))))) || false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))), false, false, false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), true))))))))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))), false, false, false)))), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), bvec3(bvec4(bvec3(bvec3(bvec3(bvec2(false, true), _GLF_IDENTITY(false, bool(bvec2(false, true)))))), true))))))))))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))), _GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))))))))), false, false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(2.3, 2.5, 6.5, 7.9))))))) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.1), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(float(46093)), (true ? _GLF_FUZZED(float(46093)) : _GLF_FUZZED(-4636.3094)))), bvec2(true, false)))), mat2(1.0) * _GLF_IDENTITY((injectionSwitch), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(-864.347), _GLF_FUZZED(-750.937)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, abs(0.0), 0.0, 1.0)), 1.0)))))).y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), true, false)), (bool(bvec4(false, _GLF_IDENTITY(true, ! (! (true))), true, false))) || false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)) && true))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))))))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(((bvec3(true, true, true) == bvec3(true, false, false)) ? (-1310.9316 / mat2(-6747.8894, -1716.9505, 2.9, 2663.8814)) : mat2(-4.3, 43.40, -2.7, -9.3))))), _GLF_IDENTITY(mat2(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0), (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(mat2(-6.9, -10.64, -582.890, 5150.9888)) : mat2(0.0, 0.0, 0.0, 0.0))) + (mat2(1.0)))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0), clamp(_GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0)))) : _GLF_FUZZED(462.054))) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0), clamp(_GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0), _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)), (float(mat3(injectionSwitch.x, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0))) + 0.0)))) : _GLF_FUZZED(462.054))) > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), true)))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, bool(bvec2(true, false)))))), true)))))), true)), true)))))))) && true), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) + 0.0) > injectionSwitch.y))) && true)) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) && true))))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(0.0), 1.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false))) || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))) || false)))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, (false) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)), clamp((_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)), (_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)), (_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)))))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch) * _GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, float(float(1.0)))), (false ? _GLF_FUZZED((mat4x2(21.72, 271.649, 55.79, -36.51, 81.86, -9957.7988, -2.6, 42.75) * mat2x4(-261.613, 0.0, -35.25, 68.20, 7841.3396, 5.1, 488.589, 6.5))) : mat2(_GLF_IDENTITY(1.0, float(float(1.0)))))) : _GLF_FUZZED(injectionSwitch)), clamp((_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))))))))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)), (_GLF_IDENTITY(true, ! (! (true))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), ! (! (true))) ? (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(float(1.0)))) : _GLF_FUZZED(injectionSwitch)))))).x > injectionSwitch.y)))), true && ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) * mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + ((mat2(1.0)) * mat2(1.0)))))))) + mat2(0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) * mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + ((mat2(1.0)) * mat2(1.0)))))))) + mat2(0.0, 0.0, 0.0, 0.0)), mat2(mat3x2(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY((mat2(1.0)) * mat2(1.0), mat2(0.0, 0.0, 0.0, 0.0) + ((mat2(1.0)) * mat2(1.0)))))))) + mat2(0.0, 0.0, 0.0, 0.0)))))) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) : _GLF_FUZZED(injectionSwitch)))).x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, (false) && true))), (bool(bool(_GLF_IDENTITY(false, (false) && true)))) || false)), (injectionSwitch.x > injectionSwitch.y))), false, true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), max(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 1.0, sqrt(1.0))), (_GLF_IDENTITY(float(mat2(injectionSwitch.y, 1.0, 1.0, sqrt(1.0))), mix(float(float(mat2(injectionSwitch.y, 1.0, 1.0, sqrt(1.0)))), float(_GLF_FUZZED(5.1)), bool(false)))) - 0.0))))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(30.84)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), clamp(mix(float(injectionSwitch.y), float(_GLF_FUZZED(30.84)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(30.84)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(30.84)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  return;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, uint(uvec2(0u, 0u))), 1u, 1u))) ^ (subgroup_id))) << 0u) * subgroup_size, (false ? _GLF_FUZZED(((workgroup_size --))) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)) * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)) * subgroup_size, max(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)) * subgroup_size, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)) * subgroup_size))) + 0u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 1u))) ^ (subgroup_id)) * subgroup_size) >> 0u)) * 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)), (_GLF_IDENTITY(false ? _GLF_FUZZED(vec2(8.0, 5433.5925)) : vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)), _GLF_IDENTITY(vec2(mat3x4(false ? _GLF_FUZZED(vec2(8.0, 5433.5925)) : vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(mat3x4(false ? _GLF_FUZZED(vec2(8.0, 5433.5925)) : vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : mat2(1.0) * (vec2(mat3x4(false ? _GLF_FUZZED(vec2(8.0, 5433.5925)) : vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))))))))), vec2(mat4x3(_GLF_IDENTITY(vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)), (false ? _GLF_FUZZED(vec2(8.0, _GLF_IDENTITY(5433.5925, min(5433.5925, _GLF_IDENTITY(5433.5925, (5433.5925) / 1.0))))) : vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, abs(0.0), exp(0.0), 1.0)))), 1.0, cos(0.0), round(length(normalize(vec3(1.0, 1.0, 1.0)))), tan(abs(0.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0)))).y)), _GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), ! (! (! (_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec4((false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))) || (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)), bool(bvec2(bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, false)), false)))), true && ((injectionSwitch.x > injectionSwitch.y))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-0.5, 1.5)))), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (vec2(vec2(injectionSwitch))) * mat2(1.0))).y) || _GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), false || (! (! (_GLF_IDENTITY(false, (false) && true))))))))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false || (false), ! (! (false || (false)))), ! (! (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)), (_GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0))) * mat2(1.0)) * (injectionSwitch)) + vec2(0.0, 0.0))).y)), false || (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))), false || (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec3(bvec2(bvec2(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))), false || (false)), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (0)), 0 + (_GLF_IDENTITY(~ (~ (0)), (_GLF_IDENTITY(~ (~ (0)), 1 * (~ (~ (0))))) ^ 0))))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true, true))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint read_val = atomicLoad(write_val, _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, (_GLF_IDENTITY(true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-77785), 0 ^ (_GLF_IDENTITY(_GLF_FUZZED(-77785), max(_GLF_FUZZED(-77785), _GLF_FUZZED(-77785))))), min(true ? _GLF_IDENTITY(4, 0 ^ (4)) : _GLF_FUZZED(-77785), true ? 4 : _GLF_FUZZED(-77785))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(17593), (_GLF_FUZZED(17593)) | (_GLF_FUZZED(17593))))), _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, (4) << 0), 4), min(max(_GLF_IDENTITY(4, (4) << 0), 4), max(_GLF_IDENTITY(4, (4) << 0), 4)))), 4))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-77785, (-77785) / 1)))), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4), (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4)) | (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))))), min(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-77785), (0 ^ 1) * (_GLF_IDENTITY(_GLF_FUZZED(-77785), (_GLF_IDENTITY(_GLF_FUZZED(-77785), 0 | (_GLF_FUZZED(-77785)))) ^ 0))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-77785))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, min(0, 0))), 4)), 4))))))), (false ? _GLF_FUZZED(33307) : _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-77785, (-77785) / 1)))), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4), (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4)) | (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))))), min(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-77785), (0 ^ 1) * (_GLF_IDENTITY(_GLF_FUZZED(-77785), (_GLF_IDENTITY(_GLF_FUZZED(-77785), 0 | (_GLF_FUZZED(-77785)))) ^ 0))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-77785))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, min(0, 0))), 4)), 4))))))), max(~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-77785, (-77785) / 1)))), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4), (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4)) | (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))))), min(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-77785), (0 ^ 1) * (_GLF_IDENTITY(_GLF_FUZZED(-77785), (_GLF_IDENTITY(_GLF_FUZZED(-77785), 0 | (_GLF_FUZZED(-77785)))) ^ 0))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-77785))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, min(0, 0))), 4)), 4))))))), ~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-77785, (-77785) / 1)))), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4), (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4)) | (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))))), min(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-77785), (0 ^ 1) * (_GLF_IDENTITY(_GLF_FUZZED(-77785), (_GLF_IDENTITY(_GLF_FUZZED(-77785), 0 | (_GLF_FUZZED(-77785)))) ^ 0))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-77785))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, min(0, 0))), 4)), 4))))))))))), (~ (~ (_GLF_IDENTITY(max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(_GLF_IDENTITY(-77785, (-77785) / 1)))), _GLF_IDENTITY(4, _GLF_IDENTITY(clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4), (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4)) | (clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) | (0)), 0))), 4)), 4))))), min(max(_GLF_IDENTITY(4, (_GLF_IDENTITY(true, true && (true)) ? 4 : _GLF_IDENTITY(_GLF_FUZZED(-77785), (0 ^ 1) * (_GLF_IDENTITY(_GLF_FUZZED(-77785), (_GLF_IDENTITY(_GLF_FUZZED(-77785), 0 | (_GLF_FUZZED(-77785)))) ^ 0))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_IDENTITY(_GLF_FUZZED(17593), (0 >> _GLF_IDENTITY(int(2), int(2))) + (_GLF_FUZZED(17593))))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << 0), 4)), 4))), max(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(-77785))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(17593))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) << _GLF_IDENTITY(0, min(0, 0))), 4)), 4)))))))) << 0))), 64, 0);
 buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(read_val, _GLF_IDENTITY(0u, (0u) | (0u)) ^ (read_val)))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(subgroupAllEqual(read_val)), (uint(subgroupAllEqual(read_val))) >> 0u), _GLF_IDENTITY((uint(subgroupAllEqual(read_val))) | 0u, (false ? _GLF_FUZZED(workgroup_id) : (uint(subgroupAllEqual(read_val))) | 0u)))) / 1u);
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
