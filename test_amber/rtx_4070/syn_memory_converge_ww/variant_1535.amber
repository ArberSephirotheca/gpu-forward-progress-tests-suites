#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 1.0, 0.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), (true ? _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) : _GLF_FUZZED(-2.8)))) / determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))) > injectionSwitch.y))), false, false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * _GLF_ONE(1.0, injectionSwitch.y)) > injectionSwitch.y)), true)))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, min(_GLF_IDENTITY(gl_WorkGroupSize, clamp(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)), gl_WorkGroupSize, gl_WorkGroupSize)), gl_WorkGroupSize)), uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, min(gl_WorkGroupSize, gl_WorkGroupSize)), 0u))).x, 1u * _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) | 0u)), gl_WorkGroupSize.x));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))) * _GLF_IDENTITY(workgroup_id, ~ _GLF_IDENTITY((~ (workgroup_id)), ((~ _GLF_IDENTITY((workgroup_id), ((workgroup_id)) | ((workgroup_id))))) | ((~ (workgroup_id)))))) << 0u), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec3(workgroup_id, 0u, _GLF_IDENTITY(1u, ~ (~ (1u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec3(workgroup_id, 0u, 1u), uvec3(uvec4(uvec3(workgroup_id, 0u, 1u), 1u))))), uvec3(uvec3(~ (~ (_GLF_IDENTITY(uvec3(workgroup_id, 0u, 1u), uvec3(uvec4(uvec3(workgroup_id, 0u, 1u), 1u))))))))))), (_GLF_IDENTITY(workgroup_size, ~ _GLF_IDENTITY((~ (workgroup_size)), uint(uint(_GLF_IDENTITY((~ (workgroup_size)), ~ (~ (_GLF_IDENTITY((~ (workgroup_size)), uint(uvec3((~ (_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), clamp(_GLF_IDENTITY((workgroup_size), uint(uvec4((workgroup_size), 0u, 0u, 1u))), _GLF_IDENTITY((workgroup_size), clamp((workgroup_size), (workgroup_size), (workgroup_size))), (workgroup_size))) >> (1u ^ 1u)))), 0u, 1u)))))))))) * workgroup_id) << 0u), 1u), min(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u) * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id)), (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))) - 0u)) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | (workgroup_size * workgroup_id))))))))) << 0u), 1u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, (_GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, ((workgroup_size * workgroup_id) << 0u) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, ((workgroup_size * workgroup_id) << 0u) / 1u)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, ((workgroup_size * workgroup_id) << 0u) / 1u)), (~ (_GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, ((workgroup_size * workgroup_id) << 0u) / 1u))) + 0u)) | 0u)) >> 0u)))) | (_GLF_IDENTITY((workgroup_size * workgroup_id) << 0u, uint(uvec4((_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (workgroup_size) ^ 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * workgroup_id) << 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 1u)))))), (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u)) >> 0u), 1u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << _GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, ~ (~ (0u)))))), (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u + (0u))) ^ 0u)), 1u), _GLF_IDENTITY((uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : 0u)), 0u)) | (uvec2(0u, 0u)))), uvec2(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))))), uvec2(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(0u, 0u)), max((uvec2(0u, 0u)), (uvec2(0u, 0u))))) / (uvec2(1u, 1u) | uvec2(1u, 1u))) | (uvec2(0u, 0u)))), uvec2(0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, max(0u, 0u))))), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))), uvec2(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) ^ uvec2(0u, 0u)), uvec2(0u, 0u)))) | (uvec2(0u, 0u)))), uvec2(0u))) * uvec2(1u, 1u))))), (_GLF_IDENTITY((uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : 0u)), 0u)) | (uvec2(0u, 0u)))), uvec2(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))))), uvec2(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(0u, 0u)), max((uvec2(0u, 0u)), (uvec2(0u, 0u))))) / (uvec2(1u, 1u) | uvec2(1u, 1u))) | (uvec2(0u, 0u)))), uvec2(0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, max(0u, 0u))))), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))), uvec2(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) ^ uvec2(0u, 0u)), uvec2(0u, 0u)))) | (uvec2(0u, 0u)))), uvec2(0u))) * uvec2(1u, 1u))))), ((uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : 0u)), 0u)) | (uvec2(0u, 0u)))), uvec2(0u)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))))), uvec2(0u)), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u)), (_GLF_IDENTITY((uvec2(0u, 0u)), max((uvec2(0u, 0u)), (uvec2(0u, 0u))))) / (uvec2(1u, 1u) | uvec2(1u, 1u))) | (uvec2(0u, 0u)))), uvec2(0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, max(0u, 0u))))), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u)))), uvec2(0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u), (uvec2(0u)) ^ _GLF_IDENTITY(uvec2(0u, 0u), (_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) ^ uvec2(0u, 0u)), uvec2(0u, 0u)))) | (uvec2(0u, 0u)))), uvec2(0u))) * uvec2(1u, 1u)))))) + uvec2(0u, 0u))) >> uvec2(0u, 0u)) | (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u))) * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, _GLF_IDENTITY(1u, min(1u, 1u)), 0u), clamp(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, _GLF_IDENTITY(1u, max(1u, 1u)), 0u), uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u, 0u))))))), min(((_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u))) * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, _GLF_IDENTITY(1u, min(1u, 1u)), 0u), clamp(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, _GLF_IDENTITY(1u, max(1u, 1u)), 0u), uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u, 0u))))))), ((_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) - 0u))) * _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, _GLF_IDENTITY(1u, min(1u, 1u)), 0u), clamp(uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u, 0u), uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, _GLF_IDENTITY(1u, max(1u, 1u)), 0u), uvec4(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), 1u, 1u, 0u))))))))) | uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x))))) << 0u), (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u)) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) ^ 0u)), 1u)))) | (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u), (_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((workgroup_size * workgroup_id), (true ? (workgroup_size * workgroup_id) : _GLF_FUZZED(subgroup_size))) << 0u)) >> 0u), 1u)))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, 0u))), (_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, 0u)))) * uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-2660.5193) : injectionSwitch.y))))) * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / _GLF_IDENTITY(1u, min(1u, 1u)), (false ? _GLF_FUZZED(write_val) : (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u)) >> 0u)))), clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / _GLF_IDENTITY(1u, min(1u, 1u)), (false ? _GLF_FUZZED(write_val) : (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u)) >> 0u)))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / _GLF_IDENTITY(1u, min(1u, 1u)), (false ? _GLF_FUZZED(write_val) : (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u)) >> 0u)))), _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / _GLF_IDENTITY(1u, min(1u, 1u)), (false ? _GLF_FUZZED(write_val) : (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u))), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec3(_GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u), 0u, 1u)))) / 1u)) >> 0u)))))) + _GLF_IDENTITY(subgroup_local_id, clamp(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u), _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)))), true && (! (true))))), false))), (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (true), bool(bool(! (true)))), _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (true), _GLF_IDENTITY(true && (_GLF_IDENTITY(! (true), bool(bool(! (true))))), (true && (_GLF_IDENTITY(! (true), bool(bool(! (true)))))) && true))), ((_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))) && true))))), false)))) && true), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)), (injectionSwitch), (injectionSwitch)))) - vec2(0.0, 0.0), ((_GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)), (injectionSwitch), (injectionSwitch)))) - vec2(0.0, 0.0)) - vec2(0.0, 0.0)))[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])), (injectionSwitch)[1])), (_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), (injectionSwitch)))[1]) - _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), clamp(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), (true ? _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), min(vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(vec4(9.7, -63.15, 9.8, 50.20)))), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), vec4(vec4(vec4(1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), mix(vec4(_GLF_FUZZED(_GLF_IDENTITY(103.381, min(_GLF_IDENTITY(103.381, (103.381) - 0.0), _GLF_IDENTITY(103.381, min(103.381, 103.381))))), _GLF_FUZZED(-9.8), (vec4(1.0, 0.0, 0.0, 1.0))[2], (vec4(1.0, 0.0, 0.0, 1.0))[3]), vec4((vec4(1.0, 0.0, 0.0, 1.0))[0], _GLF_IDENTITY(_GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0))[1], mix(float((vec4(1.0, 0.0, 0.0, 1.0))[1]), float(_GLF_FUZZED(946.515)), bool(false))), clamp(_GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0))[1], mix(float((vec4(1.0, 0.0, 0.0, 1.0))[1]), float(_GLF_FUZZED(946.515)), bool(false))), _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0))[1], mix(float((vec4(1.0, 0.0, 0.0, 1.0))[1]), float(_GLF_FUZZED(946.515)), bool(false))), _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0))[1], mix(float((vec4(1.0, 0.0, 0.0, 1.0))[1]), float(_GLF_FUZZED(946.515)), bool(false))))), _GLF_FUZZED(4.0), _GLF_FUZZED(vec4(_GLF_IDENTITY(-985.669, max(-985.669, -985.669)), -484.006, -6.6, 73.58).a)), bvec4(true, true, false, false))))), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))), mix(float(_GLF_FUZZED(9.0)), float(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), clamp(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), (true ? _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), min(vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(vec4(9.7, -63.15, 9.8, 50.20)))), _GLF_IDENTITY(vec4(1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat2x3(0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0))))), max(float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat2x3(0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0))))), float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0), transpose(transpose(mat2x3(0.0, 0.0, 0.0, 1.0, cos(0.0), 1.0)))))))), 1.0), vec4(vec4(vec4(1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), mix(vec4(_GLF_IDENTITY(_GLF_FUZZED(103.381), (_GLF_FUZZED(103.381)) / 1.0), _GLF_FUZZED(-9.8), (vec4(1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec3(1.0, round(length(normalize(1.0))), 0.0)))))[2], (vec4(1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, (0.0) * 1.0)))), _GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)))))), 1.0))[3]), vec4((vec4(1.0, 0.0, 0.0, 1.0))[0], _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0))[1], mix(float((vec4(1.0, 0.0, 0.0, 1.0))[1]), float(_GLF_FUZZED(946.515)), _GLF_IDENTITY(bool(false), ! (_GLF_IDENTITY(! (bool(false)), (_GLF_IDENTITY(! (bool(false)), ! (! (! (bool(false)))))) && true))))), _GLF_FUZZED(4.0), _GLF_FUZZED(vec4(-985.669, -484.006, -6.6, 73.58).a)), bvec4(true, true, false, false))))), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0)))), (false ? _GLF_FUZZED(-4.6) : _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) - _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), clamp(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), min(vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0))), (_GLF_IDENTITY(vec4(1.0, 0.0, 0.0, 1.0), min(vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 0.0, 0.0, 1.0)))) - vec4(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(vec4(9.7, _GLF_IDENTITY(-63.15, clamp(_GLF_IDENTITY(-63.15, min(-63.15, -63.15)), -63.15, -63.15)), 9.8, 50.20)))), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-0.9)), float(1.0), bool(true))), 0.0, 0.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0))), vec4(vec4(vec4(1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, float(float(_GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))))), 0.0, 0.0, 1.0), mix(vec4(_GLF_FUZZED(103.381), _GLF_FUZZED(-9.8), (vec4(1.0, 0.0, 0.0, 1.0))[2], _GLF_IDENTITY((vec4(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), 0.0, log(cos(0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0))[3], (_GLF_IDENTITY((vec4(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), 0.0, log(cos(0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0))[3], ((vec4(_GLF_IDENTITY(1.0, float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), 0.0, log(cos(0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0))[3]) / 1.0)) - 0.0)), vec4(_GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(((vec4(1.0, 0.0, 0.0, 1.0))) * mat4(1.0), min(((vec4(1.0, 0.0, 0.0, 1.0))) * mat4(1.0), ((vec4(1.0, 0.0, 0.0, 1.0))) * mat4(1.0))))[0], _GLF_IDENTITY((vec4(1.0, 0.0, 0.0, 1.0))[1], mix(float((vec4(1.0, 0.0, 0.0, 1.0))[1]), float(_GLF_FUZZED(946.515)), bool(false))), _GLF_IDENTITY(_GLF_FUZZED(4.0), clamp(_GLF_FUZZED(4.0), _GLF_FUZZED(4.0), _GLF_FUZZED(4.0))), _GLF_FUZZED(vec4(-985.669, -484.006, -6.6, 73.58).a)), bvec4(true, true, false, false))))), vec4(0.0, 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 1.0, 1.0, 0.0))))))), bool(true)))), vec2(_GLF_FUZZED(-81.52), _GLF_FUZZED((- 0.0))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-7.3, (true ? _GLF_IDENTITY(-7.3, clamp(-7.3, -7.3, -7.3)) : _GLF_FUZZED(-322.860))), 22.09)) : injectionSwitch)).y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(degrees(-8551.4047)) : injectionSwitch.x)) > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(degrees(-8551.4047)) : injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(degrees(-8551.4047)) : injectionSwitch.x)) > injectionSwitch.y)))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), ! (! (bool(true))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   atomicStore(write_val, uint(virtual_gid), _GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4), _GLF_IDENTITY(0 + ((4)), max(0 + ((4)), 0 + ((4))))), min(_GLF_IDENTITY((4), 0 + ((4))), _GLF_IDENTITY((4), 0 + ((_GLF_IDENTITY(4, ~ (~ (4)))))))) | (_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY((4) * 1, ((4) * 1) << 0), max((4) * 1, _GLF_IDENTITY((4) * 1, 0 | ((4) * 1))))), 4), (max(_GLF_IDENTITY(4, _GLF_IDENTITY((4) * 1, max((4) * 1, _GLF_IDENTITY((4) * 1, 0 | ((4) * 1))))), 4)) | (max(_GLF_IDENTITY(4, _GLF_IDENTITY((_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, 0 + (4)), 4))) * 1, max((4) * 1, _GLF_IDENTITY((4) * 1, 0 | ((4) * 1))))), 4))))) >> 0)), _GLF_IDENTITY((_GLF_IDENTITY(~ _GLF_IDENTITY((4), min(_GLF_IDENTITY((4), ((4)) ^ 0), (_GLF_IDENTITY(4, (4) | 0)))), (~ (4)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, int(ivec2(4, 0)))), min(_GLF_IDENTITY(~ (4), ~ (_GLF_IDENTITY(~ (~ (4)), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (4)), min(~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), clamp(~ (~ (4)), ~ (~ (4)), ~ (~ (4)))))), clamp(_GLF_IDENTITY(~ (~ (4)), min(~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), clamp(~ (~ (4)), ~ (~ (4)), ~ (~ (4)))))), _GLF_IDENTITY(~ (~ (4)), min(~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), clamp(~ (~ (4)), ~ (~ (4)), ~ (~ (4)))))), _GLF_IDENTITY(~ (~ (4)), min(~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), clamp(~ (~ (4)), ~ (~ (4)), ~ (~ (4))))))))) | 0))), ~ (4)))))) >> 0, (false ? _GLF_IDENTITY(_GLF_FUZZED(91034), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_FUZZED(91034)), max(_GLF_IDENTITY((_GLF_FUZZED(91034)), ((_GLF_FUZZED(91034))) ^ 0), (_GLF_FUZZED(91034)))), max(~ (_GLF_FUZZED(91034)), ~ (_GLF_FUZZED(91034)))))) : _GLF_IDENTITY((_GLF_IDENTITY(~ (4), (~ (4)) | (_GLF_IDENTITY(~ (4), min(_GLF_IDENTITY(~ (4), ~ (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : ~ (4)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0))).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_IDENTITY(_GLF_FUZZED(1664), (_GLF_FUZZED(1664)) - 0) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), _GLF_IDENTITY(min(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))))) >> 0), (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))))), 0 ^ (_GLF_IDENTITY(min(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))))) >> 0), (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))))), (min(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))))) >> 0), (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))))) ^ 0))))) | ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), 0 ^ (~ (4))), ~ (~ (~ (4)))))))))))))))), ~ _GLF_IDENTITY((4), _GLF_IDENTITY(((4)), clamp(((4)), ((4)), ((4)))) | (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / int(_GLF_ONE(1.0, injectionSwitch.y))), int(2))) ^ int(_GLF_ONE(1.0, injectionSwitch.y))))))))) >> _GLF_IDENTITY(0, max(0, 0)), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (4), ~ (~ (~ (4)))), (~ (4)) | (_GLF_IDENTITY(~ (4), min(_GLF_IDENTITY(~ (4), ~ (~ (_GLF_IDENTITY(~ (4), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ _GLF_IDENTITY((4), ((4)) | ((4))), (false ? _GLF_FUZZED(1664) : ~ (4)))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), mat2(1.0) * (injectionSwitch)))).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0))).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_IDENTITY(_GLF_FUZZED(1664), (_GLF_FUZZED(1664)) - 0) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))), int(ivec2(~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0))).y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_IDENTITY(_GLF_FUZZED(1664), (_GLF_FUZZED(1664)) - 0) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))))), 1)))), _GLF_IDENTITY(min(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))), ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * _GLF_IDENTITY((_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) << 0), ~ (~ (~ (4))))))), min(_GLF_IDENTITY((_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) << 0), ~ (~ (~ (4))))))), (false ? _GLF_FUZZED(84233) : (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) << 0), ~ (~ (~ (4))))))))), (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), (~ (4)) << 0), ~ (~ (~ (4)))))))))))) >> 0), (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) / _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, exp(0.0), 0.0))))), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (_GLF_IDENTITY(~ (~ (4)), max(~ (~ (4)), _GLF_IDENTITY(~ (~ (4)), 0 | (~ (~ (4)))))))))))))), 0 ^ (_GLF_IDENTITY(min(_GLF_IDENTITY((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))) ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))), ((_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true))))) ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))) | 0))))), ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ _GLF_IDENTITY((~ (4)), 1 * ((~ (4)))))))))))) >> 0), (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), max(int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(bitfieldExtract(-18312, 13261, 74812))))), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(bitfieldExtract(-18312, 13261, 74812))))), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(bitfieldExtract(-18312, 13261, 74812))))), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(bitfieldExtract(-18312, 13261, 74812))))), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(bitfieldExtract(-18312, 13261, 74812))))), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))) : _GLF_FUZZED(bitfieldExtract((-6522 + 79617), -83195, 3377))))))), (min(_GLF_IDENTITY((~ (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))) * (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))), (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4)))))), (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))) >> 0)))))), ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) + 0.0), injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(_GLF_IDENTITY(1664, max(_GLF_IDENTITY(1664, 1 * (1664)), 1664))) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), ~ (~ (~ (4)))), ~ (~ (_GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))))))) >> 0), (~ (_GLF_IDENTITY(int(_GLF_ONE(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-860.204) : 1.0)), injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(~ (4), ~ (~ (~ (4))))))))))) ^ 0))))) | ((~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))) * (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(1664) : _GLF_IDENTITY(_GLF_IDENTITY(~ (4), 0 ^ (~ (4))), ~ (~ (~ _GLF_IDENTITY((4), min((4), (4)))))))))))))))))), ~ _GLF_IDENTITY((4), _GLF_IDENTITY(((4)), clamp(((4)), ((4)), ((4)))) | (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) / int(_GLF_ONE(1.0, injectionSwitch.y))), int(2))) ^ int(_GLF_ONE(1.0, injectionSwitch.y))))))))) >> _GLF_IDENTITY(0, max(0, 0))) / 1)))))))), _GLF_IDENTITY(_GLF_IDENTITY(64, (64) ^ 0), min(64, 64)), 0);
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_IDENTITY(true && (_GLF_IDENTITY(false, ! (! (false)))), ! (! (true && (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(609.169)), float(injectionSwitch.x), bool(true))) < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1)))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), determinant(mat4(0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y)), true)), bool(bvec3(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false, false)))), true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, ~ (~ (_GLF_IDENTITY(write_val, (write_val) << 0u)))), 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((false), false || ((false)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), bool(bool((_GLF_IDENTITY(false, false || (false))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, ~ (~ (read_val)))));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
