#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(153.698)), vec2(_GLF_FUZZED(-2.7), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y, false, false, true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(((+ 554.659) * 191.778))), float(injectionSwitch.y), bool(true)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED(-22.78)), bool(false))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), true)))), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))), true)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(false, true, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true)))))))), true)), true))), false))))))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), clamp(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), abs(0.0), round(length(normalize(vec2(1.0, 1.0)))), 0.0, round(length(normalize(vec2(1.0, 1.0))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(61.42)), float(injectionSwitch.x), bool(true)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(61.42)), float(injectionSwitch.x), bool(true)))))))), clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(61.42)), float(injectionSwitch.x), bool(true)))))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(61.42)), float(injectionSwitch.x), bool(true)))))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(61.42)), float(injectionSwitch.x), bool(true))))))))))) - 0.0), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))))) && true))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicAdd(workgroup_size, num_workgroup)) : _GLF_IDENTITY(0u, min(0u, 0u)))), 0u)) | (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))), ((0u << _GLF_IDENTITY(uint(8u), uint(8u)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size, (workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size) | (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (0u) / uint(_GLF_ONE(1.0, injectionSwitch.y)))))) << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), min(uint(8u), uint(8u))), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size)) + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) + 0u))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - 0u)) + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size, min(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size))))) << 0u) + subgroup_local_id, _GLF_IDENTITY(clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size + subgroup_local_id) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x))), workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (_GLF_IDENTITY(0u, 1u * (0u)) << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u), min(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), (workgroup_base + subgroup_id * subgroup_size) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u)))) / 1u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) + 0u)), (clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), (_GLF_IDENTITY(uint(8u), max(uint(8u), _GLF_IDENTITY(uint(8u), uint(uint(uint(8u))))))) ^ 0u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) - 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) + 0u))) * 1u)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), ~ (~ (_GLF_IDENTITY(uint(6u), uint(6u))))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))), (true ? (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) : _GLF_FUZZED(write_val)))) + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) + 0u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u | (~ (0u)))))), (~ (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), 0u | (~ (0u))))))) * uint(_GLF_ONE(1.0, injectionSwitch.y))))), 1u), _GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u ^ (_GLF_FUZZED(subgroup_size))), 0u, 1u, 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u ^ (_GLF_FUZZED(subgroup_size))), 0u, 1u, 1u))))), max(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u ^ (_GLF_FUZZED(subgroup_size))), 0u, 1u, 1u))))), _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u ^ (_GLF_FUZZED(subgroup_size))), 0u, 1u, 1u)))))))) | (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(uvec4(_GLF_IDENTITY(_GLF_FUZZED(subgroup_size), 0u ^ (_GLF_FUZZED(subgroup_size))), 0u, 1u, 1u))))))), 0u, 0u, _GLF_IDENTITY(1u, 0u + (1u))), uvec4(workgroup_base, 0u, 0u, 1u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, 80731u, 148676u))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, 80731u, 148676u))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, 80731u, 148676u))))), min(~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, 80731u, 148676u))))), ~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, 80731u, 148676u)))))))) * (uvec4(1u, 1u, 1u, 1u) & uvec4(1u, 1u, 1u, 1u))), ~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true ? workgroup_base : _GLF_FUZZED(subgroup_size), (_GLF_IDENTITY(true ? workgroup_base : _GLF_FUZZED(subgroup_size), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(true ? workgroup_base : _GLF_FUZZED(subgroup_size), uint(uvec3(true ? workgroup_base : _GLF_FUZZED(subgroup_size), 0u, 0u)))))) >> 0u))), 0u, _GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, 80731u, 148676u))))), ~ (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), clamp(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size)))) + 0u))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(11890u, 181943u, _GLF_IDENTITY(80731u, (false ? _GLF_FUZZED(workgroup_size) : 80731u)), 148676u))))))))))))), min((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), _GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (_GLF_IDENTITY(max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)), (true ? max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)) : _GLF_FUZZED(uvec4(64914u, 185489u, 173735u, 72978u))))) << uvec4(0u, 0u, 0u, 0u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)))), min(uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)))), uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) | (_GLF_FUZZED(subgroup_size))))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)))), (true ? uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u)))) : _GLF_FUZZED(subgroup_local_id))))))), (_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 0u, 0u, 1u), max(uvec4(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size))), 0u, 0u, 1u), uvec4(workgroup_base, 0u, 0u, 1u))))))))) + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), (uint(8u)) + 0u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id)))) * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, 0u | (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id))) - (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), (_GLF_IDENTITY(0u << _GLF_IDENTITY(uint(6u), uint(6u)), clamp(0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(6u), uint(6u)), 0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, uint(uvec3(6u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)))))), uint(6u))))) | (0u << _GLF_IDENTITY(uint(6u), uint(6u))))) << 0u))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, clamp(8u, 8u, 8u))))) ^ _GLF_IDENTITY((subgroup_id), min((subgroup_id), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), max((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))), ((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)))) | ((_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))))))) | 0u))))) * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u ^ (6u))), uint(6u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u ^ (6u))), uint(6u)), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u ^ (6u))), max(uint(_GLF_IDENTITY(6u, 0u ^ (6u))), uint(_GLF_IDENTITY(6u, 0u ^ (6u))))), uint(6u))) / 1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(6u, 0u ^ (6u))), uint(6u)))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u)) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(uvec3(uint(6u), 0u, 0u)), 0u | (uint(uvec3(uint(6u), 0u, 0u))))), uint(_GLF_IDENTITY(6u, max(6u, 6u))))))) + 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u | (workgroup_base)) + subgroup_id * subgroup_size + subgroup_local_id, clamp(workgroup_base + _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((_GLF_IDENTITY(subgroup_id, (0u | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))) | (subgroup_id))), (subgroup_id))), clamp((0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((_GLF_IDENTITY(subgroup_id, (0u | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))) | (subgroup_id))), (subgroup_id))), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((_GLF_IDENTITY(subgroup_id, (0u | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))) | (subgroup_id))), (subgroup_id))), (0u << _GLF_IDENTITY(uint(8u), uint(8u))) ^ _GLF_IDENTITY((subgroup_id), min((_GLF_IDENTITY(subgroup_id, (0u | (0u << _GLF_IDENTITY(uint(4u), uint(4u)))) | (subgroup_id))), (subgroup_id)))))) * subgroup_size + subgroup_local_id, workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(subgroup_local_id, uint(uint(subgroup_local_id))), (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))), _GLF_IDENTITY(1u, (1u) | 0u) * (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))))) : _GLF_FUZZED(write_val))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u + (subgroup_size))))), subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(subgroup_id * subgroup_size, 0u, 1u, 0u)))) * 1u), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(_GLF_IDENTITY(uint(6u), clamp(uint(6u), uint(6u), _GLF_IDENTITY(uint(6u), 0u + (uint(6u))))), 0u, 0u))), uint(6u)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) | (subgroup_size)) + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))), 1u * (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))))) : _GLF_FUZZED(write_val))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec4(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), 0u, 1u, 0u)))) * 1u), subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))) + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))))) - 0u), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, (workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))) + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(_GLF_IDENTITY(uint(6u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uint(6u), (uint(6u)) - 0u) : _GLF_FUZZED(workgroup_size))), 0u, 0u))), uint(6u)))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u))), 1u * ((workgroup_base + subgroup_id * subgroup_size + subgroup_local_id) - (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(uvec3(uint(6u), 0u, 0u))), uint(6u)))))))))) ^ 0u) + 0u)))) - 0u)) + 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), true, true, false))))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && (_GLF_DEAD(false)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (mat2(injectionSwitch, 1.0, 0.0)) * mat2(1.0))) * mat2(1.0)))).y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read_val = atomicLoad(write_val, 4, 64, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | (0)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), bool(bvec3(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), false, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), (bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, false)))), (bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 buf[virtual_gid] = uint(subgroupAllEqual(read_val));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
