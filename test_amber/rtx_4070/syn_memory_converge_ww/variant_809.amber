#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false)), bool(bvec2(_GLF_IDENTITY(bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false)), ! (! (bool(bvec4(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false))))), false)))), bool(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true, false)), true && (bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true, false))))))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(311.942), (_GLF_FUZZED(311.942)) - 0.0), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(311.942, mix(float(_GLF_FUZZED(1.7)), float(_GLF_IDENTITY(311.942, (311.942) / 1.0)), bool(true)))), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true, false)), true && (bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true, false))))))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(311.942), (_GLF_FUZZED(311.942)) - 0.0), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(311.942, mix(float(_GLF_FUZZED(1.7)), float(_GLF_IDENTITY(311.942, (311.942) / 1.0)), bool(true)))), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true, false), bvec3(bvec3(bvec3(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true, false)), true && (bool(bvec3(bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)), true, false))))))))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch)))[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED(311.942), (_GLF_FUZZED(311.942)) - 0.0), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(311.942, mix(float(_GLF_FUZZED(1.7)), float(_GLF_IDENTITY(311.942, (311.942) / 1.0)), bool(true)))), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true, false)))), false)))))), ((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.8), _GLF_IDENTITY((injectionSwitch)[1], float(vec4((injectionSwitch)[1], 1.0, 1.0, sin(0.0))))), vec2((injectionSwitch)[0], _GLF_FUZZED(-533.817)), bvec2(true, false))).x > injectionSwitch.y))))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))) && true))), (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))).x, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), (_GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(0.0, 0.0) + (vec2((injectionSwitch)[0], (injectionSwitch)[1])))) / sqrt(vec2(1.0, 1.0))), vec2(_GLF_FUZZED(311.942), _GLF_FUZZED(-5576.1787)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)))) > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true))), true, false))))) || false))))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(_GLF_IDENTITY(6, _GLF_IDENTITY((6) / 1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY((6) / 1, int(ivec4((6) / 1, 0, 0, 1)))))), 6))), int(6)) : _GLF_FUZZED(59039)))) | 1) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, int(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((0), (_GLF_IDENTITY((0), clamp((0), (0), _GLF_IDENTITY((0), 0 + ((0)))))) ^ _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
              }
            }
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat2(injectionSwitch.y, 0.0, log(1.0), 0.0)), float(_GLF_IDENTITY(vec4(float(mat2(injectionSwitch.y, 0.0, log(1.0), 0.0)), 0.0, 1.0, 1.0), max(_GLF_IDENTITY(vec4(float(mat2(injectionSwitch.y, 0.0, log(1.0), 0.0)), 0.0, 1.0, 1.0), (vec4(float(mat2(injectionSwitch.y, 0.0, log(1.0), 0.0)), 0.0, 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)), vec4(float(mat2(injectionSwitch.y, 0.0, log(1.0), 0.0)), 0.0, 1.0, 1.0))))))) - 0.0))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true))))))), bool(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) && true))))))), false)))))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec4(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec3(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(1.0))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))) && true)), false, false)), bool(bvec4(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) && true))), _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, false)))))), false)), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(true, false, false), false))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, _GLF_IDENTITY(false, (false) || false)), false)))))))))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, true))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, true))))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, true)))))) || false), true, false, false)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, true))))), (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), bool(bvec4(bool(bvec4(false, true, false, false)), false, false, true)))))) || false), true, false, false)), true, true))))))), bvec3(bvec4(bvec3(true, false, false), false)))))))))), (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, _GLF_IDENTITY(false, ! (! (false)))), false)))))))) && true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) || false)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))) && true)) || false)))
            break;
          }
         else
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_FUZZED(-2428.9013) : injectionSwitch[0])), injectionSwitch[1])).x > injectionSwitch.y))))
                    return;
                   continue;
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), min(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))))), (injectionSwitch.x < injectionSwitch.y) && true)))))
                  {
                   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) / 1)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))), max((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))), _GLF_IDENTITY((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))), min((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5))))))))))) | ((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1)), false), false, false)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_GLF_IDENTITY(_injected_loop_counter < 1, bool(bvec2(_injected_loop_counter < 1, false))), true)))))))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true))), bool(bvec2((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, bool(_GLF_IDENTITY(bvec2(_injected_loop_counter < 1, true), bvec2(bvec4(bvec2(_injected_loop_counter < 1, true), true, false)))))))))) && _GLF_IDENTITY(true, bool(bvec3(true, true, true))), true)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec4(_GLF_IDENTITY(false || (false), bool(bvec2(false || (false), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))));
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec2(false, true))))), false || (bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(bvec2(false, true))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), ! (! (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))))))));
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      return;
    }
   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   for(int _injected_loop_counter = (79511 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.1)), bool(false))), float(mat2x3(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, 1.0))) > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-8.1)), bool(false))), float(mat2x3(injectionSwitch.x, log(1.0), 1.0, 0.0, 1.0, 1.0))) > injectionSwitch.y)) || false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) * 1.0)) / exp(determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, (_injected_loop_counter < 1) && true)); _injected_loop_counter ++)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size)))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | uvec3(0u, 0u, 0u)))), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (_GLF_IDENTITY(gl_NumWorkGroups[0], ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups[0], min(gl_NumWorkGroups[0], gl_NumWorkGroups[0])))))) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(1, (1) + 0)], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)]))))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(_GLF_IDENTITY(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)), min(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)))), (clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicMax(subgroup_id, subgroup_size)) : 0u)), 0u, 0u))) * uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size)))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | uvec3(0u, 0u, 0u)))), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (_GLF_IDENTITY(gl_NumWorkGroups[0], ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups[0], min(gl_NumWorkGroups[0], gl_NumWorkGroups[0])))))) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(1, (1) + 0)], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)]))))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(_GLF_IDENTITY(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)), min(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)))), (clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicMax(subgroup_id, subgroup_size)) : 0u)), 0u, 0u))) * uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size)))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | uvec3(0u, 0u, 0u)))), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), max(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1)))), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (_GLF_IDENTITY(gl_NumWorkGroups[0], ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups[0], min(gl_NumWorkGroups[0], gl_NumWorkGroups[0])))))) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(1, (1) + 0)], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)]))))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(_GLF_IDENTITY(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)), min(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u)))), (clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(atomicMax(subgroup_id, subgroup_size)) : 0u)), 0u, 0u))) * uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u)))) - uvec3(0u, 0u, 0u))) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u))[2]))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(((subgroup_local_id | uvec3(82173u, 22020u, 79771u)) ^ uvec3(47955u, 181721u, 118694u))) : (gl_NumWorkGroups) ^ uvec3(0u, 0u, 0u))))) << uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) ^ 0u)) | (0u)), 0u, 0u))[2]))) ^ uvec3(0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), max(~ (0u), ~ (0u))))), _GLF_IDENTITY(0u, ~ (~ (0u))))) - uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(100758u, 189140u, 59792u)) : gl_NumWorkGroups)), _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], _GLF_IDENTITY((true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size)), ~ (~ ((true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size))))))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)])))), uvec3(0u, 0u, 0u) + (max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), (_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u)) ^ 0u) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (gl_NumWorkGroups[_GLF_IDENTITY(1, (1) ^ 0)])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)]))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec4(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | 0), 0, 0, 1))), clamp(1, 1, 1)))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(21457) : 1)), 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)])))))) / uvec3(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), 1u))), 1u, 1u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), uvec3(uvec4(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), 0u)))), (true ? uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))), 0u)), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), uvec3(uvec4(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), 0u)))) : _GLF_FUZZED(atomicMin(write_val, 189603u)))))), _GLF_IDENTITY(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) << 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((0u)), min(_GLF_IDENTITY(uint((0u)), ~ (~ (uint((0u))))), _GLF_IDENTITY(uint((0u)), uint(uint(uint((0u))))))), _GLF_IDENTITY(uint(uvec4(uint((0u)), 1u, 0u, 1u)), uint(uvec3(uint(uvec4(uint((0u)), 1u, 0u, 1u)), 1u, 0u))))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) << 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((0u)), min(_GLF_IDENTITY(uint((0u)), ~ (~ (uint((0u))))), _GLF_IDENTITY(uint((0u)), uint(uint(uint((0u))))))), _GLF_IDENTITY(uint(uvec4(uint((0u)), 1u, 0u, 1u)), uint(uvec3(uint(uvec4(uint((0u)), 1u, 0u, 1u)), 1u, 0u)))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(0u, 0u, 0u)), (clamp(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, (0u) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, _GLF_IDENTITY(1u, 0u | (1u))))), uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(100758u, 189140u, 59792u)) : gl_NumWorkGroups)), _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], _GLF_IDENTITY((true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size)), ~ (~ ((true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size))))))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)])))), uvec3(0u, 0u, 0u) + (max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), (_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u)) ^ 0u) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (gl_NumWorkGroups[_GLF_IDENTITY(1, (1) ^ 0)])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)]))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) << uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), min(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec4(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | 0), 0, 0, 1))), clamp(1, 1, 1)))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(21457) : 1)), 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (gl_NumWorkGroups[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)])))))) / uvec3(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u)), 1u))), 1u, 1u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), uvec3(uvec4(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), 0u)))), (true ? uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, _GLF_IDENTITY(0u, ~ (~ (0u))))), 0u)), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), uvec3(uvec4(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), 0u)))) : _GLF_FUZZED(atomicMin(write_val, 189603u)))))), _GLF_IDENTITY(clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) << 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((0u)), min(_GLF_IDENTITY(uint((0u)), ~ (~ (uint((0u))))), _GLF_IDENTITY(uint((0u)), uint(uint(uint((0u))))))), _GLF_IDENTITY(uint(uvec4(uint((0u)), 1u, 0u, 1u)), uint(uvec3(uint(uvec4(uint((0u)), 1u, 0u, 1u)), 1u, 0u))))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) << 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((0u)), min(_GLF_IDENTITY(uint((0u)), ~ (~ (uint((0u))))), _GLF_IDENTITY(uint((0u)), uint(uint(uint((0u))))))), _GLF_IDENTITY(uint(uvec4(uint((0u)), 1u, 0u, 1u)), uint(uvec3(uint(uvec4(uint((0u)), 1u, 0u, 1u)), 1u, 0u)))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(0u, 0u, 0u)), (clamp(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, (0u) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, _GLF_IDENTITY(1u, 0u | (1u))))), uvec3(0u, 0u, 0u))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(100758u, 189140u, 59792u)) : gl_NumWorkGroups)), _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], _GLF_IDENTITY((true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size)), ~ (~ ((true ? gl_NumWorkGroups[2] : _GLF_FUZZED(subgroup_size))))))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])) | uvec3(0u, 0u, 0u)))), _GLF_IDENTITY(max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(1, 1, 1))) << 0)], _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u))[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) ^ 0u), 0u ^ (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) - 0u), gl_NumWorkGroups[1], gl_NumWorkGroups[2]))[_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(29624))) : _GLF_FUZZED(89291)))])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)])))), uvec3(0u, 0u, 0u) + (max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, ~ (~ (1))), 1, 1))) << 0)], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-59811) : _GLF_IDENTITY(0, (0) << 0)))]) + 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) | (gl_NumWorkGroups[0])), (gl_NumWorkGroups[0]) + 0u), (_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u)) ^ 0u) : _GLF_FUZZED(subgroup_id))), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], ~ (~ (gl_NumWorkGroups[0]))), gl_NumWorkGroups[1], gl_NumWorkGroups[2]))[1], 0u ^ (gl_NumWorkGroups[_GLF_IDENTITY(1, (1) ^ 0)])), _GLF_IDENTITY(gl_NumWorkGroups[_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), (2))) | 0)], uint(uvec3(gl_NumWorkGroups[_GLF_IDENTITY(2, _GLF_IDENTITY((2), min((2), (2))) | 0)], 0u, 1u)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(4620) : 0))], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), _GLF_IDENTITY(2, min(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))))])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) / 1u), _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(4620) : 0))], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, ~ (~ (2))), _GLF_IDENTITY(2, min(_GLF_IDENTITY(2, clamp(2, 2, 2)), 2))))])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], (gl_NumWorkGroups[1]) / 1u), _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size))) : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], min(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])))), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (0) ^ 0)], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << uvec3(0u, 0u, 0u)))))[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max(_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), ~ (~ ((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), exp(0.0), 1.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u))[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], max(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])))), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) ^ (gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), (min(gl_NumWorkGroups, gl_NumWorkGroups)) | (_GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), ~ (~ (min(gl_NumWorkGroups, gl_NumWorkGroups)))))))))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(_GLF_IDENTITY(uvec2(_GLF_FUZZED(subgroup_size), 1u), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_FUZZED(subgroup_size), 1u), (true ? uvec2(_GLF_FUZZED(subgroup_size), 1u) : _GLF_FUZZED(uvec2(189820u, 266u))))))))))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))), gl_NumWorkGroups))[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((-753.524 - 8877.9808))), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + sin(0.0))), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), uvec3(uvec4((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u))[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_FUZZED(subgroup_size)))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], max(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], max(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])))), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (uvec3(1u, 1u, 1u) ^ uvec3(1u, 1u, 1u)) ^ (gl_NumWorkGroups)), min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), (min(gl_NumWorkGroups, gl_NumWorkGroups)) | (_GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), ~ (~ (min(gl_NumWorkGroups, gl_NumWorkGroups)))))))))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups[2], (true ? gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(2, int(int(2))) : _GLF_FUZZED(-97862)))] : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), uint(_GLF_IDENTITY(uvec2(_GLF_FUZZED(subgroup_size), 1u), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(_GLF_FUZZED(subgroup_size), 1u), (true ? uvec2(_GLF_FUZZED(subgroup_size), 1u) : _GLF_FUZZED(uvec2(189820u, 266u))))))))))), _GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (_GLF_IDENTITY((uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), max((uvec3(_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(1u, 1u, 1u) * (gl_NumWorkGroups))))), gl_NumWorkGroups))[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2])), (uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups))[2]))))) - uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u))))) - uvec3(0u, 0u, 0u))) + uvec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED((-753.524 - 8877.9808))), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) + sin(0.0))), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), 0u))) << uvec3(0u, 0u, 0u)), max((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), 1, 1), _GLF_IDENTITY(min(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec4(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | 0), 0, 0, 1))), clamp(1, 1, 1)), max(min(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec4(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | 0), 0, 0, 1))), clamp(1, 1, 1)), _GLF_IDENTITY(min(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec4(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | 0), 0, 0, 1))), clamp(1, 1, 1)), (false ? _GLF_FUZZED(-78999) : min(_GLF_IDENTITY(clamp(1, 1, 1), int(ivec4(_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) | 0), 0, 0, 1))), clamp(1, 1, 1)))))))), _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(21457) : 1)), 1, 1))) << 0, ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(21457) : 1)), 1, 1))) << 0) | 0))], gl_NumWorkGroups[2]))), (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) + 0u), _GLF_IDENTITY(gl_NumWorkGroups[1], 0u ^ (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(104308u, 100363u, 45177u))))[1])), gl_NumWorkGroups[_GLF_IDENTITY(2, (2) | 0)])))))) / uvec3(_GLF_IDENTITY(1u, uint(uvec2(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u) | (1u), 0u | ((1u) | (1u)))), 1u)), 1u))), 1u, 1u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(uvec3(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), uvec3(uvec4(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), 0u)))), (true ? uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), (true ? _GLF_IDENTITY((0u), ~ (_GLF_IDENTITY(~ ((0u)), uint(uvec3(~ ((0u)), 0u, 1u))))) : _GLF_FUZZED(bitfieldReverse(atomicOr(subgroup_size, subgroup_local_id))))))))), 0u)), (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(7u), uint(7u))), 0u), uvec3(uvec4(uvec3(0u, (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(7u), uint(7u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(uint(7u), uint(7u))))))), 0u), 0u)))) : _GLF_FUZZED(atomicMin(write_val, 189603u)))))), _GLF_IDENTITY(clamp(uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) + (11035u & (0u << _GLF_IDENTITY(uint(4u), uint(4u))))), 0u, 0u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) << 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((0u)), min(_GLF_IDENTITY(uint((0u)), ~ (~ (_GLF_IDENTITY(uint((0u)), clamp(uint((0u)), uint((0u)), uint((0u))))))), _GLF_IDENTITY(uint((0u)), uint(uint(uint((0u))))))), _GLF_IDENTITY(uint(uvec4(uint((0u)), 1u, 0u, 1u)), uint(uvec3(uint(uvec4(uint((0u)), 1u, 0u, 1u)), 1u, 0u))))))), ((~ _GLF_IDENTITY(_GLF_IDENTITY((0u), ((0u)) << 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((0u)), min(_GLF_IDENTITY(uint((0u)), ~ (~ (uint((_GLF_IDENTITY(0u, 0u | (0u))))))), _GLF_IDENTITY(uint((0u)), uint(uint(uint((0u))))))), _GLF_IDENTITY(uint(uvec4(uint((0u)), 1u, 0u, 1u)), uint(uvec3(uint(uvec4(uint((_GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, 0u | (0u)) : _GLF_FUZZED(subgroup_size))))), 1u, 0u, 1u)), 1u, 0u)))))))) | uint(_GLF_ZERO(0.0, injectionSwitch.x))))), uvec3(0u, 0u, 0u)), (clamp(uvec3(0u, 0u, 0u), uvec3(_GLF_IDENTITY(0u, (0u) | (0u << _GLF_IDENTITY(uint(6u), uint(6u)))), 0u, _GLF_IDENTITY(0u, ~ (~ (0u)))), uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, _GLF_IDENTITY(1u, 0u | (1u))))), uvec3(0u, 0u, 0u))) : _GLF_FUZZED(uvec3(98293u, 174003u, 45791u))))) - uvec3(0u, 0u, 0u))), uvec3(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u) + (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) ^ uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), ((0u)) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) + uvec3(0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), 0u)).x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec4(gl_WorkGroupSize, 1u)), (uvec3(uvec4(gl_WorkGroupSize, 1u))) << uvec3(0u, 0u, 0u))).x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, clamp(gl_WorkGroupID, gl_WorkGroupID, gl_WorkGroupID)).x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (workgroup_size) | (_GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)))) * workgroup_id;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id * subgroup_size)))), clamp(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u)) >> 0u)) / 1u), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u), max(subgroup_id * subgroup_size, subgroup_id * subgroup_size))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)) + subgroup_base + subgroup_local_id;
 atomicStore(write_val, uint(virtual_gid), 4, _GLF_IDENTITY(64, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(ivec3(64, 0, 0)))) << (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, true))), ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))))))))) ? _GLF_IDENTITY(int(0), 0 ^ (int(0))) : _GLF_FUZZED(24043))), int(0))))), int(int((64)))))), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 0);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))) || false), true, true))), true && (false))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) << 0))) >> _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, (0) ^ 0))))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(289.593)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, true && (true))))) > injectionSwitch.y))));
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bvec3(bool(_GLF_IDENTITY(false, false || (false))), true, true))), (bool(_GLF_IDENTITY(false, false || (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || (false)))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)), vec2(mat2(_GLF_IDENTITY(max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)), vec2(vec2(max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))), 1.0, 0.0))))).y)))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), (bool(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || _GLF_IDENTITY(((false)), ! (! (((false))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   do
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    continue;
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, min(_GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), max((read_val), (read_val))) << _GLF_IDENTITY(0u, (0u) - _GLF_IDENTITY(0u, min(0u, 0u)))), _GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val) / 1u, ((read_val) / 1u) ^ 0u)))))), (_GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, min(_GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), max((read_val), (read_val))) << _GLF_IDENTITY(0u, (0u) - 0u)), _GLF_IDENTITY(read_val, (read_val) / 1u))))), (buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(_GLF_IDENTITY(read_val, min(_GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), max((read_val), (read_val))) << _GLF_IDENTITY(0u, (0u) - 0u)), _GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), ((read_val)) << (178874u & uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1u))), (_GLF_IDENTITY(read_val, min(_GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), max((read_val), (read_val))) << _GLF_IDENTITY(0u, (0u) - 0u)), _GLF_IDENTITY(read_val, _GLF_IDENTITY((read_val), ((read_val)) << (178874u & uint(_GLF_ZERO(0.0, injectionSwitch.x)))) / 1u)))) - 0u)))) | _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)))) - 0u);
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0)))) || (_GLF_WRAPPED_LOOP(false))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
