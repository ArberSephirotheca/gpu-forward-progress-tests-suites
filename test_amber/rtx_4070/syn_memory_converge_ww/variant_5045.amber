#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true))))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))), false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false)), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), false, false))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (! (_GLF_IDENTITY(false, (false) || false))))), ! (! (! ((! (! (false))))))))))), true && _GLF_IDENTITY(((_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (! (false)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! ((! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! ((! (! (false)))), (! ((! (! (false))))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! ((! (! (false)))), (! ((! (! (false))))) || false), false, true)))))))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))))))))))))))))), ! (_GLF_IDENTITY(! (((_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (! (false)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! ((! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! ((! (! (false)))), (! ((! (! (false))))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! ((! (! (false)))), (! ((! (! (false))))) || false), false, true)))))))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false)))))))))))))))))))), true && (! (((_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ! (_GLF_IDENTITY(! ((! (! (false)))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! ((! (! (false)))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! ((! (! (false)))), (! ((! (! (false))))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(! ((! (! (false)))), (! ((! (! (false))))) || false), false, true)))))))), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))), bool(bool(! _GLF_IDENTITY((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false))))))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), bool(bvec2(! ((_GLF_IDENTITY(! (! ((! (! (false))))), bool(bool(! (! ((! (! (false)))))))))), false))))))))))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uvec4 GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, true))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (false ? _GLF_FUZZED(uvec3(162082u, 48918u, 58149u)) : gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), bool(bool(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, sin(0.0), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, abs(round(length(normalize(vec2(1.0, 1.0))))), cos(abs(0.0)), cos(0.0), 0.0, 0.0, cos(0.0), 0.0, 1.0, 0.0, abs(1.0)))), 0.0, 0.0, 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(injectionSwitch, sin(0.0), 1.0, abs(0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0 * (_GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(0.0, 0.0, 0.0) + (vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0))), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, sin(0.0), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4(injectionSwitch, sin(0.0), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, exp(0.0), 1.0, 1.0, 0.0))), vec2(_GLF_IDENTITY(mat4(injectionSwitch, sin(0.0), 1.0, abs(_GLF_IDENTITY(0.0, (0.0) - 0.0)), _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(43.43) : _GLF_IDENTITY(0.0, (0.0) - 0.0))))), dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0), mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(5.8)), bool(false))), 0.0, 0.0, 0.0, 0.0) + (mat4(injectionSwitch, sin(0.0), 1.0, abs(0.0), _GLF_IDENTITY(dot(vec3(_GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0)), dot(vec3(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, length(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat3(5.8, -72.25, 9046.3995, 4.6, -685.511, -814.877, 73.86, -4349.9718, 8829.1524)) : _GLF_IDENTITY(mat3(1.0, length(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0), transpose(transpose(mat3(1.0, length(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0)))))))), injectionSwitch.y), 0.0, 0.0), vec3(1.0, 0.0, 0.0))), 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))))).y)))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.w, max(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.w, 0u + (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.w)), GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.w));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(bvec2(bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true)))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bool(bvec3(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), false, false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ! (! ((false)))), (true && _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) || false)), ! (! ((! (_GLF_IDENTITY(false, (false) || false))))))) && true))), ! (! ((false))))) || _GLF_IDENTITY(false, true && (false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.z = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, 1.0))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-2.9), _GLF_FUZZED(vec2(6.2, -2.6).s)), bvec2(false, false))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(true && (false), false || (true && (false)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))))) && true), (_GLF_IDENTITY(bool(bvec2(false, true)), (_GLF_IDENTITY(bool(bvec2(false, true)), bool(bool(_GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) || false))))) && true)) || false)) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(subgroup_base, (subgroup_base) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), ! (! (bool(bvec4(false, true, true, false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0)).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true)))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true), bvec3(bvec3(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))), true)))))))))), true))), bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED((- -544.991))), bool(false))), max(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED((- -544.991))), bool(false))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED((- -544.991))), bool(false))), 1.0 * (_GLF_IDENTITY(injectionSwitch[1], mix(float(injectionSwitch[1]), float(_GLF_FUZZED((- -544.991))), bool(false))))))))).x > injectionSwitch.y)), true), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true), false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), true))))))))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 uint virtual_gid = GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id) * uvec4(1u, 1u, 1u, 1u)), max(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id) * uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id) * uvec4(1u, 1u, 1u, 1u)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id) * uvec4(1u, 1u, 1u, 1u)), min(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id) * uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id) * uvec4(1u, 1u, 1u, 1u)))) : _GLF_FUZZED(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id)))))) >> uvec4(0u, 0u, 0u, 0u)).y + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false) || (false)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, true && (true)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))))))) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7752.7822) : injectionSwitch.x)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) || false), false, true, true)))) || false)) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_DEAD(false)))), ! (! (! (bool(bool(_GLF_DEAD(false)))))))))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  return;
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, clamp(write_val, write_val, _GLF_IDENTITY(write_val, 0u + (write_val)))), 4, 64, 0);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id.x = read_val;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), true))))), (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), true))))), (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec2(bool(_GLF_DEAD(false)), true)))))) || false)) && true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.1)), bool(false))) > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), bool(bvec3(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), bool(bvec2((! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), true))), true, true))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    barrier();
   barrier();
  }
 buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))) >> uvec4(0u, 0u, 0u, 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))) >> uvec4(0u, 0u, 0u, 0u))), (true ? ~ (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))) >> uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))))), GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id)).x)), 0u | (uint(subgroupAllEqual(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)), 0u) ^ (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))) >> uvec4(0u, 0u, 0u, 0u)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))) >> uvec4(0u, 0u, 0u, 0u))), (true ? ~ (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ _GLF_IDENTITY((GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id), max((GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id), _GLF_IDENTITY((GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id), ((GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id)) >> uvec4(0u, 0u, 0u, 0u))))))))) >> uvec4(0u, 0u, 0u, 0u))) : _GLF_FUZZED(GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id))))), GLF_merged4_0_1_8_1_1_13_2_1_14_3_1_12read_valsubgroup_baseworkgroup_baseworkgroup_id)).x))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, cos(0.0), sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), 1.0, 1.0, sin(0.0), 0.0)), vec2(mat2(_GLF_IDENTITY(vec2(mat3x4(injectionSwitch, cos(0.0), sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), 1.0, 1.0, sin(0.0), 0.0)), mat2(1.0) * (vec2(mat3x4(injectionSwitch, cos(0.0), sin(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), 1.0, 1.0, sin(0.0), 0.0)))), 0.0, 0.0)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
