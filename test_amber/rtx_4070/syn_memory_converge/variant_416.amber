#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_5 {
 vec4 _f0;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 mat4x3 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_6 {
 float _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_2 {
 ivec2 _f0;
 uint _f1;
 vec3 _f2;
 int _f3;
 uvec3 _f4;
 mat2x3 _f5;
 uint _f6;
} ;

struct _GLF_struct_1 {
 uint _f0;
 mat4x2 _f1;
 mat3 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_3 {
 uint _f0;
 ivec4 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
} ;

struct _GLF_struct_0 {
 bool _f0;
 mat3 _f1;
} ;

struct _GLF_struct_7 {
 _GLF_struct_0 _f0;
 _GLF_struct_3 _f1;
 uint subgroup_local_id;
 bool _f2;
 _GLF_struct_6 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_0(true, mat3(1.0)), _GLF_struct_3(1u, ivec4(1), _GLF_struct_1(1u, mat4x2(1.0), mat3(1.0), ivec3(1)), _GLF_struct_2(ivec2(1), 1u, vec3(1.0), 1, uvec3(1u), mat2x3(1.0), 1u)), gl_SubgroupInvocationID, true, _GLF_struct_6(1.0, _GLF_struct_4(ivec3(1), mat4x3(1.0), ivec3(1)), _GLF_struct_5(vec4(1.0))));
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.y * GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.z + _GLF_struct_replacement_7.subgroup_local_id;
 GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.w = virtual_gid;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   atomicStore(write_val, uint(GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.w), 4, 64, 0);
  }
 else
  {
  }
 buf[GLF_merged4_0_1_13_1_1_11_2_1_13_3_1_11num_workgroupsubgroup_idsubgroup_sizevirtual_gid.w] = uint(subgroupAllEqual(write_val));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
