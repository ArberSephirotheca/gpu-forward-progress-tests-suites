#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size;
 GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy = GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size;
 uvec2 GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.w = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y = workgroup_size;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x = workgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_base = GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.y * GLF_merged2_0_1_12_1_1_14workgroup_idworkgroup_size.x;
 uint virtual_gid = workgroup_base + GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.w * GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy.y + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.w * GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy.y + ((subgroup_local_id + 1) % GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy.y);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.z = read;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(subgroup_local_id + 1 < GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.xy.y)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 atomicStore(checker[virtual_gid], GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.z, 4, 64, 4);
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         else
          {
          }
         subgroupAll(false);
        }
       else
        {
         atomicStore(buf[virtual_gid], GLF_merged3_0_2_51_2_1_4_3_1_11GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_sizereadsubgroup_id.z, 4, 64, 4);
         do
          {
           subgroupAll(true);
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
