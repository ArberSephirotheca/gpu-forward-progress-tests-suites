#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, sqrt(0.0), abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(vec3(-308.935, 4.2, -13.22).p)))) && true)), bool(bool((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, determinant(mat4(0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(5.9))), 0.0, 0.0)))), 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), 0.0, sqrt(0.0), abs(1.0), 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))).y, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-46.65))), (true ? injectionSwitch.y : _GLF_FUZZED(vec3(-308.935, 4.2, -13.22).p)))) && true)))))))) || false)))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) / vec2(1.0, 1.0)).x))); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) | _GLF_IDENTITY((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u))), ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u)))) | ((uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(6u), uvec3(6u)))))).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, max(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, max(workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u))), uint(uvec2(workgroup_size, 1u))))) * _GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(atomicMax(workgroup_base, subgroup_id)) : (subgroup_id) | (subgroup_id)))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(atomicMax(workgroup_base, subgroup_id)) : (subgroup_id) | (subgroup_id))))) << 0u)) / 1u) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) - 0u)), (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(atomicMax(workgroup_base, subgroup_id)) : (subgroup_id) | (subgroup_id)))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(atomicMax(workgroup_base, subgroup_id)) : (subgroup_id) | (subgroup_id))))) << 0u)) / 1u) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) - 0u)), 1u * (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(atomicMax(workgroup_base, subgroup_id)) : (subgroup_id) | (subgroup_id)))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) | (subgroup_id), (false ? _GLF_FUZZED(atomicMax(workgroup_base, subgroup_id)) : (subgroup_id) | (subgroup_id))))) << 0u)) / 1u) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) - 0u))))) >> 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(int(int(7))))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! _GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - (98128 & 0)) : _GLF_FUZZED((_injected_loop_counter / _injected_loop_counter)))) > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((! (_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))) && true)))) && true), false, true, false))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (_GLF_IDENTITY(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), max(~ (int(_GLF_ZERO(0.0, injectionSwitch.x))), ~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! (_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true), false, true, false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! (_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true), false, true, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! (_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true), false, true, false)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! _GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ! (! (_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec4(_GLF_IDENTITY((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))), ((! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))) && true), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true), true, false)))))))) || false), true, true))), (_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(_GLF_ZERO(0.0, injectionSwitch.x))))) || false)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), min(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), min(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), min(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), min(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))))), (workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) | (subgroup_size)), (subgroup_size) / 1u), max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u)) : _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), 0u + (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))), subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))))), _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) << 0u)))) >> 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) - 0.0))) > injectionSwitch.y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(vec3((injectionSwitch) * mat2(1.0), 1.0)), (vec2(vec3((injectionSwitch) * mat2(1.0), 1.0))) - vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))), ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) * mat2(1.0)) * vec2(1.0, 1.0))).y), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-85.07)), bool(false)))))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))))), true))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec3((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), clamp(vec2(vec4(injectionSwitch, 0.0, 1.0)), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), mat2(1.0) * (vec2(vec4(injectionSwitch, 0.0, 1.0)))), _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 1.0)), vec2(mat4x2(vec2(vec4(injectionSwitch, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0)))))).y)), true)))))))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, false)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, false))))) && true) || false)))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))))), true && (bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))))))))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
              }
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               return;
              }
            }
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(-64796))) / int(_GLF_ONE(1.0, injectionSwitch.y))), min(~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-26.52), _GLF_FUZZED(float(133657u))), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))).y))), ~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, injectionSwitch.y))))), min(_GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(-64796))) / int(_GLF_ONE(1.0, injectionSwitch.y))), min(~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-26.52), _GLF_FUZZED(float(133657u))), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))).y))), ~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(~ (_GLF_IDENTITY((int(_GLF_ZERO(0.0, injectionSwitch.x))), (true ? (int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(-64796))) / int(_GLF_ONE(1.0, injectionSwitch.y))), min(~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(-26.52), _GLF_FUZZED(float(133657u))), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(true, true)))).y))), ~ ((int(_GLF_ZERO(0.0, injectionSwitch.x))) / int(_GLF_ONE(1.0, injectionSwitch.y)))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)), ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))) : _GLF_FUZZED(bitfieldReverse(_injected_loop_counter))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) + 0)), ((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)), ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))) : _GLF_FUZZED(bitfieldReverse(_injected_loop_counter))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) + 0))) | ((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)), ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))) : _GLF_FUZZED(bitfieldReverse(_injected_loop_counter))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) + 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1)))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)), (6) * 1))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) | (int(4))), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1)), ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) >> (0 >> _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(_injected_loop_counter) : 4)))), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4)))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))) : _GLF_FUZZED(bitfieldReverse(_injected_loop_counter))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) + 0)), ((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) / 1)))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0)), ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), _GLF_IDENTITY(0, 0 | (0))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, clamp(4, 4, 4)))))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))), ~ (~ (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))))) : _GLF_FUZZED(bitfieldReverse(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) + 0))) | ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1)))), (_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, (1) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4)), 0 | ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) ^ 0) : _GLF_FUZZED(61696)))) >> _GLF_IDENTITY(int(1), int(1)), ((_GLF_IDENTITY(1, (1) + 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(_GLF_IDENTITY(1, _GLF_IDENTITY((1), min((1), (1))) * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), max(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 + (4))), int(4)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 ^ (4))), int(4)), _GLF_IDENTITY(int(4), int(4)))))), 0 | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(ivec2(int(4), 0))), clamp(_GLF_IDENTITY(int(4), int(ivec2(int(4), 0))), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0))), _GLF_IDENTITY(int(4), int(ivec2(int(4), 0)))))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(ivec2(int(4), 0), ivec2(0, 0) ^ (ivec2(int(4), 0)))))) : _GLF_FUZZED(bitfieldReverse(_injected_loop_counter))))) >> _GLF_IDENTITY(int(4), int(4))))))), int(1))))) >> _GLF_IDENTITY(int(1), int(1))) + 0)))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))), max(_GLF_IDENTITY(int(6), int(6)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1), (false ? _GLF_FUZZED((_injected_loop_counter --)) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) / 1)))))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : 6)), (6) * 1)))))))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / int(_GLF_ONE(1.0, injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), false))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 0);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, (1) / 1)), 4, 64, 4);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) < subgroup_size)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec2(false, true))) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) / vec2(1.0, 1.0))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec3(-73.10, -4.1, -7.4).z)), bool(false))), injectionSwitch.y))).x > injectionSwitch.y))))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
     subgroupAll(false);
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
            barrier();
           if(_GLF_DEAD(false))
            break;
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), false, true))), (false) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), false, true))), (false) && true)), true)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), false, true))), (false) && true)), true))), ! (! (! (bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true))))), false, true))), (false) && true)), true))))))))))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))), vec2(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0))[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))), (_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))), (_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])))) * 1.0)) / 1.0) : _GLF_FUZZED(exp(-94.41))))), injectionSwitch[1])).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED((6.9))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((6.9))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.8), _GLF_FUZZED(0.2)), bvec2(false, false)))) * vec2(1.0, 1.0)).x, (injectionSwitch.x) - abs(abs(0.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) - vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-712.544) : 0.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41))))), clamp(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41))))), (false ? _GLF_FUZZED(9288.3792) : _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41))))))), _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, min(0, 0))]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, 1 * (0))]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41))))), clamp(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - sin(0.0)), _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), _GLF_IDENTITY(min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])), (true ? _GLF_IDENTITY(min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])), (true ? min(clamp(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], min(injectionSwitch[0], injectionSwitch[0])))), (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])) : _GLF_FUZZED(reflect(97.25, -524.241)))) : _GLF_FUZZED(-79.96)))) : _GLF_FUZZED(_GLF_IDENTITY(exp(-94.41), clamp(exp(-94.41), exp(-94.41), exp(-94.41))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) ? _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))), mix(float(_GLF_FUZZED(-1039.7515)), float(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])))), bool(true))) : _GLF_FUZZED(_GLF_IDENTITY(exp(-94.41), (_GLF_IDENTITY(exp(-94.41), (exp(-94.41)) / 1.0)) * 1.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(458.662) : _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) ? _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))), mix(float(_GLF_FUZZED(-1039.7515)), float(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])))), bool(true))) : _GLF_FUZZED(_GLF_IDENTITY(exp(-94.41), (_GLF_IDENTITY(exp(-94.41), (exp(-94.41)) / 1.0)) * 1.0))))))), (false ? _GLF_FUZZED(9288.3792) : _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[_GLF_IDENTITY(0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0 : _GLF_FUZZED(39769)))], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))), mix(float(_GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0])))), float(_GLF_FUZZED(637.453)), bool(false))) : _GLF_FUZZED(exp(-94.41))))))), _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), (true ? _GLF_IDENTITY(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), min(clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) / 1.0), injectionSwitch[0]), clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(0, 1 * (_GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))], (injectionSwitch[0]) / 1.0), injectionSwitch[0]))) : _GLF_FUZZED(exp(-94.41)))))))) - 0.0), injectionSwitch[1])).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((6.9), (true ? (6.9) : _GLF_FUZZED(-8.6))))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(841.749, -9033.7854)) : (injectionSwitch))), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((6.9))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x) / 1.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((6.9), (true ? (6.9) : _GLF_FUZZED(-8.6))))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(841.749, -9033.7854)) : (injectionSwitch))), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((6.9))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((6.9), (true ? (6.9) : _GLF_FUZZED(-8.6))))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(841.749, -9033.7854)) : (injectionSwitch))), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((6.9))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x) / 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY((6.9), (true ? (6.9) : _GLF_FUZZED(-8.6))))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(841.749, -9033.7854)) : (injectionSwitch))), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((6.9))), vec2(_GLF_FUZZED(-711.879), _GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch)))) + vec2(0.0, 0.0))[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).x) / 1.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - abs(abs(0.0))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && _GLF_IDENTITY(true, (true) && true))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], max(((injectionSwitch))[0], ((injectionSwitch))[0])), ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(86.15)), bvec2(false, false))) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))), ((false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(((injectionSwitch))[0], max(((injectionSwitch))[0], ((injectionSwitch))[0])), ((injectionSwitch))[1]), vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(86.15)), bvec2(false, false))) * mat2(1.0), max((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))))) * mat2(1.0))).y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-8.1, 661.328)))).x > injectionSwitch.y)))), _GLF_TRUE(_GLF_IDENTITY(true, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(_GLF_IDENTITY(true, false || (true)))))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), ! (! (! (bool(_GLF_IDENTITY(true, false || (true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (true)))), false || (bool(bool(_GLF_IDENTITY(true, false || (true))))))), (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (true)))), false || (bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bool(false || (true))), true && (bool(bool(false || (true))))))))))))) || false))))) && true))))))))), ! (! ((! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), false || (false || (true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), bool(bool(_GLF_IDENTITY(true, false || (true)))))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, false || (true))))), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(true, false || (true)))), ! (! (! (bool(_GLF_IDENTITY(true, false || (true)))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (true)))), false || (bool(bool(_GLF_IDENTITY(true, false || (true))))))), (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (true)))), false || (bool(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bool(false || (true))), true && (bool(bool(false || (true))))))))))))) || false))))) && true))))))))))))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y)))))), (bool(bool(_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), bool(bool((injectionSwitch.x < injectionSwitch.y))))))) || false)))))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     atomicStore(buf[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (false ? _GLF_FUZZED(clamp(-35177, 46921, 37732)) : 4)), 4)));
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false || (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true)))
      barrier();
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(8720) : int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(0 | 1, 0 ^ (0 | 1)))); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
