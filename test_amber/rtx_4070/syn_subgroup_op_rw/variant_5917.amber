#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 uint virtual_gid;
 uint _f0;
 ivec2 _f1;
 ivec3 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_1 {
 mat2 _f0;
 uvec4 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 ivec4 _f1;
 int _f2;
} ;

struct _GLF_struct_2 {
 int _f0;
 mat4x2 _f1;
 _GLF_struct_0 _f2;
 vec3 _f3;
 _GLF_struct_1 _f4;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id;
 uvec4 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz = GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.x = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.z = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.w = workgroup_id;
 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y = GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.w;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.z = GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.y;
 uint workgroup_base = GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.w * GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.z;
 GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.y = workgroup_base;
 uint subgroup_base = GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id.x * GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.x;
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.y = subgroup_base;
 _GLF_struct_4 _GLF_struct_replacement_4 = _GLF_struct_4(ivec3(1), _GLF_struct_2(1, mat4x2(1.0), _GLF_struct_0(uvec2(1u), ivec4(1), 1), vec3(1.0), _GLF_struct_1(mat2(1.0), uvec4(1u), mat2x4(1.0))), _GLF_struct_3(GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.y + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.y + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.z, 1u, ivec2(1), ivec3(1), mat2(1.0)));
 uint next_virtual_gid = GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.y + GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.y + ((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.z + 1) % GLF_merged2_0_3_71_3_1_14GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_idworkgroup_size.xyz.x);
 GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.x = next_virtual_gid;
 uint read = atomicLoad(buf[_GLF_struct_replacement_4._f2.virtual_gid], 4, 64, 2);
 if((GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.z % 2) == 0)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.x], uint(1), 4, 64, 4);
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
    {
     subgroupAll(false);
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_17_3_1_12next_virtual_gidsubgroup_basesubgroup_local_idworkgroup_id.x], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_struct_replacement_4._f2.virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
