#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 bvec3 _f0;
 ivec4 _f1;
 float _f2;
 ivec4 _f3;
 bvec2 _f4;
 bvec4 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_8 {
 mat2 _f0;
 vec2 _f1;
 uvec4 _f2;
 uvec2 _f3;
 mat4x3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_7 {
 bool _f0;
} ;

struct _GLF_struct_11 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_10 _f3;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 _GLF_struct_11 _f1;
 uint next_virtual_gid;
} ;

struct _GLF_struct_4 {
 mat3x2 _f0;
 bvec4 _f1;
 mat4 _f2;
 uvec2 _f3;
 mat2x3 _f4;
 mat2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_5 {
 ivec4 _f0;
 uint _f1;
 uvec3 _f2;
 _GLF_struct_4 _f3;
 int _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_2 {
 int _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
} ;

struct _GLF_struct_1 {
 uint _f0;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uint _f1;
 ivec4 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_6 {
 uint workgroup_size;
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_3 _f2;
 vec2 _f3;
 uvec3 _f4;
 _GLF_struct_5 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-2.0)), vec2(_GLF_FUZZED(7.3), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0)), bvec2(false, true))).x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))))) || false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_IDENTITY(false, (false) || false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-0.0), _GLF_FUZZED(-60.84)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * 1.0)), bvec2(true, true))).y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), (injectionSwitch.x < injectionSwitch.y))) && true)))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))))) << 0), ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))))) << 0)) | ((0 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))), 0 | (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))))) << 0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, false || (_injected_loop_counter < 1))), true, _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_IDENTITY(true, ! (! (true)))))), false || (! (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(bvec3(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_IDENTITY(true, ! (! (true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(bool(bvec3(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_IDENTITY(true, ! (! (true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec3(bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), true, _GLF_IDENTITY(true, ! (! (true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false))), false)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-596.757)), float(injectionSwitch.x), bool(true))))) > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], max(injectionSwitch[1], injectionSwitch[1])))).x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-1.2))) > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED(-5.7)), bool(false))), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(_GLF_FUZZED(-5.7)), bool(false))), false, false, false))))) || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x) * 1.0) > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(gl_WorkGroupSize.x, _GLF_struct_0(uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) * 1u), (_GLF_IDENTITY(1u, (1u) * 1u)) - 0u), ivec4(1), mat2x4(1.0)), _GLF_struct_1(1u), _GLF_struct_3(_GLF_struct_2(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(71917) : _GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1)))))) | 0)))), mat4x2(1.0))), vec2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u))) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u))), (false ? _GLF_FUZZED(uvec3(35812u, 4991u, 20510u)) : (_GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u))))) >> uvec3(0u, 0u, 0u))) / uvec3(1u, 1u, 1u)), _GLF_struct_5(ivec4(_GLF_IDENTITY(1, 1 * (1))), 1u, uvec3(1u), _GLF_struct_4(mat3x2(1.0), bvec4(true), mat4(1.0), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u)))) - 0u)), mat2x3(1.0), mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0))), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(1886.3068, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1886.3068, _GLF_IDENTITY(abs(1.0), float(mat4x2(abs(1.0), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0))), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0))))), min(_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0))))), mix(float(float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))))), float(_GLF_FUZZED(3.9)), bool(false))), float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec3(0.0, sqrt(0.0), 0.0)), mix(float(float(vec3(0.0, sqrt(0.0), 0.0))), float(_GLF_FUZZED((- -0.9))), bool(false)))), 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 0.0, 1.0))))))), (float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, _GLF_IDENTITY(abs(1.0), float(vec3(_GLF_IDENTITY(abs(1.0), min(abs(1.0), abs(1.0))), 0.0, 1.0))), 0.0, 0.0, 1.0, exp(_GLF_IDENTITY(0.0, (0.0) - 0.0)), 0.0, 1.0)))))) / 1.0)))), bool(false))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(1886.3068, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(exp(0.0), mix(float(_GLF_FUZZED(45.36)), float(_GLF_IDENTITY(exp(0.0), max(exp(0.0), exp(0.0)))), bool(true))), 0.0, 1.0))))), _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0, max(_GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0, min((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0, (float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0)), (float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0)))))), bool(false))), (true ? _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(1886.3068, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(_GLF_IDENTITY(0.0, 1.0 * (0.0))), 0.0, 1.0))))), _GLF_IDENTITY((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0, _GLF_IDENTITY(float(vec2((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mod(float(subgroup_id), reflect(267.373, -2.0))) : 0.0)), 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0, 1.0)), clamp(float(vec2((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), float(vec2((_GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.6)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9.5)), bool(false)))), bool(true)))), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0))))), min(float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.6)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9.5)), bool(false)))), bool(true)))), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0))))), float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5.6)), float(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9.5)), bool(false)))), bool(true)))), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))))) / 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5582.3693) : 1.0)))), float(vec2((float(_GLF_IDENTITY(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0), transpose(transpose(mat4x2(1886.3068, abs(1.0), 0.0, 0.0, 1.0, exp(0.0), 0.0, 1.0)))))) / 1.0, 1.0))))))))), bool(_GLF_IDENTITY(false, ! (! (false)))))) : _GLF_FUZZED(-3.4))), 0.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0))))), 1, mat3x4(1.0)));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = _GLF_struct_replacement_6.workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-0.5))), injectionSwitch.x))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(_GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))), clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size)), subgroup_id * subgroup_size))) / uint(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), injectionSwitch.y))) + _GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id))));
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(vec4(1.0), _GLF_struct_11(_GLF_struct_7(true), _GLF_struct_8(_GLF_IDENTITY(mat2(1.0), transpose(transpose(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(0.8, 6345.0898, -2.6, _GLF_IDENTITY(8.7, (false ? _GLF_FUZZED(9.4) : _GLF_IDENTITY(8.7, min(8.7, 8.7))))))))))), vec2(1.0), uvec4(_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(workgroup_base)))), _GLF_IDENTITY(uvec2(1u), clamp(_GLF_IDENTITY(uvec2(1u), (uvec2(0u, 0u) | uvec2(0u, 0u)) + (uvec2(1u))), uvec2(1u), _GLF_IDENTITY(uvec2(1u), (uvec2(1u)) / uvec2(1u, 1u)))), mat4x3(1.0), ivec3(1)), _GLF_struct_9(vec4(1.0), mat3x2(1.0)), _GLF_struct_10(bvec3(true), ivec4(1), 1.0, ivec4(1), bvec2(true), bvec4(true), vec2(1.0))), _GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u) + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), false || (_GLF_IDENTITY(bool(bvec3(false, true, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false), false, true, true))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec4(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0)), max(float(vec4(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0)), float(vec4(injectionSwitch.x, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0))))) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec2(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), 0.0))), false || (injectionSwitch.x > injectionSwitch.y))))) && true)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], min(_GLF_IDENTITY(injectionSwitch[0], (false ? _GLF_IDENTITY(_GLF_FUZZED(-3.2), clamp(_GLF_FUZZED(-3.2), _GLF_IDENTITY(_GLF_FUZZED(-3.2), clamp(_GLF_FUZZED(-3.2), _GLF_FUZZED(-3.2), _GLF_FUZZED(-3.2))), _GLF_FUZZED(-3.2))) : injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), (false ? _GLF_FUZZED(-728.669) : _GLF_IDENTITY(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0]), mix(float(clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), float(_GLF_FUZZED((- 2.9))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), injectionSwitch[1])).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 atomicStore(buf[_GLF_struct_replacement_12.next_virtual_gid], uint(1), _GLF_IDENTITY(4, (0 << _GLF_IDENTITY(int(4), int(4))) | (_GLF_IDENTITY(4, min(4, 4)))), 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(0 | int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(-3250.3530)), bool(false))), (true ? _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), float(_GLF_FUZZED(_GLF_IDENTITY(-3250.3530, max(-3250.3530, -3250.3530)))), bool(false))) : _GLF_FUZZED(-8908.0073)))), _GLF_IDENTITY(_GLF_IDENTITY((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0, (_GLF_IDENTITY((_GLF_IDENTITY(0 | int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)) + 0, 0 + ((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0))) | 0), ((0 | int(_GLF_ZERO(0.0, injectionSwitch.x))) + 0) ^ 0))), _GLF_IDENTITY(0, (0) * 1) | ((_GLF_IDENTITY(0 | int(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) | (0)), 0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(3615))))), _GLF_IDENTITY(0, (0) | 0))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) - 0), 0 | int(_GLF_ZERO(0.0, injectionSwitch.x))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(534.555) : float(_GLF_FUZZED(9.4)))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.51)), bool(false))) : _GLF_FUZZED(6.3)))))) / 1)), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_FUZZED(9.4)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), injectionSwitch.y)), injectionSwitch.y)))) ? _GLF_FUZZED(534.555) : float(_GLF_FUZZED(9.4)))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))), _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.51)), bool(false))) : _GLF_FUZZED(6.3)))))) / 1))) && true); _injected_loop_counter ++)
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))))) * (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5123.4631), min(true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(float(-84778))), vec2(_GLF_FUZZED(-439.242), (injectionSwitch)[1]), bvec2(false, true))).y : _GLF_FUZZED(5123.4631), _GLF_IDENTITY(true ? injectionSwitch.y : _GLF_FUZZED(5123.4631), max(true ? injectionSwitch.y : _GLF_FUZZED(5123.4631), true ? injectionSwitch.y : _GLF_FUZZED(5123.4631)))))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, bool(bool(true)))), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 0.0, 0.0)), (vec2(vec4(injectionSwitch, 0.0, 0.0))) - vec2(0.0, 0.0))).x > injectionSwitch.y))), true)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec2(bvec2(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))))))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
            continue;
           return;
          }
        }
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))
        break;
      }
     atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, 0 | (64)), 4);
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), ! (! ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))), ! (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7264.2826))))))) < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))) && true), true, false))))), false || ((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-7264.2826))))))) < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))) && true), true, false)))))))))), false), true))))), false)), (bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false))), false))) && true)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), ! (! ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))), ! (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((-4.1 / injectionSwitch)) : injectionSwitch)).y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_FUZZED(vec2(33.83, 9.7).y)), vec2(_GLF_FUZZED(-824.801), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), bvec2(false, true)))).x < injectionSwitch.y)), true, false)))))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true, false)))))))), false), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((-4.1 / injectionSwitch)) : injectionSwitch)).y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_FUZZED(vec2(33.83, 9.7).y)), vec2(_GLF_FUZZED(-824.801), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), bvec2(false, true)))).x < injectionSwitch.y)), true, false)))))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true, false)))))))), false), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), (bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((-4.1 / injectionSwitch)) : injectionSwitch)).y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), mix(vec2(((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[0], _GLF_FUZZED(vec2(33.83, 9.7).y)), vec2(_GLF_FUZZED(-824.801), ((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)))[1]), bvec2(false, true)))).x < injectionSwitch.y)), true, false)))))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true, false)))))))), false), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) || false))))), false)), _GLF_IDENTITY((bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))), false || ((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))))), false))), false))), ! (! ((bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))))), false || ((! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))))), false))), false)))))) && true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), ! (! ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))), ! (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false), true))))), false)), (bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false))), false))) && true)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), ! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), ! (! ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))), ! (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false), true))))), false)), (bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false))), false))) && true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))), ! (! ((! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))))))) && true), ! (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false))))))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))) || false)), false), bvec3(bvec4(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false), true))))), false)), (bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))) < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))), false))), false))) && true)))))))) || false)))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y)))), false, false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           break;
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     subgroupAll(false);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) && true)))))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0)), mat3(1.0) * (mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0))))), (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0)), mat3(1.0) * (mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0)))))) / vec2(1.0, 1.0))), (false ? _GLF_FUZZED(vec2(94.18, 683.279)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], _GLF_IDENTITY(((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0, max(((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0, ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0))), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)), (mat2(_GLF_ONE(1.0, injectionSwitch.y))) - mat2(0.0, 0.0, 0.0, 0.0)) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0)), mat3(1.0) * (mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], _GLF_IDENTITY(((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0, min(((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0, ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0))), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[_GLF_IDENTITY(1, 1 * (_GLF_IDENTITY(1, (1) | (1))))]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0))))), (vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], ((mat2(_GLF_ONE(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-332.768) : 1.0)), injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / 1.0)), float(_GLF_FUZZED(636.948)), bool(false))))) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0)), mat3(1.0) * (mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_IDENTITY((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))[0], ((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0]) - 0.0), _GLF_FUZZED(float(true))), vec2(_GLF_FUZZED(-95.66), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(false, true)))), 0.0, determinant(mat2(1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y))), 0.0, 1.0, 1.0, 1.0, sqrt(0.0)))))) / vec2(1.0, 1.0))))).y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, ~ (_GLF_IDENTITY(~ (virtual_gid), max(~ (virtual_gid), ~ (virtual_gid)))))], read, _GLF_IDENTITY(4, (4) << int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 4);
     subgroupAll(true);
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       continue;
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
