#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat2x4 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uint subgroup_size;
 mat2 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_struct_0(mat2x4(1.0)), gl_SubgroupSize, mat2(1.0));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_1.subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_1.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_1.subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < _GLF_struct_replacement_1.subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(2), int(2)))))
    {
     case 40:
     ;
     case 0:
     case 11:
     case 44:
     case 64:
     case 55:
     atomicStore(buf[virtual_gid], read, 4, 64, 4);
     case 17:
     subgroupAll(true);
     break;
     case 98:
     (-42510 != 11930);
     case 56:
     while(bvec4(true, true, false, false)[1])
      {
       if(true)
        {
         switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(7), int(7)))))
          {
           case 0:
           case 92:
           vec3 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
           case 41:
           case 79:
           case 29:
           case 35:
           {
           }
           case 80:
           case 1:
           case 91:
           while(false)
            {
             mat4(-502.383, 6.2, 5618.6714, 9.6, -1677.3148, -0.9, -6.3, -100.571, -1.6, -702.101, -25.29, 39.33, -6.7, -0.6, -8.7, 0.9);
             mat2 _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v, _GLF_SWITCH_0_5v;
             ;
            }
           break;
           case 47:
           mat3x2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
           default:
           1;
          }
        }
       else
        {
         for(         smoothstep(vec3(-7.2, 2.3, -56.66), exp2(vec3(4155.2072, 4028.7135, -3.8)), vec3(581.434, -3.1, 6.4));
 true; (~ uvec4(77619u, 76186u, 125492u, 167470u)).b)
          {
           (-74.90 - mat2x3(3.5, -10.50, -310.555, 96.56, -5909.8391, -4310.5443));
           vec3(7.6);
           mat4x2(-233.600);
           bvec2 _GLF_SWITCH_0_6v[80], _GLF_SWITCH_0_7v[46];
           (+ mat3x2(-263.962, 34.09, 659.071, -6974.1458, 6.2, -261.409));
           vec3(87.42, -8.0, 0.4);
           mat3x2 _GLF_SWITCH_0_8v;
           tanh(atan(cosh(injectionSwitch), vec2(-8.9, -992.460)));
           vec2 _GLF_SWITCH_0_9v[24], _GLF_SWITCH_0_10v, _GLF_SWITCH_0_11v;
          }
         for(         mat3x4(-5.7);
 true; bvec2(true, false))
          {
          }
        }
       {
        {
         mod(cosh(-649.076), -9059.3146);
         vec4(-956.837, 9.1, 87.14, -4.4);
         mat4(-128.977, -5712.8974, 9815.8592, -186.360, 8.1, -5.9, 6.6, -0.3, -8.3, 7.8, -7056.2698, -1.8, 0.7, -193.744, -327.893, 5.7);
        }
        mat2x4(4694.2515, -6685.1710, -566.231, -8.9, -1.9, 444.012, -5426.8048, 3.0);
       }
       for(       172617u;
 bvec3(true, true, true)[1]; bvec3(true, true, true))
        {
         (-7.9 / mat2(0.2, -1202.7501, -8326.1938, -8.2));
         -45.76;
         if(false)
          {
           mat3(mat3x2(-522.869, 3.5, 224.536, 30.41, 218.452, -7554.1225));
           read;
           ivec4 _GLF_SWITCH_0_12v[53];
           mat3x4(mat4x3(-8.1, -18.33, 9.3, 1680.6957, -685.720, 46.14, 513.162, -999.835, -3.5, -0.4, -5.5, 285.589));
           equal(bvec2(true, true), bvec2(true, false));
           (+ mat3x2(-4.5, -8702.1986, 48.63, -708.089, -8951.9687, -6988.0060));
          }
         {
          ;
          bvec2(false, false);
          ivec4(70299, -78890, 16677, 57166);
          (uvec4(187878u, 447u, 55415u, 161516u) | (next_virtual_gid | next_virtual_gid));
          ivec4 _GLF_SWITCH_0_13v[27], _GLF_SWITCH_0_14v[13];
          uvec2 _GLF_SWITCH_0_15v, _GLF_SWITCH_0_16v, _GLF_SWITCH_0_17v[27];
          (false ? -35989 : -45202);
          vec3 _GLF_SWITCH_0_18v, _GLF_SWITCH_0_19v[97], _GLF_SWITCH_0_20v;
         }
         if(bool(48548))
          {
           mat3(-511.551, 51.22, -26.72, 856.578, -122.068, -7.0, -8986.9706, 1.9, -0.3);
           bvec4 _GLF_SWITCH_0_21v, _GLF_SWITCH_0_22v, _GLF_SWITCH_0_23v[46];
          }
         else
          {
           outerProduct(vec4(15.87, -2981.8645, -7.6, 3756.3377), smoothstep(54.05, 190.854, vec3(88.13, 0.2, 473.568)));
           mat4 _GLF_SWITCH_0_24v;
           (- _GLF_SWITCH_0_24v);
           (mat3(338.457, -9464.9578, -88.99, -246.873, 32.03, 3868.1730, -9935.2296, 48.55, -9534.7881) / -72.67);
           mat2x4 _GLF_SWITCH_0_25v;
           mat3x2(mat2x3(-3744.5321, 37.29, 81.94, -18.96, 1.2, 3568.2460));
           mat3x2 _GLF_SWITCH_0_26v;
           mix(bvec3(false, false, false), isnan(vec3(-4.1, 0.6, 2.7)), not(bvec3(true, true, true)));
           uvec3(174952u, 146266u, 66399u);
          }
        }
       if(all(bvec4(true, false, true, true)))
        {
         (mat2(-1.1, -8.5, -272.589, -75.38) / mat2(920.049, -4.5, 7.6, 195.723));
         (virtual_gid % (num_workgroup ++));
         while((sqrt(vec2(-2208.3723, 4.2)) != vec2(vec4(-250.955, -42.86, -9.9, -7905.1424))))
          {
           roundEven(vec4(-632.912, 1.0, -377.869, 622.490));
          }
         for(         bvec2(false, false);
 bvec3(false, false, false).t; ivec3(16962, 22037, -35500))
          {
           switch(_GLF_SWITCH(0))
            {
             case 11:
             findLSB(-19729);
             case 49:
             uvec3(9874u, 82027u, 145722u);
             case 0:
             case 27:
             case 6:
             case 84:
             case 10:
             case 47:
             step(cosh(-200.901), injectionSwitch);
             case 82:
             case 37:
             case 99:
             tanh(-6.7);
             break;
             default:
             1;
            }
          }
        }
       mat4x3 _GLF_SWITCH_0_27v;
       ivec4(-95115, 52773, -64956, 48238);
      }
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
