#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_10 {
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 uvec3 _f0;
} ;

struct _GLF_struct_7 {
 bool _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_6 {
 mat3 _f0;
 bvec2 _f1;
 mat3x4 _f2;
 bvec4 _f3;
 float _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 _GLF_struct_5 _f1;
 _GLF_struct_6 _f2;
 uvec4 GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base;
 _GLF_struct_7 _f3;
} ;

struct _GLF_struct_3 {
 mat3x2 _f0;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 mat4 _f1;
 bvec3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_4 {
 bool _f0;
 _GLF_struct_2 _f1;
 _GLF_struct_3 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_9 {
 _GLF_struct_4 _f0;
 ivec4 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_1 {
 uint subgroup_size;
 ivec4 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_0 {
 uvec2 _f0;
 uint read;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id;
 _GLF_struct_9 _GLF_struct_replacement_9;
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id;
 GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id.xyz = GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz = GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id.xyz;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_10 _GLF_struct_replacement_10;
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_replacement_10.GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x = subgroup_id;
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(gl_SubgroupSize, ivec4(1), mat3x4(1.0));
 _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.x = _GLF_struct_replacement_1.subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id.w = subgroup_local_id;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.z = workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.z;
 _GLF_struct_replacement_10.GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base;
 uint subgroup_base = _GLF_struct_replacement_10.GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.w = subgroup_base;
 uint virtual_gid = _GLF_struct_replacement_10.GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.w + GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id.w;
 _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.y = virtual_gid;
 uint next_virtual_gid = _GLF_struct_replacement_10.GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.w + ((GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id.w + 1) % _GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.x);
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec2(1u), atomicLoad(buf[_GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.y], 4, 64, 2));
 if((GLF_merged2_0_3_68_3_1_17GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_local_id.w % 2) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 else
  {
   subgroupAll(false);
   atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
  }
 subgroupBarrier();
 atomicStore(buf[_GLF_struct_replacement_9._f2.GLF_merged2_0_3_68_3_1_13GLF_merged3_0_1_13_1_1_11_2_1_12subgroup_sizevirtual_gidworkgroup_idsubgroup_base.xyz.y], _GLF_struct_replacement_0.read, 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
