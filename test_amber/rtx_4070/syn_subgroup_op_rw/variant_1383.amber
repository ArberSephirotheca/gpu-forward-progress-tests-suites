#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), true)))))) || false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(0, 0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) / int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), ! (! (bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))))))))) || false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x))) - 0.0) > injectionSwitch.y))), _GLF_IDENTITY(true, bool(bvec3(true, false, false))) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8689.2249)), float(injectionSwitch.y), bool(true))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-8689.2249)), float(injectionSwitch.y), bool(true))))), true, true)))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, _GLF_IDENTITY(false, (false) || false)))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(float(91398u)), _GLF_FUZZED(-1.9)), bvec2(false, false))).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(int(int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
              }
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))))), (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))))) && true)))) && true); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y, (false ? _GLF_FUZZED((2.4 * 1.7)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 1.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, float(vec3(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), 1.0, 1.0)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED((mat4x2(9410.1429, 0.3, 6072.4049, -7887.2381, 1.4, 9527.9831, 6.7, -6825.1489) , -35387)) : int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0)))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), true && (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) * cos(0.0))))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u))))), (~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u)))))) | (~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u))))))))))) + subgroup_local_id, uint(uvec4(workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u))))), (~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u)))))) | (~ ((_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(true, ! (! (true))) ? subgroup_id * subgroup_size : _GLF_FUZZED(168646u))))))))))) + subgroup_local_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u, 0u)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) >> (0 | (-81242 & 0)), ((_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++)))) >> (0 | (-81242 & 0))) | 0)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(int(3), int(3)))))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(sin(vec2(0.0, 0.0))) * (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(refract(injectionSwitch, injectionSwitch, 117.756)) : injectionSwitch)))).y)))))))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(false, true), true, false)), _GLF_IDENTITY(bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, false)))), bvec2(bvec3(bvec2(bvec2(bvec2(bvec4(bvec2(false, true), true, false)))), true))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1) % subgroup_size, (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, uint(uvec4(subgroup_local_id, 1u, 0u, 1u))))) + 1), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))) + 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1), ~ (~ _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1)), 1u * (((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) | (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)))) + 1))))))), ~ (~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))))) + 1), ~ (~ ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id)) + 1)))))))))), 0u, uint(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))))))) % subgroup_size) / 1u));
 uint read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (64) | (64))) | (64)), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   do
    {
     atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - _GLF_IDENTITY(0, (0) ^ 0)))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))), (true ? _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))) : _GLF_FUZZED(2763)))) << 0)))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 + (_GLF_IDENTITY(1, (1) - 0))))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) + (0)), 0, 1), min(ivec4(~ (1), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) * 1)), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (true ? (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))) : _GLF_FUZZED(ivec4(-62197, 2760, -69338, -28636))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))))))), min(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 + (_GLF_IDENTITY(1, (1) - 0))))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) + (0)), 0, 1), min(ivec4(~ (1), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) * 1)), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (true ? (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))) : _GLF_FUZZED(ivec4(-62197, 2760, -69338, -28636))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 + (_GLF_IDENTITY(1, (1) - 0))))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) + (0)), 0, 1), min(ivec4(~ (1), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) * 1)), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (true ? (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))) : _GLF_FUZZED(ivec4(-62197, 2760, -69338, -28636))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168))))))))) >> 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), 0 + (_GLF_IDENTITY(1, (1) - 0))))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), max(~ (1), ~ (1))), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), _GLF_IDENTITY(0, (0 >> _GLF_IDENTITY(int(8), int(8))) + (0)), 0, 1), min(ivec4(~ (1), 0, 0, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, 1 * (1))) * 1)), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (true ? (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))) : _GLF_FUZZED(ivec4(-62197, 2760, -69338, -28636))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - 0))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ _GLF_IDENTITY((1), int(_GLF_IDENTITY(ivec4((1), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))), max(ivec4((1), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))), ivec4((1), ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 + (int(4))))), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(0, min(0, 0)), 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) | ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) ^ ivec4(0, 0, 0, 0)), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))) << ivec4(0, 0, 0, 0))) | (ivec4(~ (1), 0, 0, 1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))), _GLF_IDENTITY(1, (1) | (1))))), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))) ^ _GLF_IDENTITY(ivec4(0, 0, 0, 0), ~ (~ (ivec4(0, 0, 0, 0)))))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168))))))))) >> 0u), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - 0))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), max((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), ivec4(0, 0, 0, 0) ^ ((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))) | (_GLF_IDENTITY(~ (1), 0 | (~ (1))))))), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (_GLF_IDENTITY((1), max((1), (1)))) >> 0), _GLF_IDENTITY((1), ((1)) >> (0 >> _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) - 0))), 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (_GLF_IDENTITY(0 & -12168, min(_GLF_IDENTITY(0 & -12168, int(int(0 & -12168))), 0 & -12168)))))))), min((_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), max((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), ivec4(0, 0, 0, 0) ^ ((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))) | (_GLF_IDENTITY(~ (1), 0 | (~ (1))))))), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (_GLF_IDENTITY((1), max((1), (1)))) >> 0), _GLF_IDENTITY((1), ((1)) >> (0 >> _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) - 0))), 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (_GLF_IDENTITY(0 & -12168, min(_GLF_IDENTITY(0 & -12168, int(int(0 & -12168))), 0 & -12168)))))))), (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, 0 ^ (0)), 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), max((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))), ivec4(0, 0, 0, 0) ^ ((_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), _GLF_IDENTITY(~ (1), (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1)))) | (_GLF_IDENTITY(~ (1), 0 | (~ (1))))))), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ _GLF_IDENTITY((1), clamp((1), _GLF_IDENTITY((1), (_GLF_IDENTITY((1), max((1), (1)))) >> 0), _GLF_IDENTITY((1), ((1)) >> (0 >> _GLF_IDENTITY(int(4), int(4)))))), _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) - 0))), 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (_GLF_IDENTITY(0 & -12168, min(_GLF_IDENTITY(0 & -12168, int(int(0 & -12168))), 0 & -12168)))))))))))), uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (-41687 & 0) + (_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) - 0))))), ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY(int(ivec4(~ _GLF_IDENTITY((1), ((1)) >> _GLF_IDENTITY(0, min(0, 0))), 0, 0, _GLF_IDENTITY(1, (1) ^ 0))), 0 ^ (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), max(_GLF_IDENTITY((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))), ((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), clamp(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))), ivec4(~ (1), 0, 0, 1))))) >> ivec4(0, 0, 0, 0)), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(ivec4(_GLF_IDENTITY(~ (1), ~ (_GLF_IDENTITY(~ (~ (1)), 0 + (~ (~ (1)))))), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, _GLF_IDENTITY(0, 0 + (0)), 1)))), min((_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238))))), (min(ivec4(~ (1), 0, 0, 1), _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (true ? _GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ivec4(~ (1), 0, 0, 1) : _GLF_FUZZED(ivec4(66609, -36871, -80211, -75337)))) : _GLF_FUZZED(ivec4(94160, 40351, 6716, 12238)))))) >> ivec4(0, 0, 0, 0)))), (_GLF_IDENTITY(ivec4(~ (1), 0, 0, 1), min(ivec4(~ (1), 0, 0, 1), ivec4(~ (1), 0, 0, 1)))))))) ^ ivec4(0, 0, 0, 0))), (int(ivec4(~ (1), 0, 0, 1))) | (0 & -12168)))))))))), 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-5.8, -4.4)) : _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 1.0))))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / determinant(mat3(1.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, 1.0)))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
                }
               barrier();
              }
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (true ? _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), mix(vec2(_GLF_FUZZED(-59.64), _GLF_FUZZED(-4.7)), vec2((mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[0], (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch))[1]), bvec2(true, true)))) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(78.62, 1528.5702))))).y))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-716.864)), bool(false))) < _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, clamp(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))), false, false, true))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   barrier();
                  }
                }
              }
             else
              {
              }
             barrier();
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))))
              barrier();
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 >> _GLF_IDENTITY(int(8), int(8))) & 30811) >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) + 1 < subgroup_size)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), (bool(bvec3(false, true, true))) || false))) && true), true))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true)))))), false, false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), false))) && true)))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(int(5), int(5))), ((0 << _GLF_IDENTITY(int(5), int(5)))) - 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(-25771) : (0 << _GLF_IDENTITY(int(5), int(5))), (false ? _GLF_FUZZED(-25771) : (0 << _GLF_IDENTITY(int(5), int(5)))) - 0))))))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 atomicStore(checker[virtual_gid], read, 4, 64, 4);
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)), (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))) || false)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(atomicMax(_injected_loop_counter, (_injected_loop_counter % 88397)))))) | (1))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))), injectionSwitch)).x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))), injectionSwitch)).x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))), injectionSwitch)).x < injectionSwitch.y)))), bool(bvec4(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))), injectionSwitch)).x < injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) - vec2(0.0, 0.0))), injectionSwitch)).x < injectionSwitch.y)))), false, true, true))))))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       subgroupAll(false);
                      }
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > 0); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                          }
                        }
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) && true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2)))))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(true, true && (true)))), bool(_GLF_IDENTITY(bool(bool(bvec2(false, true))), (bool(bool(bvec2(false, true)))) || false))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               atomicStore(buf[_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), virtual_gid))], read, 4, 64, 4);
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true && (bool(bvec4(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))
              {
               subgroupAll(true);
              }
             else
              {
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), bool(bvec4(bool(bvec2(_GLF_DEAD(false), false)), false, _GLF_IDENTITY(false, true && (false)), false))), true && (bool(bvec2(_GLF_DEAD(false), false))))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (! _GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false)))))), ! (! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))), ! (! (! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, min(1, 1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  barrier();
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) && true))), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) && true))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                      }
                     else
                      {
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-6.1) : _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), injectionSwitch.y))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                      barrier();
                    }
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? _GLF_FUZZED(-1700.7399) : injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))) && true)))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                        barrier();
                      }
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), false)))))))), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, false, false)), true && (bool(bvec4(_GLF_IDENTITY(true, true && (true)), false, false, false)))))))))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)) ^ (0 & 95136)), 0 + (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(-73830) : _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> 0)))) >> 0)) ^ (0 & 95136))))) >> 0))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           barrier();
                          }
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))
                    barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, injectionSwitch.y))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) && true)))))))
                    barrier();
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               barrier();
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  barrier();
                }
              }
            }
           else
            {
            }
           do
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false)))))))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                          }
                        }
                      }
                     do
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(mod(vec2(8492.9682, -8379.0593), 2.0)))).y))))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false)))))), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), _GLF_IDENTITY(bool(bvec4((! (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), true && (bool(bvec4((! (_GLF_WRAPPED_LOOP(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))));
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 barrier();
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.2)), bool(false))))), injectionSwitch.x))), float(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.2)), bool(false))))), injectionSwitch.x))))))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                  barrier();
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 | 0) ^ 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-51.66) : injectionSwitch.y))), float(_GLF_FUZZED(-0.4)), bool(false)))))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, (0) | (0)) << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(exp(vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(exp(vec2(0.0, 0.0)), clamp(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)), _GLF_IDENTITY(exp(vec2(0.0, 0.0)), vec2(0.0, 0.0) + (exp(vec2(0.0, 0.0)))))), 0.0, 0.0, 0.0, 0.0), (mat3x2(_GLF_IDENTITY(exp(vec2(0.0, 0.0)), clamp(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)), _GLF_IDENTITY(exp(vec2(0.0, 0.0)), vec2(0.0, 0.0) + (exp(vec2(0.0, 0.0)))))), 0.0, 0.0, 0.0, 0.0)) * mat3(1.0))), mat2(1.0) * (vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(exp(vec2(0.0, 0.0)), clamp(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)), _GLF_IDENTITY(exp(vec2(0.0, 0.0)), vec2(0.0, 0.0) + (exp(vec2(0.0, 0.0)))))), 0.0, 0.0, 0.0, 0.0), (mat3x2(_GLF_IDENTITY(exp(vec2(0.0, 0.0)), clamp(exp(vec2(0.0, 0.0)), exp(vec2(0.0, 0.0)), _GLF_IDENTITY(exp(vec2(0.0, 0.0)), vec2(0.0, 0.0) + (exp(vec2(0.0, 0.0)))))), 0.0, 0.0, 0.0, 0.0)) * mat3(1.0)))))) * (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))).y)))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)))) : _GLF_FUZZED(injectionSwitch))).y), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch))))) * mat2(1.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch))))) * mat2(1.0) : _GLF_FUZZED(vec2(3.7, 4.1))))) : _GLF_FUZZED(injectionSwitch))).y))))))))))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = (((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (_GLF_IDENTITY(false || (true), true && (false || (true)))) || false))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (_GLF_IDENTITY(65393 & 0, (_GLF_IDENTITY(65393 & 0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(65393 & 0, (65393 & 0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(65393 & _GLF_IDENTITY(0, (0) + 0), (65393 & _GLF_IDENTITY(0, (0) + 0)) >> (0 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY(65393, clamp(65393, 65393, _GLF_IDENTITY(65393, clamp(65393, 65393, 65393)))) & 0) ^ 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(65393 & 0, _GLF_IDENTITY((65393 & 0) ^ 0, _GLF_IDENTITY(int(ivec4((65393 & 0) ^ 0, 0, 1, int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-238.800)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x)))), max(int(ivec4(_GLF_IDENTITY((65393 & 0), ((65393 & 0)) | 0) ^ _GLF_IDENTITY(0, int(int(0))), 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(ivec4((65393 & 0) ^ 0, 0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), (_GLF_IDENTITY(65393 & 0, _GLF_IDENTITY((65393 & _GLF_IDENTITY(0, (44474 & 0) | (0))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (_GLF_IDENTITY(65393, (65393) | 0) & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1)) | _GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0))), max((_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0))), _GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0))), ivec2(ivec3((_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0))), 1))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0))), (_GLF_IDENTITY(ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & 0), (65393 & 0), (65393 & 0))), 1), (ivec2(_GLF_IDENTITY((65393 & 0), clamp((65393 & _GLF_IDENTITY(0, (0) / 1)), (65393 & 0), (65393 & 0))), 1)) ^ ivec2(0, 0)))))))))) ^ 0)) * 1))))))) | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) * 1)), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, ~ (~ (4)))), int(4)), (true ? _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) << 0), int(ivec4(_GLF_IDENTITY(4, (4) << 0), 1, 0, 1))))) : _GLF_FUZZED(_injected_loop_counter))))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       barrier();
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 1)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           else
            {
            }
          }
         do
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 1 * (0))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                barrier();
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                              }
                             else
                              {
                               do
                                {
                                 for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y), false, false)))) && true))))) || false))))
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                          }
                                         else
                                          {
                                           barrier();
                                          }
                                        }
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         barrier();
                                        }
                                      }
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                          {
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                         else
                                          {
                                          }
                                        }
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    barrier();
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false)))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((61542 & 0) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), clamp(int(3), int(3), int(3)))))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         do
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, _GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), (_GLF_IDENTITY((0) | (_GLF_IDENTITY(0, (0) - 0)), min((0) | (_GLF_IDENTITY(0, (0) - 0)), (0) | (_GLF_IDENTITY(0, (0) - 0))))) ^ 0))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6413.5123)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, abs(0.0), 1.0)), max(vec2(vec4(injectionSwitch, abs(0.0), 1.0)), vec2(vec4(injectionSwitch, abs(0.0), 1.0))))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, abs(0.0), 1.0)), max(vec2(vec4(injectionSwitch, abs(0.0), 1.0)), vec2(vec4(injectionSwitch, abs(0.0), 1.0)))))))).y, injectionSwitch.y, injectionSwitch.y))), bool(true))))), 0 | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6413.5123)), float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(true))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0), clamp(_GLF_IDENTITY(vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0), clamp(vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0), vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0), _GLF_IDENTITY(vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0), (vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0)) + vec4(0.0, 0.0, 0.0, 0.0)))), vec4(injectionSwitch.x, _GLF_IDENTITY(cos(0.0), mix(float(_GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(mat4x2(cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)), clamp(float(mat4x2(cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)), float(mat4x2(cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)), float(mat4x2(cos(0.0), 1.0, 0.0, 0.0, 0.0, 1.0, log(1.0), 1.0)))))), float(_GLF_FUZZED((169.524 + -3361.6673))), bool(false))), 0.0, 1.0), vec4(injectionSwitch.x, cos(0.0), 0.0, 1.0))))), (true ? injectionSwitch.x : _GLF_FUZZED(3995.3367))) < injectionSwitch.y))))
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))));
                  }
                }
               else
                {
                }
               for(int _injected_loop_counter = _GLF_IDENTITY((0 << _GLF_IDENTITY(int(1), int(1))), ((0 << _GLF_IDENTITY(int(1), int(1)))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), true, false, false)))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
