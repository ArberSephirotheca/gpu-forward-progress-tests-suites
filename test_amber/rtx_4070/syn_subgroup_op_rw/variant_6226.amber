#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96040) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) / 1)))]) * 1.0))).x < injectionSwitch.y)), ! (! (((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-96040) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) / 1)))]) * 1.0))).x < injectionSwitch.y))))) || false)), false, _GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x < injectionSwitch.y)))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bvec2(bvec3(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))), bvec2(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), false || (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)))))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true))), (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(false, _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))), bool(bvec3(! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))))), false, false))))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true)), true, true)))))), true))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0)))))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(determinant(mat2(-1.8, -749.822, -48.11, -75.66))))) > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)).x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9681.0487)), float(injectionSwitch.x), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9681.0487)), float(injectionSwitch.x), bool(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true))))))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(-4.9)), (_GLF_IDENTITY(float(_GLF_FUZZED(-4.9)), (false ? _GLF_FUZZED(9.7) : float(_GLF_FUZZED(-4.9))))) - 0.0), float(mix(float(_GLF_FUZZED(-9681.0487)), float(injectionSwitch.x), bool(true))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9681.0487)), float(injectionSwitch.x), bool(true)), clamp(mix(float(_GLF_IDENTITY(_GLF_FUZZED(-9681.0487), clamp(_GLF_FUZZED(-9681.0487), _GLF_IDENTITY(_GLF_FUZZED(-9681.0487), min(_GLF_FUZZED(-9681.0487), _GLF_FUZZED(-9681.0487))), _GLF_IDENTITY(_GLF_FUZZED(-9681.0487), min(_GLF_FUZZED(-9681.0487), _GLF_FUZZED(-9681.0487)))))), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(-9681.0487)), float(injectionSwitch.x), bool(true)), mix(float(_GLF_FUZZED(-9681.0487)), float(injectionSwitch.x), bool(true))))))) > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), (bool(bvec4(_GLF_DEAD(false), true, true, false))) || false))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), true, true, false)), (bool(bvec4(_GLF_DEAD(false), true, true, false))) || false)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(32.23), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-629.839, (-629.839) - log(1.0)))), bvec2(true, false))).x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(32.23), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(32.23), (injectionSwitch)[1])) - vec2(0.0, 0.0)), vec2((injectionSwitch)[0], _GLF_FUZZED(-629.839)), bvec2(true, false))).x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            barrier();
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, false, true)))) && true)))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, true)))))), bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, bool(bvec2(true, true)))))), true, false, false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
         return;
        }
       return;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.1)))) + _GLF_ZERO(0.0, injectionSwitch.x))) + 0.0) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.1)))) + _GLF_ZERO(0.0, injectionSwitch.x))) + 0.0) > injectionSwitch.y))), (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3.1)))) + _GLF_ZERO(0.0, injectionSwitch.x))) + 0.0) > injectionSwitch.y)))) && true))), (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-578.252)), bool(false))), _GLF_FUZZED(-278.475)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-578.252)), bool(false))), _GLF_FUZZED(-278.475)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-578.252)), bool(false))), _GLF_FUZZED(-278.475)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-578.252)), bool(false))), _GLF_FUZZED(-278.475)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-578.252)), bool(false))), _GLF_FUZZED(-278.475)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], mix(float((injectionSwitch)[0]), float(_GLF_FUZZED(-578.252)), bool(false))), _GLF_FUZZED(-278.475)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) - determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | ((uvec3(1u, 1u, 1u) ^ uvec3(1u, _GLF_IDENTITY(1u, 0u ^ _GLF_IDENTITY((1u), 0u | ((1u)))), 1u)) | _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 0u), clamp(uvec3(0u, 1u, _GLF_IDENTITY(0u, 0u + (0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 1u, 0u), ~ (~ (uvec3(0u, 1u, 0u)))), (_GLF_IDENTITY(uvec3(0u, 1u, 0u), ~ (~ (uvec3(0u, 1u, 0u))))) | (_GLF_IDENTITY(uvec3(0u, 1u, 0u), ~ (~ (uvec3(0u, 1u, 0u)))))), uvec3(0u, 1u, 0u))))), 0u), (uvec3(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, _GLF_IDENTITY(0u, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED((193878u)) : 0u))), clamp(uvec3(0u, 1u, 0u), _GLF_IDENTITY(uvec3(0u, 1u, 0u), ~ (~ (uvec3(0u, 1u, 0u)))), uvec3(0u, 1u, _GLF_IDENTITY(0u, (0u) >> 0u)))))), 0u)) | (uvec3(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(0u, 1u, 0u), clamp(uvec3(0u, 1u, 0u), _GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), uint(uint(uint(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))))))), clamp(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))), 0u ^ (~ (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))), ~ (_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))))))), 1u, 0u), ~ _GLF_IDENTITY((~ (uvec3(0u, 1u, 0u))), uvec3(_GLF_IDENTITY(uvec3((~ (uvec3(0u, 1u, 0u)))), (uvec3((~ _GLF_IDENTITY((uvec3(0u, _GLF_IDENTITY(1u, (1u) * 1u), 0u)), ((uvec3(0u, _GLF_IDENTITY(1u, (1u) * 1u), 0u))) >> uvec3(0u, 0u, 0u))))) | (uvec3((~ _GLF_IDENTITY((uvec3(0u, 1u, 0u)), uvec3(0u, 0u, 0u) + ((uvec3(0u, 1u, 0u))))))))))), uvec3(0u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)), (false ? _GLF_FUZZED(174813u) : _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)), uint(uvec3(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)), 0u, 1u)))) / 1u)))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) >> 0u), max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), clamp((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)))))) >> 0u)) | (_GLF_IDENTITY((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))), ((_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u))) | (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)))) + (1u ^ 1u)))))))))), 0u))))).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)), (_GLF_IDENTITY(workgroup_size, clamp(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size))) ^ 0u), workgroup_size, workgroup_size))) * 1u), workgroup_size)) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))), (_GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))) / 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), (_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))))) / 1u), _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))))))) | 0u))), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (1u ^ 1u) + (_GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u))))), max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, uint(uvec2(workgroup_id, 1u)))) >> 0u), _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, _GLF_IDENTITY(uint(uvec4(workgroup_id, 1u, 0u, 0u)), ~ (~ (uint(uvec4(workgroup_id, 1u, 0u, 0u)))))), (_GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))) / 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), (_GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, 1u * (workgroup_id))) / 1u), _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))))) / 1u), _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u))))), _GLF_IDENTITY(workgroup_id, max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))))))) | _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, 0u | (0u)), 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (true ? workgroup_id : _GLF_FUZZED(16662u))), (1u ^ 1u) + (_GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 1u))))), max(workgroup_id, _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 1u, 0u, 0u)))))))) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))), _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec4(workgroup_size * workgroup_id, 1u, 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u)))))), min((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))), 0u, 0u, 1u)), (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))), 0u, 0u, 1u))) | (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))), 0u, 0u, 1u)))))))), _GLF_IDENTITY((~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(uvec4(0u, 1u, 1u, (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))), _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(workgroup_id) : 0u)))))), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u)))))), ((~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u), min(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> _GLF_IDENTITY(0u, (0u) >> 0u)), _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) >> 0u))))))))) + 0u))) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((5u), ((5u)) ^ 0u), (_GLF_IDENTITY((5u), ((5u)) ^ 0u)) >> 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ _GLF_IDENTITY((~ (5u)), ((~ (5u))) | ((~ (5u))))), (_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ (~ (5u))), clamp(_GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, ~ (~ (5u)))))) << 0u), _GLF_IDENTITY(5u, ~ (~ (5u)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ (_GLF_IDENTITY(~ (5u), 1u * (~ (5u))))), max(_GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, ~ (~ (5u))))))))))), (_GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((5u), ((5u)) ^ 0u), (_GLF_IDENTITY((5u), ((5u)) ^ 0u)) >> 0u))), max(_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ _GLF_IDENTITY((~ (5u)), ((~ (5u))) | ((~ (5u))))), (_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ (~ (5u))), clamp(_GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, ~ (~ (5u)))))) << 0u), _GLF_IDENTITY(5u, ~ (~ (5u)))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : (_GLF_IDENTITY(_GLF_IDENTITY(5u, ~ (_GLF_IDENTITY(~ (5u), 1u * (~ (5u))))), max(_GLF_IDENTITY(5u, ~ (~ (5u))), _GLF_IDENTITY(5u, ~ (~ (5u)))))))))))) ^ 0u))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id * subgroup_size : _GLF_FUZZED(max(workgroup_base, workgroup_id))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) / vec2(1.0, 1.0)).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-698.157, 7563.7862)) : (injectionSwitch) * mat2(1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED(_GLF_IDENTITY(mat3(5.0, 9805.9078, -7.1, -604.172, -950.433, 8.6, 337.314, 3420.0098, -454.525), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat3(5.0, 9805.9078, -7.1, -604.172, -950.433, 8.6, 337.314, 3420.0098, -454.525), (false ? _GLF_FUZZED(mat3(1.0, -97.73, 7.8, -1.1, -11.42, -8.4, 47.33, 9497.2913, 121.061)) : mat3(5.0, 9805.9078, -7.1, -604.172, -950.433, 8.6, 337.314, 3420.0098, -454.525))), mat3(mat3(_GLF_IDENTITY(mat3(5.0, 9805.9078, -7.1, -604.172, -950.433, 8.6, 337.314, 3420.0098, -454.525), (false ? _GLF_FUZZED(mat3(1.0, -97.73, 7.8, -1.1, -11.42, -8.4, 47.33, 9497.2913, 121.061)) : mat3(5.0, 9805.9078, -7.1, -604.172, -950.433, 8.6, 337.314, 3420.0098, -454.525)))))) : _GLF_FUZZED(mat3(0.4, 5.1, -6796.1461, 0.0, 5.4, 0.6, 2.1, 7.8, 849.526))))) : _GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_IDENTITY(_GLF_FUZZED(mat2(580.165, 1.5, 9.5, -670.859)), _GLF_IDENTITY(mat2(mat4(_GLF_FUZZED(mat2(580.165, 1.5, 9.5, -670.859)))), (true ? mat2(mat4(_GLF_FUZZED(mat2(580.165, 1.5, 9.5, -670.859)))) : _GLF_FUZZED(mat2(7.6, -1356.1414, 891.183, -57.55)))))))) - mat2(0.0, 0.0, 0.0, 0.0))) / mat2(1.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0)) + mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)), 0.0, 0.0)))))).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.0), _GLF_FUZZED(4.9)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), true && (_GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))))) || (((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false))))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false))))), ! (! (bool(bool(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).y)))))))))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), true, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, min(4, 4))) | 0), _GLF_IDENTITY((4) + 0, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_FUZZED(-73049) : _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) ^ 0), (4))) + 0, (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_FUZZED(-73049) : _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) ^ 0), (4))) + 0, ~ (_GLF_IDENTITY(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_FUZZED(-73049) : _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) ^ 0), (4))) + 0), min(~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_FUZZED(-73049) : _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) ^ 0), (4))) + 0), ~ (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))) ? _GLF_FUZZED(-73049) : _GLF_IDENTITY((4), max(_GLF_IDENTITY((4), ((4)) ^ 0), (4))) + 0)))))) | 0)))), 64, 2);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), _GLF_FUZZED(-5.8)), vec2(_GLF_FUZZED(-3542.3764), (injectionSwitch)[1]), bvec2(false, true))).y)) && _GLF_IDENTITY(true, (true) && true)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), float(mat4x2(float(vec3(injectionSwitch.x, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), 1.0, 1.0, 1.0, 0.0, cos(0.0), 0.0, 0.0)))), min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-9.2) : injectionSwitch.x)), injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, log(1.0) + (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-72.33)), vec2(_GLF_FUZZED(70.14), (injectionSwitch)[1]), bvec2(false, true))).y))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, false)))))
  barrier();
 if((subgroup_local_id % 2) == 0)
  {
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (1) | (1))))), 4, 64, 4);
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) || false) && (false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), (false) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false)), _GLF_IDENTITY(false || (bool(bvec3(_GLF_DEAD(false), true, false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false || (bool(bvec3(_GLF_DEAD(false), true, false))), true && (false || _GLF_IDENTITY((bool(bvec3(_GLF_DEAD(false), true, false))), bool(bvec3((bool(bvec3(_GLF_DEAD(false), true, false))), false, false))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), (bool(bvec4(false, true, false, false))) || false))))) || (bool(bvec3(_GLF_DEAD(false), true, false)))))), false))))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), false || (bool(bvec3(_GLF_DEAD(false), true, false)))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), false || (bool(bvec3(_GLF_DEAD(false), true, false))))))) && true), bool(bvec4(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))))))), _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true, false)))))), ((_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), false))))))))), _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), true, false))))))) || false), (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), true && (bool(bvec3(_GLF_DEAD(false), true, false)))), true, true, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), true && (bool(bvec3(_GLF_DEAD(false), true, false)))), true, true, true)), false)), ! (! (bool(bvec2(bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), true && (bool(bvec3(_GLF_DEAD(false), true, false)))), true, true, true)), false))))))), false || (bool(bvec3(_GLF_DEAD(false), true, false))))))) && true), false, false, false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(3391.1367), _GLF_FUZZED(40.31)), bvec2(false, false))).y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), ((_GLF_IDENTITY(false, ! (! (false))))) && true) && true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ((false)) && true) && true, true), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ((false)) && true) && true, _GLF_IDENTITY(true, ! (! (true)))), true))))))), (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), ((_GLF_IDENTITY(false, ! (! (false))))) && true) && true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ((false)) && true) && true, true), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ((false)) && true) && true, _GLF_IDENTITY(true, ! (! (true)))), true))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))), ((_GLF_IDENTITY(false, ! (! (false))))) && true) && true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), ((false)) && true) && true, true), bvec2(bvec3(bvec2(_GLF_IDENTITY((false), ((false)) && true) && true, _GLF_IDENTITY(true, ! (! (true)))), true)))))))) || false)) && true) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(6494.7948)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-42.02)))))), bool(true))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || _GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), true, true, true)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))))))))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, true, true, false))), false, false, true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, true, true, false))), false, false, true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, true, true, false))), false, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, true, true, false))), false, false, true))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, true, true, false))), false, false, true))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), clamp(vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0)), _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), vec2(1.0, 1.0) * (vec2(vec3(injectionSwitch, 1.0)))))))[0], injectionSwitch[0])), injectionSwitch[1])).y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), _GLF_IDENTITY(injectionSwitch[1], 1.0 * (_GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))))).y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])).y, true, true, false))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), false, true)))))))) || false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)), bool(bvec4(bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(log(1.0), 1.0, 0.0))), 0.0, 0.0, sin(0.0), 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, sqrt(0.0), 0.0)), dot(vec4(0.0, 0.0, 1.0, 1.0), vec4(1.0, 1.0, sqrt(0.0), 0.0)))))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(3.1, 0.5)))), injectionSwitch)).x, injectionSwitch.x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.0), _GLF_FUZZED(4.3)), bvec2(false, false))).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false), true, false)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))) && true))) || false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), ! (! (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))))) || (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, tan(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), round(length(normalize(1.0))), 1.0, 0.0, 0.0, abs(0.0)))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, tan(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), round(length(normalize(1.0))), 1.0, 0.0, 0.0, abs(0.0)))).y, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, determinant(mat3(1.0, tan(0.0), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, tan(0.0), 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 1.0))), round(length(normalize(1.0))), 1.0, 0.0, 0.0, abs(0.0)))).y))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-1.7))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9581.4124), _GLF_FUZZED(-9975.9134)), bvec2(false, false))).x > injectionSwitch.y))) || false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) && true) || (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(((! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec4(bvec2(((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), true, true))))) || false, bool(bvec2(_GLF_IDENTITY(((! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)) && true), (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bvec2(((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec4(bvec2(((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), true, true))))) || false, true)))), (! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.9)), float(injectionSwitch.y), bool(true))), sqrt(1.0), 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0)))))), false || (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.9)), float(injectionSwitch.y), bool(true))), sqrt(1.0), 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0)))))), ! (_GLF_IDENTITY(! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.9)), float(injectionSwitch.y), bool(true))), sqrt(1.0), 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0))))))), ! (! (! ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.9)), float(injectionSwitch.y), bool(true))), sqrt(1.0), 1.0, 0.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), determinant(mat4(0.0, length(vec3(0.0, 0.0, 0.0)), 0.0, length(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)), 1.0)))))))))))))), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))) || false)) || _GLF_IDENTITY(false, (false) && true))), false))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(4, (4) | (4)), 64, 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch, injectionSwitch)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, vec2(_GLF_IDENTITY(mat3(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (true ? _GLF_IDENTITY(mat3(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0)))), (mat3(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))))) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat3(-8.8, -96.00, 74.10, 57.11, 8124.7061, 2.1, -68.44, -7313.3524, -43.83)))))))).x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))), bool(bvec4(_GLF_DEAD(false), false, true, true))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)), (bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) && true)))), false, false, false))) && true), true, true, true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-9.9) : injectionSwitch.y))))))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), true, false)))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.8), _GLF_FUZZED(-916.847)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)))))))))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, (true) || false)), ((_GLF_IDENTITY(true, (true) || false))) || false))))))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, true && (true)), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(47542))), float(injectionSwitch.y), bool(true))))))))))))))) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), false || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))), false, false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(67.83)), bool(false)))) - 0.0) > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 subgroupBarrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5780.6162)), bool(false))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-8.8, 7199.2625)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))))))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x4(injectionSwitch.y, _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))), (true ? _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))), clamp(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))), max(float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))), float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))))), float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))), float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(1.0))))) : _GLF_FUZZED(4700.9537))), mix(float(float(mat3x4(_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.2) : 1.0)), _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0))), 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, cos(abs(0.0)), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ZERO(0.0, injectionSwitch.x), length(vec3(0.0, 0.0, 0.0)), 1.0, sqrt(_GLF_IDENTITY(1.0, max(1.0, 1.0)))))), float(_GLF_FUZZED(-67.64)), bool(false)))), 0.0, tan(0.0), _GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), (false ? _GLF_FUZZED(mat2x4(639.871, 873.141, -213.411, 4.9, _GLF_IDENTITY(-1141.8372, clamp(-1141.8372, _GLF_IDENTITY(-1141.8372, clamp(-1141.8372, -1141.8372, -1141.8372)), -1141.8372)), -95.75, _GLF_IDENTITY(_GLF_IDENTITY(83.73, (false ? _GLF_FUZZED(395.490) : 83.73)), round(length(normalize(vec2(1.0, 1.0)))) * (_GLF_IDENTITY(_GLF_IDENTITY(83.73, mix(float(_GLF_FUZZED(98.21)), _GLF_IDENTITY(float(83.73), max(float(83.73), float(83.73))), bool(true))), (false ? _GLF_FUZZED(395.490) : 83.73)))), -739.457)) : mat2x4(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), (true ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(float(1.0))), 1.0)) : _GLF_FUZZED(smoothstep(4520.6639, -2876.4336, -584.359)))), 0.0, tan(0.0), 0.0, 1.0, 0.0, 1.0))))))))) && true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false))))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, ((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))) || false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))), bool(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
    return;
  }
 atomicStore(buf[virtual_gid], read, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
