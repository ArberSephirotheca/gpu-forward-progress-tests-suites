#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 vec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 bvec3 _f1;
 uint workgroup_id;
} ;

struct _GLF_struct_5 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 bool _f2;
} ;

struct _GLF_struct_1 {
 mat3x4 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
} ;

struct _GLF_struct_2 {
 uvec2 _f0;
 _GLF_struct_0 _f1;
 uvec3 _f2;
 _GLF_struct_1 _f3;
} ;

struct _GLF_struct_6 {
 _GLF_struct_2 _f0;
 mat3x4 _f1;
 mat4 _f2;
 mat3 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uvec2 GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec4 GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size;
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x = subgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w = _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), subgroup_size));
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.z = subgroup_local_id;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), true)))))
  barrier();
 GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size, (GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size) ^ uvec4(0u, 0u, 0u, 0u)).z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) << 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.x = num_workgroup;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), _GLF_IDENTITY(clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize), (clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)) << uvec3(0u, 0u, 0u))))), 1u)), (uvec3(uvec4(_GLF_IDENTITY(gl_WorkGroupSize, clamp(gl_WorkGroupSize, gl_WorkGroupSize, gl_WorkGroupSize)), _GLF_IDENTITY(1u, (1u) - 0u)))) + _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u))))).x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), bool(bool(bool(bvec2(false, false))))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (! (! (_GLF_IDENTITY(false, (false) && true)))))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
      }
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(90.33) : injectionSwitch.y))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          barrier();
         _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size, _GLF_IDENTITY(0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size, (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size) ^ 0u)), ~ (_GLF_IDENTITY(~ (0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size, (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size) ^ 0u))), (false ? _GLF_FUZZED(subgroup_size) : ~ (0u | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size, (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w = workgroup_size) ^ 0u))))))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), ~ (~ ((1 | 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false), ! (! ((false)))) && true))), bool(bvec2(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false), ! (! ((false)))) && true))), bool(bvec3(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((false), ! (! ((false)))) && _GLF_IDENTITY(true, ! (! (true)))))), true, true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.1)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), bool(true))), min(injectionSwitch.x, injectionSwitch.x))) - 0.0) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (false ? _GLF_FUZZED(84581) : _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), clamp((int(5)), _GLF_IDENTITY((int(5)), 0 + ((int(5)))), (int(5)))) | 0))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, false)))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))));
                      }
                    }
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             barrier();
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_2(uvec2(1u), _GLF_struct_0(mat2(1.0)), uvec3(1u), _GLF_struct_1(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 0.0 + _GLF_IDENTITY((1.0), float(mat4x2(_GLF_IDENTITY((1.0), 0.0 + ((1.0))), 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, sin(0.0)), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, sin(0.0)), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), float(vec2(dot(vec3(0.0, 1.0, sin(0.0)), vec3(1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), 1.0)))), 1.0, 0.0, 1.0, 0.0, 1.0))))), mat3x2(1.0))), mat3x4(1.0), mat4(1.0), mat3(1.0), _GLF_struct_5(_GLF_struct_3(ivec2(1), bvec3(_GLF_IDENTITY(true, false || (true))), _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(gl_WorkGroupID.x, (gl_WorkGroupID.x) ^ 0u) : _GLF_IDENTITY(_GLF_FUZZED(packHalf2x16(injectionSwitch)), min(_GLF_FUZZED(packHalf2x16(injectionSwitch)), _GLF_FUZZED(packHalf2x16(injectionSwitch))))))), _GLF_struct_4(vec2(1.0), ivec3(1)), true));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), mix(vec2((vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[0], _GLF_FUZZED((+ (8.0 + -38.62)))), vec2(_GLF_FUZZED(6557.8634), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[1]), bvec2(false, _GLF_IDENTITY(true, true && (true))))), vec2(mat3(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))).x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), mix(vec2((vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[0], _GLF_FUZZED((+ (8.0 + -38.62)))), vec2(_GLF_FUZZED(6557.8634), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[1]), bvec2(false, _GLF_IDENTITY(true, true && (true))))), vec2(mat3(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))).x > injectionSwitch.y, false, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), mix(vec2((vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[0], _GLF_FUZZED((+ (8.0 + -38.62)))), vec2(_GLF_FUZZED(6557.8634), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[1]), bvec2(false, _GLF_IDENTITY(true, true && (true))))), vec2(mat3(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))).x > injectionSwitch.y, false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), mix(vec2((vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[0], _GLF_FUZZED((+ (8.0 + -38.62)))), vec2(_GLF_FUZZED(6557.8634), (vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))[1]), bvec2(false, _GLF_IDENTITY(true, true && (true))))), vec2(mat3(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))).x > injectionSwitch.y, false, true)))))))))), false || ((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))))), vec2(mat3(vec2(mat3x2(injectionSwitch, 0.0, sin(0.0), 1.0, determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0)))), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0, 1.0)))).x > injectionSwitch.y))))))) || (_GLF_DEAD(false))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w, clamp(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.w)) * _GLF_struct_replacement_6._f4._f0.workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uint subgroup_base = GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.x * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w, (true ? _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w, _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w), (_GLF_IDENTITY((GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w), _GLF_IDENTITY(uint(uint((GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w))), (uint(uint((GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w)))) >> 0u))) + 0u) | (GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w)) : _GLF_FUZZED(workgroup_base)));
 do
  {
   for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | (3))), int(3))) << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size, max(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size, GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size)))).z;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) | 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)), (false ? _GLF_FUZZED(vec2(6.7, 818.737)) : vec2(mat3x4(injectionSwitch, 1.0, 1.0, 1.0, sqrt(0.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))))).x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y = virtual_gid;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(cos(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(cos(0.0), 0.0, 0.0, 1.0)))), transpose(transpose(mat4x2(injectionSwitch, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(cos(0.0), 0.0, 0.0, 1.0)), dot(vec4(0.0, 1.0, 1.0, 0.0), vec4(cos(0.0), 0.0, 0.0, 1.0))))))))).x, _GLF_ZERO(0.0, injectionSwitch.x) + (injectionSwitch.x)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) / 1), _GLF_IDENTITY(0, (0) | 0), 0))], injectionSwitch[1]))) * vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).x, _GLF_IDENTITY(injectionSwitch.x, float(vec3(injectionSwitch.x, 0.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size)).z + 1) % GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.w);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.x = next_virtual_gid;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = _GLF_IDENTITY(atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], _GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0))), 64, 2), _GLF_IDENTITY(uint(uvec3(atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], _GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0), (true ? _GLF_IDENTITY(ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0), min(ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0), ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0))) : _GLF_FUZZED(ivec4(24035, 4507, -91305, 60919)))))), 64, 2), 0u, 1u)), max(uint(uvec3(atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], _GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0))), 64, 2), 0u, 1u)), uint(uvec3(atomicLoad(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], _GLF_IDENTITY(4, int(ivec4(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-71692) : 4)), 0, 1, 0))), 64, 2), 0u, 1u)))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4))))), int(_GLF_IDENTITY(int((0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), _GLF_IDENTITY(int(4), 1 * (int(4)))))), 0 | (int((0 >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 1 * (int(4)))))))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec4(_GLF_IDENTITY(int(2), (int(2)) >> 0), int(_GLF_ONE(1.0, injectionSwitch.y)), 1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0)) >> 0))
  {
   GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.y = read;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))))) && true)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     barrier();
    }
  }
 do
  {
   GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.y = GLF_merged4_0_1_13_1_1_4_2_1_17_3_1_13num_workgroupreadsubgroup_local_idsubgroup_size.y;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size), max(~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size), _GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size), ~ _GLF_IDENTITY((~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size))), ((~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size)))) ^ uvec4(0u, 0u, 0u, 0u))))), uvec4(0u, 0u, 0u, 0u) | (_GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size), max(~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size), _GLF_IDENTITY(~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size), ~ _GLF_IDENTITY((~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size))), ((~ (~ (GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size)))) ^ uvec4(0u, 0u, 0u, 0u))))))))).z % 2) == 0)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     subgroupAll(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), (! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true))))) || false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true) && (! (false))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.x], uint(1), 4, _GLF_IDENTITY(64, (64) | (64)), 4);
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | int(_GLF_ZERO(0.0, injectionSwitch.x))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.x], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), min(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY(1, clamp(1, 1, 1))))), 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) | _GLF_IDENTITY((4), ((4)) | (0 | (-92991 & 0)))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   subgroupBarrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), clamp(_GLF_IDENTITY(int(2), int(_GLF_IDENTITY(int(int(2)), max(int(int(2)), int(int(2)))))), int(2), int(2))))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[GLF_merged2_0_1_11_1_1_11subgroup_idvirtual_gid.y], GLF_merged4_0_1_16_1_1_4_2_1_17_3_1_14next_virtual_gidreadsubgroup_local_idworkgroup_size.y, 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
