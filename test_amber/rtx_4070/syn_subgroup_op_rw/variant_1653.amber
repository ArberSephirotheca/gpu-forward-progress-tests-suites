#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(radians(injectionSwitch)) : injectionSwitch)).y))))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), max(_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(ivec4(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 0, 0))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ~ (~ (int(_GLF_ZERO(0.0, injectionSwitch.x))))))) << _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (true ? int(4) : _GLF_FUZZED(max(2632, -99095))))))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (-94466 & int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
          barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))));
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), bool(bvec3((false), true, false))))))) || false)))));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w = subgroup_size, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w = subgroup_size) ^ 0u);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, ! (! (true))), true), bvec2(bvec3(bvec2(true, true), false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mat2(1.0) * ((injectionSwitch) * mat2(1.0)))))).x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))) * mat2(1.0)))).x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))) && true)));
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x = subgroup_local_id;
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bool(true))), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bool(! ((true))))))) || false) && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y, _GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), bool(bool(! ((true))))))) || false) && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))))))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) + 0))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.y = num_workgroup;
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))), ((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))))) << uvec3(0u, 0u, 0u))))), min(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize))))))))), min(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize))))))))), uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))))))))))))), _GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupSize), 1u), clamp(uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u))))), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupSize), 1u), clamp(uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u))))), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize))))))), (false ? _GLF_FUZZED(uvec3(37180u, 146954u, 59426u)) : _GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupSize), 1u), clamp(uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u))))), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))))))))) >> uvec3(0u, 0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 1.0, 0.0, 0.0, 0.0)), (float(mat3x2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 1.0, 0.0, 0.0, 0.0))) / 1.0))))) >> uvec3(0u, 0u, 0u)))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ _GLF_IDENTITY((gl_WorkGroupSize), uvec3(uvec4((gl_WorkGroupSize), 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))))))) - uvec3(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))))), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), clamp(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), min(~ (gl_WorkGroupSize), _GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(~ (gl_WorkGroupSize), clamp(~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize), ~ (gl_WorkGroupSize)))))))), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), (_GLF_IDENTITY((~ (gl_WorkGroupSize)), uvec3(0u, 0u, 0u) ^ ((~ (gl_WorkGroupSize))))) + uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))) >> uvec3(0u, 0u, 0u)))))) : _GLF_FUZZED(uvec3(31371u, 29715u, 150968u))))))) << uvec3(0u, 0u, 0u))))), min(_GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize))))))))), min(uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize))))))))), uvec3(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | (0u))) << 0u), 0u, 0u) | (~ (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), min(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), (~ (gl_WorkGroupSize)) | uvec3(0u, 0u, 0u)), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))))))))))))), _GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(54231u, 83660u, 64147u)) : gl_WorkGroupSize))), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupSize), 1u), clamp(uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))))), (true ? uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize))))), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))))))) : _GLF_FUZZED(uvec3(84752u, 119281u, 85025u))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupSize), 1u), clamp(uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), 1u))))), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupSize))), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(40223u, 2675u, 92617u), clamp(uvec3(40223u, 2675u, 92617u), _GLF_IDENTITY(uvec3(40223u, 2675u, 92617u), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(uvec3(40223u, 2675u, 92617u), (uvec3(40223u, 2675u, 92617u)) | (uvec3(40223u, 2675u, 92617u))))), min(uvec3(uvec3(_GLF_IDENTITY(uvec3(40223u, 2675u, 92617u), (uvec3(40223u, 2675u, 92617u)) | (uvec3(40223u, 2675u, 92617u))))), uvec3(uvec3(_GLF_IDENTITY(uvec3(40223u, 2675u, 92617u), (uvec3(40223u, 2675u, 92617u)) | (uvec3(40223u, 2675u, 92617u)))))))), uvec3(40223u, 2675u, 92617u)))))), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize))) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize))))))), (false ? _GLF_FUZZED(uvec3(37180u, 146954u, 59426u)) : _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY((gl_WorkGroupSize), ((gl_WorkGroupSize)) | uvec3(0u, 0u, 0u)), uvec3(_GLF_IDENTITY(uvec4(~ (gl_WorkGroupSize), 1u), clamp(uvec4(~ (gl_WorkGroupSize), 1u), uvec4(~ (gl_WorkGroupSize), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (1u))) | ((0u >> _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(7u), uint(7u))))), uvec4(~ (gl_WorkGroupSize), 1u))))), uvec3(0u, 0u, 0u) | _GLF_IDENTITY((~ _GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))), uvec3(0u, 0u, 0u) | ((~ _GLF_IDENTITY(_GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_WorkGroupSize), min(_GLF_IDENTITY((gl_WorkGroupSize), (true ? (gl_WorkGroupSize) : _GLF_FUZZED(uvec3(40223u, 2675u, 92617u)))), (gl_WorkGroupSize)))))))))))) >> uvec3(0u, 0u, 0u))))))) / uvec3(1u, 1u, 1u)), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) | 0u), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ (_GLF_IDENTITY(0u, (0u) | 0u)))) | (_GLF_IDENTITY(0u, (0u) | 0u))), 0u, 0u)), _GLF_IDENTITY(0u, (0u) + 0u), 0u) | (~ (gl_WorkGroupSize))))), min(_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize))))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(1u, 1u, 1u) * (gl_WorkGroupSize)), ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(0u, 0u, 0u) | (~ (gl_WorkGroupSize)))))))))).x;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), true, false, false)))))) && true) || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  barrier();
 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y = workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)));
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y, (true ? GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.y : _GLF_FUZZED(subgroup_id)));
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((0 | 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | 0) != _GLF_IDENTITY(0, (0) | (0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)), true && (bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, true, true)))))));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.y) / cos(0.0)), (injectionSwitch.y) - 0.0) : _GLF_FUZZED(-918.882)))))))));
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, uvec2(0u, 0u) + (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id)).x, ~ (~ (workgroup_base + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + _GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id, uvec2(0u, 0u) + (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id)).x)));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (false)))), (! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), (bool(_GLF_IDENTITY(false, (false) && true))) || false)))))))))))))) || false)), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y) || false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + _GLF_IDENTITY(1, (1) - 0), uint(uvec3(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + _GLF_IDENTITY(1, (1) - 0), 1u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (true ? uint(2u) : _GLF_FUZZED(virtual_gid))))) >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), 0u | (uint(2u))))))))) % GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w), (_GLF_IDENTITY(1u ^ 1u, 1u * (_GLF_IDENTITY(1u ^ 1u, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (1u ^ 1u), (~ (1u ^ 1u)) + 0u)), min((_GLF_IDENTITY(~ (1u ^ 1u), (~ (1u ^ 1u)) + 0u)), (_GLF_IDENTITY(~ (1u ^ 1u), (~ (1u ^ 1u)) + 0u)))))))) ^ (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + subgroup_id * GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + 1, (GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + 1) - (0u >> _GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))))))) % GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)));
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x = _GLF_IDENTITY(next_virtual_gid, clamp(_GLF_IDENTITY(next_virtual_gid, min(_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), _GLF_IDENTITY(next_virtual_gid, max(next_virtual_gid, next_virtual_gid)), next_virtual_gid)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x = next_virtual_gid), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x = next_virtual_gid)) * 1u));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec4(! (_GLF_IDENTITY(false, (false) || false)), false, true, false))))) || (false)), (injectionSwitch.x > injectionSwitch.y)))))), (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, true && (false)), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, true && (false)), true), true, false)))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, exp(0.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 1.0, tan(0.0), 1.0, 1.0))).y)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))), bool(bvec3(_GLF_WRAPPED_LOOP(false), false, true))))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-821.504) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           else
            {
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z = read;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(int(6), int(6))), int(ivec2(((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(71930) : _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) | 0)) | (_GLF_IDENTITY(int(6), int(6))))))), 0)))) | (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(int(6), int(6)), 0 | ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(int(6), int(6))))), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))), ~ (~ (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) | (6))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(_GLF_IDENTITY(6, (6) | (6))) : _GLF_FUZZED(-73657)))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))), clamp((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))))) << 0)))), 0, 0), (ivec3(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) | (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6)))))), (1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) << 0)))), 0, 0)) / ivec3(1, 1, 1))))) >> _GLF_IDENTITY(int(6), int(6))), 0 | (((_GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (_GLF_IDENTITY(1, (1) - 0)) + 0) << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(int(6), int(6))))), ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (_GLF_IDENTITY(6, (6) << 0)))))) >> _GLF_IDENTITY(int(6), int(6))), ((1 << _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, (6) | (6))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(6, max(6, 6)), 1), (ivec2(_GLF_IDENTITY(6, max(6, 6)), 1)) / ivec2(1, 1))))))), int(6))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
  {
   atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.x], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(1)) - 0u)) | (uint(1))), 4, 64, 4);
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id.x + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) | (1))) << 0), 1 * _GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) << 0)), (true ? (_GLF_IDENTITY(1, (1) << 0)) : _GLF_FUZZED((65547 << -92021))))) >> 0)) < GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.w)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))));
        }
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(false);
      }
     else
      {
       do
        {
         atomicStore(buf[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_size.z, 4, _GLF_IDENTITY(64, ~ (~ (_GLF_IDENTITY(64, max(_GLF_IDENTITY(64, max(64, 64)), 64))))), 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))));
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), ! (! _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-392.118)), bool(false))))) > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))).y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, false, false)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))))) | 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))) && (false))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), false, true, true))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))
            barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 | (0)))) : _GLF_FUZZED(9928)))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         subgroupAll(true);
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
