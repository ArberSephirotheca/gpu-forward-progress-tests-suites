#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, uint(uvec2(0u, 1u))), 0u)), (0u) - _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, 0u, 0u, 1u)), (_GLF_IDENTITY(uint(uvec4(0u, 0u, 0u, 1u)), 0u ^ (uint(uvec4(0u, 0u, 0u, 1u))))) / 1u))) | _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? _GLF_IDENTITY(workgroup_size, (workgroup_size) | 0u) * workgroup_id : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), max(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (false ? _GLF_FUZZED(workgroup_size) : _GLF_FUZZED(workgroup_id)))) | 0u), _GLF_FUZZED(workgroup_id))), (_GLF_FUZZED(workgroup_id)) * 1u)), (_GLF_IDENTITY(true ? (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bool((_GLF_IDENTITY(true, (true) && true))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))) || false)) ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))), min(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bool((_GLF_IDENTITY(true, (true) && true))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))) || false)) ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id))), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(bool((_GLF_IDENTITY(true, (true) && true))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true))))))))) || false)) ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), clamp(_GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id), _GLF_FUZZED(workgroup_id)))))) : _GLF_FUZZED(175450u), (_GLF_IDENTITY(true ? (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(true, ! (! (true)))) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u), _GLF_IDENTITY(max(true ? (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && _GLF_IDENTITY(true, false || (true)))) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))))) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))))))))))))) && true))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, false, false))), (true) && true)) && true)))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true), bool(bvec2((true), true))) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), false || ((_GLF_IDENTITY(true, (true) && true)))) && true)))))))))) || false)))))), _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)) && true), (bool((_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, true && (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))) && true)) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, _GLF_IDENTITY((true), true && (_GLF_IDENTITY((true), ! (! ((true)))))) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))))) && true)))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))))), _GLF_IDENTITY(false, ! (! (false))))))))) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id), min(_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true))) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), false, true, false)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), false, true, false)), true, false, false)))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))))), _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, ! (! ((_GLF_IDENTITY(true, (true) && true)) && true))), true, false)))), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true) && true, ! (! (_GLF_IDENTITY((true) && true, ! (! ((true) && true)))))))) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))))), _GLF_IDENTITY(false, ! (! (false))))))))) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id), _GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (! ((true)))) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), ! (! ((_GLF_IDENTITY(true, (true) && true))))) && true)))))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (_GLF_IDENTITY(true, (true) && true))))))) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, _GLF_IDENTITY((true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((true))) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bvec4(bool((_GLF_IDENTITY(true, (true) && true)) && true), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bool(bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (! (bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))))))))))))))), _GLF_IDENTITY(false, ! (! (false))))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), (_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))), (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), true && ((_GLF_IDENTITY(true, (true) && true)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)), true && ((_GLF_IDENTITY(true, (true) && true)))), true), true, true))))) && true))))) || false)))) || false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), true && (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(true, (true) && true)) && true, bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true))))), ! (! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(true, (true) && true)) && true), bool(bool(bool((_GLF_IDENTITY(true, (true) && true)) && true)))))))))))))), _GLF_IDENTITY(false, ! (! (false))))))))) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)))) : _GLF_FUZZED(175450u), true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) || false)) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (_GLF_IDENTITY(max(true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true))))) && true) ? _GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)) : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u), true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), false, true)))) || false), true)))) && true)) && true) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), min(_GLF_IDENTITY(max(true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, false || (true))))) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u), true ? (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, (true) && true)) && true))) ? workgroup_size * _GLF_IDENTITY(workgroup_id, uint(uvec4(workgroup_id, 0u, (1u | 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))))) : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (max(true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u), true ? (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool((_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))) && true) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u))) | 0u), max(true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true)) && true) ? workgroup_size * workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u))) : _GLF_FUZZED(175450u), true ? (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) && true)) && true) ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u))))) - 0u))) / 1u))))), (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)), _GLF_IDENTITY(_GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), ((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u))) - 0u), (true ? (_GLF_IDENTITY(true, true && (true)) ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch))))))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (true ? (true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))))))) / 1u, (true ? ((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) * 1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) * 1u, ((_GLF_FUZZED(workgroup_id)) * 1u) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (true ? (true ? (true ? _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size)) * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))))))) / 1u : _GLF_FUZZED(subgroup_local_id)))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)), _GLF_IDENTITY(_GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), ((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u))) - 0u), (true ? (_GLF_IDENTITY(true, true && (true)) ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch))))))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (true ? (true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))))))) / 1u, (true ? ((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) * 1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) * 1u, ((_GLF_FUZZED(workgroup_id)) * 1u) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (true ? (true ? (true ? _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size)) * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))))))) / 1u : _GLF_FUZZED(subgroup_local_id))))) | (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) >> 0u), _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)), _GLF_IDENTITY(_GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), ((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u))) - 0u), (true ? (_GLF_IDENTITY(true, true && (true)) ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch))))))), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (true ? (true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))))))) / 1u, (true ? ((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) * 1u, (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY((_GLF_FUZZED(workgroup_id)) * 1u, ((_GLF_FUZZED(workgroup_id)) * 1u) >> (0u << _GLF_IDENTITY(uint(8u), uint(8u)))))))), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)), (true ? (true ? (true ? _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size)), workgroup_size)) * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) : _GLF_FUZZED(packHalf2x16(injectionSwitch)))))))) / 1u : _GLF_FUZZED(subgroup_local_id)))))), min((_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), 0u + (_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), workgroup_id))) - (0u | (0u | 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) | (_GLF_FUZZED(workgroup_id)))) | (_GLF_IDENTITY(_GLF_FUZZED(workgroup_id), 0u ^ (_GLF_FUZZED(workgroup_id))))), uint(uvec4(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(1u, uint(uint(1u))))), 0u, 0u)))) * 1u)) * 1u)), (_GLF_IDENTITY(true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u), _GLF_IDENTITY((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) | 0u, ((true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u)) | 0u) / 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) | (0u | 0u)) * workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u), 0u | (true ? workgroup_size * workgroup_id : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) * 1u)))), (true ? (true ? workgroup_size * workgroup_id : _GLF_FUZZED(workgroup_id)) : _GLF_FUZZED(175450u))))))))));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, (false ? _GLF_FUZZED(workgroup_base) : subgroup_id * subgroup_size));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), bool(bool(bool(bvec3(true, false, true))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 0.0, 1.0, abs(0.0), sqrt(0.0), 0.0, tan(abs(0.0)), 0.0, 0.0, 0.0, 1.0))).x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint next_virtual_gid = workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), 4, 64, 2);
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x))) - 0.0) > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x))) - 0.0) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(sinh(vec2(1963.2625, -1287.6059))))))))).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x))) - 0.0) > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) && true))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), ! (! ((! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)), 1.0))).x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)), 1.0))), vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)), 1.0))))).x > injectionSwitch.y)))))))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, clamp(5, 5, 5)))) / 1)))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, clamp(4, 4, 4)))))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 return;
                }
              }
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | (0 | 0))); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), true, false, true)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))), false, true))), bool(bvec4(! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))), true, false, true))))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))) || false))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                     for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(3), int(3)), ~ (~ (0 << _GLF_IDENTITY(int(3), int(3)))))), (false ? _GLF_FUZZED(ivec2(-37410, 49342)[0]) : (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(3), 0 + (int(3))), 1), max(ivec2(_GLF_IDENTITY(int(3), 0 + (int(3))), 1), ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) / 1), 0 + (int(3))), 1))))), _GLF_IDENTITY(int(3), int(ivec4(_GLF_IDENTITY(int(3), clamp(int(3), _GLF_IDENTITY(int(3), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? int(3) : _GLF_FUZZED(-82428))), int(3))), 0, 1, 1)))))))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && true)), true)), true && (bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), int(3)))), true, true, true))))); _injected_loop_counter --)
                      {
                       if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, ((subgroup_local_id % 2) == 0) && true))
                        {
                         subgroupAll(_GLF_IDENTITY(false, bool(bool(false))));
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, true))), (true) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false))))))))), (true) || _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), max(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), mix(float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), float(_GLF_FUZZED(7496.8250)), bool(false))), _GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), 1.0 * (float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) - 0.0))))))))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1))))))); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                              return;
                             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(4345.5860, (4345.5860) - 0.0)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(4345.5860, (4345.5860) - 0.0)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(4345.5860, (4345.5860) - 0.0)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))), false, false))), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(4345.5860, (4345.5860) - 0.0)) : _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))))
                                    continue;
                                   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x)) << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                                    {
                                     return;
                                    }
                                  }
                                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))));
                                }
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
                                return;
                              }
                             do
                              {
                               for(int _injected_loop_counter = (0 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), int(ivec2((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), clamp(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 ^ (_GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(int(7), int(7)))))), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                  {
                                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0), (false ? _GLF_FUZZED(-40596) : _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0))) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      break;
                                     if(_GLF_DEAD(false))
                                      {
                                       do
                                        {
                                         return;
                                        }
                                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                      }
                                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         do
                                          {
                                           if(_GLF_DEAD(false))
                                            continue;
                                           subgroupAll(false);
                                          }
                                         while(_GLF_WRAPPED_LOOP(false));
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                 if(_GLF_DEAD(false))
                                  continue;
                                }
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
                            }
                          }
                         else
                          {
                          }
                        }
                      }
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && _GLF_IDENTITY((false), ((false)) && true))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))), ! (! (bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))))))) && true)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), false || (! (! (_GLF_IDENTITY(false, (false) && true)))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true))))), _GLF_IDENTITY(false, false || (false)) || (! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(bool(bvec3((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true))), true, true)), bool(bool(bool(bvec3((! (_GLF_IDENTITY(false, (false) && true))), true, true))))))) || false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), false || (! (! (_GLF_IDENTITY(false, (false) && true))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), false || (! (! (_GLF_IDENTITY(false, (false) && true))))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), false || (! (! (_GLF_IDENTITY(false, (false) && true)))))))))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, (false) && true)))), _GLF_IDENTITY(bool(bvec3(bool(bool(! (_GLF_IDENTITY(false, (false) && true)))), true, false)), ! (! (bool(bvec3(bool(bool(! (_GLF_IDENTITY(false, (false) && true)))), true, false))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) && true))), false || (! (! (_GLF_IDENTITY(false, (false) && true))))))), true, false, false)))))))) && true))))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << 0)), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(6983)))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), false)), true)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), false)), true)))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), false)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), true, true), false)), true)))))))))), false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))))))))), true)))), _GLF_TRUE(_GLF_IDENTITY(true, (true) && true), (injectionSwitch.x < injectionSwitch.y)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))) && true))), true && (_GLF_IDENTITY(false, ! (! (false))))), true)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))) && true))), true && (_GLF_IDENTITY(false, ! (! (false))))), true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) && true)))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y), false || ((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-78.37), _GLF_FUZZED(6.2)), vec2((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1], clamp(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1], max((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1], ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]) * 1.0))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1], (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))[1]))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), true))).x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y)))))) && true)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), (_GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec2((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))), true))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             return;
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0)))), ~ (_GLF_IDENTITY(~ (((1 << _GLF_IDENTITY(int(0), int(0))))), (~ (((1 << _GLF_IDENTITY(int(0), int(0)))))) | (~ (((1 << _GLF_IDENTITY(int(0), int(0))))))))) - 0) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec2(true, false)))), ! (! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), bool(bvec2(true, false)))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec2(true, false))))), bool(bvec2(true, false)))))))))))), (_GLF_IDENTITY(true, (true) && true)) || false) && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), false)))))))) || false)))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 do
  {
   subgroupBarrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))) / 1) << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))))))))))))))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, 0 ^ (1)))))))), (((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))) / 1) << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))))))))))))))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, 0 ^ (1))))))))) | (((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec4(1, 0, 0, 1)))))) / 1) << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))))))))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))))))))), 0 ^ (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), ((false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, 0 | (-53668))) : 1)) - 0))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : _GLF_IDENTITY(1, 0 + (1))))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-53668, ~ (~ (-53668)))) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (false ? _GLF_FUZZED(findLSB(subgroup_base)) : ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))), min(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), max(~ (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-53668) : 1), (true ? (false ? _GLF_FUZZED(-53668) : 1) : _GLF_FUZZED((6643 & 96527)))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), min((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-53668), (_GLF_FUZZED(-53668)) | 0) : 1)))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), clamp(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), (false ? _GLF_FUZZED(-53668) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))), max(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-53668) : 1, ~ (~ (false ? _GLF_FUZZED(-53668) : 1)))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1)))))) | (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-53668) : 1))))))))))))))))))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), ~ (~ (int(_GLF_IDENTITY(1, 0 ^ (1)))))))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false)), bool(bvec2(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false)), true)))) && true))))), (bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))) || false)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, _GLF_IDENTITY(clamp(_GLF_IDENTITY(read, 0u | (read)), read, read), (clamp(read, read, read)) | (clamp(read, read, read)))), 4, 64, 4);
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))), false))), (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec4(bool(bool(true)), false, true, false)))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))), false))), (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec4(bool(bool(true)), false, true, false)))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false))))), false))), _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! (! (! ((false))))))) && _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec4(bool(bool(true)), false, true, false))))))) || false)) || false))
        break;
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, true, true))))) && true)))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
        }
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
