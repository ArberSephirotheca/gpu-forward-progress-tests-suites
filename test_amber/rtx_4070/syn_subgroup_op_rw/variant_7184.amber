#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 for(int _injected_loop_counter = ((1 | 0) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4370.9848))), (injectionSwitch.x) / 1.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).y)))))) || false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-54125) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) / 1)), 1 * (~ (_GLF_IDENTITY(0, (0) / 1))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false)))))))))), bool(bvec4(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), true, true, true))))))) || false)))) || false)), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec4((_GLF_IDENTITY(false, (false) || false)), true, true, false))) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! ((false) || _GLF_IDENTITY(false, ! (! (false)))), (! ((false) || _GLF_IDENTITY(false, ! (! (false))))) || false)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))) || _GLF_IDENTITY(false, ! (! (false)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || _GLF_IDENTITY(false, ! (! (false)))), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || _GLF_IDENTITY(false, ! (! (false)))), true, true, true)))))))))) || false)))) || false)))))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])) : _GLF_FUZZED(6.4)))), vec2(_GLF_FUZZED((-899.733)), _GLF_FUZZED(524.816)), bvec2(false, false))).y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1])) : _GLF_FUZZED(6.4)))), vec2(_GLF_FUZZED((-899.733)), _GLF_FUZZED(524.816)), bvec2(false, false))).y))), true))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, max(1u, 1u)), 1u)), 1u * (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) * 1u))))))), (1u) * 1u), 1u, 1u))) / _GLF_IDENTITY(uvec3(1u, 1u, 1u), ~ (~ (uvec3(1u, 1u, 1u))))))), uvec3(uvec3(uvec3(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u))) / uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(_GLF_IDENTITY(1u, uint(uvec4(1u, (1u & 1u), 0u, 1u))), _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u))) / uvec3(1u, 1u, 1u))))), max(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) - uvec3(0u, 0u, 0u)) * uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(43435u) : _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) / 1u)))))))) / uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u))) / uvec3(1u, 1u, 1u))))), uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u))) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(0u, 0u, 0u), max(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))) | (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(0u), uvec3(0u))))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) * uvec3(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(subgroup_size))), 1u))) / uvec3(1u, 1u, 1u)))))))))))).x;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, true))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (0u << _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))) ^ (_GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(num_workgroup) : gl_WorkGroupSize.x))))));
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, max(_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(0u, 0u, 0u)), gl_WorkGroupID)).x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), mat2(1.0) * (vec2(vec4(injectionSwitch, _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))))).y))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
    {
     return;
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, 0u + (workgroup_size)), ~ (~ _GLF_IDENTITY((workgroup_size), 1u * (_GLF_IDENTITY((workgroup_size), (_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((workgroup_size), ((workgroup_size)) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))), 1u, 1u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY((workgroup_size), ((workgroup_size)) >> (0u << _GLF_IDENTITY(uint(0u), uint(0u)))), 1u, 1u, 1u)))))), max((workgroup_size), (workgroup_size)))) | 0u))))), _GLF_IDENTITY(workgroup_size, min(workgroup_size, workgroup_size)))) * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), true, false)))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))), false, false, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), max(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))) | (_GLF_IDENTITY(clamp(0, 0, 0), max(clamp(0, 0, 0), clamp(0, 0, 0))))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), min((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) / 1))) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), clamp(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), 1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (true ? ~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) << 0) : _GLF_FUZZED(-64362))), 0, 0))) : _GLF_FUZZED((~ 23501)))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | _GLF_IDENTITY(0, 0 ^ (0)))))) | 0))), _GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + 0)))))) | 0), max((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ ((_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))))))))), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))))) | 0))), (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(0, (0) | (0))))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(int(0)))))))))), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0)))) >> 0))), 1 * (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | 0))), clamp(0, 0, 0)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(0, (0) | (0)), 0)), max(0, 0))))) << 0), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), 0 | (clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), ~ (_GLF_IDENTITY(~ (clamp(0, 0, 0)), (~ (clamp(0, 0, 0))) | (~ (clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0))))), 1 | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> (1 ^ 1)), 0)), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0), clamp((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), min((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))))) | 0), (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0)) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), 0 | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))))) ^ ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))))))) | 0))), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), max(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), max(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))) | (_GLF_IDENTITY(clamp(0, 0, 0), max(clamp(0, 0, 0), clamp(0, 0, 0))))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), min((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) / 1))) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), clamp(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), 1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (true ? ~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) << 0) : _GLF_FUZZED(-64362))), 0, 0))) : _GLF_FUZZED((~ 23501)))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | _GLF_IDENTITY(0, 0 ^ (0)))))) | 0))), _GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + 0)))))) | 0), max((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ ((_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))))))))), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))))) | 0))), (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(0, (0) | (0))))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(int(0)))))))))), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0)))) >> 0))), 1 * (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | 0))), clamp(0, 0, 0)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(0, (0) | (0)), 0)), max(0, 0))))) << 0), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), 0 | (clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), ~ (_GLF_IDENTITY(~ (clamp(0, 0, 0)), (~ (clamp(0, 0, 0))) | (~ (clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0))))), 1 | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> (1 ^ 1)), 0)), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0), clamp((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), min((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))))) | 0), (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0)) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), 0 | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))))) ^ ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))))))) | 0))), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), max(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0)))))), max((_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), max(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))) | (_GLF_IDENTITY(clamp(0, 0, 0), max(clamp(0, 0, 0), clamp(0, 0, 0))))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), min((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) / 1))) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), clamp(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), 1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (true ? ~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) << 0) : _GLF_FUZZED(-64362))), 0, 0))) : _GLF_FUZZED((~ 23501)))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | _GLF_IDENTITY(0, 0 ^ (0)))))) | 0))), _GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + 0)))))) | 0), max((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ ((_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))))))))), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))))) | 0))), (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(0, (0) | (0))))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(int(0)))))))))), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0)))) >> 0))), 1 * (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | 0))), clamp(0, 0, 0)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(0, (0) | (0)), 0)), max(0, 0))))) << 0), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), 0 | (clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), ~ (_GLF_IDENTITY(~ (clamp(0, 0, 0)), (~ (clamp(0, 0, 0))) | (~ (clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0))))), 1 | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> (1 ^ 1)), 0)), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0), clamp((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), min((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))))) | 0), (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0)) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), 0 | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))))) ^ ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))))))) | 0))), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), max(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0)))))), (_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), max(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (0)))) | (_GLF_IDENTITY(clamp(0, 0, 0), max(clamp(0, 0, 0), clamp(0, 0, 0))))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), min((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0)))))) / 1))) | 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), clamp(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) / 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0))), 1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), max((_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (true ? ~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, (0) << 0) : _GLF_FUZZED(-64362))), 0, 0))) : _GLF_FUZZED((~ 23501)))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | _GLF_IDENTITY(0, 0 ^ (0)))))) | 0))), _GLF_IDENTITY(1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) + 0)))))) | 0), max((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))), ~ (~ ((_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, 0))))))))), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), max(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, max((_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))))) | 0))), (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0 << _GLF_IDENTITY(int(0), int(0))) ^ (_GLF_IDENTITY(0, (0) | (0))))))))) | 0), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(int(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, int(int(0)))))))))), (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0)))) | 0)))) >> 0))), 1 * (1 | _GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (0) | 0))), clamp(0, 0, 0)), 1 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))), ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0)))) | ((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) | 0), (_GLF_IDENTITY(0, (0) | 0)) ^ 0))), clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) / 1), (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) - 0), max(_GLF_IDENTITY(0, (0) | (0)), 0)), max(0, 0))))) << 0), ~ (~ _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), 0 | (clamp(0, 0, 0))))), ((_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), ~ (_GLF_IDENTITY(~ (clamp(0, 0, 0)), (~ (clamp(0, 0, 0))) | (~ (clamp(0, 0, 0))))))))) | 0), max((_GLF_IDENTITY(0, clamp(0, 0, 0))), (_GLF_IDENTITY(0, clamp(0, 0, 0))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0))))), 1 | _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> (1 ^ 1)), 0)), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0), clamp((_GLF_IDENTITY(0, ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), max(_GLF_IDENTITY((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), min((_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))), (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))))) | 0), (_GLF_IDENTITY(0, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))), (~ (~ (_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0))))) | 0)) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), 0 | (_GLF_IDENTITY(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0), clamp(_GLF_IDENTITY(0, min(0, 0)), 0, 0)))))) ^ ((0 | 0) >> _GLF_IDENTITY(int(8), int(8)))))))) | 0))), max((_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, _GLF_IDENTITY(clamp(0, 0, 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), max(false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))), false ? _GLF_FUZZED(-24781) : _GLF_IDENTITY(clamp(0, 0, 0), clamp(clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) * 1), 0, _GLF_IDENTITY(0, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (0))), clamp(0, 0, 0), clamp(0, 0, 0))))))))))) | 0), (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, clamp(0, 0, 0))))) | 0))))))))) + int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) << 0)); _injected_loop_counter --)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           break;
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_DEAD(false), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec2(_GLF_DEAD(false), true)), false)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec2(_GLF_DEAD(false), true)), false)), false, false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
          return;
        }
       else
        {
        }
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(_GLF_IDENTITY(bool(_injected_loop_counter != 1), (bool(_injected_loop_counter != 1)) || false)))); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true))))), _GLF_IDENTITY(true, true && (true))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false)))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))));
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   for(int _injected_loop_counter = _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0)), 0 | (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))), (true ? (_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) | (_GLF_IDENTITY(int(1), (int(1)) * 1)))) << 0)), 0 | (_GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), clamp(int(1), int(_GLF_IDENTITY(1, min(1, 1))), int(1))))))) : _GLF_FUZZED(-33796)))), 0 | (((_GLF_IDENTITY(1, (1) ^ 0) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY((_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(46028) : _GLF_IDENTITY((_GLF_IDENTITY(int(1), (int(1)) * 1)) << 0, ((_GLF_IDENTITY(int(1), (int(1)) * 1)) << _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) + 0), 0))) / 1)))), (true ? _GLF_IDENTITY(int(1), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) << (0 | 0))), (int(1)) * 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) * 1), (_GLF_IDENTITY(int(1), (int(1)) * 1)) | (_GLF_IDENTITY(int(1), (int(1)) * 1))) : _GLF_FUZZED(64498)))) << 0) : _GLF_FUZZED(86030))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(int(_GLF_IDENTITY(int(1), clamp(int(1), int(_GLF_IDENTITY(1, max(1, 1))), int(1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, false || (false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(40.76)), vec2(_GLF_FUZZED(6334.9818), (injectionSwitch)[1]), bvec2(false, true))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false), _GLF_IDENTITY(false, (false) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-77.20))))) > injectionSwitch.y))));
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
    {
    }
   else
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (false ? _GLF_FUZZED(35800u) : ~ (subgroup_id))))), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u))) * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))), subgroup_base)) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, min(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id)))), clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id : _GLF_FUZZED(atomicMin(subgroup_local_id, 152789u)))), workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))) >> ((1u | 1u) ^ _GLF_IDENTITY(1u, max(1u, 1u)))), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))), subgroup_base)) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, min(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id)))), clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id : _GLF_FUZZED(atomicMin(subgroup_local_id, 152789u)))), workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))) >> ((1u | 1u) ^ _GLF_IDENTITY(1u, max(1u, 1u)))), ~ (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base))), subgroup_base)) + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(min(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id))), (min(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id)))) | (min(workgroup_base + subgroup_base + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) | (workgroup_base + subgroup_base + subgroup_local_id)))))), clamp(workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id : _GLF_FUZZED(atomicMin(subgroup_local_id, 152789u)))), workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + subgroup_base + subgroup_local_id))) >> ((1u | _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_id) : 1u)), 1u))) ^ _GLF_IDENTITY(_GLF_IDENTITY(1u, max(1u, 1u)), (_GLF_IDENTITY(1u, max(1u, 1u))) | (_GLF_IDENTITY(1u, max(1u, 1u)))))))))));
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, uint(_GLF_IDENTITY(uvec3((subgroup_local_id + 1) % subgroup_size, 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), uvec3(1u, 1u, 1u) * (uvec3((subgroup_local_id + 1) % subgroup_size, 1u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))))));
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 2);
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), bool(bvec3(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, true))), false))))), ! (! _GLF_IDENTITY((false), ((false)) && true)))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3874.6848), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y, ! (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3874.6848), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(68.20) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3874.6848), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.0)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y), false || (! (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(68.20) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(3874.6848), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(-8.0), (_GLF_IDENTITY(_GLF_FUZZED(-8.0), float(mat3x4(_GLF_FUZZED(-8.0), 1.0, 0.0, 1.0, sqrt(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, log(1.0))))) + abs(0.0))), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)))) || _GLF_IDENTITY(false, (false) && true))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))) && true), true, true, true)), false || (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true, true))))))
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / 1))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0)), ~ (~ (_GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0)))))) == 0, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0, bool(_GLF_IDENTITY(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), bool(bvec4(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), false, false, true))))), _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0, bool(_GLF_IDENTITY(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), bool(bvec4(_GLF_IDENTITY(bool((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0)), (subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) | (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0)), (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))))))) == 0), (bool((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0)), (subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) | (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0)), (false ? _GLF_FUZZED(workgroup_size) : subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))))))) == 0)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0, bool(_GLF_IDENTITY(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), bool(bvec4(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), false, false, true))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true), bvec3(bvec4(bvec3(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0, bool(_GLF_IDENTITY(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), bool(bvec4(bool((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, (0) >> 0))) == 0), false, false, true))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y)), true), true)))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-760.140)), bool(false))) < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (_GLF_IDENTITY(! (true), (_GLF_IDENTITY(! (true), (! (true)) && true)) && true))))))))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), ! (_GLF_IDENTITY(! (! (! (_GLF_IDENTITY(false, ! (! (false)))))), (! (! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true)))), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
              break;
            }
           return;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))))))))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true))))))), bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, true && (true))))))))))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) * 1)), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || _GLF_IDENTITY((true), bool(bvec2((true), true))))))
              {
               return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, false || (false)) || (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             return;
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           else
            {
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            return;
           subgroupAll(false);
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            continue;
           return;
          }
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, false, true))), true, true)))))))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ (~ (uint(1)))), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false)), (bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, false))) && true))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))))), (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                continue;
              }
             else
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), false, true, false)))) && true)))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), false || (_GLF_DEAD(false))))
        {
         do
          {
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true)))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(18471))))) >> _GLF_IDENTITY(int(1), int(1)), 1 * (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(18471))))) >> _GLF_IDENTITY(int(1), int(1)), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(18471))))) >> _GLF_IDENTITY(int(1), int(1))), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(18471)))), (1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(18471))))) << 0)) >> _GLF_IDENTITY(int(1), int(1)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > injectionSwitch.y)))) || false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
              }
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bool(_GLF_IDENTITY(_injected_loop_counter != 1, true && (_injected_loop_counter != 1))))))) && true); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
         else
          {
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), clamp(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), max(int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)), int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ 0)))))))); _injected_loop_counter --)
          {
           return;
          }
        }
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false, true), false)))))))))), _GLF_IDENTITY(true && (! (_GLF_DEAD(false))), bool(_GLF_IDENTITY(bvec2(true && (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), ! (! (_GLF_IDENTITY((_GLF_DEAD(false)), false || ((_GLF_DEAD(false)))))))), false), bvec2(bvec3(bvec2(true && _GLF_IDENTITY((! (_GLF_DEAD(false))), true && ((! (_GLF_DEAD(false))))), false), true)))))))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)) > _GLF_IDENTITY(0, _GLF_IDENTITY((0), max((0), (0))) | 0)); _GLF_IDENTITY(_injected_loop_counter --, (0 ^ 0) + (_injected_loop_counter --)))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false)))), bool(bvec4(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), false)))), false, false, false)))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        return;
                       continue;
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), (true && (false)) || false)))), (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))
                        continue;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))))) != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     do
                      {
                       return;
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          continue;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), false, false)))) || false)) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true, true), true))))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-773.632)), vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), bvec2(false, true))), mat2(1.0) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) - 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) + 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) + 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(5.7)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))), bool(true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y)))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-49.45) : injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))), false, false)))) || false)) || _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec3(! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true, true), bvec3(bvec4(bvec3(! ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), true, true), true))))))))))), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y, _GLF_IDENTITY(false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), (false || (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)) && true))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-773.632)), vec2(_GLF_FUZZED(-7.4), (injectionSwitch)[1]), bvec2(false, true))), mat2(1.0) * (injectionSwitch)), (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-0.6))))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), mix(float(_GLF_FUZZED(-1.9)), float(_GLF_IDENTITY(1.0, 0.0 + (1.0))), bool(true))), 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) - 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0)))), (float(_GLF_IDENTITY(vec3(1.0, 0.0, 1.0), clamp(vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0), vec3(1.0, 0.0, 1.0))))) / 1.0)), 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) + 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED((- injectionSwitch)) : injectionSwitch)).x < injectionSwitch.y)))), _GLF_IDENTITY(! (! (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) + 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (! (! (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-2.6, 6.3)) : injectionSwitch))) / vec2(1.0, 1.0)), 1.0, _GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(3.4) : 1.0)), 1.0, 1.0)))), 0.0, 1.0)), min(_GLF_IDENTITY(determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)), (determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0))) + 0.0), determinant(mat2(1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0, 1.0)))), 1.0, 1.0))), (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) || false))))))), true && (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), 1.0)).x, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))) + abs(0.0)), 1.0)).x)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, mix(float(_GLF_FUZZED(5.7)), float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))), (injectionSwitch) / vec2(1.0, 1.0)).x, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x))), bool(true))), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) > injectionSwitch.y))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         subgroupAll(false);
        }
       atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-52947) : 1))))), 1))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, 0 + (_GLF_IDENTITY(4, (4) ^ 0))))), 4)), 64, 4);
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
        continue;
       continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        break;
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   subgroupBarrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 atomicStore(buf[virtual_gid], _GLF_IDENTITY(read, 0u | (read)), 4, 64, _GLF_IDENTITY(4, (4) | (4)));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-0.3) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
