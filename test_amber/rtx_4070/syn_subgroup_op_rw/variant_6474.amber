#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   subgroupAll(false);
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 16:
     (refract(35.77, intBitsToFloat(-47655), -669.355) / mat2x4(-25.93, -4.4, -8.0, -6.3, 3.8, -1.1, 7241.6522, -789.637));
     case 42:
     for(     workgroup_size;
 bool(-5.5); bvec4(false, false, false, true))
      {
       mat4x3 _GLF_SWITCH_0_0v[64], _GLF_SWITCH_0_1v;
       while((! true))
        {
         mix(bvec3(bvec2(true, true), false), bvec3(false, true, true), equal(vec3(5.4, 29.64, -7778.1743), vec3(208.480, -91.64, 8.5)));
         uint((-96092));
         (-67585 + ivec4(-47814, 51115, 71289, -8970));
         for(         mat2x4(2.0, 627.185, -6.8, 50.92, 0.4, 526.399, 909.141, -2.9);
 (_GLF_SWITCH_0_1v != mat4x3(491.685, 258.889, 0.3, -3321.3314, 89.66, 6155.4332, 60.92, 1.2, -26.11, 538.446, 928.743, 197.365)); mat4x2(mat4(mat3(3798.1741, 5203.8614, 58.77, -20.87, 743.679, -582.241, 1.6, -39.80, -0.9))))
          {
           ((~ ivec3(96655, 14752, 3253)) / (-57049 * ivec4(-30646, -34567, 97110, 13524)[3]));
           (uvec3(189029u, 74392u, 1680u) >> uvec3(36244u, 12261u, 108344u));
           bvec4 _GLF_SWITCH_0_2v, _GLF_SWITCH_0_3v, _GLF_SWITCH_0_4v[3];
           (bvec2(false, true));
           mat3(0.2, -677.815, 2.2, -8708.3273, -188.771, -8.4, 5244.6412, -42.25, -9374.9864);
          }
         _GLF_SWITCH_0_1v;
         uvec4 _GLF_SWITCH_0_5v, _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v[79];
        }
       ;
       bvec2(true, false);
       ivec3(-59373, -39861, -81459);
       vec2 _GLF_SWITCH_0_8v;
       do
        {
        }
       while(false);
       isinf(vec3(-3126.4700, -822.217, 1.7));
      }
     case 0:
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       atomicStore(buf[virtual_gid], read, 4, 64, 4);
      }
     subgroupAll(true);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
