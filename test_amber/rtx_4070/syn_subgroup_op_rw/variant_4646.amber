#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_67 {
 ivec3 _f0;
} ;

struct _GLF_struct_68 {
 _GLF_struct_67 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_66 {
 mat4 _f0;
 mat4 _f1;
 ivec2 _f2;
 uint read;
 mat4x3 _f3;
} ;

struct _GLF_struct_63 {
 mat2x3 _f0;
 vec3 _f1;
 mat4x3 _f2;
 vec2 _f3;
 mat2x3 _f4;
 mat3 _f5;
} ;

struct _GLF_struct_62 {
 uvec3 _f0;
 vec3 _f1;
 bvec2 _f2;
 mat4 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_61 {
 uvec4 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 vec3 _f3;
 bvec2 _f4;
 vec2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_64 {
 int _f0;
 _GLF_struct_61 _f1;
 bool _f2;
 bvec2 _f3;
 _GLF_struct_62 _f4;
 _GLF_struct_63 _f5;
} ;

struct _GLF_struct_65 {
 uint virtual_gid;
 _GLF_struct_64 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_58 {
 bvec4 _f0;
 bvec2 _f1;
 mat3 _f2;
 uvec2 _f3;
 uvec2 _f4;
 uvec3 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_57 {
 mat2x3 _f0;
 bvec2 _f1;
 mat3 _f2;
 mat3x4 _f3;
 mat3x2 _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_59 {
 uvec3 _f0;
 mat2x4 _f1;
 _GLF_struct_57 _f2;
 _GLF_struct_58 _f3;
 vec2 _f4;
 bvec3 _f5;
 float _f6;
} ;

struct _GLF_struct_60 {
 _GLF_struct_59 _f0;
 int _injected_loop_counter;
} ;

struct _GLF_struct_54 {
 uint subgroup_local_id;
 mat4 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_55 {
 _GLF_struct_54 _f0;
} ;

struct _GLF_struct_52 {
 bvec3 _f0;
} ;

struct _GLF_struct_51 {
 ivec2 _f0;
 mat3x4 _f1;
 vec4 _f2;
 ivec3 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_53 {
 mat3x2 _f0;
 mat2x4 _f1;
 _GLF_struct_51 _f2;
 bvec3 _f3;
 _GLF_struct_52 _f4;
} ;

struct _GLF_struct_56 {
 ivec2 _f0;
 mat4x3 _f1;
 _GLF_struct_53 _f2;
 _GLF_struct_55 _f3;
} ;

struct _GLF_struct_50 {
 uvec2 _f0;
 uint subgroup_id;
 vec2 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_49 {
 bvec2 _f0;
 mat3x2 _f1;
 uint subgroup_size;
 float _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_46 {
 float _f0;
 uvec4 _f1;
 uvec3 _f2;
 ivec4 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_45 {
 ivec3 _f0;
} ;

struct _GLF_struct_47 {
 mat4 _f0;
 bvec4 _f1;
 _GLF_struct_45 _f2;
 _GLF_struct_46 _f3;
} ;

struct _GLF_struct_43 {
 mat4x3 _f0;
 int _f1;
 mat4x2 _f2;
 mat2 _f3;
 mat3x4 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_42 {
 uvec3 _f0;
 mat3x4 _f1;
 mat4 _f2;
 uint _f3;
 int _f4;
 int _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_41 {
 mat2 _f0;
 mat4x2 _f1;
 vec2 _f2;
 uint _f3;
 uvec2 _f4;
 ivec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_44 {
 _GLF_struct_41 _f0;
 _GLF_struct_42 _f1;
 ivec3 _f2;
 _GLF_struct_43 _f3;
} ;

struct _GLF_struct_39 {
 mat3x4 _f0;
 mat4x3 _f1;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id;
 ivec3 _f2;
 mat4 _f3;
 ivec3 _f4;
 mat4 _f5;
} ;

struct _GLF_struct_40 {
 uvec4 _f0;
 uint _f1;
 _GLF_struct_39 _f2;
} ;

struct _GLF_struct_37 {
 ivec4 _f0;
 mat4x2 _f1;
 ivec3 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_36 {
 vec4 _f0;
 float _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_35 {
 ivec2 _f0;
 mat4x3 _f1;
} ;

struct _GLF_struct_38 {
 _GLF_struct_35 _f0;
 _GLF_struct_36 _f1;
 mat2x3 _f2;
 _GLF_struct_37 _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_33 {
 bvec3 _f0;
} ;

struct _GLF_struct_34 {
 _GLF_struct_33 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_31 {
 mat2x4 _f0;
 int _f1;
} ;

struct _GLF_struct_30 {
 bvec4 _f0;
} ;

struct _GLF_struct_32 {
 _GLF_struct_30 _f0;
 mat2x3 _f1;
 _GLF_struct_31 _f2;
} ;

struct _GLF_struct_48 {
 _GLF_struct_32 _f0;
 ivec2 _f1;
 _GLF_struct_34 _f2;
 _GLF_struct_38 _f3;
 _GLF_struct_40 _f4;
 _GLF_struct_44 _f5;
 _GLF_struct_47 _f6;
} ;

struct _GLF_struct_27 {
 vec2 _f0;
 vec3 _f1;
 vec4 _f2;
 uvec4 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_26 {
 vec2 _f0;
 bvec4 _f1;
 mat2 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_25 {
 bvec2 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_28 {
 _GLF_struct_25 _f0;
 mat3x2 _f1;
 _GLF_struct_26 _f2;
 uvec2 _f3;
 _GLF_struct_27 _f4;
 uint workgroup_id;
} ;

struct _GLF_struct_23 {
 vec3 _f0;
 uvec2 _f1;
 uvec2 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_24 {
 uvec4 _f0;
 _GLF_struct_23 _f1;
 float _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_29 {
 _GLF_struct_24 _f0;
 float _f1;
 bvec4 _f2;
 uvec2 _f3;
 bvec3 _f4;
 _GLF_struct_28 _f5;
} ;

struct _GLF_struct_21 {
 ivec2 _f0;
 uvec3 GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id;
} ;

struct _GLF_struct_22 {
 _GLF_struct_21 _f0;
 float _f1;
 uint _f2;
 bvec4 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_18 {
 bvec3 _f0;
 float _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_17 {
 vec4 _f0;
} ;

struct _GLF_struct_16 {
 vec2 _f0;
} ;

struct _GLF_struct_15 {
 mat2 _f0;
 mat3 _f1;
 mat4x3 _f2;
 mat2x4 _f3;
 mat4x3 _f4;
 vec2 _f5;
 mat2 _f6;
} ;

struct _GLF_struct_19 {
 _GLF_struct_15 _f0;
 _GLF_struct_16 _f1;
 mat2 _f2;
 _GLF_struct_17 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_12 {
 float _f0;
 uint _f1;
 mat4x3 _f2;
 mat3x4 _f3;
 uvec2 _f4;
 mat3x2 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_14 {
 ivec3 _f0;
 _GLF_struct_12 _f1;
 _GLF_struct_13 _f2;
 uint next_virtual_gid;
} ;

struct _GLF_struct_10 {
 bvec4 _f0;
} ;

struct _GLF_struct_9 {
 ivec3 _f0;
} ;

struct _GLF_struct_11 {
 mat4 _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_8 {
 bvec3 _f0;
 mat4 _f1;
 bool _f2;
} ;

struct _GLF_struct_20 {
 uvec3 _f0;
 bool _f1;
 vec3 _f2;
 _GLF_struct_8 _f3;
 _GLF_struct_11 _f4;
 _GLF_struct_14 _f5;
 _GLF_struct_19 _f6;
} ;

struct _GLF_struct_5 {
 vec2 _f0;
 float _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 uvec2 _f1;
 mat2x3 _f2;
 bvec2 _f3;
 ivec2 _f4;
 mat3x4 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 mat2x3 _f1;
 mat4 _f2;
 vec2 _f3;
 float _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_3 _f0;
 _GLF_struct_4 _f1;
 _GLF_struct_5 _f2;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 mat4x2 _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 vec2 _f1;
 vec4 _f2;
 bvec2 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 uvec2 _f2;
 uint _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_2 _f0;
 _GLF_struct_6 _f1;
 uint num_workgroup;
 uvec4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))), ! (! (_GLF_DEAD(false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_22 _GLF_struct_replacement_22;
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-60035) : _GLF_IDENTITY(1, (1) ^ 0), (false ? _GLF_FUZZED(-60035) : _GLF_IDENTITY(1, (1) ^ 0)) / 1))), max(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-60035) : _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), int(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (false ? _GLF_FUZZED(25444) : _GLF_IDENTITY(1, (1) ^ 0))), (0 << _GLF_IDENTITY(int(6), int(6))), 1))), _GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ 0))))), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-60035) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(clamp(bitfieldInsert(52709, 37550, 15427, 33373), -71937, 89456)) : 1))) ^ 0))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2)))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_48 _GLF_struct_replacement_48;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x)) < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(0.6) : injectionSwitch[1])))).y)), false))) || false), false || (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), false))) || _GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true))), _GLF_IDENTITY(true, bool(bvec3(true, false, true))), false, false))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY((bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false, bool(bool((bool(bvec4(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)))), false || (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false)), (bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(distance(vec3(-4141.0442, -1093.1103, -41.70), vec3(32.94, 2188.1109, 9932.9608))))) < injectionSwitch.y)), false))) || _GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, false))), false))))), _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY(true, (true) && true)))) && true)))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true))), (bool(bvec4(false, _GLF_IDENTITY(true, bool(bvec3(true, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), false || (_GLF_IDENTITY(true, (true) && true)))) && true)))), false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)) && true)))) && true))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, bool(bvec3(true, true, false))), true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_50 _GLF_struct_replacement_50 = _GLF_struct_50(uvec2(1u), gl_SubgroupID, _GLF_IDENTITY(vec2(1.0), mix(vec2(_GLF_FUZZED(-4.2), _GLF_FUZZED((-4.5 / -2.4))), vec2((vec2(1.0))[0], (vec2(1.0))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), mat3x2(1.0));
 for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 _GLF_struct_49 _GLF_struct_replacement_49 = _GLF_struct_49(bvec2(true), mat3x2(1.0), gl_SubgroupSize, 1.0, ivec2(1));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 _GLF_struct_56 _GLF_struct_replacement_56 = _GLF_struct_56(ivec2(1), mat4x3(1.0), _GLF_struct_53(mat3x2(1.0), mat2x4(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), clamp(_GLF_IDENTITY((1.0), max((1.0), _GLF_IDENTITY((1.0), mix(float((1.0)), float(_GLF_FUZZED(323.373)), bool(false))))), (1.0), (1.0))) / 1.0)), _GLF_struct_51(ivec2(_GLF_IDENTITY(1, (1) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))), mat3x4(1.0), vec4(1.0), ivec3(1), bvec2(true)), bvec3(true), _GLF_struct_52(_GLF_IDENTITY(bvec3(true), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))), _GLF_struct_55(_GLF_struct_54(gl_SubgroupInvocationID, mat4(1.0), vec2(1.0))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
  return;
 do
  {
   _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z = _GLF_struct_replacement_56._f3._f0.subgroup_local_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_2(_GLF_struct_0(mat2x3(1.0), vec2(1.0), _GLF_IDENTITY(vec4(1.0), min(vec4(1.0), vec4(1.0))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))), true && (true))) || false), (_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bool(true)))))), true && (true))) || false, ((_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true)))))), ((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), false || (bool(bool(true))))))) || false))), true && (true))) || false) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_struct_1(ivec3(1), mat4x2(1.0), uvec4(1u)), _GLF_IDENTITY(uvec2(1u), uvec2(0u, 0u) ^ (uvec2(1u))), 1u), _GLF_struct_6(_GLF_struct_3(mat2(1.0), mat2x3(1.0), _GLF_IDENTITY(mat4(1.0), transpose(transpose(mat4(1.0)))), vec2(1.0), 1.0), _GLF_struct_4(uvec3(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, ~ (~ _GLF_IDENTITY((1u), 0u ^ (_GLF_IDENTITY((1u), (false ? _GLF_FUZZED(199283u) : (1u))))))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec4(_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, _GLF_IDENTITY(0u | (1u), clamp(0u | (1u), _GLF_IDENTITY(0u | (1u), (true ? 0u | (1u) : _GLF_FUZZED(109252u))), 0u | (1u)))))), 1u, 1u, 0u)))) << (0u << _GLF_IDENTITY(uint(2u), uint(2u))))))), uvec2(1u), mat2x3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(true), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(true, ! (! (true)))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(bvec2(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false))))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(true), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), min((true ? injectionSwitch.x : _GLF_FUZZED(2.8)), (true ? injectionSwitch.x : _GLF_FUZZED(2.8)))))) + 0.0) < injectionSwitch.y))))))))))), bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec4(bvec3(bvec2(true), true), false)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), true && ((true))))))) && true) || false)), true), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(true), true), bvec3(bvec4(bvec3(bvec2(true), true), _GLF_IDENTITY(false, (false) || false))))))), false))))), ivec2(1), mat3x4(1.0), uvec4(1u)), _GLF_struct_5(vec2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, mat4x2(1.0))), _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | uvec3(0u, 0u, 0u)).x, uvec4(1u));
 for(_GLF_struct_60 _GLF_struct_replacement_60 = _GLF_struct_60(_GLF_struct_59(uvec3(1u), mat2x4(1.0), _GLF_struct_57(mat2x3(1.0), bvec2(true), mat3(1.0), mat3x4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, cos(0.0)))), _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7.6)), bool(false)))))), mat3x2(1.0), _GLF_IDENTITY(uvec3(1u), uvec3(1u, 1u, 1u) * (uvec3(1u)))), _GLF_struct_58(bvec4(true), bvec2(true), mat3(1.0), uvec2(1u), uvec2(1u), uvec3(1u), bvec2(true)), vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(5099.7043, max(5099.7043, 5099.7043))) : _GLF_IDENTITY(1.0, min(1.0, 1.0))))), bvec3(true), 1.0), (0 | 0)); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_60._injected_loop_counter != (1 ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (0) - 0))))) + 0))); _GLF_struct_replacement_60._injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), false))), true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), true), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)) && (false))))), true)))))), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, _GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) < injectionSwitch.y)) && (false))))), true)))))), false)))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, true), true))))), true)), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, true && (true)), true)), ! (! (bool(bvec3(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, true && (true)), true)))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))), false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true)))))) || false)), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, true && (true)), true)), ! (! (bool(bvec3(_GLF_IDENTITY(true, (true) && true), _GLF_IDENTITY(true, true && (true)), true)))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))), false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, (true) && true), true, true)))))) || false)), true)))))) && true)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   _GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.y = _GLF_struct_replacement_7.num_workgroup;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), false || ((false))), false || (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y) || false), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))))))))))))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))), _GLF_IDENTITY(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), bvec3(bvec4(bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false)))))), true))), true)))))))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, max(_GLF_IDENTITY(gl_WorkGroupSize.x, min(gl_WorkGroupSize.x, gl_WorkGroupSize.x)), _GLF_IDENTITY(gl_WorkGroupSize.x, ~ (~ (gl_WorkGroupSize.x)))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY((! (false)) && true, ! (! ((! (false)) && true))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_29 _GLF_struct_replacement_29 = _GLF_struct_29(_GLF_struct_24(uvec4(1u), _GLF_struct_23(vec3(1.0), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u)) * 1u)), uvec2(1u), ivec4(1)), 1.0, uvec2(1u)), 1.0, bvec4(true), _GLF_IDENTITY(uvec2(1u), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(uvec2(1u), uvec2(uvec4(uvec2(1u), 0u, 1u))))), ((~ (_GLF_IDENTITY(uvec2(1u), uvec2(uvec4(uvec2(1u), 0u, 1u)))))) - uvec2(0u, 0u))), _GLF_IDENTITY(bvec3(true), bvec3(bvec4(_GLF_IDENTITY(bvec3(true), bvec3(bvec3(bvec3(true)))), false))), _GLF_struct_28(_GLF_struct_25(bvec2(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false)))), mat3x2(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), clamp(float(1.0), _GLF_IDENTITY(float(1.0), mix(float(float(1.0)), _GLF_IDENTITY(float(_GLF_FUZZED(-345.451)), min(_GLF_IDENTITY(float(_GLF_FUZZED(-345.451)), min(float(_GLF_FUZZED(-345.451)), float(_GLF_FUZZED(-345.451)))), _GLF_IDENTITY(float(_GLF_FUZZED(-345.451)), (float(_GLF_FUZZED(-345.451))) / 1.0))), bool(false))), float(1.0))))))), mat3x2(1.0), _GLF_struct_26(vec2(1.0), bvec4(true), mat2(1.0), uvec2(1u)), uvec2(1u), _GLF_struct_27(vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(_GLF_IDENTITY(9.9, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-4815.5447) : 9.9))) : _GLF_IDENTITY(1.0, 1.0 * (1.0))))), vec3(1.0), vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(872.684)))), uvec4(1u), mat4x3(1.0)), _GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-8.8) : injectionSwitch.x))) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-96.13)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = (63684 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 _GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.w = _GLF_struct_replacement_29._f5.workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bool((false) || false))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.w;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))), bool(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))))
        return;
       _GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.z = _GLF_IDENTITY(workgroup_base, (true ? _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(false ? _GLF_FUZZED((workgroup_size)) : _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true))))) ? workgroup_base : _GLF_FUZZED(workgroup_size))), 0u ^ (_GLF_IDENTITY(false ? _GLF_FUZZED((workgroup_size)) : _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true))))) ? workgroup_base : _GLF_FUZZED(workgroup_size))), (false ? _GLF_FUZZED((workgroup_size)) : _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, true))))) ? workgroup_base : _GLF_FUZZED(workgroup_size)))) / uint(_GLF_ONE(1.0, injectionSwitch.y))))))) : _GLF_FUZZED(workgroup_size)));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), (true ? dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))) : _GLF_FUZZED(-99.68)))), 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), float(mat3x2(_GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), (true ? dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))) : _GLF_FUZZED(-99.68)))), 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), float(vec3(float(mat3x4(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))), (true ? dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, abs(0.0))) : _GLF_FUZZED(-99.68)))), 0.0, 0.0, 0.0, sqrt(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0)), 0.0, 0.0))), 1.0, 0.0, 0.0, 1.0, 0.0)))) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (false) || false)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))));
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true));
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_50.subgroup_id, ~ (~ (_GLF_struct_replacement_50.subgroup_id))) * _GLF_IDENTITY(_GLF_struct_replacement_49.subgroup_size, (_GLF_IDENTITY(_GLF_struct_replacement_49.subgroup_size, (_GLF_struct_replacement_49.subgroup_size) / 1u)) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), int(ivec2(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), int(6))), int(_GLF_IDENTITY(ivec3((0 >> _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(7), int(7))), 1), ivec3(_GLF_IDENTITY(ivec3(ivec3((0 >> _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(7), int(7))), 1)), (ivec3(ivec3((0 >> _GLF_IDENTITY(int(6), int(6))), (0 << _GLF_IDENTITY(int(7), int(7))), 1))) * ivec3(1, 1, 1)))))), 1)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.y = _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base));
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 _GLF_struct_65 _GLF_struct_replacement_65 = _GLF_struct_65(_GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.z + _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.y + _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z, _GLF_struct_64(1, _GLF_struct_61(uvec4(1u), uvec3(1u), mat2x4(1.0), vec3(1.0), bvec2(true), vec2(1.0), mat4x3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((vec2(39.91, -5.1) - vec2(-3.6, 241.342)).g)), bool(false))))), true, bvec2(true), _GLF_struct_62(uvec3(1u), vec3(1.0), bvec2(true), mat4(1.0), ivec4(1)), _GLF_struct_63(mat2x3(1.0), vec3(1.0), mat4x3(1.0), vec2(1.0), mat2x3(1.0), mat3(1.0))), bvec3(true));
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)) : _GLF_FUZZED(51.51))), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), log(1.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true)))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
    }
   return;
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(uvec3(1u), true, vec3(1.0), _GLF_struct_8(bvec3(true), mat4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-73.61, (true ? _GLF_IDENTITY(-73.61, (_GLF_IDENTITY(-73.61, max(-73.61, -73.61))) + 0.0) : _GLF_FUZZED(-61.72))))), float(1.0), bool(true))), (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-73.61)), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0))), bool(true))) : _GLF_FUZZED(-605.776)))), true), _GLF_struct_11(mat4(1.0), _GLF_struct_9(ivec3(1)), _GLF_struct_10(bvec4(_GLF_IDENTITY(true, (true) || false)))), _GLF_struct_14(ivec3(1), _GLF_struct_12(1.0, 1u, mat4x3(1.0), mat3x4(1.0), uvec2(1u), mat3x2(1.0), mat3x4(1.0)), _GLF_struct_13(uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, 0u | (1u))))), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), (ivec3(1)) - ivec3(0, 0, _GLF_IDENTITY(0, (0) * 1))), ~ (~ (_GLF_IDENTITY(ivec3(1), (ivec3(1)) - ivec3(0, 0, 0)))))), _GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.z + _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.y + ((_GLF_IDENTITY(_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z + 1, clamp(_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z + 1, _GLF_IDENTITY(_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z + 1, (_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z + 1) ^ 0u), _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z + 1))) % _GLF_struct_replacement_49.subgroup_size)), _GLF_struct_19(_GLF_struct_15(mat2(1.0), mat3(1.0), mat4x3(1.0), mat2x4(1.0), mat4x3(1.0), vec2(1.0), mat2(1.0)), _GLF_struct_16(vec2(1.0)), mat2(1.0), _GLF_struct_17(_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED((+ -160.282)), (vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) + 0.0), (_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1435.6029))))), 1.0))) - 0.0), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))), (1.0) - _GLF_ZERO(0.0, injectionSwitch.x))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) / int(_GLF_ONE(1.0, injectionSwitch.y)))], (vec4(1.0))[2], _GLF_FUZZED(_GLF_IDENTITY(1.7, _GLF_IDENTITY((_GLF_IDENTITY(1.7, _GLF_IDENTITY(1.0 * (1.7), _GLF_IDENTITY((false ? _GLF_FUZZED(mix(-6328.5750, 3.8, _GLF_IDENTITY(-1.9, max(_GLF_IDENTITY(-1.9, clamp(-1.9, -1.9, -1.9)), -1.9)))) : _GLF_IDENTITY(1.0 * (1.7), _GLF_IDENTITY(max(1.0 * (1.7), 1.0 * (1.7)), min(_GLF_IDENTITY(max(1.0 * (1.7), 1.0 * (1.7)), float(mat3(max(1.0 * (1.7), 1.0 * (1.7)), sqrt(0.0), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0))), max(1.0 * (1.7), 1.0 * (1.7)))))), (false ? _GLF_FUZZED(asinh(-5207.0282)) : (false ? _GLF_FUZZED(mix(-6328.5750, 3.8, _GLF_IDENTITY(-1.9, max(_GLF_IDENTITY(-1.9, clamp(-1.9, -1.9, -1.9)), -1.9)))) : _GLF_IDENTITY(1.0 * (1.7), max(1.0 * (1.7), 1.0 * (1.7))))))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_IDENTITY(1.7, _GLF_IDENTITY(1.0 * (1.7), _GLF_IDENTITY((false ? _GLF_FUZZED(mix(-6328.5750, 3.8, _GLF_IDENTITY(-1.9, max(_GLF_IDENTITY(-1.9, clamp(-1.9, -1.9, -1.9)), -1.9)))) : _GLF_IDENTITY(1.0 * (1.7), _GLF_IDENTITY(max(1.0 * (1.7), 1.0 * (1.7)), min(_GLF_IDENTITY(max(1.0 * (1.7), 1.0 * (1.7)), float(mat3(max(1.0 * (1.7), 1.0 * (1.7)), sqrt(0.0), 1.0, 1.0, tan(0.0), 0.0, 0.0, 0.0, 0.0))), max(1.0 * (1.7), 1.0 * (1.7)))))), (false ? _GLF_FUZZED(asinh(-5207.0282)) : (false ? _GLF_FUZZED(mix(-6328.5750, 3.8, _GLF_IDENTITY(-1.9, max(_GLF_IDENTITY(-1.9, clamp(-1.9, -1.9, -1.9)), -1.9)))) : _GLF_IDENTITY(1.0 * (1.7), max(1.0 * (1.7), 1.0 * (1.7))))))))) : _GLF_FUZZED(-176.547))) / _GLF_IDENTITY(determinant(mat4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true)))) ? _GLF_FUZZED(floor(385.059)) : determinant(mat4(round(length(normalize(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(90.48) : _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, max(0.0, 0.0))), mix(float(_GLF_FUZZED(-1245.2587)), float((_GLF_IDENTITY(0.0, max(0.0, 0.0)))), bool(true))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), mix(float(_GLF_FUZZED(7.7)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), max(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))))), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sin(0.0), 1.0, 0.0)))), bool(true))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), max(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true)))) ? _GLF_FUZZED(floor(385.059)) : determinant(mat4(round(length(normalize(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(90.48) : _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, max(0.0, 0.0))), mix(float(_GLF_FUZZED(-1245.2587)), float((_GLF_IDENTITY(0.0, max(0.0, 0.0)))), bool(true))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), mix(float(_GLF_FUZZED(7.7)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), max(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))))), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sin(0.0), 1.0, 0.0)))), bool(true))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) && true)))) ? _GLF_FUZZED(floor(385.059)) : determinant(mat4(round(length(normalize(vec4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(90.48) : _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), 1.0, 1.0, 1.0)))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY((_GLF_IDENTITY(0.0, max(0.0, 0.0))), mix(float(_GLF_FUZZED(-1245.2587)), float((_GLF_IDENTITY(0.0, max(0.0, 0.0)))), bool(true))) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), mix(float(_GLF_FUZZED(7.7)), float(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), max(_GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), (_GLF_IDENTITY(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(mat2x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)))) - 0.0))), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.8)), bool(false))), clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(0.7)), float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), bool(true))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(740.333)), float(1.0), bool(true))))), _GLF_IDENTITY(float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY(vec4(0.0, 0.0, 1.0, 0.0), max(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0)), (float(mat3x2(1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), max(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))), 1.0))) / 1.0)), 1.0, 0.0))))), 1.0, 1.0, 0.0, sqrt(0.0), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, sin(0.0), 1.0, 0.0)))), bool(true))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))))))), vec4((vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-6.7)), bool(false)))))[_GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(34895) : 0)))))], _GLF_FUZZED((true ? 124.140 : -92.61)), _GLF_FUZZED(1.5), (vec4(1.0))[3]), bvec4(true, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)), true)))), _GLF_struct_18(bvec3(true), 1.0, mat2x4(1.0))));
 _GLF_IDENTITY(_GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x = _GLF_struct_replacement_20._f5.next_virtual_gid, (_GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x = _GLF_struct_replacement_20._f5.next_virtual_gid) - 0u);
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7))), (_injected_loop_counter > (0 >> _GLF_IDENTITY(int(7), int(7)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_66 _GLF_struct_replacement_66 = _GLF_struct_66(mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), mat4(1.0), _GLF_IDENTITY(ivec2(1), (ivec2(1)) * ivec2(1, 1)), atomicLoad(buf[_GLF_struct_replacement_65.virtual_gid], 4, _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, 0 + (64)))), 2), mat4x3(1.0));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.x = _GLF_struct_replacement_66.read;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        continue;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) | 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7.6) : 1.0))), vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(cosh(39.17)))), 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat2x4(mat3x4(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.5)), float(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))))), bool(true))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), min((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)))), 0.0, cos(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0)), (float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), min((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)))), 0.0, cos(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0))) + 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0))))))), (true ? float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat2x4(mat3x4(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (true ? transpose(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(mat4(-3.1, -2176.3143, -852.822, 6.9, 6168.1013, 1.3, -7.0, 4139.5668, 6.9, 107.846, 6879.4258, -53.72, 5773.8297, 22.66, 3.8, -75.41))))))) * _GLF_IDENTITY(mat4(1.0), mat4(1.0) * (mat4(1.0))))), 1.0, 1.0, 0.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, ~ (~ (0)))]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))))))) : _GLF_FUZZED(218.362)))), round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(0.0, 0.0) + (vec2(1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))))))) ? float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0), min(vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0), vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0)))) : _GLF_FUZZED(2.5)))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-212.473)), bool(false))), 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), float(mat3x4(injectionSwitch[0], round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), mix(float(_GLF_FUZZED(11.63)), float(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))), bool(true))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(true))), bool(false))), 1.0, 0.0)))))) + log(1.0)), injectionSwitch[1]), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-7.6) : 1.0))), vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(cosh(39.17)))), 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat2x4(mat3x4(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-2.5)), float(_GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), max(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))))), bool(true))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), min((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)))), 0.0, cos(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0)), (float(mat3x4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), min((_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)), (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)))), 0.0, cos(0.0), 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 1.0))) + 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0))))))), (true ? float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 0.0), mat2x4(mat3x4(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (_GLF_IDENTITY(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (true ? transpose(mat4(_GLF_IDENTITY(1.0, float(float(1.0))), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-4775.7321))))), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-44.57)), bool(false))))))), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(length(0.0), 1.0, 0.0, 0.0), vec4(1.0, 0.0, 1.0, 1.0))), 0.0, 0.0, abs(0.0)))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) : _GLF_FUZZED(mat4(-3.1, -2176.3143, -852.822, 6.9, 6168.1013, 1.3, -7.0, 4139.5668, 6.9, 107.846, 6879.4258, -53.72, 5773.8297, 22.66, 3.8, -75.41))))))) * _GLF_IDENTITY(mat4(1.0), mat4(1.0) * (mat4(1.0))))), 1.0, 1.0, 0.0), mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat2x4(_GLF_IDENTITY(injectionSwitch[0], (_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[_GLF_IDENTITY(0, ~ (~ (0)))]) - 0.0)) - abs(0.0)), 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0)), dot(vec3(0.0, 0.0, 1.0), vec3(1.0, 1.0, 0.0))), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))))), 1.0, 1.0, 0.0))))))) : _GLF_FUZZED(218.362)))), round(length(normalize(_GLF_IDENTITY(vec2(1.0, 1.0), vec2(0.0, 0.0) + (vec2(1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], float(mat3x4(_GLF_IDENTITY(injectionSwitch[0], _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0)), (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec3(true, true, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true), bvec3(bvec3(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))))))))) ? float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0), min(vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0), vec3(_GLF_IDENTITY(injectionSwitch[0], (injectionSwitch[0]) * exp(0.0)), 0.0, 0.0)))) : _GLF_FUZZED(2.5)))), round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-212.473)), bool(false))), 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), float(mat3x4(injectionSwitch[0], round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch[0], float(mat3x4(injectionSwitch[0], round(length(normalize(vec2(1.0, 1.0)))), 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))))), mix(float(_GLF_FUZZED(11.63)), float(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(vec2(1.0, 0.0)))))), bool(true))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(float(true))), bool(false))), 1.0, 0.0)))))) + log(1.0)), injectionSwitch[1])) / vec2(1.0, 1.0))).y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))), ! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))) && (_GLF_IDENTITY(false, ! (! (false))))))))))), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), false))) && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-55.56)), bool(false))), float(mat4x2(injectionSwitch.y, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / exp(0.0)), 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3x4(0.0, sqrt(_GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(7480.1524)))), 1.0, length(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0))), 0.0)), 1.0)), 1.0, 1.0, exp(0.0), tan(0.0), 1.0)))) - 0.0))))))), false || ((_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 0.0 + (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * mat2(1.0)).x, injectionSwitch.x))) * 1.0))) > injectionSwitch.y)))))) && true))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        continue;
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))) || false), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)) > injectionSwitch.y))))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY(int(6), int(6))) >> 0)) | (_GLF_IDENTITY(int(6), int(6)))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               barrier();
              }
            }
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            return;
          }
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)))).y)))), true)), bool(bvec2(bool(bvec4(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y)), true)), false))))))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-17.07), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(93.69)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), abs(1.0), 0.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) * 1.0)), tan(0.0))))))), true && (false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(1739.2179)), float(1.0), bool(true))), _GLF_ONE(1.0, injectionSwitch.y), abs(1.0), 0.0, abs(0.0), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), (dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))) * 1.0)), tan(0.0))))))))), (_GLF_IDENTITY(false, ! (! (false))) || _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), true && (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), _GLF_IDENTITY(bool(bvec3((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false, false)), bool(bool(bool(bvec3((_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false, false))))))))) || false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         else
          {
          }
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z % 2) == 0, false || (_GLF_IDENTITY((_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z % 2) == 0, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.z % 2) == 0)))), true && ((_GLF_IDENTITY(_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id, min(_GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id, _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id)).z % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) ^ 0))))) == 0)))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           subgroupAll(false);
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(ivec3(-5087, -14191, -3570)[0]) : int(4)))), min(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(ivec3(-5087, -14191, -3570)[0]) : int(4)))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(ivec3(-5087, -14191, -3570)[0]) : int(4))))))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 break;
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 barrier();
                }
              }
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))))))
            return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[_GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x], _GLF_IDENTITY(uint(1), (uint(1)) / 1u), 4, 64, _GLF_IDENTITY(4, min(4, 4)));
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), false)), false || (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), bool(bvec4(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), true, true, false)))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true, false)))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))), mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))))[0], _GLF_FUZZED(47.18)), vec2(_GLF_FUZZED(-1.0), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))))[1]), bvec2(false, true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, 0.0)), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), false)))) ? _GLF_FUZZED(vec2(75.81, -57.67)) : vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))))))).y)), bool(bvec4(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), clamp(mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))).y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), true)), ! (! (bool(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y)), true)))))), true, true, false)))), false, false)))) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (! ((true)))))) || false), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || false)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              continue;
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))), false || ((_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, false)))))))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
              }
            }
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, determinant(mat3(1.0, log(1.0), 0.0, 1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0))).y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), false || (_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), (bool(! (_GLF_DEAD(false)))) || false))))))), _GLF_IDENTITY(false, (false) || false), true))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
          }
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       subgroupAll(false);
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))) && true))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-2.1) : injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-35.09)), (_GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(-35.09)), clamp((true ? injectionSwitch.y : _GLF_FUZZED(-35.09)), (true ? injectionSwitch.y : _GLF_FUZZED(-35.09)), (true ? injectionSwitch.y : _GLF_FUZZED(-35.09))))) - 0.0))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-172.273, 8460.9626)) : injectionSwitch)).y)) ? _GLF_FUZZED(7.4) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), (false ? _GLF_FUZZED(vec2(-172.273, 8460.9626)) : injectionSwitch)).y)) ? _GLF_FUZZED(7.4) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-172.273, 8460.9626)) : injectionSwitch)).y)) ? _GLF_FUZZED(7.4) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-172.273, 8460.9626)) : injectionSwitch)).y)) ? _GLF_FUZZED(7.4) : _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))) > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))
                return;
               return;
              }
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(false))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), false || (bool(bvec2(false, false)))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        continue;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         atomicStore(buf[_GLF_struct_replacement_48._f4._f2.GLF_merged4_0_1_16_1_1_13_2_1_14_3_1_12next_virtual_gidnum_workgroupworkgroup_baseworkgroup_id.x], uint(1), 4, 64, 4);
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-29938) : int(3)))) ^ 0), int(3))), (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(-29938) : int(3)))) ^ 0), int(3)))) ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, log(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0)), mat4x3(mat4x3(mat4x3(injectionSwitch.x, log(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0))))))), injectionSwitch.x))) + 0.0), mix(float(_GLF_FUZZED(883.258)), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0)), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398), true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398), true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398))))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, injectionSwitch.x))) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0), mix(float(_GLF_FUZZED(883.258)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(769.051)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0)), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(-7389.9633) : _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(6.7)), bool(false))))))) + 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398))))) > injectionSwitch.y))), bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4x3(injectionSwitch.x, log(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0)), mat4x3(mat4x3(mat4x3(injectionSwitch.x, log(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0))))))), injectionSwitch.x))) + 0.0), mix(float(_GLF_FUZZED(883.258)), float(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0)), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0), (_GLF_IDENTITY(true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398), clamp(true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398), true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398), true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398))))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, injectionSwitch.x))) + 0.0), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0), mix(float(_GLF_FUZZED(883.258)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(769.051)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0)), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (false ? _GLF_FUZZED(-7389.9633) : _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), mix(float(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), float(_GLF_FUZZED(6.7)), bool(false))))))) + 0.0), (true ? _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))) + 0.0) : _GLF_FUZZED(-995.398))))) > injectionSwitch.y))), true))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))
              continue;
            }
           return;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
               return;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(_GLF_struct_68 _GLF_struct_replacement_68 = _GLF_struct_68(_GLF_struct_67(ivec3(1)), 0); _GLF_WRAPPED_LOOP(_GLF_struct_replacement_68._injected_loop_counter != _GLF_IDENTITY(1, (1) * 1)); _GLF_struct_replacement_68._injected_loop_counter ++)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  continue;
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) - 0), _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
              break;
             for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1) | 0), min(_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)) | 1, (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1) - 0)) / 1), int(_GLF_ONE(1.0, injectionSwitch.y)) | 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(_GLF_IDENTITY(0.0, min(0.0, 0.0))), abs(0.0), 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, _GLF_IDENTITY(3.8, clamp(_GLF_IDENTITY(3.8, 0.0 + (3.8)), 3.8, _GLF_IDENTITY(3.8, (3.8) + 0.0))), 4312.6513, _GLF_IDENTITY(-72.47, min(_GLF_IDENTITY(-72.47, (-72.47) - length(vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(-72.47, (true ? -72.47 : _GLF_FUZZED(-3.8))))), 4.8))))))), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(_GLF_IDENTITY(0.0, (0.0) - 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8)))))) * mat2(1.0), (false ? _GLF_FUZZED(vec2(95.52, 2.6)) : (vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8)))))) * mat2(1.0)))), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) * vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(-9036.3115, min(-9036.3115, -9036.3115)), _GLF_IDENTITY(-209.083, float(vec4(-209.083, 0.0, 0.0, 0.0)))))), vec2(mat3x4((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(_GLF_IDENTITY(0.0, (0.0) - 0.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))), clamp(_GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))), _GLF_IDENTITY((vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8)))))) * mat2(1.0), (false ? _GLF_FUZZED(vec2(95.52, 2.6)) : (vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8)))))) * mat2(1.0)))), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))), vec2(_GLF_IDENTITY(mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0), (true ? mat2x4(vec2(mat4x3(injectionSwitch, cos(0.0), sqrt(0.0), abs(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 1.0, abs(0.0), 0.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-9675.2202, -41.39, -6.7, 62.24, 3.8, 4312.6513, -72.47, 4.8))))))))), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)))) * vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(_GLF_IDENTITY(-9036.3115, min(-9036.3115, -9036.3115)), _GLF_IDENTITY(-209.083, float(vec4(-209.083, 0.0, 0.0, 0.0)))))), 1.0, 1.0, sin(sqrt(0.0)), 1.0, 1.0, 1.0, cos(0.0), sqrt(0.0), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, tan(0.0))), dot(vec3(1.0, 0.0, 1.0), vec3(0.0, 1.0, tan(0.0)))), sqrt(1.0))))).y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), int(4)))); _GLF_IDENTITY(_injected_loop_counter --, 0 ^ (_injected_loop_counter --)))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (int(4)))))); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               break;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   subgroupBarrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * (injectionSwitch), _GLF_IDENTITY((vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * (injectionSwitch)) * mat2(1.0), min((vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * (injectionSwitch)) * mat2(1.0), (vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * (injectionSwitch)) * mat2(1.0)))), (false ? _GLF_FUZZED(vec2(1.4, -2.4)) : _GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true))))))) * (injectionSwitch), _GLF_IDENTITY((vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-22.11) : 1.0))), bool(true)))) * (injectionSwitch)) * mat2(1.0), min((vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * (injectionSwitch)) * mat2(1.0), (vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.1)), float(1.0), bool(true)))) * (injectionSwitch)) * mat2(1.0))))))).y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (-81115 & (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     atomicStore(buf[_GLF_struct_replacement_65.virtual_gid], _GLF_struct_replacement_22._f0.GLF_merged3_0_1_4_1_1_13_2_1_17readsubgroup_basesubgroup_local_id.x, 4, _GLF_IDENTITY(64, 1 * (64)), 4);
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec3((false), true, true))) && true)))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             barrier();
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, true, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       break;
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), ! (! ((! (_GLF_DEAD(false))))))), false))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))
      barrier();
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       continue;
       if(_GLF_DEAD(false))
        return;
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     break;
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bool(false))))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
