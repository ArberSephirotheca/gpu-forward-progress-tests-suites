#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_0 {
 mat4x2 _f0;
 mat4x2 _f1;
 ivec4 _f2;
 mat4 _f3;
 uvec3 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_2 {
 _GLF_struct_1 _f0;
 uint _f1;
 uint next_virtual_gid;
 bool _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_4num_workgroupread;
 uvec4 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy = GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.x = subgroup_id;
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.x = subgroup_size;
 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.y = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.x;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.w = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.z = workgroup_id;
 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.z;
 uint workgroup_base = GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.w * GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.w;
 GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_base;
 uint virtual_gid = GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.x * GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.y + subgroup_local_id;
 GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.y = virtual_gid;
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(_GLF_struct_1(_GLF_struct_0(mat4x2(1.0), mat4x2(1.0), ivec4(1), mat4(1.0), uvec3(1u), ivec3(1)), uvec4(1u)), 1u, GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.z + GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.x * GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.y + ((subgroup_local_id + 1) % GLF_merged3_0_2_49_2_1_14_3_1_12GLF_merged2_0_1_11_1_1_13subgroup_idsubgroup_sizeworkgroup_baseworkgroup_id.xy.y), true);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   atomicStore(buf[_GLF_struct_replacement_2.next_virtual_gid], uint(1), 4, 64, 4);
  }
 uint read = atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.y], 4, 64, 0);
 GLF_merged2_0_1_13_1_1_4num_workgroupread.y = read;
 atomicStore(checker[GLF_merged4_0_1_13_1_1_11_2_1_12_3_1_14subgroup_sizevirtual_gidworkgroup_idworkgroup_size.y], GLF_merged2_0_1_13_1_1_4num_workgroupread.y, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
