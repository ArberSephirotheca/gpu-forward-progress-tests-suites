#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_11 {
 uvec4 _f0;
 bvec3 _f1;
 uint num_workgroup;
 mat3 _f2;
 ivec4 _f3;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
} ;

struct _GLF_struct_12 {
 _GLF_struct_10 _f0;
 mat4 _f1;
 _GLF_struct_11 _f2;
} ;

struct _GLF_struct_8 {
 bvec4 _f0;
} ;

struct _GLF_struct_9 {
 bool _f0;
 uvec4 _f1;
 bvec2 _f2;
 mat2x3 _f3;
 _GLF_struct_8 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_13 {
 bool _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_12 _f2;
 mat4x3 _f3;
 vec4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_5 {
 mat2 _f0;
 mat3x4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 vec4 _f1;
 mat2x4 _f2;
 mat4 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 _GLF_struct_2 _f1;
 vec4 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_0 {
 mat4 _f0;
 ivec3 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
} ;

struct _GLF_struct_7 {
 _GLF_struct_1 _f0;
 _GLF_struct_4 _f1;
 mat3 _f2;
 uint workgroup_size;
 uvec2 _f3;
 mat2x3 _f4;
 _GLF_struct_6 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_11subgroup_basesubgroup_id;
 uvec3 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_13_1_1_11subgroup_basesubgroup_id.y = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_13 _GLF_struct_replacement_13 = _GLF_struct_13(true, _GLF_struct_9(true, uvec4(1u), bvec2(true), mat2x3(1.0), _GLF_struct_8(bvec4(true)), mat2(1.0)), _GLF_struct_12(_GLF_struct_10(mat4x2(1.0)), mat4(1.0), _GLF_struct_11(uvec4(1u), bvec3(true), gl_NumWorkGroups.x, mat3(1.0), ivec4(1))), mat4x3(1.0), vec4(1.0), uvec2(1u));
 _GLF_struct_7 _GLF_struct_replacement_7 = _GLF_struct_7(_GLF_struct_1(_GLF_struct_0(mat4(1.0), ivec3(1), mat3x4(1.0))), _GLF_struct_4(mat2x4(1.0), _GLF_struct_2(mat3x4(1.0), mat4x3(1.0), mat2x4(1.0)), vec4(1.0), _GLF_struct_3(uvec2(1u), vec4(1.0), mat2x4(1.0), mat4(1.0), bvec3(true))), mat3(1.0), gl_WorkGroupSize.x, uvec2(1u), mat2x3(1.0), _GLF_struct_6(_GLF_struct_5(mat2(1.0), mat3x4(1.0), uvec2(1u))));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z = workgroup_id;
  }
 uint workgroup_base = _GLF_struct_replacement_7.workgroup_size * GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.z;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y = workgroup_base;
  }
 else
  {
  }
 uint subgroup_base = GLF_merged2_0_1_13_1_1_11subgroup_basesubgroup_id.y * GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size.y;
 GLF_merged2_0_1_13_1_1_11subgroup_basesubgroup_id.x = subgroup_base;
 GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size.x = GLF_merged2_0_1_13_1_1_11subgroup_basesubgroup_id.x;
 uint virtual_gid = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y + GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size.x + subgroup_local_id;
 GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x = virtual_gid;
 uint next_virtual_gid = GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.y + GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size.x + ((subgroup_local_id + 1) % GLF_merged2_0_1_13_1_1_13subgroup_basesubgroup_size.y);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x], 4, 64, 2);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   subgroupBarrier();
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   atomicStore(checker[GLF_merged3_0_1_11_1_1_14_2_1_12virtual_gidworkgroup_baseworkgroup_id.x], read, 4, 64, 4);
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
