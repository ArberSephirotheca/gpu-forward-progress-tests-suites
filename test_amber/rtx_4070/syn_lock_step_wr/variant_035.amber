#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 vec4 _f0;
} ;

struct _GLF_struct_6 {
 mat4x2 _f0;
 bool _f1;
 uvec2 _f2;
 bvec4 _f3;
 uvec3 _f4;
 ivec2 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_8 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_4 {
 ivec3 _f0;
 bvec3 _f1;
 mat3 _f2;
 ivec2 _f3;
 ivec2 _f4;
 int _f5;
 float _f6;
} ;

struct _GLF_struct_3 {
 mat2x3 _f0;
 ivec2 _f1;
 int _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_2 {
 mat4x2 _f0;
 bool _f1;
 mat4 _f2;
 mat2 _f3;
 uint _f4;
} ;

struct _GLF_struct_1 {
 ivec4 _f0;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_5 {
 uvec3 GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base;
 mat2x4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 vec3 _f4;
 _GLF_struct_3 _f5;
 _GLF_struct_4 _f6;
} ;

struct _GLF_struct_9 {
 bvec4 _f0;
 mat4x2 _f1;
 uint _f2;
 _GLF_struct_5 _f3;
 mat3x4 _f4;
 mat4x2 _f5;
 _GLF_struct_8 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id;
 _GLF_struct_9 _GLF_struct_replacement_9;
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.z = subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.y = subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.y = GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.y;
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.x = num_workgroup;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.y = GLF_merged2_0_1_13_1_1_17num_workgroupsubgroup_local_id.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.w = workgroup_id;
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.w;
 _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.z = workgroup_base;
 uint virtual_gid = _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.z + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.z * subgroup_size + _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.y;
 uint next_virtual_gid = _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.z + GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.z * subgroup_size + ((_GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.y + 1) % subgroup_size);
 GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_11_3_1_12next_virtual_gidnum_workgroupsubgroup_idworkgroup_id.x], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.x = read;
 atomicStore(checker[virtual_gid], _GLF_struct_replacement_9._f3.GLF_merged3_0_1_4_1_1_17_2_1_14readsubgroup_local_idworkgroup_base.x, 4, 64, 4);
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
