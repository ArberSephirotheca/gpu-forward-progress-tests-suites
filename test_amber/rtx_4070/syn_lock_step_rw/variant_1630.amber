#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_14 {
 vec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_15 {
 vec2 _f0;
 mat3x4 _f1;
 mat4 _f2;
 _GLF_struct_14 _f3;
 uvec4 _f4;
 bvec2 _f5;
 mat4 _f6;
} ;

struct _GLF_struct_12 {
 vec4 _f0;
 float _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_11 {
 vec3 _f0;
 ivec3 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_10 {
 uvec4 _f0;
 ivec4 _f1;
 vec2 _f2;
 vec3 _f3;
 ivec4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_13 {
 uvec4 _f0;
 _GLF_struct_10 _f1;
 _GLF_struct_11 _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_9 {
 uvec2 _f0;
 _GLF_struct_8 _f1;
 vec2 _f2;
 vec2 _f3;
 int _f4;
 mat4x2 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_6 {
 mat4 _f0;
 ivec2 _f1;
 bvec4 _f2;
 mat2x3 _f3;
 mat4 _f4;
 ivec3 _f5;
} ;

struct _GLF_struct_5 {
 mat3 _f0;
 mat4x3 _f1;
 int _f2;
 bvec2 _f3;
 uvec3 _f4;
 vec3 _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_7 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
} ;

struct _GLF_struct_3 {
 uvec2 _f0;
 mat2 _f1;
} ;

struct _GLF_struct_2 {
 mat3x4 _f0;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 vec3 _f1;
 mat2 _f2;
} ;

struct _GLF_struct_0 {
 mat3 _f0;
 float _f1;
 uvec4 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 ivec4 _f1;
 uvec3 _f2;
 _GLF_struct_1 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_4 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_9 _f2;
 _GLF_struct_13 _f3;
 bvec2 _f4;
 _GLF_struct_15 _f5;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-20824))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0))
      {
       barrier();
      }
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), max(int(6), int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) && true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8.2) : injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(8.2) : injectionSwitch.x))), float(_GLF_FUZZED(2021.1704)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch.x)) < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, (1 ^ 0), 1)))), int(5)), max(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, (1 ^ 0), 1)))), int(5)), (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, (1 ^ 0), 1)))), int(5))) | (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, (1 ^ 0), 1)))), int(5)))), 1 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, (1 ^ 0), 1)))), int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), max(_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), int(5))), max(_GLF_IDENTITY(int(5), min(int(5), int(5))), _GLF_IDENTITY(int(5), min(int(5), int(5))))), int(_GLF_IDENTITY(5, (5) + 0)))))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                        }
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))), true && (_GLF_DEAD(false)))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), false)))), false || (bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec4(bvec3((false), false, true), false))))))))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         do
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                              barrier();
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / abs(1.0)) > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3.1)), bool(false))))))), true && (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).y))))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & (1 | 1))); _injected_loop_counter ++)
                  {
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true)))))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                  barrier();
                }
               barrier();
              }
            }
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (71274 & (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))), (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))) && true))))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false) && true, ! (! ((false) && true))))))))
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, (0) - 0) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), (int(5)) << (0 | 0))))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - int(_GLF_ZERO(0.0, injectionSwitch.x))) != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = (((_GLF_IDENTITY(0 ^ _GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))), clamp(0 ^ _GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0)))))), 0 ^ _GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), max(_GLF_IDENTITY(int(0), max(int(0), int(0))), _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), ~ (~ (_GLF_IDENTITY(int(0), max(int(0), int(0))))))))))), 0 ^ _GLF_IDENTITY(1, (1) | (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))) << (0 >> _GLF_IDENTITY(int(8), int(8)))))))))))) << _GLF_IDENTITY(int(4), int(_GLF_IDENTITY(4, (4) << 0)))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(0 & _GLF_IDENTITY(-68959, (-68959) >> 0), (0 & _GLF_IDENTITY(-68959, (-68959) >> 0)) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(6), int(6)), int(_GLF_IDENTITY(int(0 << _GLF_IDENTITY(int(6), int(6))), (int(0 << _GLF_IDENTITY(int(6), int(6)))) + 0)))))) ^ 0)); _injected_loop_counter --)
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-6539.4084)))))))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   barrier();
                                  }
                                }
                               for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         barrier();
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          barrier();
                                        }
                                      }
                                    }
                                   else
                                    {
                                    }
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                  }
                                }
                               if(_GLF_DEAD(false))
                                barrier();
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  barrier();
                                }
                              }
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), 0 ^ (int(6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(false))
                                {
                                 do
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                }
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true)))))), ! (! (true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec3(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, true)))), (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     barrier();
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  barrier();
                                }
                               barrier();
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                              }
                             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), false, true, false)))), ! (! (_GLF_DEAD(false)))))
                              barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y))))
                                  {
                                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                      barrier();
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                      }
                                     else
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec2(_GLF_IDENTITY(true, ! (! (true))), false)))))
                                        {
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7))))))), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7))))))), bool(bvec4(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, ~ (~ (7))))))), true, true, false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                            }
                                           if(_GLF_DEAD(false))
                                            {
                                             if(_GLF_DEAD(false))
                                              {
                                               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
                                                barrier();
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                {
                                                 barrier();
                                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                  barrier();
                                                }
                                               else
                                                {
                                                }
                                              }
                                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                              {
                                               if(_GLF_DEAD(false))
                                                barrier();
                                               barrier();
                                               if(_GLF_DEAD(false))
                                                barrier();
                                              }
                                             barrier();
                                            }
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             if(_GLF_DEAD(false))
                                              barrier();
                                            }
                                           else
                                            {
                                             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
                                              barrier();
                                            }
                                           barrier();
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                            barrier();
                                          }
                                        }
                                       else
                                        {
                                        }
                                      }
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                  }
                                }
                              }
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                          }
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(vec2(injectionSwitch[1], 0.0)))))) / sqrt(_GLF_IDENTITY(vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - abs(0.0))))), mix(vec2(_GLF_FUZZED(-2604.6905), _GLF_FUZZED(7.7)), vec2((vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - abs(0.0))))))[0], (vec2(1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - abs(0.0))))))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y, ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(_GLF_IDENTITY(-323.838, min(-323.838, -323.838)))))) * 1.0))))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) / (1 | 1))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                 barrier();
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 | 1) | 0)); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, (false) || false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, false)))) && true)))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) && true), true), bvec2(bvec3(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0))))) && true), true), false))))); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         for(int _injected_loop_counter = ((_GLF_IDENTITY(-94359, (_GLF_IDENTITY(-94359, ~ (~ _GLF_IDENTITY((-94359), (false ? _GLF_FUZZED(_injected_loop_counter) : (-94359)))))) ^ 0) & 0) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY((false ? _GLF_FUZZED(-2871) : int(4)), ((false ? _GLF_FUZZED(-2871) : int(4))) | (_GLF_IDENTITY((false ? _GLF_FUZZED(-2871) : int(4)), (_GLF_IDENTITY((false ? _GLF_FUZZED(-2871) : int(4)), max((false ? _GLF_FUZZED(-2871) : int(4)), (false ? _GLF_FUZZED(-2871) : int(4))))) >> 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, 1, 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(6, clamp(6, _GLF_IDENTITY(6, 0 + (6)), 6))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), ! (! (bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false)))))))))))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 & 66895) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       do
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true)))))))) || false))) || false), ((injectionSwitch.x > injectionSwitch.y)) && true))))
                      {
                       do
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) && true))));
                            }
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            barrier();
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                barrier();
                               barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))));
                            }
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       barrier();
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x), (clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) / 1.0)), injectionSwitch.x)) > injectionSwitch.y)))))) || false), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false || ((! (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, bool(bvec2(true, false))), true, false))) && _GLF_IDENTITY((false), false || ((false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, ! (! (false))), true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true), true)))), true && (bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, true), true))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true, false)))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(4195.2536), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(4457u))), bvec2(true, false))).x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(false, false), true)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(bvec2(false, false), true)), true)), true, true)))), true, true)))), _GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, _GLF_IDENTITY(true, ! (! (true))))))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false)))), true, true)))), false, false))))), false), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), _GLF_IDENTITY(true, (true) || false))), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(false, false), true))))), true, false))), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false))))), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false)))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false)))))), false))))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true)))), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), false))), true)))), true, true)))), false, _GLF_IDENTITY(false, (false) && true)))))), false), bvec3(bvec3(bvec3(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), true)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), true)), true, true)))), false, false))))), false))))), false))), false)))))))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 _GLF_struct_16 _GLF_struct_replacement_16 = _GLF_struct_16(_GLF_struct_4(_GLF_struct_0(mat3(1.0), 1.0, uvec4(1u)), ivec4(1), _GLF_IDENTITY(uvec3(1u), uvec3(0u, 0u, 0u) ^ (uvec3(1u))), _GLF_struct_1(bvec3(true), vec3(1.0), mat2(1.0)), _GLF_struct_2(mat3x4(1.0)), _GLF_struct_3(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_IDENTITY(_GLF_FUZZED(110852u), (_GLF_FUZZED(110852u)) | _GLF_IDENTITY((_GLF_FUZZED(110852u)), (_GLF_IDENTITY((_GLF_FUZZED(110852u)), ((_GLF_FUZZED(110852u))) | ((_GLF_FUZZED(110852u))))) * 1u)) : _GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) + 0u), 1u, 1u)), 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u))))) | (1u)), min(_GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * _GLF_IDENTITY(1u, (1u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u))))) | (1u)), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)), (_GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)), clamp(clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))) << 0u))), 1u))))) | (1u))))))), min(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (_GLF_IDENTITY(1u, (1u) / 1u)) - 0u)), (clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))) | (_GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) | 0u) / 1u)), (clamp(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u)))), 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / 1u, ((1u) / 1u) - 0u)))) - 0u))))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u))))) | (1u))))), uvec2(_GLF_IDENTITY(1u, min(1u, 1u)), 1u) * (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) << 0u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u)))))) << 0u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u))))), _GLF_IDENTITY(1u, (1u) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u)))))))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u), (uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, 0u | (1u)))) - uvec2(0u, 0u))), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (1u) / 1u)))), 1u))))) | (1u)), max(false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) << 0u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u)))))) << 0u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u))))), _GLF_IDENTITY(1u, (1u) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u)))))))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u), (uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, 0u | (1u)))) - uvec2(0u, 0u))), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (1u) / 1u)))), 1u))))) | (1u)), false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u))))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, _GLF_IDENTITY((1u), ((1u)) << 0u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u)))))) << 0u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), clamp(uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u)), uint(uvec3(_GLF_IDENTITY(1u, (1u) / 1u), 1u, 0u))))), _GLF_IDENTITY(1u, (1u) / 1u))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), clamp(_GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u), _GLF_IDENTITY(1u, (1u) / 1u)))))))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u), (uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, 0u | (1u)))) - uvec2(0u, 0u))), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), (1u) / 1u)))), 1u))))) | (1u))))))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), 1u * ((1u))) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)))), ((_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), 1u * ((1u))) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))))) | ((_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), 1u * ((1u))) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)))))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), uint(uvec2(_GLF_IDENTITY(1u, (1u) / 1u), 1u)))))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u * (_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)))))))) * 1u), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(true, (true) && true) ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, max(1u, 1u))))) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u)))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))), uint(uvec3(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))), 1u, 0u))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), clamp((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / 1u, min((1u) / 1u, (1u) / 1u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))) | 0u)), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / _GLF_IDENTITY(1u, ~ (~ (1u))))))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u)))), uint(uvec2(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (1u ^ 1u) | ((_GLF_IDENTITY(1u, _GLF_IDENTITY(clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)), ~ (~ (clamp(_GLF_IDENTITY(1u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1u : _GLF_FUZZED(subgroup_size))), 1u, _GLF_IDENTITY(1u, (1u) / 1u))))))))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), 0u), (uvec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), 0u)) | (uvec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), 0u)))), 0u | (uint(_GLF_IDENTITY(uvec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), 0u), (uvec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), 0u)) | (uvec2((true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id)), 0u)))))))), 1u, 1u, 0u)))), 1u)))) | (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) - 0u)) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / 1u, (_GLF_IDENTITY((1u) / 1u, min((1u) / 1u, (1u) / 1u))) >> 0u))))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), min(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) << 0u), clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (1u)), (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u), uvec4(_GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), max((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) : _GLF_FUZZED(subgroup_local_id))), 1u, 1u, 0u))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) | (0u))) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 1u))))), 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)))), ~ (~ (_GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) ^ _GLF_IDENTITY(0u, (0u) * 1u), ((1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)) | 0u)))), _GLF_IDENTITY(max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u))), ~ (~ (max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u))), (uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))) - uvec2(0u, 0u))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u), max(_GLF_IDENTITY((1u), min((1u), (1u))), _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), ((1u)) >> 0u)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u))))))))) | (1u))))), min(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u))))), clamp(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_IDENTITY(_GLF_FUZZED(110852u), (_GLF_FUZZED(110852u)) - 0u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 0u | (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) - 0u)), _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))), max(_GLF_IDENTITY((_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))), uint(_GLF_IDENTITY(uvec3((_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))), 1u, 1u), (uvec3((_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))), 1u, 1u)) | (uvec3((_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))), 1u, 1u))))), (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u))))), uvec2(0u, 0u) ^ (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)) ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u))))))), uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u))))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) << 0u)) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u))))), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, uint(uint(1u))), 1u))) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) / 1u, ~ (_GLF_IDENTITY(~ ((1u) / 1u), max(~ ((1u) / 1u), ~ ((1u) / 1u)))))))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u))))), (uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u)))))) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), (_GLF_IDENTITY(1u, (1u) - 0u)) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) - 0u), 0u ^ (_GLF_IDENTITY(1u, (1u) - 0u))))))), uint(uvec2((_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), (_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), max(_GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))), 1u * (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u))))), _GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, max(1u, 1u)), _GLF_IDENTITY(1u, (1u) / 1u)))))) | (0u << _GLF_IDENTITY(uint(0u), uint(0u))))), 1u))))) | (1u)))))) << uvec2(0u, 0u))))))), uvec2(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(110852u) : _GLF_IDENTITY(1u, _GLF_IDENTITY((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) / 1u), (_GLF_IDENTITY(1u, (1u) / 1u)) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), min(uint(5u), uint(5u))))))) | (_GLF_IDENTITY(1u, (1u) / 1u)))))), _GLF_IDENTITY(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), _GLF_IDENTITY(1u, (1u) ^ _GLF_IDENTITY(0u, (0u) * 1u)))), max(uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) / 1u)))), 1u)), uint(uvec2((_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) - 0u), (1u) / 1u)))), 1u))))) | (1u))))))))), mat2(_GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), max(float(float(1.0)), float(float(1.0))))) : _GLF_FUZZED(_GLF_IDENTITY(-91.88, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(-91.88, min(-91.88, -91.88)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0), mat4x3(mat4(mat4x3(_GLF_IDENTITY(-91.88, min(-91.88, -91.88)), 1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0))))), (false ? _GLF_FUZZED(6246.2436) : float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(-91.88, min(-91.88, -91.88)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0), mat4x3(mat4(mat4x3(_GLF_IDENTITY(-91.88, min(-91.88, -91.88)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, sin(0.0), 1.0, 0.0)))))))))))))), _GLF_struct_7(_GLF_struct_5(mat3(1.0), mat4x3(1.0), 1, _GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, (true) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false))), true && (false)), (injectionSwitch.x > injectionSwitch.y)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(true, (true) || _GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), (! (_GLF_IDENTITY(false, false || (false)))) || false))), true && (false)), (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(uvec3(48271u, 152272u, 78715u)) : uvec3(1u))), vec3(1.0), mat4x2(1.0)), _GLF_struct_6(mat4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9859.7312)), bool(false)))), ivec2(1), bvec4(true), mat2x3(1.0), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) / mat4(_GLF_IDENTITY(1.0, log(1.0) + (1.0)), 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, injectionSwitch.x))), 0.0, 0.0), mat4(1.0) * (vec4(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), 0.0, 0.0))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)), ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-30401, (true ? -30401 : _GLF_FUZZED(36757))), clamp(-30401, _GLF_IDENTITY(-30401, (-30401) | _GLF_IDENTITY(0, ~ (~ (0)))), -30401))), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_FUZZED(_GLF_IDENTITY(-30401, clamp(-30401, _GLF_IDENTITY(-30401, (-30401) | 0), -30401)))), 1 * (int(_GLF_FUZZED(_GLF_IDENTITY(-30401, clamp(-30401, _GLF_IDENTITY(-30401, (-30401) | 0), -30401))))))), 0 | (int(_GLF_IDENTITY(int(_GLF_FUZZED(_GLF_IDENTITY(-30401, clamp(-30401, _GLF_IDENTITY(-30401, _GLF_IDENTITY((-30401), ((-30401)) + 0) | 0), _GLF_IDENTITY(-30401, _GLF_IDENTITY(int(ivec4(-30401, 1, 1, int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, length(vec3(0.0, 0.0, 0.0)), 0.0, cos(0.0), 1.0, 0.0, 1.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).y)))), (int(ivec4(-30401, 1, 1, int(_GLF_ONE(1.0, injectionSwitch.y))))) * 1)))))), 1 * (int(_GLF_FUZZED(_GLF_IDENTITY(-30401, clamp(-30401, _GLF_IDENTITY(-30401, (-30401) | 0), -30401)))))))))) : 1), int(_GLF_IDENTITY(int(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-30401) : 1), clamp((false ? _GLF_FUZZED(-30401) : 1), (false ? _GLF_FUZZED(-30401) : 1), (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(-30401) : 1)))), int(ivec2(_GLF_IDENTITY(int(_GLF_IDENTITY((false ? _GLF_FUZZED(-30401) : 1), clamp((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))) ? _GLF_FUZZED(-30401) : 1), (false ? _GLF_FUZZED(-30401) : _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0)) / 1, ((_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, clamp(0, 0, 0)))) / 1) - 0))), (false ? _GLF_FUZZED(-30401) : 1)))), (_GLF_IDENTITY(int(_GLF_IDENTITY((false ? _GLF_FUZZED(-30401) : 1), clamp((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))) ? _GLF_FUZZED(-30401) : 1), (false ? _GLF_FUZZED(-30401) : _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0)) / 1, ((_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, clamp(0, 0, 0)))) / 1) - 0))), (false ? _GLF_FUZZED(-30401) : 1)))), (int(_GLF_IDENTITY((false ? _GLF_FUZZED(-30401) : 1), clamp((_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))))) ? _GLF_FUZZED(-30401) : 1), (false ? _GLF_FUZZED(-30401) : _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0)) / 1, ((_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, clamp(0, 0, 0)))) / 1) - 0))), (false ? _GLF_FUZZED(-30401) : 1))))) / 1)) + 0), 0))))))))), _GLF_struct_9(uvec2(1u), _GLF_struct_8(vec3(_GLF_IDENTITY(1.0, (1.0) - _GLF_IDENTITY(0.0, (0.0) - 0.0))), mat2x3(_GLF_IDENTITY(1.0, min(1.0, 1.0)))), vec2(1.0), vec2(1.0), 1, mat4x2(1.0), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0))), _GLF_struct_13(uvec4(1u), _GLF_struct_10(uvec4(_GLF_IDENTITY(1u, (1u) + (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, min(2u, 2u))) ^ _GLF_IDENTITY(0u, (0u) ^ (0u & 197943u)))), uint(_GLF_IDENTITY(2u, (2u) << 0u)))))), ivec4(1), vec2(1.0), vec3(1.0), ivec4(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) | 0), clamp(1, 1, 1)), 1, 1))), ivec3(1)), _GLF_struct_11(vec3(1.0), ivec3(1), mat3(1.0)), _GLF_struct_12(vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 1.0, bvec4(true))), bvec2(true), _GLF_struct_15(vec2(1.0), mat3x4(1.0), mat4(1.0), _GLF_struct_14(vec3(1.0), mat3x2(1.0)), uvec4(1u), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true)))), _GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 0.0, 0.0, 0.0))), gl_WorkGroupSize.x);
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(! (! (_GLF_DEAD(false))), bool(bvec3(! (! (_GLF_DEAD(false))), false, true)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(7.4)), bool(false))))) > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   do
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, min(gl_WorkGroupID, gl_WorkGroupID)).x;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(22734)), _GLF_FUZZED(23.27)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))).x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec4(! (true), false, false, true))))), (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false)), (bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))) && true))))));
 uint workgroup_base = _GLF_struct_replacement_16.workgroup_size * _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, (workgroup_id) >> (188559u & 0u)), (workgroup_id) - (0u ^ 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1))], max(injectionSwitch[1], injectionSwitch[1])))).y))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), 0 + (int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0, int(ivec2(0, (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(5), int(5)), (false ? _GLF_FUZZED(28799) : 0 << _GLF_IDENTITY(int(5), int(5)))))))) & 47767)); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --) / 1, (_GLF_IDENTITY((_injected_loop_counter --) / 1, (_GLF_IDENTITY((_injected_loop_counter --) / 1, ((_injected_loop_counter --) / 1) | 0)) ^ 0)) | 0)))
      {
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (true)))))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true))))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, bool(bool(false))))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
              {
               barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, clamp(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size))) | 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (_GLF_IDENTITY(bool(bool(false)), bool(bvec2(bool(bool(false)), true)))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), (! (false)) || false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))), bool(_GLF_IDENTITY(bool(! (! (false))), (bool(! (! (false)))) || false)))), false || (! (_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))) || (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false))))))) || ((! (false)))), bool(bool(! (! (false)))))))))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(1, min(1, 1)))); _injected_loop_counter ++)
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), true)), bool(bvec3(bool(bvec2(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), true)), true, false)))))))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED((+ -707.641))), vec2(_GLF_FUZZED(-8601.5748), (injectionSwitch)[1]), bvec2(false, true))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), (~ (0)) << 0))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != ((_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)))))))))) / 1)), int(0))))), (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)))))))))) / 1)), int(0)))))) | (_GLF_IDENTITY(((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)))))))))) / 1)), int(0))))), (1 ^ 1) ^ (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), max(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), clamp(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)), 0 + (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0)))))))))) / 1)), int(0))))))))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) >> _GLF_IDENTITY(int(3), int(3))), (_injected_loop_counter != ((((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(_GLF_IDENTITY(0, (0) * 1)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(ivec4(43020, 66061, 18588, 44718)[2]) : 0))), int(0))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) << 0))) >> _GLF_IDENTITY(int(3), int(3)))) || false)); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 + (1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0), 0))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0), 0))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) ^ 0), 0))), true, true)))) && true); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(7.3)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(true, true && (true)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
                barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, (true) || false))) && (injectionSwitch.x > injectionSwitch.y))) || false)))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               do
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.4), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0), (mat4x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)) * mat4(1.0)))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec2(_GLF_IDENTITY(-41.02, (-41.02) / exp(0.0)), 53.38).x)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x < injectionSwitch.y), true && _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), false || (((injectionSwitch.x < injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         do
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-65.01)), bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), injectionSwitch.y))))))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) || false); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((0 >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(4), int(4))) | 0)); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = ((44591 & 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 & 1) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    barrier();
                  }
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), false))))), ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-48.63), _GLF_FUZZED(6317.9010)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)) ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, 92985)) : _GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-65762) : int(4))))), max(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), int(ivec4(~ (int(4)), 1, 1, 0))))))))) & _GLF_IDENTITY(1, 0 ^ (1))), true && (_injected_loop_counter < (((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-48.63), _GLF_FUZZED(6317.9010)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y)) ? _GLF_FUZZED(atomicAdd(_injected_loop_counter, 92985)) : _GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-65762) : int(4))))), max(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | (_GLF_IDENTITY(int(4), ~ (_GLF_IDENTITY(~ (int(4)), int(ivec4(~ (int(4)), 1, 1, 0))))))))) & _GLF_IDENTITY(1, 0 ^ (1)))))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, _GLF_IDENTITY(false, ! (! (false)))))))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             barrier();
                            }
                          }
                         barrier();
                        }
                      }
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))) && (_GLF_DEAD(false))))
                          barrier();
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 | (4))) >> 0));
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
                              barrier();
                             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
                              barrier();
                             barrier();
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                            }
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                                {
                                 if(_GLF_DEAD(false))
                                  barrier();
                                 barrier();
                                }
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       do
                                        {
                                         if(_GLF_WRAPPED_IF_FALSE(false))
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         else
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                           barrier();
                                          }
                                        }
                                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))) || false))));
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      barrier();
                                    }
                                  }
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     barrier();
                                    }
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     if(_GLF_DEAD(false))
                                      barrier();
                                     if(_GLF_DEAD(false))
                                      barrier();
                                    }
                                   else
                                    {
                                    }
                                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    {
                                    }
                                   else
                                    {
                                     if(_GLF_WRAPPED_IF_FALSE(false))
                                      {
                                      }
                                     else
                                      {
                                       if(_GLF_DEAD(false))
                                        barrier();
                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                        {
                                         if(_GLF_DEAD(false))
                                          {
                                           do
                                            {
                                             if(_GLF_DEAD(false))
                                              barrier();
                                             barrier();
                                            }
                                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                          }
                                        }
                                       else
                                        {
                                        }
                                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        {
                                        }
                                       else
                                        {
                                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                          {
                                           if(_GLF_DEAD(false))
                                            barrier();
                                          }
                                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                          barrier();
                                        }
                                      }
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      {
                                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                        barrier();
                                       barrier();
                                      }
                                    }
                                  }
                                 barrier();
                                }
                               do
                                {
                                 if(_GLF_DEAD(false))
                                  {
                                   if(_GLF_DEAD(false))
                                    barrier();
                                   barrier();
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(false));
                              }
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))))))
                          barrier();
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                  }
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, exp(0.0), 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
                      barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     do
                      {
                       barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
                          {
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-97733 ^ -30754) & 0)); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             do
                              {
                               if(_GLF_DEAD(false))
                                barrier();
                              }
                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                             barrier();
                            }
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               barrier();
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                barrier();
                              }
                             else
                              {
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                          barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.6), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4.7)), bvec2(true, false))).y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, true)))))))
                    barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), _GLF_IDENTITY(bool(bvec4(bool(bvec2(false, false)), true, true, true)), ! (! (bool(bvec4(bool(bvec2(false, false)), true, true, true)))))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      barrier();
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, ! (! (false)))), (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(94632, min(_GLF_IDENTITY(94632, int(ivec2(94632, 0))), 94632)) & 0), _GLF_IDENTITY((_GLF_IDENTITY((94632 & 0), ((94632 & 0)) << 0)) << 0, ((_GLF_IDENTITY((94632 & 0), ((94632 & 0)) << 0)) << 0) ^ 0))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(false, (false) && true)) || false)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
