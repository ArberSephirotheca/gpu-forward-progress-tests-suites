#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) && true))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 ^ (0 >> _GLF_IDENTITY(int(8), int(8)))) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), true)), bool(_GLF_IDENTITY(bool(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), true))), ! (! (bool(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true), true))))))))));
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), ! (! (bool(_GLF_DEAD(false))))))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            continue;
           break;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(bvec3(_injected_loop_counter < 1, true, false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_injected_loop_counter < 1), ! (! (bool(_injected_loop_counter < 1))))), false || (bool(_GLF_IDENTITY(bool(_injected_loop_counter < 1), ! (! (bool(_injected_loop_counter < 1)))))))), true, false)), true && (bool(bvec3(_injected_loop_counter < 1, true, false))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
              break;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = _GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(_GLF_IDENTITY(min(6, 6), (false ? _GLF_FUZZED(_injected_loop_counter) : min(6, 6))), clamp(min(6, _GLF_IDENTITY(6, clamp(6, 6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, 0 | (6))) - 0)))), min(6, 6), min(6, 6))))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), (_GLF_IDENTITY((_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) | ((_GLF_IDENTITY(0 | 0, 0 + (0 | 0))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> (_GLF_IDENTITY(1720 & 0, (true ? 1720 & 0 : _GLF_FUZZED(atomicExchange(_injected_loop_counter, atomicOr(_injected_loop_counter, _injected_loop_counter)))))))))), int(ivec4((_GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, 0 | (0))))) / 1) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, min(6, 6)), (_GLF_IDENTITY(6, min(6, 6))) << 0)), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(94271) : _GLF_IDENTITY(int(6), (int(6)) - 0))), ~ (~ (int(6))))), _GLF_IDENTITY(0, (0) * int(_GLF_ONE(1.0, injectionSwitch.y))) | ((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) >> (1720 & 0))))), 0, 0, 0)))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (min(6, 6)) - 0))), _GLF_IDENTITY(int(6), ~ (~ _GLF_IDENTITY((int(6)), ((int(6))) / 1)))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (_GLF_IDENTITY(0 | 0, (0 | 0) >> 0)) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) / (int(_GLF_ONE(1.0, injectionSwitch.y)) | 1)), min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, min(6, 6))))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0), max((0 | 0), _GLF_IDENTITY((0 | 0), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((0 | 0))))) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), max(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, int(ivec2(6, 0)))), ~ (~ (int(6))))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, (6) ^ 0), ~ _GLF_IDENTITY((~ (6)), ~ (~ ((~ (6))))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), (~ (_GLF_IDENTITY(6, ~ (~ (6))))) << 0))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))), (_GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), ~ (~ (((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (6) | (6))))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))) | 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0), ((0 | 0)) * 1) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (_GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | _GLF_IDENTITY(0, (0) | (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), max(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), ~ (~ (_GLF_IDENTITY(~ (~ (int(6))), (~ (~ (int(6)))) ^ 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter)) : 6)))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(int(ivec2(0, 1)), clamp(_GLF_IDENTITY(int(ivec2(0, 1)), clamp(int(ivec2(0, 1)), int(ivec2(0, 1)), int(ivec2(0, 1)))), int(ivec2(0, 1)), int(ivec2(0, 1))))) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (~ (~ (6))))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), (_GLF_IDENTITY(true ? ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter), (true ? ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)) - 0))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(6, (6) + 0))) : _GLF_FUZZED(-99620)))))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, (6) - 0)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ _GLF_IDENTITY((~ (int(6))), 0 ^ ((~ (int(6))))))))), _GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) ^ 0))))), (_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), clamp(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), _GLF_IDENTITY(0 | 0, (0 | 0) - 0), _GLF_IDENTITY(0 | 0, (0 | 0) - 0))), (1 & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) << 0)))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), 0 ^ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(-81.14)), bvec2(false, false))).x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) - ivec2(0, 0)))))) ^ 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (_GLF_IDENTITY(0, (0) - (0 ^ 0)) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))) | 0)))), (_GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6)))))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) - (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))), ((~ ((_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) - (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) | (~ (int(6)))))))))))))) / 1))) | 0)), (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0), ((0 | 0)) * 1) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (_GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | _GLF_IDENTITY(0, (0) | (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), max(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), ~ (~ (_GLF_IDENTITY(~ (~ (int(6))), (~ (~ (int(6)))) ^ 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter)) : 6)))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(int(ivec2(0, 1)), clamp(_GLF_IDENTITY(int(ivec2(0, 1)), clamp(int(ivec2(0, 1)), int(ivec2(0, 1)), int(ivec2(0, 1)))), int(ivec2(0, 1)), int(ivec2(0, 1))))) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (~ (~ (6))))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), (_GLF_IDENTITY(true ? ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter), (true ? ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)) - 0))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(6, (6) + 0))) : _GLF_FUZZED(-99620)))))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, (6) - 0)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ _GLF_IDENTITY((~ (int(6))), 0 ^ ((~ (int(6))))))))), _GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) ^ 0))))), (_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), clamp(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), _GLF_IDENTITY(0 | 0, (0 | 0) - 0), _GLF_IDENTITY(0 | 0, (0 | 0) - 0))), (1 & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) << 0)))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), 0 ^ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(-81.14)), bvec2(false, false))).x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) - ivec2(0, 0)))))) ^ 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (_GLF_IDENTITY(0, (0) - (0 ^ 0)) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))) | 0)))), (_GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6)))))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) - (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))), ((~ ((_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) - (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) | (~ (int(6)))))))))))))) / 1))) | 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0), ((0 | 0)) * 1) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (_GLF_IDENTITY(0 | 0, min(0 | 0, 0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(min((0 | _GLF_IDENTITY(0, (0) | (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), max(min((0 | _GLF_IDENTITY(0, (0) | (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))), min((0 | _GLF_IDENTITY(0, (0) | (0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, 0 + (6)), min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) | (_GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), int(ivec3(int(6), 1, int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), max(_GLF_FUZZED(_injected_loop_counter), _GLF_FUZZED(_injected_loop_counter))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))))), max(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), ~ (~ (_GLF_IDENTITY(~ (~ (int(_GLF_IDENTITY(6, (0 << _GLF_IDENTITY(int(2), int(2))) ^ (6))))), (~ (~ (int(6)))) ^ 0)))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) - (0 | 0)), min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(6, (false ? _GLF_FUZZED(atomicXor(_injected_loop_counter, _injected_loop_counter)) : 6)))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((_GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(int(ivec2(0, 1)), clamp(_GLF_IDENTITY(int(ivec2(0, 1)), clamp(int(ivec2(0, 1)), int(ivec2(0, 1)), int(ivec2(0, 1)))), int(ivec2(0, 1)), int(ivec2(0, 1))))) | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), ! (! (bool(injectionSwitch.x < injectionSwitch.y)))))))) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), min(~ (int(6)), _GLF_IDENTITY(~ (int(6)), max(~ (int(6)), ~ (int(6))))))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), clamp(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), min(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter), 0 + (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(6, ~ (~ (6))))), 0 + (~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (~ (~ (6)))))), (_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (~ (~ (6))))))) | (_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), ~ (~ (~ (6))))))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))))), _GLF_IDENTITY(_GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, int(_GLF_ZERO(0.0, injectionSwitch.x))))) | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), _GLF_IDENTITY(~ (~ (int(6))), (_GLF_IDENTITY(true ? ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter), (true ? ~ _GLF_IDENTITY((~ (int(6))), ((~ (int(6)))) ^ 0) : _GLF_FUZZED(_injected_loop_counter)) - 0))))), (false ? _GLF_FUZZED(-73090) : _GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), max((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), clamp((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) - 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(6, (true ? _GLF_IDENTITY(6, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(6, (6) + 0))) : _GLF_FUZZED(-99620)))))), _GLF_IDENTITY(int(6), ~ (~ (int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) - 0), (_GLF_IDENTITY(6, (6) - 0)) - 0)))))), (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(_GLF_FUZZED(_injected_loop_counter), (_GLF_FUZZED(_injected_loop_counter)) ^ (0 >> _GLF_IDENTITY(int(2), int(2))))) >> 0))), 6))), _GLF_IDENTITY(int(_GLF_IDENTITY(6, 0 + (6))), ~ (~ (int(6)))))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ _GLF_IDENTITY((~ (int(6))), 0 ^ ((~ (int(6))))))))), _GLF_IDENTITY((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), ((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))) ^ 0))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0)) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) | (0 | 0))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (false ? _GLF_FUZZED(-73090) : (0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, _GLF_IDENTITY(min(6, 6), (min(6, 6)) / 1))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))) | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), clamp(_GLF_IDENTITY(0 | 0, (0 | 0) - 0), _GLF_IDENTITY(0 | 0, (0 | 0) - 0), _GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0) - 0, ((0 | 0) - 0) * 1)))), (1 & ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))))))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, _GLF_IDENTITY(6, (_GLF_IDENTITY(6, ~ (~ (6)))) << 0)))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), _GLF_IDENTITY(min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), 0 ^ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(-81.14)), bvec2(false, false))).x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) - ivec2(0, 0)))))) ^ 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (_GLF_IDENTITY(0, (0) - (0 ^ 0)) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), clamp(min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), 0 ^ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(-81.14)), bvec2(false, false))).x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) - ivec2(0, 0)))))) ^ 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (_GLF_IDENTITY(0, (0) - (0 ^ 0)) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), 0 ^ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(-81.14)), bvec2(false, false))).x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) - ivec2(0, 0)))))) ^ 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (_GLF_IDENTITY(0, (0) - (0 ^ 0)) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))), min((0 | 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter))), ~ (~ (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))))))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(6, ~ (~ (6)))), 0 ^ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), (int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true))))), _GLF_IDENTITY(bool(bvec4(true, true, true, false)), ! (! (bool(bvec4(true, true, true, false)))))), (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(8.4), _GLF_FUZZED(-81.14)), bvec2(false, false))).x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6)))) / 1), _GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), _GLF_IDENTITY(ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1)), (ivec2(ivec4(ivec2(_GLF_IDENTITY(int(6), ~ (~ (int(6)))), 0), int(_GLF_ZERO(0.0, injectionSwitch.x)), 1))) - ivec2(0, 0)))))) ^ 0))) | (_GLF_IDENTITY(int(_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(6, ~ (~ (_GLF_IDENTITY(6, ~ (~ (6)))))) : _GLF_FUZZED(_injected_loop_counter))), 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6))))))), (_GLF_IDENTITY(0, (0) - (0 ^ 0)) | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))))))) | 0)))), (_GLF_IDENTITY(((0 | 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED(_injected_loop_counter) : int(6)))))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) - (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, (6) | 0), min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))))), ((~ ((_GLF_IDENTITY((0 | 0), (_GLF_IDENTITY((0 | 0), max((0 | 0), (0 | 0)))) - (0 << _GLF_IDENTITY(int(6), int(6)))) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), _GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 | (int(6))), ~ (_GLF_IDENTITY(~ (int(6)), (~ (int(6))) | (~ (int(6)))))))))))))) / 1))) | 0))))) / 1))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5685.1932)), float(injectionSwitch.x), bool(true)))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5685.1932)), float(injectionSwitch.x), bool(true)))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0)), max(float(vec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5685.1932)), float(injectionSwitch.x), bool(true)))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0)), float(vec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5685.1932)), float(injectionSwitch.x), bool(true)))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), 1.0, 1.0))))), injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-5685.1932)), float(injectionSwitch.x), bool(true)))) / _GLF_IDENTITY(1.0, max(1.0, 1.0))), injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-225.242, 47.78)) : _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y)))), false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(false, ! (! (false))))), bvec3(bvec3(bvec3(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, clamp(1, 1, 1))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))));
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = (1 | (0 << _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               continue;
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), true, true, false))))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), true))))))));
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 uint subgroup_id = gl_SubgroupID;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))))), false, true), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false, _GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))), bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))), false, true), true))))))))), false)))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))))))), false, true), true)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), false, _GLF_IDENTITY(true, (true) || false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), (! (true)) && true)))))), bvec3(bvec3(bvec3(bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))), false, true), true))))))))), false)))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             do
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(true ? int(7) : _GLF_FUZZED(-6809), (_GLF_IDENTITY(true ? int(7) : _GLF_FUZZED(-6809), (true ? int(7) : _GLF_FUZZED(-6809)) - (0 ^ (0 >> _GLF_IDENTITY(int(0), int(0)))))) / 1))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (0 | 0) | (int(7)))), 0 ^ (_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (0 | 0) | (int(7))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1))) != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(375.393) : injectionSwitch.x)))) > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) || (false))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (true ? _GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)) : _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))) | (_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))), 0u ^ _GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))), 0u + (_GLF_IDENTITY((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))), _GLF_IDENTITY(((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) ^ 0u, max(_GLF_IDENTITY(((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) ^ 0u, max(((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) ^ 0u, ((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) ^ 0u)), _GLF_IDENTITY(((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) ^ 0u, (((_GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))))) ^ 0u) << 0u))))))))))) * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))) ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)))), ((_GLF_IDENTITY(true, bool(bvec4(true, true, false, true))) ? workgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))))) << 0u));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(83.32), _GLF_FUZZED(-0.6)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), false)))))), false || (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(9050.9324, -6.3)))).x > injectionSwitch.y), false))))))))))), ((! (injectionSwitch.x > injectionSwitch.y))) && true)))) || false)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, (false) || false)))))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
          continue;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      continue;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], (true ? injectionSwitch[0] : _GLF_FUZZED(6.6))), injectionSwitch[1])).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) | (workgroup_base)))) + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u), (_GLF_IDENTITY(workgroup_base, 0u ^ (workgroup_base))) | (workgroup_base)))) + subgroup_base + subgroup_local_id) * 1u);
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), ((true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true))), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-97139) : 4))), int(4))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-97139) : 4))), (_GLF_IDENTITY(int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-97139) : 4))), 0 + (int(_GLF_IDENTITY(4, (false ? _GLF_FUZZED(-97139) : 4)))))) | 0), int(4)))) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), (int(4)) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(int(4), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), (clamp(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4))), int(4))) ^ 0)))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), min((1 ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(154.241)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec4((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), 1, 0, 1)))))), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(ivec4(1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, _GLF_IDENTITY(1, clamp(1, 1, 1)))), (int(ivec4(1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 0, _GLF_IDENTITY(1, clamp(1, 1, 1))))) / 1)), clamp(1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), 1 ^ int(_GLF_ONE(1.0, injectionSwitch.y)), 1 ^ int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))))), min((1 ^ int(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(154.241)), _GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), mix(float(_GLF_IDENTITY(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(154.241)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), max(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(154.241)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(154.241)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), float(_GLF_FUZZED((+ -83.79))), bool(false))))), _GLF_IDENTITY((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), int(ivec4((1 ^ int(_GLF_ONE(1.0, injectionSwitch.y))), 1, 0, 1)))))))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(21010) : _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(18.22)))))) || false)))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((injectionSwitch.x > injectionSwitch.y)))))))))))
            continue;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, sin(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2(_GLF_IDENTITY(1.0, (1.0) - sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.9) : 0.0))) / 1.0))), 0.0, 1.0, 0.0)), float(mat3x2(float(mat2(_GLF_IDENTITY(1.0, (1.0) - sin(0.0)), 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0, exp(0.0), 1.0))))), vec4(0.0, 0.0, 0.0, 1.0)))))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0))))))), vec2(mat2x4((_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, sin(0.0), 1.0), vec4(0.0, 0.0, 0.0, 1.0))))))), _GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), vec4(1.0, 0.0, 0.0, 0.0))), 1.0, 0.0, 0.0, 0.0, 0.0))) / vec2(1.0, 1.0)).y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true, false, true)), bool(_GLF_IDENTITY(bool(bool(bvec4(_GLF_DEAD(false), true, false, true))), false || (bool(bool(bvec4(_GLF_DEAD(false), true, false, true))))))), _GLF_IDENTITY(! _GLF_IDENTITY((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), ! (! ((! (bool(bvec4(_GLF_DEAD(false), true, false, true))))))), (! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), false || ((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), _GLF_IDENTITY(bool(bvec4((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), true, true, true)), bool(bool(bool(bvec4((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), true, true, true))))))), bool(bvec3(! (_GLF_IDENTITY((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), _GLF_IDENTITY(bool(bvec4((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), true, true, true)), bool(bool(bool(bvec4((! (bool(bvec4(_GLF_DEAD(false), true, false, true)))), true, true, true))))))), true, true)))))) && true))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))))
              continue;
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat2x4(vec4(injectionSwitch, 0.0, 1.0), 1.0, 0.0, 0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch))).y, mix(float(_GLF_FUZZED(-0.7)), float(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(injectionSwitch, 0.0, 1.0), vec4(mat2x4(vec4(injectionSwitch, 0.0, 1.0), 1.0, 0.0, 0.0, 0.0))))) : _GLF_FUZZED(injectionSwitch))).y), bool(true)))))));
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)), (_injected_loop_counter) >> 0))) < 1); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY(~ (~ (_injected_loop_counter ++)), (true ? ~ (~ (_injected_loop_counter ++)) : _GLF_FUZZED(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(48152, (48152) - 0), 36014).t, (_GLF_IDENTITY(ivec2(48152, 36014), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec2(-38654, 15307)) : ivec2(48152, 36014))).t) / 1))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), float(_GLF_FUZZED(-1.0)), bool(false))) : _GLF_FUZZED(-7.9))), _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))))), false, true, false))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))) / vec2(1.0, 1.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), float(_GLF_FUZZED(-1.0)), bool(false))) : _GLF_FUZZED(-7.9))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, mix(float(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), float(_GLF_FUZZED(-1.0)), bool(false))) : _GLF_FUZZED(-7.9)))) / cos(0.0)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y))))), false, true, false)))))) && true)))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          return;
         continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), true)))))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(int(0), int(0))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (true ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_injected_loop_counter)))))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             return;
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        continue;
       atomicStore(write_val, uint(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 1u))) | 0u), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (false ? _GLF_FUZZED(vec2(441.222, -777.857)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)), 0.0, sqrt(round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, 0.0))).y)))), 0u ^ _GLF_IDENTITY((uint(uvec3(virtual_gid, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y))))), ((uint(uvec3(virtual_gid, _GLF_IDENTITY(1u, (1u) * 1u), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))) - 0u)))), 4, _GLF_IDENTITY(64, (64) / (1 ^ 0)), 4);
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7.4)), vec2(_GLF_FUZZED(0.2), (injectionSwitch)[1]), bvec2(false, true))).x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, determinant(mat3(1.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, abs(1.0), sqrt(1.0), 1.0)), 0.0, 1.0, 1.0, abs(1.0), 0.0)), (true ? float(mat4x2(injectionSwitch.x, 1.0, determinant(mat3(1.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, abs(1.0), sqrt(1.0), 1.0)), 0.0, 1.0, 1.0, abs(1.0), 0.0)) : _GLF_FUZZED(79.02)))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read_val = atomicLoad(_GLF_IDENTITY(write_val, _GLF_IDENTITY(_GLF_IDENTITY((write_val), clamp((write_val), _GLF_IDENTITY((write_val), 0u | ((write_val))), (write_val))) << uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), ~ (_GLF_IDENTITY(~ ((write_val) << _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(8.6)), vec2(_GLF_FUZZED(9116.7976), (injectionSwitch)[1]), bvec2(false, true))).x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (uint(_GLF_ZERO(0.0, injectionSwitch.x))))) << 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(_GLF_IDENTITY(max(~ ((write_val) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ ((write_val) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (max(~ ((write_val) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ ((write_val) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))) | (0u ^ 0u)), (0u | 0u) | (max(~ ((write_val) << uint(_GLF_ZERO(0.0, injectionSwitch.x))), ~ ((write_val) << uint(_GLF_ZERO(0.0, injectionSwitch.x)))))))))), 4, _GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, ~ (~ (64))))), 2);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(read_val, (read_val) | (_GLF_IDENTITY(read_val, min(read_val, _GLF_IDENTITY(read_val, (read_val) << 0u))))))), (buf[virtual_gid] = _GLF_IDENTITY(uint(subgroupAllEqual(read_val)), _GLF_IDENTITY((uint(subgroupAllEqual(read_val))), ((uint(subgroupAllEqual(read_val)))) ^ (0u | uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u)) << (0u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) + 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
