#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_18 {
 bvec2 _f0;
 mat4x3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_17 {
 mat3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_19 {
 uvec3 _f0;
 uvec4 _f1;
 _GLF_struct_17 _f2;
 bvec4 _f3;
 _GLF_struct_18 _f4;
} ;

struct _GLF_struct_15 {
 bool _f0;
 bvec2 _f1;
 int _f2;
 bvec2 _f3;
 bool _f4;
} ;

struct _GLF_struct_14 {
 mat2x3 _f0;
 vec3 _f1;
 mat4 _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_16 {
 mat4x2 _f0;
 _GLF_struct_14 _f1;
 float _f2;
 _GLF_struct_15 _f3;
} ;

struct _GLF_struct_12 {
 vec3 _f0;
 bool _f1;
 uvec4 _f2;
 mat3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_11 {
 bvec4 _f0;
 mat3x4 _f1;
 uvec4 _f2;
 bool _f3;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 _GLF_struct_12 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
 uvec2 _f1;
 uint _f2;
 mat3x4 _f3;
 mat4x3 _f4;
 vec4 _f5;
 uint _f6;
} ;

struct _GLF_struct_8 {
 mat3x2 _f0;
 bvec4 _f1;
 ivec4 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_7 {
 uvec4 _f0;
 uvec4 _f1;
} ;

struct _GLF_struct_10 {
 mat4x2 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 bool _f3;
 _GLF_struct_9 _f4;
} ;

struct _GLF_struct_5 {
 int _f0;
 uint _f1;
 vec2 _f2;
 mat4 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_5 _f0;
 bool _f1;
} ;

struct _GLF_struct_3 {
 bvec2 _f0;
 mat2x4 _f1;
 mat4x2 _f2;
 bvec3 _f3;
 mat2x4 _f4;
 mat3 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_2 {
 float _f0;
 vec4 _f1;
 vec3 _f2;
 mat4x2 _f3;
 uint _f4;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 uvec2 _f1;
 bvec4 _f2;
 bvec4 _f3;
 mat4x2 _f4;
 int _f5;
} ;

struct _GLF_struct_4 {
 uint workgroup_id;
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
 mat4x2 _f2;
 bvec3 _f3;
 _GLF_struct_3 _f4;
} ;

struct _GLF_struct_20 {
 _GLF_struct_4 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_10 _f2;
 _GLF_struct_13 _f3;
 _GLF_struct_16 _f4;
 uvec3 _f5;
 _GLF_struct_19 _f6;
} ;

struct _GLF_struct_0 {
 bvec3 _f0;
 uint workgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-80535 & 0) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7)))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), abs(0.0), 1.0, 1.0))).x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))) && true)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), max(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y))))); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           barrier();
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.4)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.4)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.4)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(true)))) * 1.0) : _GLF_FUZZED(7031.8491)))), float(_GLF_FUZZED(3032.3499)), bool(false)))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) + (gl_NumWorkGroups)).x) | 0u);
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(bvec3(true), _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) / ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(3u), uint(3u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(false, (false) || false)) || _GLF_IDENTITY(false, ! (! (false))))));
  }
 _GLF_struct_20 _GLF_struct_replacement_20 = _GLF_struct_20(_GLF_struct_4(gl_WorkGroupID.x, _GLF_struct_1(mat3(1.0), uvec2(1u), bvec4(true), bvec4(_GLF_IDENTITY(true, ! (! (true)))), mat4x2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-78428)))), (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), min((_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (true ? min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-78428))))) | 0))), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-78428)))), (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), min((_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (true ? min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-78428))))) | 0))), (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-78428)))), (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), min((_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))))), (true ? min(_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (_GLF_IDENTITY(1, min(1, 1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-78428))))) | 0)))) - 0))))), _GLF_struct_2(1.0, vec4(1.0), vec3(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-0.7)), bool(false)))), mat4x2(1.0), 1u), mat4x2(1.0), bvec3(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bvec2(bool(true), false)))))), _GLF_struct_3(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, _GLF_IDENTITY(true, false || (true)))), (bool(bvec3(true, true, _GLF_IDENTITY(true, false || (true))))) && true))), mat2x4(1.0), mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))) * abs(1.0)), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(7704.9404), (_GLF_IDENTITY(_GLF_FUZZED(7704.9404), mix(float(_GLF_FUZZED(7704.9404)), float(_GLF_FUZZED(5.9)), bool(false)))) / 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), max(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0), (max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0))) * abs(1.0)), 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(7704.9404), (_GLF_IDENTITY(_GLF_FUZZED(7704.9404), mix(float(_GLF_FUZZED(_GLF_IDENTITY(7704.9404, max(7704.9404, 7704.9404)))), float(_GLF_FUZZED(5.9)), bool(false)))) / 1.0)), _GLF_IDENTITY(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), max(float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0))), float(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(28.33)), float(1.0), bool(true))))))), 1.0, 1.0))))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(float(133194u))), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), clamp(1.0, 1.0, 1.0)))), 1.0)) - 0.0))), bvec3(true), mat2x4(1.0), mat3(1.0), vec2(1.0))), _GLF_struct_6(_GLF_struct_5(1, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) / 1u), 1u)), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), mix(float(_GLF_FUZZED(-208.873)), float(_GLF_IDENTITY(1.0, (1.0) - log(1.0))), bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-801.536)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec4(true, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-801.536)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), true))))))))))), _GLF_IDENTITY(1.0, (1.0) - log(1.0))))) * abs(_GLF_IDENTITY(1.0, (1.0) / 1.0)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), mix(float(_GLF_FUZZED(-208.873)), float(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) - 0.0)) - log(1.0))), bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)))), bool(bvec4(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6765.5111)), bool(false))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)))), true))))), _GLF_IDENTITY((! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), false || ((! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))) || false)))), bool(bvec2((! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false)), (! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (! ((_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))) || false))) && true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, true, true))) || false)))))), _GLF_IDENTITY(1.0, (1.0) - log(1.0))))) * abs(1.0), min((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), mix(float(_GLF_FUZZED(-208.873)), float(_GLF_IDENTITY(1.0, (1.0) - log(1.0))), bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true)))))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), mix(float(_GLF_FUZZED(-208.873)), float(_GLF_IDENTITY(1.0, (1.0) - log(1.0))), bool(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bool(bvec2(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), true)))))) : _GLF_FUZZED(76.03))), _GLF_IDENTITY(1.0, (1.0) - log(1.0))))) * abs(1.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), mix(float(_GLF_FUZZED(-208.873)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.9) : 1.0)), (1.0) - log(1.0))), _GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), vec2(mat3(_GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), vec2(mat2x3(_GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-37.38), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3.6)), bvec2(true, false))))[1]), bvec2(true, true)))))), vec2(mat2x4(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))).y)), true))))))), true && (bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), (false ? _GLF_FUZZED(vec2(3.5, -6.8)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))))))).y)), true))))))))))), _GLF_IDENTITY(1.0, (1.0) - log(1.0))))), mix(float((_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - log(1.0)), mix(float(_GLF_FUZZED(-208.873)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(9.9) : 1.0)), (1.0) - log(1.0))), _GLF_IDENTITY(bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), vec2(mat3(_GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), vec2(mat2x3(_GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-37.38), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(3.6)), bvec2(true, false))))[1]), bvec2(true, true)))))), vec2(mat2x4(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), clamp(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))).y)), true))))))), true && (bool(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), (false ? _GLF_FUZZED(vec2(3.5, -6.8)) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))[0], (injectionSwitch)[1]), bvec2(true, true))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2(_GLF_FUZZED(20.48), _GLF_FUZZED(-8.5)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))))))).y)), true))))))))))), _GLF_IDENTITY(1.0, (1.0) - log(1.0)))))), float(_GLF_FUZZED(6.6)), bool(false))) * abs(1.0))) : _GLF_FUZZED(-6.2))))), mat4(1.0), mat2x3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), true), _GLF_struct_10(mat4x2(1.0), _GLF_struct_7(uvec4(1u), uvec4(1u)), _GLF_struct_8(mat3x2(1.0), bvec4(true), ivec4(1), vec3(1.0)), true, _GLF_struct_9(mat3(1.0), uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) * 1u)), 1u, mat3x4(1.0), mat4x3(1.0), vec4(1.0), 1u)), _GLF_struct_13(_GLF_struct_11(bvec4(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), (bool(true)) || false)))), mat3x4(1.0), uvec4(1u), true), _GLF_struct_12(vec3(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_IDENTITY(_GLF_FUZZED(-2312.4637), 1.0 * (_GLF_FUZZED(-2312.4637))) : -6952.7748))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_IDENTITY(_GLF_FUZZED(-2312.4637), 1.0 * (_GLF_FUZZED(-2312.4637))) : -6952.7748)))), float(_GLF_FUZZED((-6.0 - 3.5))), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))), min(_GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_FUZZED(-2312.4637) : -6952.7748))), _GLF_IDENTITY(float(vec2(_GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_FUZZED(-2312.4637) : -6952.7748))), 0.0)), min(float(vec2(_GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_FUZZED(-2312.4637) : -6952.7748))), 0.0)), float(vec2(_GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_FUZZED(-2312.4637) : -6952.7748))), 0.0))))), _GLF_FUZZED(_GLF_IDENTITY(-6952.7748, (false ? _GLF_FUZZED(-2312.4637) : -6952.7748)))))), float(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, min(1.0, 1.0))) * 1.0), 1.0)), 1.0))), bool(true)))), true, _GLF_IDENTITY(uvec4(1u), (_GLF_IDENTITY(false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(122081u, (122081u) | (122081u)), 133412u, 29692u, 62990u)) : uvec4(1u), uvec4(0u, 0u, 0u, 0u) | (false ? _GLF_FUZZED(uvec4(_GLF_IDENTITY(122081u, (122081u) | (_GLF_IDENTITY(122081u, clamp(122081u, _GLF_IDENTITY(122081u, max(122081u, 122081u)), 122081u)))), 133412u, 29692u, 62990u)) : uvec4(1u))))), mat3(1.0), vec3(1.0)), _GLF_IDENTITY(ivec4(1), clamp(ivec4(1), _GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4(1), _GLF_IDENTITY(max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) | (1))), (ivec4(1)) | (ivec4(1))), ivec4(_GLF_IDENTITY(1, min(1, 1)))), (max(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))), ivec4(_GLF_IDENTITY(1, min(1, 1))))) - ivec4(0, 0, 0, 0)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))))), max(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))), ivec4(_GLF_IDENTITY(1, min(1, 1))))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1), ivec4(0, 0, 0, 0) ^ (_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))))), max(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))), ivec4(_GLF_IDENTITY(1, min(1, 1)))))) + ivec4(0, 0, 0, 0)))) / ivec4(1, 1, 1, 1)), (~ (_GLF_IDENTITY(ivec4(1), max(_GLF_IDENTITY(ivec4(1), (ivec4(1)) | (ivec4(1))), ivec4(1))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(ivec4(1), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0)), (ivec4(1)) | (ivec4(1))), ivec4(1)))), (~ (_GLF_IDENTITY(ivec4(1), max(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0)), (ivec4(1)) | (ivec4(1))), ivec4(1))))) << ivec4(0, 0, 0, 0)))))), max(ivec4(1), ivec4(1))), ivec4(1)))), _GLF_struct_16(mat4x2(1.0), _GLF_struct_14(mat2x3(1.0), vec3(1.0), mat4(1.0), uvec2(1u)), 1.0, _GLF_struct_15(_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec4(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY((! (true)) || false, true && ((! (true)) || false))))), false, true)))) || false)))))), bvec2(true), 1, bvec2(true), true)), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), _GLF_IDENTITY((uvec3(1u)), clamp((uvec3(1u)), (uvec3(1u)), (uvec3(1u)))) * uvec3(1u, _GLF_IDENTITY(1u, max(1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((false ? _GLF_FUZZED(180404u) : 1u), clamp((false ? _GLF_FUZZED(180404u) : 1u), _GLF_IDENTITY((false ? _GLF_FUZZED(180404u) : 1u), ((false ? _GLF_FUZZED(180404u) : 1u)) | ((false ? _GLF_FUZZED(180404u) : 1u))), (false ? _GLF_FUZZED(180404u) : 1u)))))), 1u))) / uvec3(1u, 1u, 1u))) | (_GLF_IDENTITY(uvec3(1u), uvec3(uvec4(uvec3(1u), 1u))))), _GLF_struct_19(uvec3(_GLF_IDENTITY(1u, 0u | (1u))), uvec4(1u), _GLF_struct_17(mat3(1.0), mat3x2(1.0)), bvec4(true), _GLF_struct_18(bvec2(true), mat4x3(1.0), bvec4(true))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, clamp(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, 0u | (_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id)), _GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, 1u), (uvec2(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, (_GLF_struct_replacement_0.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_20._f0.workgroup_id, (_GLF_struct_replacement_20._f0.workgroup_id) / 1u)) | (_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id)), 1u)) | (uvec2(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, 1u)))))) | (_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, ~ (~ (_GLF_struct_replacement_0.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_20._f0.workgroup_id, (139144u & uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(_GLF_struct_replacement_20._f0.workgroup_id, (_GLF_struct_replacement_20._f0.workgroup_id) * 1u))))))), ((_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, uint(_GLF_IDENTITY(uvec2(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, 1u), (uvec2(_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, (_GLF_struct_replacement_0.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_20._f0.workgroup_id, (_GLF_struct_replacement_20._f0.workgroup_id) / 1u)) | (_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id)), 1u)) | (uvec2(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, 1u)))))) | (_GLF_IDENTITY(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, ~ (~ (_GLF_struct_replacement_0.workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_20._f0.workgroup_id, (139144u & uint(_GLF_ZERO(0.0, injectionSwitch.x))) | (_GLF_IDENTITY(_GLF_struct_replacement_20._f0.workgroup_id, (_GLF_struct_replacement_20._f0.workgroup_id) * 1u)))))))) / 1u)), clamp(_GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, _GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id, _GLF_struct_replacement_0.workgroup_size * _GLF_struct_replacement_20._f0.workgroup_id))));
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(1u, (1u) >> 0u), 0u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED((mix(num_workgroup, subgroup_id, true) << subgroup_local_id)) : 1u)), 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, _GLF_IDENTITY(0u, (0u) ^ 0u), 1u)), ((uvec4(subgroup_size, 1u, _GLF_IDENTITY(0u, (0u) ^ 0u), 1u))) - (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u)))) - uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))), uvec4(0u, 0u, 0u, 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, _GLF_IDENTITY(0u, (0u) ^ _GLF_IDENTITY(0u, (0u) | 0u)), 1u)) - uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), ((uvec4(subgroup_size, 1u, 0u, 1u))) | ((uvec4(subgroup_size, 1u, 0u, 1u)))))) << uvec4(0u, 0u, 0u, 0u))))), min(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u)) - uvec4(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), uvec4(0u, 0u, 0u, 0u) + (uvec4(subgroup_size, 1u, 0u, 1u))), (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u))))), uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), (_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), clamp((uvec4(subgroup_size, 1u, 0u, 1u)), (uvec4(subgroup_size, 1u, 0u, 1u)), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), max((uvec4(subgroup_size, 1u, 0u, 1u)), (uvec4(subgroup_size, 1u, 0u, 1u))))))) + uvec4(0u, 0u, 0u, 0u)) - uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) * (1u & 1u)), 1u, 0u, 1u)) << uvec4(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), min((0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x)), (0u) - uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(0.9) : _GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 0.0, 1.0))))), 0.0, 0.0, 1.0))), injectionSwitch.x))))), 0u))))), _GLF_IDENTITY(~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48))) > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))))), max(~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48))) > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), clamp(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48))) > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))))))))))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(1u, (1u) >> 0u), 0u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) / 1u)), 1u)) - uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), uvec4(0u, 0u, 0u, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))), uint(uint(_GLF_IDENTITY(0u, (0u) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))))) + (_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), _GLF_IDENTITY(((uvec4(subgroup_size, 1u, 0u, 1u))) | ((uvec4(subgroup_size, 1u, 0u, 1u))), (((uvec4(subgroup_size, 1u, 0u, 1u))) | ((uvec4(subgroup_size, 1u, 0u, 1u)))) / uvec4(1u, 1u, 1u, 1u))))) << uvec4(0u, 0u, 0u, 0u))))), min(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u)) - uvec4(0u, 0u, 0u, 0u), ((_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u), (_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u), ~ (_GLF_IDENTITY(~ (uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u)), (~ (uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u))) | uvec4(0u, 0u, 0u, 0u))))) / uvec4(1u, 1u, 1u, 1u))) - uvec4(0u, 0u, 0u, 0u)) + uvec4(0u, 0u, 0u, 0u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (true ? _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(uvec4(97752u, 82721u, 152257u, 26638u)))) + (uvec4(subgroup_size, 1u, 0u, 1u))), (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) ^ 0u) : _GLF_FUZZED(56640u)))), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(subgroup_size, 1u, 0u, _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (1u) ^ 0u) : _GLF_FUZZED(56640u)))))), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true)))) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ((subgroup_size)) / uint(_GLF_ONE(1.0, injectionSwitch.y))) * (1u & 1u)), 1u, 0u, 1u)) << uvec4(0u, 0u, _GLF_IDENTITY(0u, (0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u))))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, 0u, 1u)) >> uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))) | (subgroup_size)), 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, 0u))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(subgroup_size, 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, 0u))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, 0u))), ((_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, 0u)))) - uvec4(0u, 0u, 0u, 0u))) >> (uvec4(0u, 0u, 0u, 0u) >> _GLF_IDENTITY(uvec4(8u), uvec4(8u)))), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) + uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 1u))))))))))) - uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48) : _GLF_FUZZED(length(vec2(-2.5, 5806.3161).xxx)))))) > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))))))))))))) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(subgroup_size, _GLF_IDENTITY(1u, (1u) >> 0u), 0u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, max((0u) ^ 0u, _GLF_IDENTITY((0u) ^ 0u, (0u ^ 0u) | ((0u) ^ 0u))))), 1u)) - uvec4(0u, 0u, 0u, 0u)), min(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, _GLF_IDENTITY(1u, uint(uvec2(1u, 1u)))), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), ((uvec4(subgroup_size, 1u, 0u, 1u))) | ((uvec4(subgroup_size, 1u, 0u, 1u)))))) << uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)), ((uvec4(subgroup_size, 1u, 0u, 1u))) | ((uvec4(subgroup_size, 1u, 0u, 1u)))))) << uvec4(0u, 0u, 0u, 0u)) * uvec4(1u, 1u, 1u, 1u)))))), min(uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (_GLF_IDENTITY(uvec4(subgroup_size, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec2(0u, 1u)), (uint(uvec2(0u, 1u))) | (uint(uvec2(0u, 1u))))), 1u), _GLF_IDENTITY((uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u)) - uvec4(0u, 0u, 0u, 0u), min((uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u)) - uvec4(0u, 0u, 0u, 0u), (uvec4(subgroup_size, _GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), clamp(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) / ((uvec4(1u, 1u, 1u, 1u) << _GLF_IDENTITY(uvec4(5u), uvec4(5u))) >> _GLF_IDENTITY(uvec4(5u), uvec4(5u)))), uvec4(subgroup_size, 1u, 0u, 1u), uvec4(subgroup_size, 1u, 0u, 1u))), uvec4(0u, 0u, 0u, 0u) + (uvec4(subgroup_size, 1u, 0u, 1u))), (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u))))), uint(_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size)), 1u, _GLF_IDENTITY(0u, (0u) - 0u), 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u, 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)), (_GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u))) ^ uvec4(0u, 0u, 0u, 0u)) : (uvec4(_GLF_IDENTITY(subgroup_size, (subgroup_size) * (1u & 1u)), 1u, 0u, 1u)) << uvec4(0u, 0u, _GLF_IDENTITY(0u, (0u) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), 0u))))), ~ (~ ((_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_size) : subgroup_size, (false ? _GLF_FUZZED(subgroup_size) : subgroup_size) | 0u))), 1u, 0u, 1u), (uvec4(subgroup_size, 1u, 0u, 1u)) - uvec4(0u, 0u, 0u, 0u))) | (_GLF_IDENTITY(uvec4(subgroup_size, 1u, 0u, 1u), _GLF_IDENTITY((uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48))) > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-83.48))) > injectionSwitch.y)))) ? _GLF_FUZZED(uvec4(94395u, 17798u, 66116u, 32934u)) : (uvec4(subgroup_size, 1u, 0u, 1u)) << uvec4(0u, 0u, 0u, 0u)))))))))))))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_base) : workgroup_base)), ~ (~ (_GLF_IDENTITY(workgroup_base, (false ? _GLF_FUZZED(workgroup_base) : workgroup_base))))) + _GLF_IDENTITY(subgroup_base, (subgroup_base) - 0u) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(write_val, uint(virtual_gid), 4, 64, 4);
  }
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = (0 | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), int(5)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(_GLF_IDENTITY(5, ~ (~ (5))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(478.587))) + (injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(478.587))) + (injectionSwitch.x)) > injectionSwitch.y))))))), false, false, false))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
              }
             for(int _injected_loop_counter = (((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(5, 5, 5))), int(5))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, int(ivec3(5, 0, (1 & ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))))))), _GLF_IDENTITY(int(5), ~ (~ (int(5)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     barrier();
                    }
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-6.6))), injectionSwitch.x)) < injectionSwitch.y)), bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false, true)))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           do
                            {
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         barrier();
                        }
                      }
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                            {
                             barrier();
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
                          {
                           barrier();
                          }
                        }
                       barrier();
                      }
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               buf[virtual_gid] = uint(subgroupAllEqual(read_val));
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             barrier();
            }
          }
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       do
                        {
                         do
                          {
                           do
                            {
                             barrier();
                             if(_GLF_DEAD(false))
                              barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0), mat3(mat4(mat3(injectionSwitch.x, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))), float(_GLF_FUZZED(-7326.1046)), bool(false))) > injectionSwitch.y))));
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))), vec3(0.0, sqrt(1.0), 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, sqrt(1.0), 0.0))) * (_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_IDENTITY(_GLF_FUZZED(-2.7), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-2.7), max(_GLF_FUZZED(-2.7), _GLF_FUZZED(-2.7)))) - 0.0, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FUZZED(-2.7), max(_GLF_FUZZED(-2.7), _GLF_FUZZED(-2.7)))) - 0.0, float(mat2((_GLF_IDENTITY(_GLF_FUZZED(-2.7), max(_GLF_FUZZED(-2.7), _GLF_FUZZED(-2.7)))) - 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-30.78) : 0.0)), 0.0, 0.0)))))) / 1.0))), bool(false))), injectionSwitch.y))))))));
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(false, false)), ! (! (_GLF_IDENTITY(bool(bvec2(false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec2(false, false)), true, true), bvec3(bvec4(bvec3(bool(bvec2(false, false)), true, true), true)))))))), ! (! (bool(bvec2(false, false)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-362.581), clamp(_GLF_IDENTITY(_GLF_FUZZED(-362.581), min(_GLF_FUZZED(-362.581), _GLF_FUZZED(-362.581))), _GLF_FUZZED(-362.581), _GLF_IDENTITY(_GLF_FUZZED(-362.581), max(_GLF_FUZZED(-362.581), _GLF_FUZZED(-362.581))))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(51.32)), bvec2(true, false))), injectionSwitch)) : _GLF_FUZZED(vec2(1.6, 0.2)))).y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                  barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))))
              {
               for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), true && (bool(bool(_GLF_IDENTITY(false, ! (! (false)))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), true && (bool(bool(_GLF_IDENTITY(false, ! (! (false))))))))))))
                      barrier();
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5)))))); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
