#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false || (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_DEAD(false)), (false || (_GLF_DEAD(false))) || false)), false || (! (false || (_GLF_DEAD(false)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(110.761)), bvec2(true, false))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, false))) && (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true && (false), ! (! (true && (false)))))))))
    return;
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), true)))), ! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)), true))))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - log(1.0))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, false), true))))))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), float(_GLF_IDENTITY(mat4x3(min(injectionSwitch.y, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, tan(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-31.67)), float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x3(0.0, 0.0, 0.0, 1.0, 0.0, tan(0.0))), min(float(mat2x3(0.0, 0.0, 0.0, 1.0, 0.0, tan(0.0))), float(mat2x3(0.0, 0.0, 0.0, 1.0, 0.0, tan(0.0))))))), bool(true)))), 0.0, 0.0), (mat4x3(min(injectionSwitch.y, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 0.0, 0.0)) * mat4(1.0)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(617.440) : _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), float(_GLF_IDENTITY(mat4x3(min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(7.5)), bool(_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 1.0, 1.0, 0.0, 1.0))) : _GLF_FUZZED(-886.172)))))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, tan(0.0), 0.0, 0.0), (mat4x3(min(injectionSwitch.y, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, tan(0.0), 0.0, 0.0)) * mat4(1.0)))))))))) && true, false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (! ((_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(4.8) : _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-13.74) : injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-0.0)), float(injectionSwitch.y), bool(true)))))))), (_GLF_IDENTITY(! (! ((injectionSwitch.x > injectionSwitch.y))), true && (! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), false, _GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), ! (! (bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))))), (injectionSwitch.x > injectionSwitch.y))))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, true && (false)))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), float(_GLF_FUZZED(-9097.2405)), bool(false))), 1.0)).x, float(vec2(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) * 1.0)), float(_GLF_FUZZED(-9097.2405)), bool(false))), 1.0)).x, 0.0))), (false ? _GLF_FUZZED(-9.9) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), sin(0.0), 0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(min(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-95.66)), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-95.66), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-589.555) : _GLF_FUZZED(-95.66)))), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))), bool(true))), mix(float(_GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-95.66)), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))), bool(true)))), float(_GLF_FUZZED(-6.8)), bool(false)))) * 1.0), float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-79.69)), _GLF_IDENTITY(float(0.0), mix(float(float(0.0)), float(_GLF_FUZZED(9.7)), bool(false))), bool(true)))) - 0.0), 0.0, 1.0, 0.0))), mix(float(min(_GLF_IDENTITY(_GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-95.66)), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(-95.66), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-589.555) : _GLF_FUZZED(-95.66)))), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))), bool(true))), mix(float(_GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0)), mix(float(_GLF_FUZZED(-95.66)), float(float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 1.0, 0.0))), bool(true)))), float(_GLF_FUZZED(-6.8)), bool(false)))) * 1.0), float(mat4(injectionSwitch.x, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 0.0, 0.0, 0.0, 0.0, sin(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-79.69)), _GLF_IDENTITY(float(0.0), mix(float(float(0.0)), float(_GLF_FUZZED(9.7)), bool(false))), bool(true)))) - 0.0), 0.0, 1.0, 0.0)))), float(_GLF_FUZZED(3248.9240)), bool(false))))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), bool(bvec2(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), true)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7.5), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], max((injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(4.3)), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true)), true && (bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) || false) || (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))) || false, ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), true))))) || false))))))), bool(bvec4(false, true, true, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, 0.0, length(determinant(mat2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0)), (float(mat4x3(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y, 1.0, 0.0, 0.0, 1.0, 0.0, length(determinant(mat2(0.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 1.0, 0.0, 1.0))) * 1.0))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-916.181))), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(injectionSwitch.x, 1.0, 0.0, 1.0))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5358.1790), _GLF_FUZZED(-1.8)), bvec2(false, false))), injectionSwitch)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, false)))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-647.030, 106.106)))).y)))))), bool(bvec2(bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)), false || (bool(bvec2(! (_GLF_IDENTITY(bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)))))))), true)))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))).x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))), bvec2(bvec2(bvec2(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, min(1.0, 1.0)))))).x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), false || (! ((injectionSwitch.x < injectionSwitch.y)))))))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 0.0, 0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 1.0, sin(tan(0.0)), 0.0, sin(0.0), abs(1.0)))), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 0.0))), min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(20.68))))) > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 1.0))))))), true, true, true))))))) ? _GLF_FUZZED(subgroup_local_id) : gl_WorkGroupSize.x)), 1u * _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) ^ 0u));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-322.785) : 0.0))), (_GLF_IDENTITY(vec2(0.0, 0.0), vec2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.9) : _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.2))), 0.0)))), 0.0) + (vec2(0.0, 0.0)))) + vec2(0.0, 0.0))).x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && true)), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! (true))), _GLF_IDENTITY(bool(bvec3(bool(bool(! (true))), false, false)), true && (bool(bvec3(bool(bool(! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), false, false))))))))))), (injectionSwitch.x < injectionSwitch.y)))))) && true), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && true, ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))) && true) || false))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(true, bool(bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), _GLF_IDENTITY(bool(bool(! (true))), _GLF_IDENTITY(bool(bvec3(bool(bool(! (true))), false, false)), true && (bool(bvec3(bool(bool(! (_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), false, false))))))))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))), injectionSwitch)).y)))))) && true)) || false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), false)))))))
            return;
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, (false) && true)) && true)))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))), ! (! (! (bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), false))))))))))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(length(vec2(0.0, 0.0))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0), (mat3x4(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(length(vec2(0.0, 0.0))), 0.0, sqrt(1.0), 0.0, 1.0, 0.0, 0.0, 1.0)) + mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED((-3.7))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1.0 : _GLF_FUZZED(-22.25))) * (injectionSwitch.x))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))) > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bool((false) && true)), false || (bool(bool((false) && true))))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(vec2(-460.579, 5.9)) : vec2(mat3(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0)), dot(vec4(1.0, 0.0, 1.0, 0.0), vec4(0.0, 1.0, 0.0, 1.0))), 1.0, 1.0, 1.0, 1.0))))))).y)), true, false)), false)), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), true)))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), true)))), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), true)))), true)), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), true)))), true))))), false))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, false)), false)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y)), true, false)), false)), true))))))))), true))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size) - 0u, ((workgroup_size) - 0u) / 1u)) * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))), (true ? (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))) : _GLF_FUZZED(67312u))) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(79786u))), max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), workgroup_base)))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), min(_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), workgroup_base))))) << 0u))) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), false))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), false)), ! (! (bool(bvec2(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))))))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), (! (false)) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uvec2(subgroup_id * subgroup_size, 0u))), subgroup_id * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))).x > injectionSwitch.y)) || (_GLF_IDENTITY(false, bool(bool(false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(subgroup_size, 0u))))))))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & uvec2(1u, 1u)))), uint(uvec2(subgroup_size, 0u))))), clamp(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, _GLF_IDENTITY(0u, (0u) ^ 0u)), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, _GLF_IDENTITY(0u, (0u) / 1u)), uvec2(subgroup_size, 0u))))))))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY((uvec2(subgroup_size, 0u)), (_GLF_IDENTITY((uvec2(subgroup_size, 0u)), clamp(_GLF_IDENTITY((uvec2(subgroup_size, 0u)), ~ (~ ((uvec2(subgroup_size, 0u))))), _GLF_IDENTITY((uvec2(subgroup_size, 0u)), min((uvec2(subgroup_size, 0u)), (uvec2(subgroup_size, 0u)))), (uvec2(subgroup_size, 0u))))) | ((uvec2(subgroup_size, 0u)))) / (uvec2(1u, 1u) & uvec2(1u, 1u)))), uint(uvec2(subgroup_size, 0u))))), _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), 0u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(subgroup_size, 0u)))))))), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), 0u))))))))) - uvec2(0u, 0u)))), (uvec2(0u, 0u) ^ uvec2(0u, 0u)) + (_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u))))), (~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u)))))) - uvec2(0u, 0u)))))))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), _GLF_IDENTITY(clamp(~ (0u), ~ (0u), ~ (0u)), _GLF_IDENTITY(0u ^ (clamp(~ (0u), ~ (0u), ~ (0u))), (0u ^ (clamp(~ (0u), ~ (0u), ~ (0u)))) * 1u)))))) | (0u))), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & uvec2(1u, 1u)))), uint(uvec2(subgroup_size, 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), clamp((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), ((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)) - 0u)) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), 1u * ((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)))) | ((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)))))), 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(subgroup_size, 0u))))))))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / _GLF_IDENTITY((uvec2(1u, 1u) & uvec2(1u, 1u)), clamp(_GLF_IDENTITY((uvec2(1u, 1u) & uvec2(1u, 1u)), ~ (~ ((uvec2(1u, 1u) & uvec2(1u, 1u))))), (uvec2(1u, 1u) & uvec2(1u, 1u)), (uvec2(1u, 1u) & uvec2(1u, 1u)))))), uint(uvec2(subgroup_size, 0u))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY(max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), min(_GLF_IDENTITY(max(subgroup_size, subgroup_size), min(_GLF_IDENTITY(max(subgroup_size, subgroup_size), uint(uvec2(max(subgroup_size, subgroup_size), 0u))), max(subgroup_size, subgroup_size))), max(subgroup_size, subgroup_size))))) | (subgroup_size)), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), (clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uvec2(subgroup_size, 0u))))))))), (true ? _GLF_IDENTITY(max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), min(_GLF_IDENTITY(max(subgroup_size, subgroup_size), min(_GLF_IDENTITY(max(subgroup_size, subgroup_size), uint(uvec2(max(subgroup_size, subgroup_size), 0u))), max(subgroup_size, subgroup_size))), max(subgroup_size, subgroup_size))))) | (subgroup_size)), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), (clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uvec2(subgroup_size, 0u))))))))), uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(max(subgroup_size, subgroup_size), min(_GLF_IDENTITY(max(subgroup_size, subgroup_size), min(_GLF_IDENTITY(max(subgroup_size, subgroup_size), uint(uvec2(max(subgroup_size, subgroup_size), 0u))), max(subgroup_size, subgroup_size))), max(subgroup_size, subgroup_size))))) | (subgroup_size)), _GLF_IDENTITY(0u, _GLF_IDENTITY(clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u))), (clamp(0u, 0u, _GLF_IDENTITY(0u, (0u) | (0u)))) / ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), uvec2(subgroup_size, 0u))))))))))) : _GLF_FUZZED(uvec2(56552u, 24972u)))))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u), _GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u), (uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u)) / uvec2(1u, 1u)), 0u, 0u)), (_GLF_IDENTITY(uvec2(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u), (uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u)) / uvec2(1u, 1u)), 0u, 0u)), (uvec2(uvec4(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u), (uvec2(_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) >> 0u))), 0u)) + uvec2(0u, 0u))) / uvec2(1u, 1u)), 0u, 0u))) - uvec2(0u, 0u))) - uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (false ? _GLF_FUZZED(uvec2(174789u, 26873u)) : uvec2(subgroup_size, 0u)))) - uvec2(0u, 0u))) / (uvec2(1u, 1u) & uvec2(1u, 1u))), uvec2(uvec3(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & _GLF_IDENTITY(uvec2(1u, _GLF_IDENTITY(1u, (1u) | 0u)), uvec2(0u, 0u) ^ (_GLF_IDENTITY(uvec2(1u, 1u), (uvec2(1u, 1u)) | uvec2(0u, 0u)))))), 0u)))), uint(uvec2(subgroup_size, 0u)))))) / uint(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), max(uvec2(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), uint(uvec3((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size), 0u, 1u)))), _GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), uvec2(_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), 0u))))))))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (_GLF_IDENTITY(uvec2(1u, 1u) & uvec2(1u, 1u), uvec2(0u, 0u) ^ (uvec2(1u, 1u) & uvec2(1u, 1u)))))), uint(uvec2(subgroup_size, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), 0u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) * uvec2(1u, 1u))) ^ uvec2(0u, 0u))))))))), max(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) * uvec2(1u, 1u))) ^ uvec2(0u, 0u))))))))), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) * uvec2(1u, 1u))) ^ uvec2(0u, 0u)))))))))))))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & uvec2(1u, 1u))), uvec2(uvec3(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & uvec2(1u, 1u))), 0u)))), _GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), (_GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), min(_GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), 0u | (uint(uvec2(subgroup_size, 0u)))), uint(uvec2(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size)), 0u))))) >> (0u << _GLF_IDENTITY(uint(5u), uint(5u))))))), uint(uint(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size))) | (subgroup_size)), 0u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) * uvec2(1u, 1u))) ^ uvec2(0u, 0u))))))))), max(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) * uvec2(1u, 1u))) ^ uvec2(0u, 0u))))))))), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(subgroup_size, 0u), ~ (~ (_GLF_IDENTITY(uvec2(subgroup_size, 0u), min(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) * uvec2(1u, 1u))) ^ uvec2(0u, 0u)))))))))))))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & uvec2(1u, 1u))), uvec2(uvec3(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) / (uvec2(1u, 1u) & uvec2(1u, 1u))), 0u)))), _GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), (_GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), min(_GLF_IDENTITY(uint(uvec2(subgroup_size, 0u)), 0u | (uint(uvec2(subgroup_size, 0u)))), uint(uvec2(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size)), 0u))))) >> (0u << _GLF_IDENTITY(uint(5u), uint(5u))))))))))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), true && (subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (uvec2(subgroup_size, 0u)))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u))) << uvec2(_GLF_IDENTITY(0u, (0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, 1u * (4u))))) ^ _GLF_IDENTITY((0u), min((0u), (0u)))), 0u))), uint(uvec2(subgroup_size, 0u))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY(max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (uvec2(subgroup_size, 0u)))), (max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)) | (uvec2(subgroup_size, 0u)), min(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)) | (uvec2(subgroup_size, 0u)), uvec2(uvec3(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)) | (uvec2(subgroup_size, 0u)), 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)) | (uvec2(subgroup_size, 0u)), uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u)) + uvec2(0u, 0u)) | (uvec2(subgroup_size, 0u))))))))) - uvec2(0u, 0u)))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, _GLF_IDENTITY(0u, (0u) ^ 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 1u * (0u)), 0u))), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)), (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u))) << uvec2(0u, 0u))) | uvec2(0u, 0u))) << uvec2(0u, 0u))), uint(uvec2(subgroup_size, 0u)))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(1u, 1u) * (uvec2(subgroup_size, 0u))), max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0), (mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / vec2(1.0, 1.0)).x)))))) << _GLF_IDENTITY(0u, (0u) ^ 0u)), subgroup_size))))), 0u)))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << _GLF_IDENTITY(uvec2(0u, 0u), (true ? uvec2(0u, 0u) : _GLF_FUZZED((num_workgroup + (workgroup_size ^ uvec2(30778u, 194086u))))))) : _GLF_FUZZED(uvec2(146830u, 95647u))))) << uvec2(0u, 0u), (true ? (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u))) << uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u | (0u))))) : _GLF_FUZZED(uvec2(55323u, 190905u)))))), uint(uvec2(subgroup_size, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(1u, _GLF_IDENTITY(1u, (1u) ^ 0u)) * (uvec2(subgroup_size, 0u))), max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0), (mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / vec2(1.0, 1.0)).x)))))) << _GLF_IDENTITY(0u, (0u) ^ 0u)), subgroup_size))))), 0u)), (uvec2(0u, 0u) | (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)), (mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(7.3, 4.1)) : _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x2(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))).x)))))) << _GLF_IDENTITY(0u, (0u) ^ 0u)), subgroup_size))))), 0u), (uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0)), (mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / _GLF_IDENTITY(vec2(1.0, 1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(7.3, 4.1)) : _GLF_IDENTITY(vec2(1.0, 1.0), vec2(mat4x2(vec2(1.0, 1.0), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)))))).x)))))) << _GLF_IDENTITY(0u, (0u) ^ 0u)), subgroup_size))))), 0u)) + uvec2(0u, 0u)))) / (uvec2(1u, 1u) ^ uvec2(0u, 0u))))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)) : _GLF_FUZZED(uvec2(146830u, 95647u))))) << uvec2(0u, _GLF_IDENTITY(0u, min(0u, 0u))), (true ? (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u))) << uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u | (0u))))) : _GLF_FUZZED(uvec2(55323u, 190905u)))))), uint(uvec2(subgroup_size, 0u))))), (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(1u, 1u) * (uvec2(subgroup_size, 0u))), max(uvec2(subgroup_size, 0u), _GLF_IDENTITY(uvec2(subgroup_size, 0u), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(uvec3(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u))), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0), (mat4(injectionSwitch, 1.0, abs(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, sin(0.0), 1.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))) / vec2(1.0, 1.0)).x)))))) << _GLF_IDENTITY(0u, (0u) ^ 0u)), subgroup_size))))), 0u)))))), max(uint(_GLF_IDENTITY(uvec2(subgroup_size, 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u)) : _GLF_FUZZED(uvec2(146830u, 95647u))))) << uvec2(0u, 0u), (true ? (_GLF_IDENTITY(uvec2(subgroup_size, 0u), (uvec2(subgroup_size, 0u)) << uvec2(0u, 0u))) << uvec2(0u, _GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, 0u | (0u))))) : _GLF_FUZZED(uvec2(55323u, 190905u)))))), uint(uvec2(subgroup_size, 0u)))))) | 0u)) | 0u))))))
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (4) << 0), 64, 4);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   atomicStore(checker[virtual_gid], read, 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, 1.0, 0.0, tan(0.0), _GLF_IDENTITY(1.0, min(1.0, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false))), true))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), 1.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 1.0))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(50.82)), bool(false)), float(mat3x4(_GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(50.82)), bool(false)), (true ? _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(50.82)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(_GLF_IDENTITY(50.82, 0.0 + (50.82)))), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(50.82)), bool(false)))) : _GLF_FUZZED(atanh(7.5)))), 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))), 0.0, 1.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat4(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(50.82)), bool(false))), 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, 1.0 * _GLF_IDENTITY((1.0), mix(float(_GLF_FUZZED(6459.7704)), float((1.0)), bool(true))))), float(_GLF_FUZZED(-285.977)), bool(false))), 0.0)), 1.0, 1.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), _GLF_IDENTITY(abs(0.0), (abs(0.0)) / 1.0), log(1.0), 0.0, 0.0)), mix(float(float(mat4(float(mat3x2(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(50.82)), bool(false))), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, sin(0.0) + (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))) + sqrt(0.0)), 0.0)), 1.0, 0.0, 1.0, 0.0)), 1.0, 1.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), abs(0.0), _GLF_IDENTITY(log(1.0), (_GLF_IDENTITY(log(1.0), (log(1.0)) - 0.0)) / 1.0), 0.0, 0.0))), float(_GLF_IDENTITY(_GLF_FUZZED(-1.5), mix(float(_GLF_FUZZED(3458.3287)), float(_GLF_FUZZED(-1.5)), bool(true)))), bool(false)))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true, false)), false || (bool(bvec3(bool(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), true, false))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))), bool(bvec2(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))), true))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(2.3)), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(0.0 + _GLF_IDENTITY((injectionSwitch.x), min((injectionSwitch.x), (injectionSwitch.x))), max(0.0 + (injectionSwitch.x), 0.0 + (injectionSwitch.x))))), _GLF_IDENTITY(bool(true), (bool(true)) && true))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), max(_GLF_IDENTITY(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), min(vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))))), vec2(vec2(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))))))).y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED((-95.49 - -85.18)) : injectionSwitch.x)), float(float(injectionSwitch.x)))) - _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], clamp((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0], ((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[0]) / 1.0))), _GLF_FUZZED(-3.6)), vec2(_GLF_FUZZED(-2996.1824), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), bvec2(false, true))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(4.9)), bool(false))))), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, true, true))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y)))))) || false)) || false)))))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
