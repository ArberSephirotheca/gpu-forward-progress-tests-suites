#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, log(1.0), 1.0, 1.0, 0.0))) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat3x2(injectionSwitch.x, 1.0, log(1.0), 1.0, 1.0, 0.0))) > injectionSwitch.y)))) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), true))) || false))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(3184.6504)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), float(_GLF_FUZZED(87.57)), bool(false))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), bool(true)))), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), _GLF_IDENTITY(false, (false) || false), true)), false || (bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y), false, true))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), true && ((false)))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uvec4 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
  barrier();
 _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_size, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz = GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_size) ^ uvec3(0u, 0u, 0u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.x = subgroup_size;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y = GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))) || ((false))) || false), false, false)))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec4(bool(bvec4(false, false, false, true)), true, true, false)))), bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec4(bool(bvec4(false, false, false, true)), true, true, false)))), false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, true)), bool(bvec4(bool(bvec4(false, false, false, true)), true, true, false))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch))) + vec2(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat2x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0))), 1.0))), 0.0, 0.0)), 0.0)).x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x = subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) | (gl_NumWorkGroups)).x;
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.w = num_workgroup;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), _GLF_IDENTITY(false, bool(bvec2(false, true))))))), false || _GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(false, false, true), false))))), bool(bvec4((bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(false, false, true)), bvec3(bvec3(bvec3(bvec3(false, false, true)))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false)))), bvec3(bvec3(bvec3(bvec3(false, false, true)))))), false)))), false))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0))).x < injectionSwitch.y)), false, true))), (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bool(bvec4((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(false, false, true), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(false, false, true), false))), false)))))), bvec3(bvec4(bvec3(false, false, true), false))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))), false, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bool(bvec4((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(false, false, true), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(false, false, true), false))), false)))))), bvec3(bvec4(bvec3(false, false, true), false))))), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))), false, true))), (_GLF_IDENTITY((bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), false))))), bool(bvec4((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(false, false, true), false)), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec4(bvec3(false, false, true), _GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)))))), bvec3(bvec4(bvec3(bvec3(bvec4(bvec3(false, false, true), false))), false)))))), bvec3(bvec4(bvec3(false, false, true), false))))), _GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))), ! (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec2(bool(bvec3((injectionSwitch.x < injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true))))))))))), false, true)))) || false))))) || false)), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))), false))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, true))), false, true), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(true && (! (false)), false || (_GLF_IDENTITY(true && (! (false)), (true && (! (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ! (! ((false) || false)))), true && (! (_GLF_IDENTITY((false) || false, ! (! ((false) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true)))))) || (bool(false))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(false), false || (bool(false))), true, true)))))))))))))))), ((false) || false) && true)) && _GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bool(false))), true, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (false))))), bool(bvec3(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (false))))), false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.z = workgroup_size;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false)), (bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))) || false)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(-7939.9638, -8.0, 12.84, -7311.9908).q)), _GLF_IDENTITY(bool(false), ! (! (bool(false))))))))) && true))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0)))))), (vec3(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0, round(length(normalize(cos(vec3(0.0, 0.0, 0.0))))))) - vec3(0.0, 0.0, 0.0)))))), false, true)))))
  barrier();
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_id, 1u * (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_id, ~ _GLF_IDENTITY((~ (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_id)), (_GLF_IDENTITY((~ (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_id)), (false ? _GLF_FUZZED(subgroup_id) : (~ (GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.z = workgroup_id))))) << 0u))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), true, false))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz) << uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup) | (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup))) + uvec4(0u, 0u, 0u, 0u)).xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz) << uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec3(0u, 0u, 0u)), (false ? _GLF_FUZZED(num_workgroup) : uint(uvec3(0u, 0u, 0u))))), 0u, 0u))) << uvec3(0u, 0u, _GLF_IDENTITY(0u, 0u ^ (0u))))) | (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz)).z * GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.z;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.y = workgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.y = GLF_merged3_0_1_13_1_1_14_2_1_12subgroup_sizeworkgroup_baseworkgroup_id.y;
 uint subgroup_base = subgroup_id * GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x = subgroup_base, (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.1) : injectionSwitch.x)))) < injectionSwitch.y)) ? GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x = subgroup_base : _GLF_FUZZED(subgroup_base))), (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x = subgroup_base, (_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5.1) : injectionSwitch.x)))) < injectionSwitch.y)) ? GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x = subgroup_base : _GLF_FUZZED(subgroup_base)))) >> 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x, max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x, min(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, _GLF_IDENTITY((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz), ((GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz)) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(7u), uvec3(7u)))) | (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz)).x, (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz) - uvec3(0u, _GLF_IDENTITY(0u, ~ (~ (0u))), 0u)).x) - 0u), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x)) + GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.y + GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz.x + ((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, min(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, (uvec4(0u, 0u, 0u, 0u) & uvec4(65349u, 40321u, 67586u, 43116u)) ^ (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), clamp(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, min(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, (uvec4(0u, 0u, 0u, 0u) & uvec4(65349u, 40321u, _GLF_IDENTITY(67586u, (67586u) | (67586u)), 43116u)) ^ (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, min(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, (uvec4(0u, 0u, 0u, 0u) & uvec4(65349u, 40321u, 67586u, 43116u)) ^ (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, min(_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup, (uvec4(0u, 0u, 0u, 0u) & uvec4(65349u, 40321u, 67586u, 43116u)) ^ (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)), GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup)))).xyz.y + _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, max(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, _GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz) | (_GLF_IDENTITY(GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz, uvec3(0u, 0u, 0u) ^ (GLF_merged2_0_3_73_3_1_13GLF_merged3_0_1_13_1_1_14_2_1_14subgroup_baseworkgroup_baseworkgroup_sizenum_workgroup.xyz)))))).x + ((_GLF_IDENTITY(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1, max(GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1, GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x + 1))) % GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.y) : _GLF_FUZZED(workgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / sqrt(1.0)) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if((GLF_merged2_0_1_17_1_1_13subgroup_local_idsubgroup_size.x % 2) == 0)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(_GLF_IDENTITY(2079.3948, mix(float(_GLF_FUZZED(83.19)), float(2079.3948), bool(true))))), float(float(_GLF_FUZZED(-2.5))), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), 1.0, 1.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))))), 0.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(1.0, 0.0))), sin(0.0), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0), mat3(1.0) * (mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), float(mat2(_GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), _GLF_IDENTITY(1.0, (1.0) + 0.0), 1.0, 0.0))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))), _GLF_IDENTITY(float(_GLF_FUZZED(-2.5)), mix(float(_GLF_FUZZED(2079.3948)), float(float(_GLF_FUZZED(-2.5))), bool(true))))), 0.0, abs(1.0), 1.0, _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), (false ? _GLF_FUZZED(vec2(1.6, 6.4)) : vec2(1.0, 0.0))), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), sin(0.0), 0.0, abs(1.0), 0.0, 0.0, 1.0, 1.0))))), bool(false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_ONE(1.0, injectionSwitch.y))), abs(1.0)), mat2(mat4(mat2(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(1.0))))))))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))), true && (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec2((! (false)), false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(1.0)), mat2(mat4(mat2(injectionSwitch.y, 0.0, _GLF_ONE(1.0, injectionSwitch.y), abs(1.0))))))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && true))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.2, -6748.9641)) : injectionSwitch)).x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_IDENTITY(true, _GLF_IDENTITY((true), ((true)) && true) && true)));
   read = _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), 1u * (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), clamp(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), ((virtual_gid)) << 0u) | (virtual_gid)), _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))))))], 4, 64, 2), min(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY((virtual_gid), uint(uint((virtual_gid)))))))))], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], 4, 64, 2))), min(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, _GLF_IDENTITY((virtual_gid), min((virtual_gid), (virtual_gid))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid))) ^ 0u)))) / 1u)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid))) ^ 0u)))) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid))) ^ 0u)))) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), min(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid)), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) / 1u) : _GLF_IDENTITY(virtual_gid, clamp(_GLF_IDENTITY(virtual_gid, ~ (~ (virtual_gid))), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), virtual_gid))) ^ 0u)))) / 1u)))))))))))], 4, 64, 2), min(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)))), clamp(virtual_gid, virtual_gid, virtual_gid))) | (virtual_gid))))))], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))) | (virtual_gid))) * 1u))))), min(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u))))), _GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) * 1u)))))))], 4, 64, 2))), _GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_id))), min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u), (virtual_gid) | (virtual_gid)))))), uint(uvec3(_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_id))), min(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) << 0u), (virtual_gid) | (virtual_gid)))))), 0u, 1u)))], 4, 64, 2), min(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), min(_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid)), virtual_gid))))))))], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], 4, 64, 2))), (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], 4, 64, 2), min(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], 4, _GLF_IDENTITY(64, 1 * (64)), 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) - 0u), min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, 1 * (4)))), 64, 2)))) | (_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), (_GLF_IDENTITY(2, (2) | 0)) >> 0)), min(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))))], 4, 64, 2), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, _GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | _GLF_IDENTITY((virtual_gid), (false ? _GLF_FUZZED(next_virtual_gid) : (virtual_gid))))))))], 4, 64, 2)))))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (_GLF_IDENTITY(false, (false) && true))) || _GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))), ! (! (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false))))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))))))))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], 4, 64, 2);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), exp(0.0), _GLF_IDENTITY(dot(vec4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(sqrt(0.0), 1.0, 1.0, 0.0)), dot(vec4(1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), vec4(sqrt(0.0), 1.0, 1.0, 0.0))), 1.0))) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0)), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5409.9591)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0)))))).x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true)))))) || (false)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0)), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5409.9591)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0)))))).x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true)))))) || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(injectionSwitch, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0)), mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat3(injectionSwitch, 0.0, round(length(normalize(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-5409.9591)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0)))), 1.0, 0.0, 0.0, 1.0, sin(0.0)))))).x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false)))), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), false, true)))))) || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
