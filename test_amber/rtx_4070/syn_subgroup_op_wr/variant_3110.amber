#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, (false) || false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, false || (false)))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true))))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).y))))
    return;
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) >> (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(35674) : 1))), int(1)))), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 ^ (_GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3)))), _GLF_IDENTITY(int(3), int(3)))) : _GLF_FUZZED(23)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (-95467 & 0)), _injected_loop_counter, _injected_loop_counter)))) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < _GLF_IDENTITY(1, clamp(1, 1, 1))))), true, _GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1))), true))), false))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_GLF_IDENTITY(max(_injected_loop_counter, _injected_loop_counter), (max(_injected_loop_counter, _injected_loop_counter)) ^ 0)) : _injected_loop_counter)) < 1))), true, false)))))), bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, _GLF_IDENTITY(! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1)), ! (! (! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1)))))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1, ! (! (_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(max(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter)) < 1))), true, false))))))))))))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, true && (false))))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))) && true)))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   else
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, true, true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(false, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(false, true, true))))))))))))))
            return;
           return;
          }
         barrier();
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          break;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_WRAPPED_IF_FALSE(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), true, false, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), (! (false)) && true)) || false)))) || false)))))))), false || _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (bool(_GLF_IDENTITY(false, (false) || false))))))), false || (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (bool(_GLF_IDENTITY(false, (false) || false))))))), ((bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), ! (! (bool(_GLF_IDENTITY(false, (false) || false)))))))) && true))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), false || (bool(bvec3(false, false, true))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), max(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), _GLF_IDENTITY(min(gl_NumWorkGroups.x, gl_NumWorkGroups.x), (min(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) + 0u))) - 0u)))), gl_NumWorkGroups.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(min(gl_NumWorkGroups, gl_NumWorkGroups), (min(gl_NumWorkGroups, gl_NumWorkGroups)) >> uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))).x, (gl_NumWorkGroups.x) >> 0u)));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, gl_WorkGroupSize.x)))) : _GLF_FUZZED(_GLF_IDENTITY(142295u, min(142295u, 142295u))))), (_GLF_IDENTITY(gl_WorkGroupSize.x, (true ? _GLF_IDENTITY(gl_WorkGroupSize.x, max(gl_WorkGroupSize.x, _GLF_IDENTITY(gl_WorkGroupSize.x, min(_GLF_IDENTITY(gl_WorkGroupSize, max(gl_WorkGroupSize, gl_WorkGroupSize)).x, gl_WorkGroupSize.x)))) : _GLF_FUZZED(_GLF_IDENTITY(142295u, min(142295u, 142295u)))))) >> 0u)) << 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! _GLF_IDENTITY((false), ! (! ((false))))))))))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      break;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true))));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, (0) * 1))) ^ _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, (1) | (1)), _GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), (1) | _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-59183))))))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(7, 0 | (7)), 1, 1), (false ? _GLF_FUZZED(ivec3(24294, -49273, 7985)) : ivec3(_GLF_IDENTITY(7, 0 | (7)), 1, 1)))))), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (_GLF_IDENTITY(subgroup_id * subgroup_size, (true ? subgroup_id * subgroup_size : _GLF_FUZZED(subgroup_id)))));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, max(workgroup_base + subgroup_base, workgroup_base + subgroup_base)) + (_GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(1, 0 + (1))), 0 ^ (min(1, _GLF_IDENTITY(1, 0 + (1)))))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))))), min((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(int(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (int(1)) << 0), _GLF_IDENTITY(int(1), (int(1)) + 0), int(1)))), 0 + (int(int(1)))))) | (1)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (_GLF_IDENTITY(int(ivec3(1, 1, 1)), int(int(_GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), int(ivec4(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), 1, 0, 1))), 1, 1, 0))), max(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (_GLF_IDENTITY(int(ivec3(1, 1, 1)), int(int(_GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), int(ivec4(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), 1, 0, 1))), 1, 1, 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (_GLF_IDENTITY(int(ivec3(1, 1, 1)), int(int(_GLF_IDENTITY(int(ivec3(1, 1, 1)), clamp(int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)), int(ivec3(1, 1, 1)))))))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), int(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), int(ivec4(_GLF_IDENTITY(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 + (1)))))))), (int(ivec3(1, 1, 1))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))), 1, 0, 1))), 1, 1, 0))))))), (subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | 0)), 0 | (min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | 0)))))))), (ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | 0)), 0 | (min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | 0))))))))) | (ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, _GLF_IDENTITY(min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | 0)), 0 | (min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (_GLF_IDENTITY(1, 0 + (1))) | 0))))))))))), int(ivec2(int(ivec3(1, 1, _GLF_IDENTITY(1, 0 ^ (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(_GLF_IDENTITY(1, 0 + _GLF_IDENTITY((1), ((1)) / 1)), (_GLF_IDENTITY(1, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)) + (1))) | 0))))))), 1))), (int(ivec3(1, 1, _GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (false ? _GLF_FUZZED(46657) : 1)) : _GLF_FUZZED(82992)))))) | (int(ivec3(1, 1, _GLF_IDENTITY(1, (1) - 0))))))))), min((subgroup_local_id + 1), (subgroup_local_id + 1)))) >> 0u) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 uint read = _GLF_IDENTITY(0, min(0, 0));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (min(injectionSwitch, injectionSwitch)) / vec2(1.0, 1.0))).y))), _GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (false || (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))), (! (_GLF_IDENTITY(false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) && true))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), false || (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))), (! ((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))) || false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), true && (! (_GLF_IDENTITY(false, true && (false))))))), (injectionSwitch.x > injectionSwitch.y))))) || false)))), true))), false, true)), bool(bvec4(bool(bvec3(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true))), false, true)), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)), (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))), bool(bvec2(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, true))))), true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), true, true)))))
    barrier();
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_DEAD(false)) && true))
    {
     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)) && _GLF_IDENTITY(true, bool(bvec2(true, false)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))))))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true))))), ! (! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))))))) || false))) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, (0) >> 0))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), true, false)))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), true, false)))), (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), true, false))))) && true)))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(1), _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))) | (~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))))), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))) | (~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))))))), _GLF_IDENTITY(1 * (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))) | (~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))))))), (1 * (~ (_GLF_IDENTITY(~ (~ (_GLF_IDENTITY(4, ~ (~ (4))))), (~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))) | (~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))))))) ^ 0))))), max(4, 4)), 0, 0), _GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))), max(4, 4)), _GLF_IDENTITY(0, (0) | 0), 0))), ivec3(ivec4(_GLF_IDENTITY(ivec3(ivec3(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))), max(4, 4)), _GLF_IDENTITY(0, (0) | 0), 0))), max(ivec3(ivec3(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))), max(4, 4)), _GLF_IDENTITY(0, (0) | 0), 0))), ivec3(ivec3(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))), max(4, 4)), _GLF_IDENTITY(0, (0) | 0), 0))))), 0)))), (ivec3(_GLF_IDENTITY(4, max(4, 4)), 0, 0)) - ivec3(0, 0, 0)))), _GLF_IDENTITY(64, 0 | _GLF_IDENTITY((64), 0 + (_GLF_IDENTITY((64), 0 | ((64)))))), 4);
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) && true)), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && (false))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))).x > injectionSwitch.y))))
    barrier();
  }
 if((subgroup_local_id % _GLF_IDENTITY(2, 1 * (2))) == _GLF_IDENTITY(0, (0) >> 0))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_FUZZED(3.7) : _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))))
    {
     subgroupAll(false);
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), max(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))) * vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0)))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), max(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))), (_GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), max(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), mix(vec2((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[0], _GLF_FUZZED((-9.6 + 37.02))), vec2(_GLF_FUZZED(-5.6), _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1], clamp((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1], _GLF_IDENTITY((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1], clamp((vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1], (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1], (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1])), (vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)))[1]))), bvec2(false, true)))))) * vec2(1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))), vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 1.0, 0.0)))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 0.0, 0.0))))).x > injectionSwitch.y)))) && true))
      {
       for(int _injected_loop_counter = (47077 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-1.5)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(_GLF_FUZZED(8.3)), bool(false))))))))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         do
          {
           return;
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               barrier();
              }
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))))).y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))))).y))), bool(bvec4(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))))).y))), false, false, false))))))))), (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), max(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(1.0, 1.0) * ((injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(mat2(mat3(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3x2(-6.4, 585.402, -0.2, -494.523, 66.65, 5877.9793))))))), (mat2(mat3(_GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(mat3x2(-6.4, 585.402, -0.2, -494.523, 66.65, 5877.9793)))))))) * mat2(1.0))), (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-762.174, 386.184))))) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-9.8), _GLF_FUZZED(-7.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true)))) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, max(1.0, 1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-6.3, -46.34)) : (injectionSwitch))) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))))).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2182.9095)), bool(false)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-22.50, 383.346, 6.8, -9.0)))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), mix(vec2(_GLF_FUZZED(1.8), _GLF_FUZZED(-879.404)), vec2((vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2182.9095)), bool(false)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-22.50, 383.346, 6.8, -9.0)))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))[0], (vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-2182.9095)), bool(false)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (true ? (injectionSwitch) * mat2(1.0) : _GLF_FUZZED(injectionSwitch))), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-22.50, 383.346, 6.8, -9.0)))))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))[1]), bvec2(true, true))), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(refract(injectionSwitch, vec2(-1.0, -0.8), 6721.1149))))) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch), (_GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_FUZZED(vec2(2.7, 4.5))))) + vec2(0.0, 0.0)) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), tan(0.0), 1.0)))))).y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), transpose(transpose(_GLF_IDENTITY(transpose(mat2(1.0)), (false ? _GLF_FUZZED(mat2(-72.11, 605.819, -7.0, -188.292)) : transpose(mat2(1.0))))))))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch))))) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) * mat2(1.0)), _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_IDENTITY(1.0, 0.0 + (1.0))), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(float(1.0))), 1.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)))))).y))), bool(bvec4(bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), _GLF_IDENTITY(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.5), _GLF_FUZZED(4.8)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), injectionSwitch, injectionSwitch))) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), _GLF_IDENTITY(max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))), (true ? max(vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0)), vec2(mat4x3(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))), (injectionSwitch) * mat2(1.0))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, tan(0.0), 1.0))) : _GLF_FUZZED(tanh(injectionSwitch))))))).y))), false, false, false)))))))))) && true));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) >> 0))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, (_GLF_IDENTITY(64, clamp(64, 64, 64))) * 1)) ^ 0), _GLF_IDENTITY(2, min(2, 2)));
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false), true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    return;
  }
 else
  {
   subgroupAll(false);
   read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, int(ivec2(4, 1))), 64, 2);
   if(_GLF_DEAD(false))
    barrier();
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(237.230)), float(injectionSwitch.x), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) > injectionSwitch.y, false, true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false))), (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
        return;
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
