#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 uint _f0;
 ivec4 _f1;
} ;

struct _GLF_struct_9 {
 _GLF_struct_8 _f0;
 bool _f1;
} ;

struct _GLF_struct_7 {
 mat4x3 _f0;
 mat3x4 _f1;
 ivec3 _f2;
 ivec4 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_4 {
 uint _f0;
 ivec3 _f1;
 mat3 _f2;
 bvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_6 {
 float _f0;
 _GLF_struct_4 _f1;
 float _f2;
 ivec2 _f3;
 _GLF_struct_5 _f4;
 uvec4 _f5;
 uint subgroup_local_id;
} ;

struct _GLF_struct_3 {
 mat3x4 _f0;
} ;

struct _GLF_struct_1 {
 uint _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 bvec4 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_2 {
 bvec4 _f0;
 _GLF_struct_0 _f1;
 _GLF_struct_1 _f2;
} ;

struct _GLF_struct_10 {
 _GLF_struct_2 _f0;
 _GLF_struct_3 _f1;
 bool _f2;
 _GLF_struct_6 _f3;
 _GLF_struct_7 _f4;
 _GLF_struct_9 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, 1)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 0 + (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))), _GLF_IDENTITY(int(int(0)), (int(int(0))) >> 0))))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), (int(8)) ^ 0), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         continue;
        }
       continue;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))) || false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(5.8)), bool(false))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9576.4332)), bool(false))), 1.0, 1.0, abs(0.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), ((1.0)) - 0.0) * 1.0), abs(abs(0.0)), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0))), mix(float(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)))), float(_GLF_FUZZED(-39.15)), bool(false))), 1.0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(mat2x4(max(injectionSwitch, injectionSwitch), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))))).x > injectionSwitch.y)))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), tan(0.0), 0.0, abs(abs(1.0))))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))) || false), (_GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(mat2x4(max(injectionSwitch, injectionSwitch), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))))).x > injectionSwitch.y)))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), tan(0.0), 0.0, abs(abs(1.0))))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))) || false), bool(bool(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), vec2(mat2x4(max(injectionSwitch, injectionSwitch), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))))).x > injectionSwitch.y)))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), tan(0.0), 0.0, abs(abs(1.0))))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))) || false))))) && true), (! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.2)), vec2(_GLF_FUZZED(-48.89), (injectionSwitch)[1]), bvec2(false, true)))[0], injectionSwitch[1])), injectionSwitch), vec2(mat2x4(max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))), 1.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))))).x > injectionSwitch.y)))))), ((! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)) || false)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), tan(0.0), 0.0, abs(abs(1.0))))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, 1.0, 0.0, determinant(mat2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 0.0)), tan(0.0), 0.0, abs(abs(1.0))))), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))) || false)) || false))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false))))) && true), false, true))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, false)), ! (! (bool(bvec3(_GLF_DEAD(false), true, false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           else
            {
            }
           barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true), true, true)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(0, 0)) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, ~ (~ (3)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((23.85 / 84.54))), bool(false)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 1 * (int(1)))) | 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(float(subgroup_size))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z = subgroup_size;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
  }
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_2(bvec4(true), _GLF_struct_0(mat2(1.0), bvec4(true), mat3(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(uintBitsToFloat(_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))))), 1.0)))), _GLF_struct_1(1u, mat3x2(1.0))), _GLF_struct_3(mat3x4(1.0)), true, _GLF_struct_6(1.0, _GLF_struct_4(1u, ivec3(1), mat3(1.0), bvec3(true), mat4x2(1.0)), 1.0, ivec2(_GLF_IDENTITY(1, max(1, 1))), _GLF_struct_5(mat4x3(1.0), mat2x3(1.0)), uvec4(1u), gl_SubgroupInvocationID), _GLF_struct_7(mat4x3(1.0), mat3x4(1.0), ivec3(1), ivec4(1), vec2(_GLF_IDENTITY(1.0, (1.0) / 1.0))), _GLF_struct_9(_GLF_struct_8(1u, ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) ? _GLF_FUZZED(-97471) : 1)))), _GLF_IDENTITY(true, (true) && true)));
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
     return;
    }
  }
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = _GLF_struct_replacement_10._f3.subgroup_local_id, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y = _GLF_struct_replacement_10._f3.subgroup_local_id) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))), (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))) && true))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(bitfieldReverse(uvec3(155342u, 89997u, 184050u))))).x;
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(16430) : 0)), (_GLF_IDENTITY(0, (false ? _GLF_FUZZED(16430) : 0))) / 1)), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (false ? _GLF_FUZZED(16430) : 0))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     continue;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
    return;
   if(_GLF_DEAD(false))
    break;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) * uvec3(1u, 1u, 1u))) / uvec3(1u, 1u, 1u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w = workgroup_base;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z) | 0u), (true ? _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z) | 0u), (subgroup_id * _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z) | 0u)) << 0u) : _GLF_FUZZED(uint(-1.2))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0), _GLF_IDENTITY(vec3(0.0, 1.0, 0.0), vec3(vec3(vec3(0.0, 1.0, 0.0))))), dot(vec3(0.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))), _GLF_IDENTITY(0.0, 0.0 + (0.0))), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0), vec3(0.0, 1.0, 0.0))), (true ? (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x) / _GLF_IDENTITY(dot(vec3(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(76.69)))), vec3(0.0, 1.0, 0.0)), (dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))) - 0.0), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-14.78)), bool(false)))) * 1.0)))), 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0), vec3(0.0, 1.0, 0.0))) : _GLF_FUZZED(-2679.0050)))) < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)), false || (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false))))), (bool(_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)), false || (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)))))) && true)))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w + subgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y, clamp(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))), false || (bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))))), true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w, max(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w, GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.w)) + subgroup_base + ((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y + 1) % _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z, (GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.z) * 1u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY(6206, 0 | (6206)) & 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter))))) < ((int(_GLF_ONE(1.0, injectionSwitch.y)) ^ 0) & _GLF_IDENTITY(1, (1) | (1)))); _injected_loop_counter ++)
    {
     GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x = next_virtual_gid;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(((0 | 0) | 0), int(int(((0 | 0) | 0))))); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                barrier();
               return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) / int(_GLF_ONE(1.0, injectionSwitch.y))))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY((false ? _GLF_FUZZED(-27584) : _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (28479 & 0) | (_GLF_IDENTITY(int(2), int(2)))), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(2)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(2), int(2)), 1)), (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))) ? int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), int(2)), 1), min(ivec2(_GLF_IDENTITY(int(2), int(2)), 1), ivec2(_GLF_IDENTITY(int(2), int(2)), 1)))) : _GLF_FUZZED(-45158)))), _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(3), int(3)), min((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))), ~ (~ (max(2, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))))))))), int(_GLF_IDENTITY(2, max(2, 2))))) >> _GLF_IDENTITY(int(3), int(3)), (0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(3), int(3))))), ((false ? _GLF_FUZZED(-27584) : _GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (28479 & 0) | (_GLF_IDENTITY(int(2), int(2)))), clamp(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) - int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(2)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(2), int(2)), 1)), (_GLF_IDENTITY(true, bool(bvec4(true, true, true, false))) ? int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(int(2), int(2)), 1), min(ivec2(_GLF_IDENTITY(int(2), int(2)), 1), ivec2(_GLF_IDENTITY(int(2), int(2)), 1)))) : _GLF_FUZZED(-45158)))), _GLF_IDENTITY(int(2), int(2))))) >> _GLF_IDENTITY(int(3), int(3)), min((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, _GLF_IDENTITY(max(2, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter)))), ~ (~ (max(2, _GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED(_injected_loop_counter))))))))), int(_GLF_IDENTITY(2, max(2, 2))))) >> _GLF_IDENTITY(int(3), int(3)), (0 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(3), int(3)))))) / 1)))); _GLF_IDENTITY(_injected_loop_counter --, (0 >> _GLF_IDENTITY(int(5), int(5))) ^ (_injected_loop_counter --)))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), ! (! (! (false))))))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), false, true, false)), ! (! (bool(bvec4(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), false, true, false)))))), true && (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))))), true))))), (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), min(_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(0.0, 0.0) + (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))), _GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), max(false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), clamp(_GLF_IDENTITY(_GLF_FUZZED(vec2(-5.9, -2.5)), vec2(0.0, 0.0) + (_GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(-5.9, -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))), _GLF_FUZZED(vec2(_GLF_IDENTITY(-5.9, mix(float(_GLF_IDENTITY(-5.9, clamp(-5.9, -5.9, _GLF_IDENTITY(-5.9, (true ? -5.9 : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(vec3(-387.111, -1653.2306, -3.9).b)), bool(false))), -2.5)), _GLF_FUZZED(vec2(-5.9, -2.5)))) : _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))))).x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(float(_GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), max(float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat4x2(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))))), mix(float(float(mat4x2(injectionSwitch.x, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - log(1.0)), 0.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(-12.05)), bool(false)))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), determinant(mat3(0.0, 0.0, 0.0, determinant(mat3(0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), 0.0, 0.0, 1.0, 1.0, sqrt(0.0))), 1.0, 0.0, 0.0, 0.0, 0.0, exp(sqrt(0.0)), 1.0, 1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))), round(length(normalize(1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9.2) : 0.0)), 0.0)), 1.0, 0.0)))), mat2x4(_GLF_IDENTITY(mat3x4(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3515.2842))), 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))), round(length(normalize(1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / 1.0)), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), mat4(1.0) * (mat2x4(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0)))))))), clamp(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0)))))))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0)))))))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0)))))))), clamp(float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0)))))))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0)))))))), float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, abs(determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))), 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1.4), _GLF_FUZZED(-1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))), false)))))))))).x, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-47.02)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_IDENTITY(_GLF_FUZZED(-46.90), (_GLF_IDENTITY(_GLF_FUZZED(-46.90), (true ? _GLF_FUZZED(-46.90) : _GLF_FUZZED(7268.8666)))) / 1.0))))))))))))), round(length(normalize(1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 0.0), _GLF_IDENTITY(mat2(mat2x3(mat2(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 0.0))), mat2(1.0) * (mat2(mat2x3(mat2(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0, 0.0)))))))))))), mat3x4(mat4(mat3x4(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0), transpose(transpose(mat3x4(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY(_GLF_IDENTITY(float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 1.0)), (float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), min(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0))))), 0.0, 1.0, 1.0, 1.0, 1.0))) / _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, sqrt(0.0))), dot(vec2(1.0, 0.0), vec2(1.0, sqrt(0.0))))), clamp(float(mat4x3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-475.381) : 0.0)), 0.0)), 0.0)), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), _GLF_IDENTITY(vec3(0.0, 0.0, 0.0), max(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0)))), dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), max(_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), min(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 1.0))))), vec3(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 0.0, 1.0, 1.0, 1.0, 1.0)), float(mat4x3(1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)) : _GLF_FUZZED(4.3))), 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 1.0, 1.0, 1.0))))), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)))))), round(length(normalize(1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)))), mat4(1.0) * (mat2x4(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat3x4(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 0.0, 1.0, sin(0.0), sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0)))), transpose(transpose(mat3x4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(1.0, min(1.0, 1.0)) * (injectionSwitch[1])))).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x, (false ? _GLF_FUZZED(-7.1) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x, 0.0 + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x)))))), 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, float(mat4x2(0.0, 1.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0))), 1.0))), 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-9486.0488)), bool(false))))), 0.0, 0.0)))))), round(_GLF_IDENTITY(length(normalize(1.0)), (length(normalize(1.0))) / 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), dot(vec3(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 1.0, 0.0), vec3(0.0, 1.0, 0.0)))))))))))))) > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                    return;
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), true, false), bvec3(bvec3(bvec3((false), true, false)))))), false || ((false))) || false)));
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
          }
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 1.0, 0.0)))))))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
            {
            }
           else
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) | (_GLF_IDENTITY(int(1), (int(1)) / 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, 1 * (0)), 0, 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), int(ivec2(int(1), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) | 0)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     return;
                    }
                  }
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              break;
            }
          }
         break;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint read = 0;
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true, false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true, ((_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))) && true)))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     continue;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     break;
    }
   atomicStore(buf[GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.x], uint(_GLF_IDENTITY(1, clamp(1, 1, 1))), 4, 64, _GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, (4) >> 0), 4)));
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(degrees(5.6)) : injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false) || (injectionSwitch.x > injectionSwitch.y))))))
                return;
              }
             barrier();
            }
          }
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, false))), true)))) || false)))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if((GLF_merged4_0_1_16_1_1_17_2_1_13_3_1_14next_virtual_gidsubgroup_local_idsubgroup_sizeworkgroup_base.y % 2) == 0)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
            break;
           break;
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool(false || (false)), bool(bvec4(bool(false || (false)), false, false, false))))))))
        break;
       if(_GLF_DEAD(false))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), ~ (~ (int(4))))))); _injected_loop_counter --)
        {
         subgroupAll(false);
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY((1 ^ 1), ((1 ^ 1)) | 0)) - 0), false || (_injected_loop_counter > (1 ^ 1)))); _injected_loop_counter --)
        {
         _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[_GLF_IDENTITY(virtual_gid, clamp(virtual_gid, _GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))) ^ 0u), virtual_gid))], 4, 64, 2)) ^ 0u), (read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (atomicLoad(buf[virtual_gid], 4, 64, 2)) ^ 0u)) / 1u);
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             return;
            }
          }
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             barrier();
            }
          }
         else
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       for(int _injected_loop_counter = (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
                      return;
                     if(_GLF_DEAD(false))
                      barrier();
                     break;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   do
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       return;
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                  continue;
                }
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         do
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         subgroupAll(false);
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 1 * (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         return;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) > ((0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), (false ? _GLF_FUZZED(_injected_loop_counter) : int(1))), clamp(_GLF_IDENTITY(int(1), min(int(1), int(1))), int(1), _GLF_IDENTITY(int(1), (int(1)) - 0))), int(1))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
      {
       read = atomicLoad(buf[virtual_gid], 4, 64, 2);
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, false)))))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0))); _injected_loop_counter --)
  {
   do
    {
     do
      {
       do
        {
         subgroupBarrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       atomicStore(checker[virtual_gid], read, 4, 64, 4);
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
