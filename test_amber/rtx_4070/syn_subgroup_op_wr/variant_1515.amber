#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))), ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, 0.0, tan(0.0), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1374.8147)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), exp(0.0), 1.0, cos(0.0))), max(float(mat4(injectionSwitch.x, 0.0, tan(0.0), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0, cos(0.0))), float(mat4(injectionSwitch.x, 0.0, tan(0.0), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-93.90)), bool(false))), 1.0, exp(0.0), 1.0, cos(0.0)))))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), length(0.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-215.797)), float(1.0), bool(true))), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0), (mat3x2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)), length(0.0), 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0)) * mat3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(float(1.0), mix(float(_GLF_FUZZED(9.5)), float(_GLF_IDENTITY(float(1.0), min(float(1.0), float(1.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))).x, float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1])), injectionSwitch)), length(0.0), 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0), (mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])), injectionSwitch)), _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])), injectionSwitch)), 0.0, 1.0)), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])), injectionSwitch)), 0.0, 1.0))) - vec2(0.0, 0.0))), length(0.0), 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0)) * mat3(1.0)))).x, mix(float(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))[1])), injectionSwitch)), length(0.0), 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0), (mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])), injectionSwitch)), _GLF_IDENTITY(vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])), injectionSwitch)), 0.0, 1.0)), (vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (1) | 0)])), injectionSwitch)), 0.0, 1.0))) - vec2(0.0, 0.0))), length(0.0), 1.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0)) * mat3(1.0)))).x), float(_GLF_FUZZED(-389.374)), bool(false))), sqrt(exp(0.0))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), bool(bvec2(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)), false))))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED(-497.493)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(-8.8), _GLF_FUZZED(-497.493)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch)))[1]), bvec2(true, true)))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))), ! (! ((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9.2)), bool(false)))) * (injectionSwitch))) / vec2(1.0, 1.0)).x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch), vec2(mat2x4(clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch), 0.0, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 0.0, 1.0)))) : _GLF_FUZZED(vec2(-8.0, 0.1)))).y)), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))) && true))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-8.0, 0.1)))).y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-8.0, _GLF_IDENTITY(0.1, clamp(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(15.07)), float(0.1), bool(true))), 0.1, 0.1)))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)) : _GLF_FUZZED(vec2(-8.0, _GLF_IDENTITY(0.1, clamp(_GLF_IDENTITY(0.1, mix(float(_GLF_FUZZED(15.07)), float(0.1), bool(true))), 0.1, 0.1)))))).y)) || false)), true))))) && true)))))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false)), ! (! (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), bvec2(bvec3(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false)))), true)))))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))))), true, true, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true, true, _GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (_GLF_IDENTITY(true, ! (! (true))))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))))), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)), true && (_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true, true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))))), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true, true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))))), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)), ! _GLF_IDENTITY((! (bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true, true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))))), true && (bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true)))), false || ((! (bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))), true, true, _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), injectionSwitch.y)))))), true && (bool(bvec4(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, true))))))), true, false, false))))))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4x3(injectionSwitch, sqrt(1.0), 0.0, 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), max(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), vec4(mat4x2(normalize(vec4(1.0, 1.0, 1.0, 1.0)), abs(tan(0.0)), 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)))))))))), (mat4x3(injectionSwitch, sqrt(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), sqrt(0.0), abs(1.0), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(float(0.0), min(float(0.0), float(0.0)))))) * 1.0))), float(mat2x3(float(mat4x2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), sqrt(0.0), abs(1.0), sqrt(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0)), 1.0, 0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0, 1.0, exp(0.0), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), mix(float(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), float(_GLF_FUZZED(-667.638)), bool(false))))) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))).x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.w = workgroup_id, (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.w = workgroup_id) / 1u), (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.w = _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), clamp(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id)), (_GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))) << 0u), _GLF_IDENTITY(workgroup_id, max(workgroup_id, workgroup_id))))) | (workgroup_id))) | 0u);
 uint workgroup_base = workgroup_size * GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.w;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z = workgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(atan(1670.2230, _GLF_IDENTITY(_GLF_IDENTITY(588.943, (false ? _GLF_FUZZED(-291.958) : 588.943)), float(float(588.943))))))) > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))))), false, false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(float(true))), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)), bool(true))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)), true && (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true)))))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.x = subgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))))), bool(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, _GLF_IDENTITY(0u, ~ (~ (0u))) + (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_id) : GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_id) : GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), max(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_id) : GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_id) : GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z, (false ? _GLF_FUZZED(workgroup_id) : GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)), GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z)))))) + GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.x + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y = _GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid));
 uint next_virtual_gid = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.z + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]))) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id)).x, max(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]))) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id)).x, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]))) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id)).x) - 0u), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]))) | (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id)).x)), (true ? GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.x : _GLF_FUZZED(workgroup_size))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3])), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3])), (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[_GLF_IDENTITY(3, clamp(3, 3, _GLF_IDENTITY(3, 1 * (3))))])), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]))) ^ uvec4(0u, 0u, 0u, 0u)) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3])), (true ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, min(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id)), uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(_GLF_IDENTITY(0u, (0u) | _GLF_IDENTITY(0u, (0u) ^ 0u)), 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3])), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, min(0u, 0u)), 0u))) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]))) ^ uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))))) : _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id)))) | uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), uvec4(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY((0u), ((129979u & 0u) >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(uint(0u), uint(uvec4(uint(0u), 1u, 0u, 0u))))) ^ ((0u))) - 0u))), 0u)), 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) / uvec4(1u, 1u, 1u, 1u)))) ^ _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id), (false ? _GLF_FUZZED(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id) : _GLF_IDENTITY((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id), uvec4(1u, 1u, 1u, 1u) * ((GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))))))[2], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3])), min(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3], min(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3])))), _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[0], GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[1], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id))[2], _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3], (GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id[3]) / 1u))))))).x, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.x, GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.x)) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(144057u) : _GLF_IDENTITY(subgroup_size, (subgroup_size) - 0u))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true && (false), ! (! (true && (false)))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), false || (_GLF_IDENTITY(true && (false), true && (true && (false)))))))), true, false)))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY((true ? 1 : _GLF_FUZZED(2168)), ((true ? 1 : _GLF_FUZZED(2168))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))]), vec2(_GLF_FUZZED(-9842.0593), _GLF_FUZZED(6498.3148)), bvec2(false, false)))))))[1])).y))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)))))), vec2(injectionSwitch[0], injectionSwitch[1])).y))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * cos(vec2(0.0, 0.0))).y, min(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))), vec2(injectionSwitch[0], injectionSwitch[1])).y))), false))))), false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bool(true)))) || _GLF_IDENTITY(false, bool(bvec3(false, false, false)))), false))), false, true, true)), bool(bvec3(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 0.0 + (injectionSwitch[1])))).y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-68837) : 0))], injectionSwitch[1]), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-68837) : 0))], injectionSwitch[1]), 0.0, 0.0), (true ? mat2(vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-68837) : 0))], injectionSwitch[1]), 0.0, 0.0) : _GLF_FUZZED(mat2(-857.691, -20.87, 27.39, -90.33))))), vec2(mat4x2(vec2(_GLF_IDENTITY(mat2(vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-68837) : 0))], injectionSwitch[1]), 0.0, 0.0), (true ? mat2(vec2(injectionSwitch[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(-68837) : 0))], injectionSwitch[1]), 0.0, 0.0) : _GLF_FUZZED(mat2(-857.691, -20.87, 27.39, -90.33))))), round(length(normalize(1.0))), 1.0, round(length(normalize(1.0))), 0.0, exp(0.0), 1.0))))).y) && true)))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), vec2(injectionSwitch[0], injectionSwitch[1])).y, false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))), false, true, false))), false, true, true)), true, true)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED(-94.21), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), vec2((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], _GLF_FUZZED(-8713.1312)), bvec2(true, false)))) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(70.66), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], (true ? (injectionSwitch)[0] : _GLF_FUZZED(-104.890))), _GLF_FUZZED(-9.3)), bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 uint read = 0;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), (bool(bvec4(false, false, false, false))) || false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(bvec3((subgroup_local_id % 2) == 0, true, false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), ! (! (! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), false || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false))))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec3(0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0)), dot(vec3(0.0, 0.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))), vec3(0.0, 0.0, 1.0))) * (injectionSwitch.y))))))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true))))) && true), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true))))) && true), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true))))) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true))))) && true), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true))))) && true)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), ! (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) && true), true, true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))), bool(bool(bool(bool(false))))), (_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))) && true)), bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), ! (! (bool(false)))), (_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, true && (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(bool(bool(false))), false || (bool(bool(bool(false)))))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))))), (! (! ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))))) && true)))) && true))))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false)))))), ((_GLF_IDENTITY(bool(bool(false)), bool(bool(bool(bool(false))))))) || false) && true))))) && true))))));
   if(_GLF_DEAD(false))
    barrier();
   read = _GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2), 0u ^ (_GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2), (atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2)) << _GLF_IDENTITY(0u, max(0u, 0u)))));
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)))), (false ? _GLF_FUZZED(5.5) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(atan(vec2(354.173, -10.57))))).x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           barrier();
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   subgroupAll(false);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), bool(bvec3(_GLF_IDENTITY(true, (true) && true) && _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), (! ((_GLF_DEAD(false)))) || false))), true, false))))) && true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))) && ((injectionSwitch.x > injectionSwitch.y)))), true && (! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y))))) || false))), true && ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), false || (((injectionSwitch.x > injectionSwitch.y))))) || false)))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)), true && (((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), false || ((true))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-4151.5320, 6796.2917)) : injectionSwitch)), injectionSwitch)).x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), true && (bool(bool(injectionSwitch.x < injectionSwitch.y))))) && true)))) && ((injectionSwitch.x > injectionSwitch.y)))))))), false, _GLF_IDENTITY(true, (true) && true), true)))) || false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-59.54)), bool(false)))), float(_GLF_FUZZED(1.3)), bool(false))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, true)))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   read = _GLF_IDENTITY(atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2), ~ (~ (atomicLoad(buf[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y], 4, 64, 2))));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0))).y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-1.0, -71.22).r)), float(injectionSwitch.y), bool(true)))))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(809.475)), bool(false))) > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, false || (true)) && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y))))))))), bool(_GLF_IDENTITY(bool((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(809.475)), bool(false))) > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, false || (true)) && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y)))))))))), true && (bool((! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(809.475)), bool(false))) > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(mat3(injectionSwitch.x, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y)))), _GLF_IDENTITY(true, false || (true)) && ((! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y)))))))))))))))))
  return;
 atomicStore(checker[GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_12subgroup_basevirtual_gidworkgroup_baseworkgroup_id.y], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
