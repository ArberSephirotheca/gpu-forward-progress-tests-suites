#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, exp(0.0)))).x)), true && (_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, exp(0.0)))).x))))); _injected_loop_counter --)
      {
       do
        {
         return;
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true)), true && (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true, true)))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))), true && (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uvec2 GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z = _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id)), uint(uint(subgroup_id)))) - 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && _GLF_IDENTITY(true, (true) || false))))
      {
       if(_GLF_DEAD(false))
        continue;
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
          continue;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
          continue;
         GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y = _GLF_IDENTITY(subgroup_size, ~ _GLF_IDENTITY((~ (subgroup_size)), ((~ (subgroup_size))) ^ 0u));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, determinant(mat2(abs(1.0), sin(0.0), log(1.0), abs(1.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), 1.0 * (length(vec3(0.0, 0.0, 0.0)))), 1.0)), mix(float(_GLF_FUZZED(-92.49)), float(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0))), bool(true)))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, determinant(mat2(abs(1.0), sin(0.0), log(1.0), abs(1.0))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), 1.0 * (length(vec3(0.0, 0.0, 0.0)))), 1.0)), mix(float(_GLF_FUZZED(-92.49)), float(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0))), bool(true)))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0))).x > injectionSwitch.y)))))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, determinant(mat2(abs(1.0), sin(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(3.9)), bool(false)))), log(1.0), abs(_GLF_IDENTITY(1.0, 1.0 * (1.0))))), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(_GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0)), 1.0)), mix(float(_GLF_FUZZED(-92.49)), float(dot(vec3(0.0, 0.0, 1.0), vec3(0.0, length(vec3(0.0, 0.0, 0.0)), 1.0))), bool(true)))), 0.0, 0.0, sqrt(0.0), 1.0, 0.0, length(vec3(0.0, 0.0, 0.0)), round(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), mix(float(_GLF_FUZZED((-7585.1554 + -825.923))), float(_GLF_IDENTITY(length(normalize(vec3(1.0, 1.0, 1.0))), (true ? length(normalize(vec3(1.0, 1.0, 1.0))) : _GLF_FUZZED(-6.6)))), bool(true)))), 1.0))).x > injectionSwitch.y))), false, true, false))));
      }
     else
      {
      }
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 do
  {
   _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w = subgroup_local_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w = subgroup_local_id) << 0u, 0u + ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w = subgroup_local_id) << 0u)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | uint(_GLF_ZERO(0.0, injectionSwitch.x)));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, true))))))
  {
   GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.x = num_workgroup;
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, _GLF_IDENTITY(0u, max(0u, 0u)), 0u)) : _GLF_FUZZED((subgroup_size | (subgroup_size % uvec3(125736u, 14812u, 173235u)))))), max(_GLF_IDENTITY(gl_WorkGroupSize, uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)), gl_WorkGroupSize)).x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 | 0) | 1) ^ (0 >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bvec2(bool(bool(false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec3(bvec2(bool(bool(false)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) && true))), false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41.04) : 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41.04) : 0.0)), (_GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41.04) : 0.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1321.0359)), float(0.0), bool(true))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41.04) : 0.0)), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41.04) : 0.0)), _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(41.04) : 0.0))))) + 0.0)) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, uint(_GLF_IDENTITY(uvec4(workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, uint(uvec3(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, 1u, 0u))), GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w)), 1u, 1u, 0u), (uvec4(workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, clamp(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, uint(uvec3(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, 1u, 0u))), GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w, GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w)), 1u, 1u, 0u)) << uvec4(0u, 0u, 0u, 0u))));
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.z * GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y + _GLF_IDENTITY((_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, max(1, 1))) % GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, 0u | (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, max(1, 1))) % GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, max(1, 1))) % GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y) << 0u)))), clamp(((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, max(1, 1))) % _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, max(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size)).y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, _GLF_IDENTITY(max(1, 1), (true ? _GLF_IDENTITY(max(1, 1), (max(1, 1)) ^ (0 | 0)) : _GLF_FUZZED(74526))))) % GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, max(1, 1))) % GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)));
 GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.x = next_virtual_gid;
 atomicStore(buf[GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.x], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec3(virtual_gid, 0u, (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(virtual_gid, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u)), uint(uint(uint(uvec4(virtual_gid, 0u, _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u))))), (uint(uvec4(virtual_gid, 0u, 1u, 0u))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))), 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid)), 0u, _GLF_IDENTITY(1u, uint(uvec4(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), 0u, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))), ((127407u) & 0u)))), 0u))), 0u, 1u)), _GLF_IDENTITY(((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u), min(_GLF_IDENTITY(((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))), _GLF_IDENTITY((true ? _GLF_IDENTITY(((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(8u), uint(8u))), ((0u << _GLF_IDENTITY(uint(8u), uint(8u)))) - 0u), 1u, 0u)), (uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, min(8u, 8u))), uint(8u))), 1u, 0u))) / 1u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) - 0u))), min(0u, 0u)), 1u))), _GLF_IDENTITY((true ? ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) : _GLF_FUZZED(uvec3(76316u, 86122u, 114934u))), ((true ? (_GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u)), uvec3(uvec3((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u)))))) : _GLF_FUZZED(uvec3(76316u, 86122u, 114934u)))) | uvec3(0u, 0u, 0u))) : _GLF_FUZZED((110202u - uvec3(85563u, 189035u, 27348u)))), ((true ? _GLF_IDENTITY(((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 0u)), _GLF_IDENTITY((uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 0u))) / 1u, uint(_GLF_IDENTITY(uvec3((uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 0u))) / 1u, 1u, 0u), ~ (~ (_GLF_IDENTITY(uvec3((uint(uvec4(0u, (_GLF_IDENTITY(0u, (0u) | (0u)) << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 0u))) / 1u, 1u, 0u), (uvec3((uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 0u))) / 1u, 1u, 0u)) - uvec3(0u, 0u, 0u)))))))))))), _GLF_IDENTITY(0u, min(0u, 0u)), 1u))), (true ? ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) : _GLF_FUZZED(_GLF_IDENTITY(uvec3(76316u, 86122u, 114934u), min(uvec3(76316u, 86122u, 114934u), uvec3(76316u, 86122u, 114934u)))))) : _GLF_FUZZED((110202u - uvec3(85563u, 189035u, 27348u))))) | ((true ? _GLF_IDENTITY(((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), _GLF_IDENTITY(1u, (1u) >> 0u), 0u)), (uint(uvec4(0u, (0u << _GLF_IDENTITY(uint(8u), uint(8u))), 1u, 0u))) / 1u))))), _GLF_IDENTITY(0u, min(0u, 0u)), 1u))), (true ? ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) : _GLF_FUZZED(uvec3(76316u, 86122u, 114934u)))) : _GLF_FUZZED((110202u - uvec3(_GLF_IDENTITY(85563u, _GLF_IDENTITY(uint(uvec2(85563u, 0u)), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec2(85563u, 0u))))), 189035u, 27348u))))))) ^ uvec3(0u, 0u, 0u), ((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, max(_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid)), virtual_gid)), uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u)))) + uvec3(0u, 0u, 0u))), _GLF_IDENTITY(~ (~ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, max(0u, 0u))))), 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, 0u), (false ? _GLF_FUZZED(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.wyz.b) : _GLF_IDENTITY(min(0u, 0u), (false ? _GLF_FUZZED(subgroup_local_id) : min(0u, 0u)))))) | 0u), (0u) - (0u | 0u))))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(virtual_gid, uint(_GLF_IDENTITY(uvec4(virtual_gid, 0u, 1u, 0u), clamp(uvec4(virtual_gid, 0u, 1u, 0u), uvec4(virtual_gid, 0u, 1u, 0u), uvec4(virtual_gid, 0u, 1u, 0u))))), 0u, 1u))) ^ uvec3(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(181113u) : 0u)), 0u))) | (_GLF_IDENTITY(0u, _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (0u), clamp(~ (0u), ~ (0u), ~ (0u))))) | (0u)))), 0u)) + uvec3(0u, 0u, 0u))))), clamp(~ (~ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, min(0u, 0u)), 0u))))), 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (0u) - (0u | 0u))), (_GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (0u) - (0u | 0u)))) * 1u))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u)) + uvec3(0u, 0u, 0u))))), _GLF_IDENTITY(~ (~ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), max(_GLF_IDENTITY(0u, max(0u, 0u)), _GLF_IDENTITY(0u, max(0u, 0u))))))), 0u, 1u), _GLF_IDENTITY(_GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (0u) - (0u | 0u))))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u)), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (0u) - (0u | 0u))))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(63630u, 154530u, 62686u)) : _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (0u) - (0u | 0u))))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), max(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), max(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), clamp(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), _GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), _GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))))))))), 0u, 1u))) ^ uvec3(0u, 0u, 0u))))))) + uvec3(0u, 0u, 0u))))), uint(uvec2(~ (~ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, max(0u, 0u))))), 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, _GLF_IDENTITY(1u, uint(uvec3(1u, 0u, 1u))), _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (_GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) << 0u) | (0u))) - (0u | 0u))))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u)) + uvec3(0u, 0u, 0u))))), 1u))), ~ (~ (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, max(0u, 0u))))), 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, _GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u | 0u) ^ (0u))) - (0u | 0u), max((0u) - (_GLF_IDENTITY(0u, min(0u, 0u)) | 0u), (0u) - _GLF_IDENTITY((_GLF_IDENTITY(0u, (0u) >> 0u) | 0u), ~ (~ ((_GLF_IDENTITY(0u, (0u) >> 0u) | 0u)))))))))), _GLF_IDENTITY(0u, ~ (~ (0u))), 1u)), ((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u))) ^ uvec3(0u, 0u, 0u)) + uvec3(0u, 0u, 0u)))))))), min(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec4(virtual_gid, _GLF_IDENTITY(_GLF_IDENTITY(0u, ~ (~ (0u))), (false ? _GLF_FUZZED(virtual_gid) : 0u)), 1u, 0u)), (uint(_GLF_IDENTITY(uvec4(virtual_gid, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), 1u, 0u), (uvec4(virtual_gid, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), 1u, 0u)) | (uvec4(virtual_gid, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)), 1u, 0u))))) ^ 0u)), 0u, 1u), (uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(next_virtual_gid) : 1u)))) + uvec3(_GLF_IDENTITY(0u, _GLF_IDENTITY((_GLF_IDENTITY(0u, uint(uvec2(0u, 0u)))), clamp((0u), (0u), (0u))) << 0u), 0u, 0u))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u)), clamp((uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u)), (uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u)), (uvec3(_GLF_IDENTITY(virtual_gid, uint(uvec4(virtual_gid, 0u, 1u, 0u))), 0u, 1u)))) + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u)), (uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u)), uvec3(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u)), (uvec3(0u, 0u, 0u)) >> uvec3(0u, 0u, 0u))))))))))], 4, 64, 0);
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec2(true, false)))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec2(true, false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))))));
      }
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y = read;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (6681 & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 1.0, 0.0, 0.0, 0.0, 1.0), mat2x3(mat3x4(mat2x3(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 1.0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size) | uvec2(0u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(subgroup_size), (_GLF_FUZZED(subgroup_size)) - uint(_GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_IDENTITY(0u, (1u & 1u) * (_GLF_IDENTITY(0u, ~ (~ (0u))))), 0u))) >> 0u))).y, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, true))) && (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (1) | (1)) < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, uvec2(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size[0], GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size[1])).y, _GLF_IDENTITY(_GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) - uvec4(0u, 0u, 0u, 0u))) | uvec4(0u, 0u, 0u, 0u)).w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size))))).y)) || false)) || false), bool(_GLF_IDENTITY(bvec2(false || _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size))))).y)) || false)) || false), true), bvec2(bvec2(bvec2(false || _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, uvec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size))))).y)) || false)) || false), true)))))), ! (! (false || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-93781))) < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size, uvec2(uvec2(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size))).y))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1, 0u | (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1)) < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), ! (! (false || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) | uvec4(_GLF_IDENTITY(0u, (0u) | (0u)), 0u, 0u, 0u))) / uvec4(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u, 1u)).w + 1))) < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, _GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y) / 1u)), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y) / 1u))) && true), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), ! (! (false || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y))))))))), _GLF_IDENTITY(false, (false) || false) || ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1, 0u | (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1)) < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), ! (! (false || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id, (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id) | uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u)).w + 1))) < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, _GLF_IDENTITY(false || _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y) / 1u)), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1, (false ? _GLF_FUZZED(floatBitsToUint(1013.4765)) : GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1)) < _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, (GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y) / 1u))) && true), ((GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y)) || false), ! (! (false || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y))))))))))))), false || (true && (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ (~ (1))), 1)) < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y, _GLF_IDENTITY(false || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true) || (GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.w + 1 < GLF_merged2_0_1_13_1_1_13num_workgroupsubgroup_size.y))))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y))))))
          {
           return;
          }
         else
          {
          }
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y, 4, 64, 4);
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7))), ((_GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(7, 7, 7))), int(7)))) / 1) | (_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), ~ (~ (_GLF_IDENTITY(int(7), int(7)))))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       subgroupAll(false);
       for(int _injected_loop_counter = (_GLF_IDENTITY(1 ^ 1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1 ^ 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((1 & 1) & 1), (((1 & 1) & 1)) | 0)); _GLF_IDENTITY(_injected_loop_counter ++, 0 ^ (_injected_loop_counter ++)))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(0, max(0, 0)) ^ 1) & 1)); _injected_loop_counter ++)
        {
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     do
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           return;
                           if(_GLF_DEAD(false))
                            break;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                  return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, ! (! (true))))))))))));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_WRAPPED_IF_TRUE(true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  return;
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                  break;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_4_2_1_11_3_1_17next_virtual_gidreadsubgroup_idsubgroup_local_id.y, 4, 64, 4);
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
        }
       else
        {
         do
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               subgroupAll(true);
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | 0))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 + (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
