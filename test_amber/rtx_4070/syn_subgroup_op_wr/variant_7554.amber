#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true)))), bool(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), true, false, true)))), true, true))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), (false) || false)))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec3(injectionSwitch.y, tan(0.0), 0.0), vec3(vec3(_GLF_IDENTITY(vec3(injectionSwitch.y, tan(0.0), 0.0), (false ? _GLF_FUZZED(vec3(0.4, -8.1, 58.54)) : vec3(injectionSwitch.y, tan(0.0), 0.0))))))))))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, gl_NumWorkGroups)).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2.7)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), min(injectionSwitch.x, injectionSwitch.x)), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, abs(1.0), 0.0, 0.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
  return;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), true && (_GLF_IDENTITY(! (false || (false)), bool(bvec2(! (_GLF_IDENTITY(false, bool(bool(false))) || (false)), true)))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), true && (_GLF_IDENTITY(! (false || (false)), bool(bvec2(! (_GLF_IDENTITY(false, bool(bool(false))) || (false)), true)))))))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), true && (_GLF_IDENTITY(! (false || (false)), bool(bvec2(! (_GLF_IDENTITY(false, bool(bool(false))) || (false)), true))))))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), true && (_GLF_IDENTITY(! (false || (false)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false))) || (false)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(9.8)), vec2(_GLF_FUZZED(-2.4), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).y)) && (! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) || (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) || (false)), false || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bool(false))) || (false)), false || ((_GLF_IDENTITY(false, bool(bool(false))) || (false)))))))))), true)))))))))) && true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(-788.959, 7.7))) : injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(-788.959, 7.7))) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(-788.959, 7.7))) : injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(tan(vec2(-788.959, 7.7))) : injectionSwitch)).x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u + (subgroup_base))) * 1u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, (subgroup_base) + (0u | 0u))) ^ 0u)) >> 0u)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_FUZZED(_GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id))), 1u), (uvec2(_GLF_FUZZED(workgroup_id), 1u)) >> uvec2(0u, 0u))), max(uint(_GLF_IDENTITY(uvec2(_GLF_FUZZED(workgroup_id), 1u), (uvec2(_GLF_FUZZED(workgroup_id), 1u)) >> uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_FUZZED(workgroup_id), 1u), (uvec2(_GLF_FUZZED(workgroup_id), 1u)) >> uvec2(0u, 0u)))))))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, ~ (_GLF_IDENTITY(~ (2u), (~ (2u)) >> 0u)))), _GLF_IDENTITY(uint(2u), max(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) + 0u)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u), max(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u + (subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, clamp(subgroup_base, _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u), _GLF_IDENTITY(subgroup_base, (subgroup_base) / 1u)))) >> 0u), _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)))) : _GLF_FUZZED(workgroup_id))))), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), subgroup_base))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u), (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id)))), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 1u, 0u, 1u)))) | (subgroup_base))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), max(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)))), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))) ^ 0u) : _GLF_FUZZED(workgroup_id)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) - 0u))))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (2u) / (1u & 1u))))) >> _GLF_IDENTITY(uint(2u), uint(2u)))), ~ (~ (uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, min(_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)), subgroup_base))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << 0u), (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id)))), clamp((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, uint(uvec4(subgroup_base, 1u, 0u, 1u)))) | (subgroup_base))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), max(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)))), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))) | ((_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? _GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u))) ^ 0u) : _GLF_FUZZED(workgroup_id)))))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_IDENTITY(_GLF_FUZZED(workgroup_id), (_GLF_FUZZED(workgroup_id)) - 0u))))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(2u, (2u) / (1u & 1u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, (_GLF_IDENTITY(subgroup_base, 0u | (_GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(num_workgroup)))))) | (0u >> _GLF_IDENTITY(uint(0u), _GLF_IDENTITY(_GLF_IDENTITY(uint(0u), (true ? _GLF_IDENTITY(uint(0u), clamp(uint(0u), uint(0u), _GLF_IDENTITY(uint(0u), (false ? _GLF_FUZZED(subgroup_base) : uint(0u))))) : _GLF_FUZZED(subgroup_base))), max(uint(0u), uint(_GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, max(0u, 0u)))))))))))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, uint(uint(subgroup_base))), (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, (true ? _GLF_IDENTITY(subgroup_base, 0u ^ (subgroup_base)) : _GLF_FUZZED(num_workgroup))), (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (2u) - 0u)), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))) : _GLF_FUZZED(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, _GLF_IDENTITY(workgroup_size, 0u | _GLF_IDENTITY((workgroup_size), (true ? (workgroup_size) : _GLF_FUZZED(workgroup_base)))), workgroup_size)))))) << 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + subgroup_base), ((workgroup_base + subgroup_base)) | ((workgroup_base + subgroup_base))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (0u | 0u) | (_GLF_IDENTITY(workgroup_base + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_FUZZED(subgroup_base))))), (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))) : _GLF_FUZZED(workgroup_size)))) << 0u)) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + _GLF_IDENTITY(subgroup_base, ~ (~ (subgroup_base)))) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((workgroup_base + subgroup_base), ((workgroup_base + subgroup_base)) | ((workgroup_base + subgroup_base))) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (0u | 0u) | (_GLF_IDENTITY(workgroup_base + subgroup_base, (true ? workgroup_base + subgroup_base : _GLF_FUZZED(subgroup_base))))), (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, 0u | (subgroup_base)), (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))) + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), uint(uvec3(_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)), (true ? ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) >> 0u)) : _GLF_FUZZED(workgroup_id))))), 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u)))))) : _GLF_FUZZED(workgroup_size)))) << 0u)) ^ _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) << 0u)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(max(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))), (true ? max(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))) % subgroup_size), max(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), ((subgroup_local_id + 1) % subgroup_size)))) : _GLF_FUZZED(subgroup_size))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  return;
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(55.62), _GLF_FUZZED((false ? -3290.7370 : 2140.4764))), bvec2(false, false))).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / round(length(normalize(vec2(1.0, 1.0))))), 0.0 + (injectionSwitch.y))))))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))))), float(_GLF_FUZZED(vec2(-1450.8598, 1.7).t)), bool(false))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))))))), (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))) && true)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false)))))) && (bool(bool(_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false)))))) && (bool(bool(_GLF_DEAD(false)))))))))), _GLF_IDENTITY(true, (true) || false), false)))), (bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false)))))) && (bool(bool(_GLF_DEAD(false)))), bool(bool(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, false)))))) && (bool(bool(_GLF_DEAD(false)))))))))), _GLF_IDENTITY(true, (true) || false), false))))) || false)))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, _GLF_IDENTITY(max(_GLF_IDENTITY(1, int(_GLF_ONE(1.0, injectionSwitch.y)) * (1)), _GLF_IDENTITY(1, (1) | 0)), (max(1, _GLF_IDENTITY(1, (1) | 0))) / int(_GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(4, (4) | (4)), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)), ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2))) * 1)), (1 ^ 1), 1), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (_GLF_IDENTITY(4, (4) | (4))) | 0), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2))), 1 * (((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(_GLF_IDENTITY(2, min(2, 2))), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)))))) ^ 0), (1 ^ 1), 1)) | (ivec4(_GLF_IDENTITY(4, (4) | (4)), ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2))))) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(1, (1) | (1)) ^ 1), 1)))))) >> 0), _GLF_IDENTITY(4, (4) | _GLF_IDENTITY((_GLF_IDENTITY(4, (4) ^ 0)), ((_GLF_IDENTITY(4, (4) ^ 0))) | 0)), _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (4) | (_GLF_IDENTITY(4, int(int(4))))))), 64, _GLF_IDENTITY(4, (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_FUZZED((~ 42820)), (_GLF_FUZZED((~ 42820))) | (_GLF_IDENTITY(_GLF_FUZZED((~ 42820)), min(_GLF_IDENTITY(_GLF_FUZZED((~ 42820)), max(_GLF_FUZZED((~ 42820)), _GLF_FUZZED((~ 42820)))), _GLF_FUZZED(_GLF_IDENTITY((~ 42820), int(_GLF_IDENTITY(ivec3((~ 42820), 1, 0), (ivec3((~ 42820), 1, 0)) << (ivec3(0, 0, 0) | ivec3(0, 0, 0)))))))))) : 4, clamp(false ? _GLF_FUZZED((~ 42820)) : 4, _GLF_IDENTITY(false ? _GLF_FUZZED((_GLF_IDENTITY(~ 42820, min(_GLF_IDENTITY(~ 42820, (_GLF_IDENTITY(~ 42820, (true ? ~ 42820 : _GLF_FUZZED(-5637)))) | int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(~ 42820, 1 * (~ 42820)))))) : 4, (_GLF_IDENTITY(false ? _GLF_FUZZED((_GLF_IDENTITY(~ _GLF_IDENTITY(42820, 0 | (_GLF_IDENTITY(42820, min(42820, 42820)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ 42820, (~ 42820) ^ _GLF_IDENTITY(0, (0) << 0))), 0 ^ (~ (_GLF_IDENTITY(~ 42820, (~ 42820) ^ 0)))))))) : 4, _GLF_IDENTITY((false ? _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(~ 42820, (~ 42820) >> 0), max(_GLF_IDENTITY(~ 42820, (~ 42820) >> 0), _GLF_IDENTITY(~ 42820, (~ 42820) >> 0))))) : 4) | (false ? _GLF_FUZZED((~ 42820)) : 4), (_GLF_IDENTITY((false ? _GLF_FUZZED((_GLF_IDENTITY(~ 42820, (~ 42820) >> 0))) : 4) | (false ? _GLF_FUZZED(_GLF_IDENTITY((~ 42820), ((~ 42820)) | (0 << _GLF_IDENTITY(int(6), int(6))))) : 4), 0 ^ ((false ? _GLF_FUZZED((_GLF_IDENTITY(~ _GLF_IDENTITY(42820, (42820) + 0), (~ 42820) >> 0))) : 4) | (false ? _GLF_FUZZED((~ 42820)) : _GLF_IDENTITY(4, (4) << 0))))) << 0))) + 0), false ? _GLF_FUZZED((~ 42820)) : 4)))));
 if((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base)))), ((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base))))) | (_GLF_IDENTITY((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base)))), ((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base))))) | 0u)))) : subgroup_local_id)), (_GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(_GLF_IDENTITY((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base)))), ((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base))))) | (_GLF_IDENTITY((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base)))), ((_GLF_IDENTITY(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), max(((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base), ((-39.00 + mat2x3(-817.064, 935.264, -5.6, -41.60, -10.97, -4105.2894)) , subgroup_base))))) | 0u)))) : subgroup_local_id))) << 0u) % 2, min(subgroup_local_id % 2, _GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) % 2) ^ 0u)))) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || _GLF_IDENTITY(false, (false) || false)), false, true, true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))) * vec2(1.0, 1.0)).x > injectionSwitch.y)), false, false))), (false) || false), _GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (false) || false), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (false) || false), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), true))), bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (false) || false), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), true))), true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), bool(_GLF_IDENTITY(bvec3(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-302.817)), vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), bvec2(false, true))).y)), false, false)), ! (_GLF_IDENTITY(! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-302.817)), vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), bvec2(false, true))).y)), false, false))), ! (! (! (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-302.817)), vec2(_GLF_FUZZED(9.8), (injectionSwitch)[1]), bvec2(false, true))).y)), false, false))))))))), _GLF_IDENTITY((false), ! (! ((false)))) || false), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true, true), bvec3(bvec3(bvec3(bool(bvec4(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), (false) || false), false, _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true)))), true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false)), true, true)))))), false, false, true))), false, true)))) || (false))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))), false)), ! (! (bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, ! (! (false))), false)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     subgroupAll(false);
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-36.77) : injectionSwitch.x))), float(_GLF_FUZZED(8718.8259)), bool(false))) < injectionSwitch.y)) ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], buf[virtual_gid])) : _GLF_FUZZED(virtual_gid)), min((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], buf[virtual_gid])) : _GLF_FUZZED(virtual_gid)), _GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))) || false))) ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], buf[virtual_gid])) : _GLF_FUZZED(virtual_gid)), ((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], 0u ^ (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) | (buf[virtual_gid])))))) : _GLF_FUZZED(virtual_gid))) * 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], buf[virtual_gid])), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))])) : _GLF_FUZZED(virtual_gid)))) << 0u), max(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(_GLF_IDENTITY(virtual_gid, 0u + (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(num_workgroup) : virtual_gid)))), _GLF_IDENTITY(virtual_gid, (true ? virtual_gid : _GLF_FUZZED(subgroup_id)))))], min(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid])))) - 0u), buf[virtual_gid])), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)) >> 0u)) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], buf[virtual_gid])), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)) >> 0u)) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], buf[virtual_gid])), clamp(_GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)) >> 0u)) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], buf[virtual_gid])), _GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)) >> 0u)) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], buf[virtual_gid])), _GLF_IDENTITY(buf[_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))), clamp(_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid)), _GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))))], min(buf[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) | 0u)) >> 0u)) | (_GLF_IDENTITY(virtual_gid, (virtual_gid) | (virtual_gid))))], buf[virtual_gid]))))))), ~ (~ (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], min(buf[virtual_gid], _GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) | (buf[virtual_gid]), ~ (~ ((buf[virtual_gid]) | (buf[virtual_gid])))))))))))), 4, 64, 2);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   subgroupAll(false);
   read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (true ? 64 : _GLF_FUZZED(bitCount(next_virtual_gid)))), _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | (2))), max(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, (2) >> _GLF_IDENTITY(0, (0) | (0))), _GLF_IDENTITY(2, _GLF_IDENTITY((2), _GLF_IDENTITY(int(ivec3((2), 1, 1)), 1 * (int(ivec3((2), 1, 1))))) >> 0)))) | (2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | (2))), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | (2)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (2) / 1)))) | (_GLF_IDENTITY(2, max(2, 2)))), ~ (~ (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | (2))))) : _GLF_FUZZED(_GLF_IDENTITY(findMSB(num_workgroup), (findMSB(num_workgroup)) - 0))))), clamp(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, clamp(64, 64, 64)), 64)), _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))) | (2), max((_GLF_IDENTITY(2, max(2, 2))) | (2), (_GLF_IDENTITY(2, max(2, 2))) | (2))))), atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))) | (2), _GLF_IDENTITY(((_GLF_IDENTITY(2, max(2, 2))) | (2)) | ((_GLF_IDENTITY(2, max(2, 2))) | (2)), (((_GLF_IDENTITY(2, max(2, 2))) | (2)) | ((_GLF_IDENTITY(2, max(2, 2))) | (2))) | (_GLF_IDENTITY(((_GLF_IDENTITY(2, max(2, 2))) | (2)) | ((_GLF_IDENTITY(2, max(2, 2))) | (2)), (((_GLF_IDENTITY(2, max(2, 2))) | (2)) | ((_GLF_IDENTITY(2, max(2, 2))) | (2))) | (((_GLF_IDENTITY(2, max(2, 2))) | (2)) | ((_GLF_IDENTITY(2, max(2, 2))) | (2))))))))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | (2))), uint(uint(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], max(buf[virtual_gid], buf[virtual_gid])), 4, 64, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, max(2, 2))) | (2))))))))) >> (0u | 0u))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 atomicStore(checker[_GLF_IDENTITY(virtual_gid, uint(uvec3(_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(virtual_gid, (virtual_gid) / 1u)) << 0u), 0u, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), mix(vec3((vec3(injectionSwitch.x, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0))[0], _GLF_FUZZED(-825.057), _GLF_FUZZED(587.833)), vec3(_GLF_FUZZED(float(true)), (vec3(injectionSwitch.x, 1.0, 0.0))[1], (vec3(injectionSwitch.x, 1.0, 0.0))[2]), bvec3(false, true, true)))), min(float(_GLF_IDENTITY(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), mix(vec3((vec3(injectionSwitch.x, 1.0, 0.0))[0], (vec3(injectionSwitch.x, 1.0, 0.0))[1], (vec3(injectionSwitch.x, 1.0, 0.0))[2]), vec3(_GLF_FUZZED(23.83), _GLF_FUZZED(-925.874), _GLF_FUZZED(91.73)), bvec3(false, false, false))), mix(vec3((vec3(injectionSwitch.x, 1.0, 0.0))[0], _GLF_FUZZED(-825.057), _GLF_FUZZED(587.833)), vec3(_GLF_FUZZED(float(true)), (vec3(injectionSwitch.x, 1.0, 0.0))[1], (vec3(injectionSwitch.x, 1.0, 0.0))[2]), bvec3(false, true, true)))), float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), mix(vec3((_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (false ? _GLF_FUZZED(vec3(-516.015, -13.82, -7414.5377)) : _GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), vec3(vec4(vec3(injectionSwitch.x, 1.0, 0.0), 1.0)))))) - vec3(0.0, 0.0, 0.0)))[0], _GLF_FUZZED(-825.057), _GLF_FUZZED(587.833)), vec3(_GLF_FUZZED(float(true)), (_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), (true ? vec3(injectionSwitch.x, 1.0, 0.0) : _GLF_FUZZED(vec3(3.5, 8.3, -286.248)))))[1], _GLF_IDENTITY((vec3(injectionSwitch.x, 1.0, 0.0)), ((vec3(injectionSwitch.x, 1.0, 0.0))) / vec3(1.0, 1.0, 1.0))[2]), bvec3(false, true, true))))))))))))], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
