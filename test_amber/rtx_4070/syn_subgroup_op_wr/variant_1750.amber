#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(int(0), int(0)) : _GLF_FUZZED(_injected_loop_counter)))) + (0 >> _GLF_IDENTITY(int(5), int(5)))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(false, false || (false))), true)), bool(bool(bool(bvec2(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bool(_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), _GLF_IDENTITY(true && (! (false || (false))), ! (! (true && (! (false || (false)))))))))))))), true))))))))))
      barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
           for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) & 1)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0), mat3x2(mat4(mat3x2(injectionSwitch, 1.0, 1.0, 0.0, 1.0)))))).x > injectionSwitch.y, false, true, false)))))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), int(int(int(5))))) << 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x))), gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x)))), max(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY((false ? _GLF_FUZZED(subgroup_local_id) : gl_NumWorkGroups.x), ~ (_GLF_IDENTITY(~ ((false ? _GLF_FUZZED(subgroup_local_id) : gl_NumWorkGroups.x)), min(~ ((false ? _GLF_FUZZED(subgroup_local_id) : gl_NumWorkGroups.x)), ~ ((false ? _GLF_FUZZED(subgroup_local_id) : gl_NumWorkGroups.x))))))), gl_NumWorkGroups.x))) ^ 0u);
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), true && (_GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), ((! (_GLF_WRAPPED_IF_FALSE(false)))) || false)))))
    {
    }
   else
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false))), true, true)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true) || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(bvec4(! ((injectionSwitch.x > injectionSwitch.y)), true, false, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y)))) || (injectionSwitch.x > injectionSwitch.y))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), false || (injectionSwitch.x > injectionSwitch.y)))) || false)) || false), _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x > injectionSwitch.y), bool(bvec2(false || (injectionSwitch.x > injectionSwitch.y), false))))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0), (true ? mat2x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(mat2x4(-2215.0650, -5.4, 8.5, -826.076, -6.4, 96.33, -57.13, 6.1)))))))).y, (injectionSwitch.x > injectionSwitch.y) || false)) && true)))), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)) || false))))))))))))))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))).x < injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u) : _GLF_FUZZED(79714u))) + 1, 0u | (_GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) | (~ (subgroup_local_id)))))) >> 0u) : _GLF_FUZZED(79714u))) + 1))) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-13.79, -704.976)))), vec2(mat2x3(injectionSwitch, 1.0, 1.0, 0.0, 1.0))), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-5.9) : injectionSwitch.y))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], 0u + (buf[virtual_gid])), 4, 64, _GLF_IDENTITY(0, (0) << (0 & -67256)));
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) | (_GLF_IDENTITY((_GLF_IDENTITY(0 ^ 1, (0 ^ 1) | 0)), ((0 ^ 1)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false), false))))))) && true))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     do
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))));
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 | 1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (bool(bool(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (bool(bool(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))), ! (! (bool(! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bool(bool(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))), ! (! (bool(bool(! (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))))))))))))))))))))));
                }
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), ~ (~ (int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, abs(0.0), 0.0, 0.0), (vec4(1.0, abs(0.0), 0.0, 0.0)) * mat4(1.0)))), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-9.6)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))), cos(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), min(float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), float(mat3(1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0))))), 1.0, 1.0)))), (float(mat4x2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-9.6)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true))), cos(0.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))) / 1.0)), _GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9.3)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)), max(mix(float(_GLF_FUZZED(-9.3)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)), mix(float(_GLF_FUZZED(-9.3)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))))) + abs(0.0)))))); _injected_loop_counter ++)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, ! (! (true))) && (injectionSwitch.x > injectionSwitch.y)))))));
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), true))) || false)) && true))));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 + (1))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false)))))))
          barrier();
        }
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! ((_GLF_IDENTITY(false, ! (! (false)))))))), (_GLF_IDENTITY(false, false || (false))) || false)));
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     subgroupAll(false);
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), length(vec2(0.0, 0.0)), 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 0.0))), 0.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), length(vec2(0.0, 0.0)), 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 0.0))), 0.0))))).x)) > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), length(vec2(0.0, 0.0)), 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 0.0))), 0.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), length(vec2(0.0, 0.0)), 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 0.0))), 0.0))))).x)) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))), 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0))), 0.0))), 0.0))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), length(vec2(0.0, 0.0)), 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 0.0))), 0.0)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (vec2(vec4(injectionSwitch, tan(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0)), _GLF_IDENTITY(0.0, float(mat3(0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(mat3x4(0.0, cos(0.0), length(vec2(0.0, 0.0)), 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), 0.0, 1.0, 0.0))), 0.0))), 0.0))))).x)) > injectionSwitch.y)))) && true)))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(4, (4) >> 0));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < ((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, float(mat2(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(107.114))), 1.0, 0.0, 0.0))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) ^ 0), _GLF_IDENTITY((int(6)) >> 0, ((int(6)) >> 0) << 0)))) >> _GLF_IDENTITY(int(6), int(6))), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), ((int(6))) ^ 0) >> 0))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (_GLF_IDENTITY(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(bool(bool(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6)))))), ! (! (bool(bool(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6))))))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6))), (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6)))) && true)), ! (! (! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6))))))), ! (! (_GLF_IDENTITY(! (_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) >> 0), (true ? _GLF_IDENTITY(int(6), (int(6)) >> 0) : _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0)))))) >> _GLF_IDENTITY(int(6), int(6)))), ! (! (! _GLF_IDENTITY((_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), clamp(int(6), int(6), _GLF_IDENTITY(int(6), (int(6)) / 1)))) | 0), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6)))), true && (_GLF_IDENTITY((_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6)))), false || ((_injected_loop_counter < ((int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, max(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, float(vec3(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, 1.0, 1.0))))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (true ? int(6) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(int(6), (int(6)) >> 0))) >> _GLF_IDENTITY(int(6), int(6))))))))))))))))))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), false, true, false)))) || false)), false || ((! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), false, true, false)))) || false)), false || ((! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), bool(bvec4((_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), false, true, false)))) || false)), false || ((! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(true, false || (true)))))))))))))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), true, false))), true)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_WRAPPED_IF_FALSE(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))), true))))))
            {
            }
           else
            {
             subgroupAll(true);
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), (_GLF_ONE(1.0, injectionSwitch.y)) * 1.0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3))), ! (! (_injected_loop_counter != (_GLF_IDENTITY(0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), clamp(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0)))))), clamp(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), clamp(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0)))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), clamp(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0)))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), clamp(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0), ivec3(0, 0, 0) ^ (ivec3(_GLF_IDENTITY(0, (0) | 0), 0, 0))))))))) << _GLF_IDENTITY(int(3), int(3))))))); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))); _GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(atomicMin(_injected_loop_counter, _injected_loop_counter)) : _injected_loop_counter --)))
                        {
                         barrier();
                        }
                      }
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
