#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_16_1_1_4next_virtual_gidread;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])))).y))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)))) != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))), ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, int(ivec4(1, int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0))), _GLF_IDENTITY(1, (1) + 0))), int(ivec3(1, 1, (0 >> _GLF_IDENTITY(int(3), int(3))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), (_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) * 1))) && true); _injected_loop_counter --)
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u))))))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u)))))))))) : gl_WorkGroupSize))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u))))))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u)))))))))) : gl_WorkGroupSize))), ((_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u))))))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u)))))))))) : gl_WorkGroupSize)))) ^ uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u))))))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u)))))))))) : gl_WorkGroupSize))), (_GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u))))))), ~ (~ (_GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), (false ? _GLF_FUZZED(uvec3(103946u, 61383u, 27534u)) : _GLF_IDENTITY(_GLF_FUZZED(uvec3(5924u, 122144u, 15550u)), ~ (~ (_GLF_FUZZED(uvec3(5924u, _GLF_IDENTITY(122144u, min(122144u, 122144u)), 15550u)))))))))) : gl_WorkGroupSize))))), uvec3(0u, 0u, 0u) ^ (uvec3(0u, 0u, 0u) | (gl_WorkGroupSize)))).x;
 for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((0 & -86622), max(_GLF_IDENTITY((0 & -86622), (false ? _GLF_FUZZED(-14266) : (0 & -86622))), (0 & -86622))), int(ivec4(_GLF_IDENTITY((0 & -86622), max(_GLF_IDENTITY((0 & -86622), (false ? _GLF_FUZZED(-14266) : (0 & -86622))), (0 & -86622))), _GLF_IDENTITY(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) | (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), max(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) | (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))), (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))) | (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(7718))), (1 | 1))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0)))), ! (! ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, 0.0))))))))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))));
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), (0 | 0))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_injected_loop_counter ++))))
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))), false || (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false)))))))));
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-8.0)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), max(float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))))))).y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), max(float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))))))).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], _GLF_IDENTITY(float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), max(float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0))))), float(vec4(injectionSwitch[1], 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 0.0, 1.0)))))))))).y)) || false)) && true))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))))); _injected_loop_counter --)
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (~ (~ (1))))))) << 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, 0u ^ (workgroup_size)))) * workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (subgroup_id * subgroup_size)) + subgroup_local_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, 0u | (_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))))), _GLF_IDENTITY(clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) ^ 0u) % subgroup_size, (subgroup_local_id + 1) % subgroup_size), (clamp((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), max(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1, 0u ^ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1))), clamp((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), ~ (~ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) >> 0u) + 1), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)) | ((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), max((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))))))), (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + 1)))) ^ 0u) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)) + 0u))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, max(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, (true ? subgroup_local_id + 1 : _GLF_FUZZED(workgroup_base)))) % subgroup_size, clamp((_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) << (0u | 0u))) % _GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (1u ^ 1u) | ((subgroup_local_id + 1))) % subgroup_size, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (1u ^ 1u) | ((subgroup_local_id + 1))) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1), (1u ^ 1u) | ((subgroup_local_id + 1))) % subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), (1u ^ 1u) | ((subgroup_local_id + 1))) % subgroup_size, 0u ^ (_GLF_IDENTITY((subgroup_local_id + 1), (1u ^ 1u) | ((subgroup_local_id + 1))) % subgroup_size))))))), (subgroup_local_id + 1) % subgroup_size))), (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(virtual_gid)))))), max(workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(virtual_gid)))))), workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (1) >> 0)) % subgroup_size, clamp((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(virtual_gid))))))))) << 0u), ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 0u, 0u)));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   GLF_merged2_0_1_16_1_1_4next_virtual_gidread.x = next_virtual_gid;
  }
 for(int _injected_loop_counter = (0 & 32703); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   atomicStore(buf[_GLF_IDENTITY(GLF_merged2_0_1_16_1_1_4next_virtual_gidread, clamp(GLF_merged2_0_1_16_1_1_4next_virtual_gidread, GLF_merged2_0_1_16_1_1_4next_virtual_gidread, GLF_merged2_0_1_16_1_1_4next_virtual_gidread)).x], _GLF_IDENTITY(uint(1), (uint(1)) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)), min(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-215.292)), float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), bool(true))), 1.0))))).x)), (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x))) >> (0u | 0u))))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | 0), (_GLF_IDENTITY(4, (4) | 0)) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(0, int(ivec4(0, 1, 0, ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     for(int _injected_loop_counter = (0 & _GLF_IDENTITY(-86538, int(ivec4(-86538, 1, int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | (int(_GLF_ZERO(0.0, injectionSwitch.x)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y = _GLF_IDENTITY(read, (true ? read : _GLF_FUZZED(num_workgroup)));
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! (! (subgroup_local_id + 1 < subgroup_size))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), min(_GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), clamp(_GLF_IDENTITY(float(vec2(injectionSwitch.y, 1.0)), _GLF_IDENTITY(float(mat4x2(float(vec2(injectionSwitch.y, 1.0)), sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), max(_GLF_IDENTITY(float(mat4x2(float(vec2(injectionSwitch.y, 1.0)), sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), clamp(float(mat4x2(float(vec2(injectionSwitch.y, 1.0)), sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(vec2(injectionSwitch.y, 1.0)), sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), float(mat4x2(float(vec2(injectionSwitch.y, 1.0)), sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)))), float(mat4x2(float(vec2(injectionSwitch.y, 1.0)), sqrt(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0))))), float(vec2(injectionSwitch.y, 1.0)), float(vec2(injectionSwitch.y, 1.0)))), float(vec2(injectionSwitch.y, 1.0)))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0) : _GLF_FUZZED(ceil(1.2))))))))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-7.0))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, (virtual_gid) | (0u & 52009u))], GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(8.9)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
      barrier();
     subgroupAll(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), bool(bool(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))), (! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))) && true))))) && true)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(false, false, false)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))) && true)), (_GLF_IDENTITY(false, (false) || false)) && true)) && _GLF_IDENTITY(true, true && (true)))) || false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)))))))))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)))))))))), false || ((! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y))))))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false))), (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false))), vec2(vec4(_GLF_IDENTITY(mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false))), (mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))) + vec2(0.0, 0.0)), 0.0, 0.0)))) / vec2(1.0, 1.0))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y))), (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)))) && true)))) || false))))))))), _GLF_IDENTITY(true, false || (true)) && (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)))))))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))) || false)))).y)), bool(bool((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * _GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), (injectionSwitch), (injectionSwitch)))))))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))))) || false)))).y))))))))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false || ((! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (false), _GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), bool(bool(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), true && (bool(bvec4(true, true, false, true)))))))))))) || false)))).y)), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))), (_GLF_IDENTITY((_GLF_IDENTITY(true && (false), ! (! (true && (false))))), ! (! ((_GLF_IDENTITY(true && (false), ! (! (true && (false))))))))) && true) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(43.57) : injectionSwitch.x)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), mix(vec2(_GLF_FUZZED((false ? 4.6 : 8141.0656)), _GLF_FUZZED((8.0 * -1967.3136))), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(length(-96.81)))), 1.0) * (injectionSwitch)))[1]), bvec2(true, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, true)), ! (! (bool(bvec4(true, true, false, true))))), ! (! (_GLF_IDENTITY(bool(bvec4(true, true, false, true)), _GLF_IDENTITY(! (! (bool(bvec4(true, true, false, true)))), true && (! (! (bool(bvec4(true, true, false, true)))))))))))))))))) || false)))).y)))))))))))))))) || false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
            barrier();
           barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (_GLF_DEAD(false)))) || false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))) || false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(-6341.7599)), bool(false)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))), (true ? _GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --))) : _GLF_FUZZED(int(455.622))))), (false ? _GLF_FUZZED(atomicExchange(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0))) : ~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (~ (_injected_loop_counter --)))))))))
                        {
                         if(_GLF_DEAD(false))
                          barrier();
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                      {
                      }
                     else
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         barrier();
                         if(_GLF_DEAD(false))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))))))))))
                barrier();
               barrier();
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), ! (! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(41.65) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, (false ? _GLF_FUZZED(-4786.0411) : injectionSwitch.x)))) > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), true && (! (false)))) || false)))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false))))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                    barrier();
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                        barrier();
                       barrier();
                      }
                     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              barrier();
                             barrier();
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                          }
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))))
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              barrier();
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                         barrier();
                        }
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         barrier();
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (_GLF_IDENTITY(true && (false), bool(bvec2(true && (false), false)))))))));
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
                    barrier();
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                        barrier();
                      }
                     else
                      {
                      }
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           barrier();
          }
         for(int _injected_loop_counter = ((-65059 & 0) << _GLF_IDENTITY(int(8), int(8))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) >> 0))) < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), 0 ^ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), int(2))), ((0 >> _GLF_IDENTITY(int(2), int(2)))) - 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(3499.5127)), bool(false)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)), (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-0.2, (false ? _GLF_FUZZED(-6.5) : _GLF_IDENTITY(-0.2, min(-0.2, _GLF_IDENTITY(-0.2, min(-0.2, -0.2)))))), -1.7)) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x < injectionSwitch.y)))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     atomicStore(checker[virtual_gid], GLF_merged2_0_1_16_1_1_4next_virtual_gidread.y, 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y)))))) && true)))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, true, false)))))))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))))), (_GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))))), clamp((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))))), _GLF_IDENTITY((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))))))))), ((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))))))) - 0), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), ~ (~ (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))))), 0 | ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) | (_GLF_IDENTITY(int(1), int(1))))) - (1 ^ ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))))))))) << 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               subgroupAll(true);
              }
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) / 1), 1, 1))) >> (0 << _GLF_IDENTITY(int(5), int(5))))), int(1)))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0)), (vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0))) * mat2(1.0))), injectionSwitch)).x > injectionSwitch.y))))
                    barrier();
                  }
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))) && true, (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bvec3(false, true, false))) || (false))))) || (false))) && true, ! (! ((_GLF_IDENTITY(false, false || (false))) && true)))) || false))));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
