#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u)).x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u), subgroup_size));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 & -6808), min(_GLF_IDENTITY((0 & -6808), int(int((0 & -6808)))), (0 & -6808))), int(ivec3((0 & -6808), 1, 0))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), false)))))) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != _GLF_IDENTITY((0 & -6808), ((0 & -6808)) >> 0), true && (_injected_loop_counter != (0 & -6808)))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 & -6808), min((_GLF_IDENTITY(0, 0 + (0)) & -6808), (0 & -6808))), int(ivec3((0 & -6808), _GLF_IDENTITY(1, (1) / int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(0, 0 | (0))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch)).y))))), false)))))) || (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY((0 & -6808), ((0 & -6808)) ^ (0 & -53205)), true && (_injected_loop_counter != (0 & -6808)))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0 & -6808, 0 ^ (0 & -6808))), min((0 & -6808), (0 & -6808))), int(ivec3(_GLF_IDENTITY((0 & -6808), 1 * (_GLF_IDENTITY((0 & -6808), int(ivec2((0 & -6808), 0))))), 1, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) >> 0)))), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false)))))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), false)))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), false))))))))) || (_GLF_IDENTITY(_injected_loop_counter != (0 & -6808), true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) != (0 & -6808)), true && (_GLF_IDENTITY((_injected_loop_counter != (0 & -6808)), false || ((_injected_loop_counter != (0 & -6808))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 & -6808), min((0 & -6808), (0 & -6808))), int(ivec3((0 & -6808), 1, 0))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (bool(bool((injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(! (bool(bool((injectionSwitch.x > injectionSwitch.y)))), true, false)))))), _GLF_IDENTITY(true, bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))) && true))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))))))))))))), false)))))) || (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != (0 & -6808), true && _GLF_IDENTITY((_injected_loop_counter != (0 & -6808)), false || ((_injected_loop_counter != (0 & -6808)))))))), (! (_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((0 & -6808), min((0 & -6808), (0 & _GLF_IDENTITY(-6808, max(-6808, _GLF_IDENTITY(-6808, (-6808) ^ 0)))))), int(ivec3((0 & -6808), 1, 0))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), true && (bool(bool((_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(91.15))) > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(refract(vec2(-991.616, 5.0), vec2(-677.430, 8359.6032), -5061.9477)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))))))), false || ((! (bool(bool(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(refract(vec2(-991.616, 5.0), vec2(-677.430, 8359.6032), -5061.9477)))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) - 0.0)))))))))))))), false)))))) || _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != (0 & -6808), true && (_injected_loop_counter != (0 & -6808)))), bool(bvec4((_GLF_IDENTITY(_injected_loop_counter != (0 & -6808), true && (_injected_loop_counter != (0 & -6808)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))) || false))))))))); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((((1 & 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, ~ (~ (0))) ^ (_GLF_IDENTITY(int(3), int(3))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY((((1 & 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, ~ (~ (0))) ^ (_GLF_IDENTITY(int(3), int(3))))), 0 + ((((1 & 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, ~ (~ (0))) ^ (_GLF_IDENTITY(int(3), int(3))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, false || (false)))))))
                  break;
                 do
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (0)))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     return;
                    }
                  }
                }
              }
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true)), bool(bool(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true))))))), bool(bool(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))))))), false))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false, (false) || false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((_GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), (_GLF_IDENTITY(true, ! (! (true))) ? _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), min(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), (ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1)) + ivec3(0, 0, 0))))), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), min(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1))))), ((int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), min(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1)))))) | (_GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), min(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1))))), int(ivec4((int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), min(ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1), ivec3(_GLF_IDENTITY(1, int(ivec3(1, 1, 0))), 0, 1))))), 1, 0, 0)))))))) : _GLF_FUZZED(bitfieldExtract(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))) ^ 1) & 83407)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, false, true)))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), true && ((false))) || false)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch))).x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))) : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) || false))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     else
      {
      }
    }
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(1u, 1u * (1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(1u, 1u * (1u))) << 0u))), 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(185869u, 8043u, 151746u)) : _GLF_IDENTITY(uvec3(0u, 0u, 0u), min(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | uvec3(0u, 0u, 0u)))))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u)))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), min(_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))))))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, uint(uvec2(workgroup_base, 1u)))))), _GLF_IDENTITY(1u, (1u) >> 0u), 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), uint(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, uint(uvec4(workgroup_base, 1u, 0u, 1u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), 0u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 0u, 1u))), _GLF_IDENTITY(1u, ~ (~ (1u))))), 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, _GLF_IDENTITY(1u, 0u + (1u))), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(_GLF_IDENTITY(workgroup_base, 0u + (workgroup_base)), 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), uint(uint(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u))))), ~ (~ (~ (_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) - (uvec3(0u, 0u, 0u) >> _GLF_IDENTITY(uvec3(6u), uvec3(6u)))))))))))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, _GLF_IDENTITY(0u, (0u) ^ 0u), 0u)))))))), _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u), min(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u), uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)))), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), max(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u)), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)) : _GLF_FUZZED(subgroup_base))))), 0u)), uint(uvec3(workgroup_base, 1u, 0u)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, _GLF_IDENTITY(0u, (0u) | (0u)))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u), clamp(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, _GLF_IDENTITY(0u, (0u) | (0u)))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u), _GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, _GLF_IDENTITY(0u, (0u) | (0u)))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, _GLF_IDENTITY(0u, (0u) | (0u)))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u), (uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, _GLF_IDENTITY(0u, (0u) | (0u)))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u)) << uvec4(0u, 0u, 0u, 0u))) << (uvec4(0u, 0u, 0u, 0u) | uvec4(0u, 0u, 0u, 0u))), uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, _GLF_IDENTITY(0u, (0u) | (0u)))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u)))), 1u * (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u)), (true ? uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u)) : _GLF_FUZZED(uvec4(87441u, 42546u, 133242u, 136766u)[3]))), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))), 1u, 1u, 0u)))))) / 1u)) - 0u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), max(uint(_GLF_ZERO(0.0, injectionSwitch.x)), uint(_GLF_ZERO(0.0, injectionSwitch.x)))) ^ (_GLF_IDENTITY(uint(uvec3(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(1u, 1u * (1u))) | (_GLF_IDENTITY(_GLF_IDENTITY(1u, 1u * (1u)), (_GLF_IDENTITY(1u, 1u * (1u))) << 0u))), 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), max(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), _GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), (max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))) | (_GLF_IDENTITY(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), (max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))) >> 0u))), 1u, 1u), ~ (~ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), (max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))) | (_GLF_IDENTITY(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), (max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))) >> 0u))), 1u, 1u), (uvec3(_GLF_IDENTITY(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), (max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))) | (_GLF_IDENTITY(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), (max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u)))) >> 0u))), 1u, 1u)) >> uvec3(0u, 0u, 0u)))))) ^ uvec3(0u, 0u, 0u))))), uint(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), 0u, 0u, 1u))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), uint(uint(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u)))))))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), uint(uint(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))), uint(uint(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u)))))))))) / 1u))), _GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), _GLF_IDENTITY(max(uint(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), uint(_GLF_IDENTITY(uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u), (uvec3(max(uint(uvec3(workgroup_base, 1u, 0u)), uint(uvec3(workgroup_base, 1u, 0u))), 1u, 1u)) ^ uvec3(0u, 0u, 0u))))))), (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), max(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, min(1u, 1u))) | (1u)), _GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(workgroup_size) : 1u)) : _GLF_FUZZED(subgroup_base))))), 0u)), uint(uvec3(workgroup_base, 1u, 0u)))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, 1u, 0u)), max(uint(uvec3(workgroup_base, 1u, 0u)), uint(_GLF_IDENTITY(uvec3(workgroup_base, 1u, 0u), (uvec3(workgroup_base, 1u, 0u)) >> (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))), 1u, _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) << 0u), 1u)), 0u)), 1u * (uint(uvec4(_GLF_IDENTITY(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) | (_GLF_IDENTITY(1u, (1u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u)), max(uint(uvec3(workgroup_base, _GLF_IDENTITY(1u, (1u) | (1u)), 0u)), uint(uvec3(workgroup_base, 1u, 0u)))), 1u, 1u, 0u)))))) / 1u)) - 0u)))) + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(clamp((subgroup_local_id + 1), (subgroup_local_id + 1), (subgroup_local_id + 1)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (clamp(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << (0u | 0u)), (subgroup_local_id) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) + 1), 0u ^ ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) + 1)))) ^ 0u), (subgroup_local_id + 1))), (subgroup_local_id + _GLF_IDENTITY(1, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (1))), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))))) % subgroup_size), 0u | ((_GLF_IDENTITY((subgroup_local_id + 1), _GLF_IDENTITY(clamp((subgroup_local_id + 1), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ~ (_GLF_IDENTITY(~ ((subgroup_local_id + 1)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (~ ((subgroup_local_id + 1))))))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (clamp(_GLF_IDENTITY((subgroup_local_id + 1), clamp(_GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) | ((subgroup_local_id + 1))), _GLF_IDENTITY((subgroup_local_id + 1), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) + 1), 0u ^ ((_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + (0u >> _GLF_IDENTITY(uint(0u), uint(0u)))))) + 1)))) ^ _GLF_IDENTITY(0u, min(0u, 0u))), (subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1)))))), (subgroup_local_id + 1), _GLF_IDENTITY((subgroup_local_id + 1), ((subgroup_local_id + 1)) << 0u))))) % subgroup_size)));
 uint read = 0;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
          }
        }
       continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
           do
            {
             do
              {
               do
                {
                 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))))) && true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       do
                        {
                         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(99460) : 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), ! (! (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(4178.6911), _GLF_FUZZED(-5.4)), bvec2(false, false))))).y)))))))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), true && (bool(injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(42.56)), bool(false))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), true && (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((+ -84.16)), _GLF_FUZZED(vec4(3053.5569, -622.762, 5920.4009, 54.37).a)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(42.56)), _GLF_IDENTITY(bool(false), true && (bool(false))))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))))))), true && (bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), true, false))))))))
                    return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0)), min(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2(0.5, -8.4, -3.5, 5.5)))), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0)))))).y, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0)), min(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2(0.5, -8.4, -3.5, 5.5)))), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0)))))).y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0)))) - vec2(0.0, 0.0)), min(_GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) - mat2(0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat2(0.5, -8.4, -3.5, 5.5)))), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(vec2(-3.4, -1.1)) : (injectionSwitch) * mat2(1.0)))))).y))))));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | 0)))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       atomicStore(buf[next_virtual_gid], uint(1), 4, _GLF_IDENTITY(64, (64) << 0), 4);
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.0)), float(injectionSwitch.y), bool(true)))))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 58866)); _injected_loop_counter --)
          {
           do
            {
             if((subgroup_local_id % _GLF_IDENTITY(2, (2) >> 0)) == 0)
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, (true) && true), false, false)), bool(bool(bool(bvec4(false, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), true && (_GLF_IDENTITY(true, (true) && true))), false, false)))))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 1.0 * (injectionSwitch[0])), injectionSwitch[1])).y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7.7) : injectionSwitch.y)), injectionSwitch.y)))))), (true ? _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7.7) : injectionSwitch.y)), injectionSwitch.y)))))) : _GLF_FUZZED(6.2))), float(mat4x2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4470.9971)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]), min(_GLF_IDENTITY(vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1])) * mat2(1.0)), vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]))), bvec2(false, true)), clamp(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4470.9971)), vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]), bvec2(false, true)), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4470.9971)), vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]), bvec2(false, true)), _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4470.9971)), vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, false, true))))), true)), (true ? mix(vec2((injectionSwitch)[0], _GLF_FUZZED(4470.9971)), vec2(_GLF_FUZZED(-254.410), (injectionSwitch)[1]), bvec2(false, true)) : _GLF_FUZZED(vec2(0.1, -6.2))))))).y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)))))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(6.5) : 1.0)))), 1.0, 1.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(_GLF_IDENTITY(0.0, (0.0) * cos(tan(0.0))), 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))))))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
                      break;
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         break;
                        }
                       break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), sqrt(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), (float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), max(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-3.1)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), sqrt(1.0), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0, exp(0.0), 1.0, 1.0, log(1.0), 1.0, 0.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))) + 0.0)) > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       else
                        {
                         do
                          {
                           for(int _injected_loop_counter = (0 ^ _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), ~ (~ ((~ (1)))))), 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0 | 0, _GLF_IDENTITY((0 | 0), ((0 | 0)) - 0) << (_GLF_IDENTITY(0, (true ? _GLF_IDENTITY(0, clamp(0, 0, 0)) : _GLF_FUZZED(_injected_loop_counter))) ^ 0))), (_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) << (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(_injected_loop_counter) : 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(false, (false) || false) ? _GLF_FUZZED(_injected_loop_counter) : 0))) | 0) ^ 0, 0 ^ (0 ^ 0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(0 | 0, (0 | 0) << (0 ^ 0))), max((_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0)), min(_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0)), 0 | (_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0)))), _GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0)), 0 ^ (_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0)))), _GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, int(ivec4(0, 0, 0, 1)))))) << (0 ^ 0))))))), (_GLF_IDENTITY(0 | 0, (0 | 0) << _GLF_IDENTITY((0 ^ 0), _GLF_IDENTITY(((0 ^ 0)), (_GLF_IDENTITY(true, (true) || false) ? ((0 ^ 0)) : _GLF_FUZZED(_injected_loop_counter))) | ((0 ^ 0))))))), (_GLF_IDENTITY(0 | 0, (0 | _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(0, 0))) | (0))) << (0 ^ 0)))))) - 0)); _injected_loop_counter --)
                            {
                             if(_GLF_DEAD(false))
                              break;
                             do
                              {
                               subgroupAll(false);
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                             if(_GLF_DEAD(false))
                              continue;
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              return;
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               read = atomicLoad(buf[virtual_gid], 4, 64, 2);
              }
             else
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false)))), (bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), false, false))))) && true))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)) * sqrt(1.0)), _GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             return;
                            }
                           else
                            {
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       continue;
                      }
                    }
                  }
                }
               subgroupAll(false);
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                continue;
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) - 0), 64, 2);
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), 1.0, 1.0, 1.0)))))) - 0.0), injectionSwitch.x)), (false ? _GLF_FUZZED(3.9) : _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), 1.0, 1.0, 1.0)))))) - 0.0), injectionSwitch.x)))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x)) > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (true ? mat2(1.0) * (injectionSwitch) : _GLF_FUZZED(vec2(5357.8906, 424.396))))), 0.0, sqrt(0.0)))).x > injectionSwitch.y))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), true, false, false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))))), true, false, false))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false, false))))))))) && true))
          continue;
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))), (bool(bvec2(false, true))) || false))))
            break;
           return;
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), true && ((false))))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 0), clamp((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) / 1) ^ 0), (1 ^ 0), _GLF_IDENTITY((_GLF_IDENTITY(1, 0 ^ (1)) ^ 0), ((1 ^ 0)) / 1)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         else
          {
          }
         subgroupBarrier();
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), (true ? _GLF_IDENTITY(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), max(vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]), vec2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))[0], injectionSwitch[1]))) : _GLF_FUZZED(vec2(-8.4, -903.384))))).y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(false, true && (false)) || (_GLF_WRAPPED_LOOP(false))));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), false))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(true), true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 atomicStore(checker[_GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))], _GLF_IDENTITY(read, (read) / 1u), 4, 64, 4);
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)))) || false), (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(94747))), min(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(94747))), ~ (~ (_GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(94747)))))), _GLF_IDENTITY(int(2), (true ? int(2) : _GLF_FUZZED(94747))))), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true)))))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))), true && (_GLF_DEAD(false))))
  {
   do
    {
     return;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))) || false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
