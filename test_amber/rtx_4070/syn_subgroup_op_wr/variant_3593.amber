#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = _GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))), (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup) >> 0u);
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))))));
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 0u))))))), (uint(uint(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 0u)))))))) ^ 0u)) * subgroup_size, (0u | 0u) ^ (subgroup_id * subgroup_size));
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(false, false || (false)))))))))))), bool(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))), true))))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = subgroup_base;
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base, (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base, _GLF_IDENTITY(uvec4(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[0], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[1], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[2], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[3]), (uvec4(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[0], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[1], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[2], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base[3])) + (uvec4(0u, 0u, 0u, 0u) & uvec4(137337u, 52599u, 17676u, 94745u))))) - uvec4(0u, 0u, 0u, 0u)).w, min(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)), clamp(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w), ((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(max(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)), _GLF_IDENTITY(workgroup_base, max(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))))), workgroup_base), ~ (~ (_GLF_IDENTITY(max(workgroup_base, workgroup_base), min(max(workgroup_base, workgroup_base), max(workgroup_base, workgroup_base))))))) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)) | 0u), ((_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)) ^ _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) | (0u | 0u))))) | (workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, (true ? GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w : _GLF_FUZZED(subgroup_size))), max(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, (true ? GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w : _GLF_FUZZED(subgroup_size))), _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, (true ? GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w : _GLF_FUZZED(subgroup_size)))))) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)))), workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true)) ? _GLF_FUZZED(atomicAnd(workgroup_size, _GLF_IDENTITY(workgroup_id, uint(_GLF_IDENTITY(uvec3(workgroup_id, 1u, _GLF_IDENTITY(0u, max(0u, 0u))), (uvec3(workgroup_id, 1u, 0u)) + uvec3(0u, 0u, 0u)))))) : GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, ~ (~ (workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, ~ (~ (workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w))), 0u | (_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, ~ (~ (workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)))))) | (_GLF_IDENTITY(workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, ~ (~ (workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w))))))) + subgroup_local_id;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u), workgroup_base)), workgroup_base)) + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, min(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w, GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) / (1 & 1)))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                  {
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 1)); _injected_loop_counter ++)
                    {
                     do
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), bool(bvec2(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), clamp(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), _GLF_IDENTITY(float(mat3x2(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(-7.2, mix(float(_GLF_FUZZED(vec3(-8642.1460, -977.362, 66.17).x)), float(_GLF_IDENTITY(-7.2, min(-7.2, _GLF_IDENTITY(-7.2, 1.0 * (-7.2))))), bool(true))))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), log(1.0), 1.0, 0.0, 1.0, 1.0)), (false ? _GLF_FUZZED(-41.84) : float(mat3x2(_GLF_IDENTITY(_GLF_ZERO(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-7.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), injectionSwitch.x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * abs(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0))), log(1.0), 1.0, 0.0, 1.0, 1.0)))))), _GLF_IDENTITY(false, bool(bool(false))))))); _injected_loop_counter --)
                        {
                         do
                          {
                           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) / 1)) / 1))), ~ (~ (((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), _GLF_IDENTITY(int(1), 0 + (int(1))))))) >> _GLF_IDENTITY(int(1), int(1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                            {
                             GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x = _GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid));
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))));
                    }
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint read = 0;
 do
  {
   do
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, false, true)))), false || (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), bool(bvec4(bool(injectionSwitch.x > injectionSwitch.y), true, false, true)))))))))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)), ! (! (bool(bvec4(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, false)))))))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, ~ (~ (1)))) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true)))
                    {
                    }
                   else
                    {
                     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = _GLF_IDENTITY(read, 0u | (read));
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true)))), (! (false)) || false)))));
              }
             else
              {
              }
            }
           else
            {
            }
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
          {
          }
         else
          {
           do
            {
             atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x], uint(1), 4, 64, 4);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))) : _GLF_FUZZED((+ -3367.9744)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-796.828), _GLF_FUZZED((-2352.0662))), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], clamp(_GLF_IDENTITY((injectionSwitch)[0], min((injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_IDENTITY((injectionSwitch), (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true))))), (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(vec2(-492.004, -6005.6583), max(_GLF_IDENTITY(vec2(-492.004, -6005.6583), vec2(_GLF_IDENTITY(vec2(vec2(-492.004, -6005.6583)), (false ? _GLF_FUZZED(injectionSwitch) : vec2(vec2(-492.004, -6005.6583)))))), vec2(-492.004, -6005.6583)))) : _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0))))[0], (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2(mat4(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))))))), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))), mat2(mat4(mat2(injectionSwitch.y, 0.0, 1.0, 1.0)))))))), true)))))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), ! _GLF_IDENTITY((! (false)), true && (_GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), _GLF_IDENTITY(bool(bvec2(bool((! (false))), false)), ! (! (bool(bvec2(bool((! (false))), false)))))))))))))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               do
                                {
                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true), true)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true)))))), (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true))))))) || false))), (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), true, true)))))), (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), _GLF_IDENTITY(bool(bvec3(false || (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec3(false || (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bvec3(false || (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))))), (bool(bool(_GLF_IDENTITY(bool(bvec3(false || (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))), ! (! (bool(bvec3(false || (true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, true))))))))))) && true)))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), ! (! (true))), true, true))))))) || false)))) && true)), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), true)))))) || false)))
                                  {
                                   for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))), (int(6)) | (_GLF_IDENTITY(int(6), max(_GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))), _GLF_IDENTITY(int(6), clamp(int(6), int(6), int(6))))))))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
                                    {
                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x < injectionSwitch.y))))
                                      {
                                       do
                                        {
                                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                          {
                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(bool(_GLF_IDENTITY((false), ((false)) && true)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (bool(bool(_GLF_IDENTITY((false), ((false)) && true)))) || false)) && true)), true), false, false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(bool(_GLF_IDENTITY((false), ((false)) && true)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (bool(bool(_GLF_IDENTITY((false), ((false)) && true)))) || false)) && true)), true), false, false)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(bool(_GLF_IDENTITY((false), ((false)) && true)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (bool(bool(_GLF_IDENTITY((false), ((false)) && true)))) || false)) && true)), true), false, false)))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)), bool(bool(_GLF_IDENTITY((false), ((false)) && true)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((false), ((false)) && true))), (bool(bool(_GLF_IDENTITY((false), ((false)) && true)))) || false)) && true)), true), false, false))))) || false)) || false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ((_GLF_IDENTITY(false, false || (false)))) && true)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ((false)) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false), bool(bool(_GLF_IDENTITY((false), ((false)) && true)))))), (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((false), ((false)) && true)), bool(bvec3(bool(_GLF_IDENTITY((false), ((false)) && true)), true, true)))))) && true), true), false, false)))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (false)), (! (! (false))) || false), true && (! (! (false)))))), false || (! (! (_GLF_IDENTITY(! (! (false)), true && (! (! (false))))))))))), ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), true && ((false))))), false || (! (false)))), true && (! (! (false)))))))))) && _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)), bool(bvec3(bool(bvec2((injectionSwitch.x < injectionSwitch.y), true)), true, true)))))))), false || (_GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)), true && (bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, false, true)))))))))), ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))), ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), true && (bool(bvec2(false, false))))), ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) || false)), false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), (true) || false)), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true)))))) || false)), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false)))), ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec2((false), false)))))))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true)))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true))))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true))))))))) || false)))))) || false)), ! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true)), false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false)))))), (false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ((! (false))) && true))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true)))))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))) || _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, true && (false)))), true, true)))))) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false))))), true), false, true)))))) || false), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (_GLF_IDENTITY(! (! (false)), false || (! (! (false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false)))))), true && ((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false)))))) || false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true)))))) || false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true)), (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), (_GLF_IDENTITY((! (false)), ! (! ((! (false)))))) || false)), false || (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))) || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, ! (! (false))))))) || false)), true), false, true)))))) || false)), (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))), _GLF_IDENTITY(bool(bvec4((false), true, true, false)), true && (bool(bvec4((false), true, true, false))))))), false || (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), ((false)) && true)), bool(bvec3((! (false)), false, true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), true && (bool(bvec3(false, false, false)))))))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true)))))) || false)), ! (! (false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), false || ((! (false))))), false || (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), false || (bool(bool(false)))))) || false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(false || (_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (false || (_GLF_IDENTITY((! (false)), bool(bvec2((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (! (false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))))), _GLF_IDENTITY(bool(bvec4(! ((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), false, false))))))))), false, false, false)), bool(bvec4(bool(bvec4(! ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY(_GLF_IDENTITY((false), ! (! ((false)))), ((false)) || false))))), false, false, false)), true, true, true))))))), true), false, true)))))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), bool(bvec2((false), true))), false, false, false))))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), true && ((_GLF_IDENTITY(false, ! (! (false))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))), true && ((_GLF_IDENTITY(false, ! (! (false)))))))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(false, ! (! (false))))), true), false, true)))))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))) && true))) || false))))))))
                                            {
                                            }
                                           else
                                            {
                                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
                                              {
                                               if(_GLF_WRAPPED_IF_TRUE(true))
                                                {
                                                 do
                                                  {
                                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                                    {
                                                     do
                                                      {
                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                        {
                                                        }
                                                       else
                                                        {
                                                         do
                                                          {
                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                            {
                                                             do
                                                              {
                                                               if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) - 0u)) == 0, true, false), bvec3(bvec4(bvec3((subgroup_local_id % 2) == 0, true, false), false))))))
                                                                {
                                                                 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                                                  {
                                                                   do
                                                                    {
                                                                     subgroupAll(false);
                                                                    }
                                                                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                  }
                                                                 do
                                                                  {
                                                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
                                                                    {
                                                                     if(_GLF_WRAPPED_IF_TRUE(true))
                                                                      {
                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                        {
                                                                        }
                                                                       else
                                                                        {
                                                                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
                                                                          {
                                                                          }
                                                                         else
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                            {
                                                                            }
                                                                           else
                                                                            {
                                                                             if(_GLF_WRAPPED_IF_FALSE(false))
                                                                              {
                                                                              }
                                                                             else
                                                                              {
                                                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                                {
                                                                                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) < injectionSwitch.y))))
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                    {
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                     do
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                                                                          {
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
                                                                                            {
                                                                                             for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                                                                                              {
                                                                                               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                                                {
                                                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                                                  {
                                                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                                    {
                                                                                                    }
                                                                                                   else
                                                                                                    {
                                                                                                     _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, 64, 2), 0u | _GLF_IDENTITY((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, 64, 2), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (_GLF_IDENTITY(64, int(ivec4(64, 1, 0, 0)))) * 1), 64)), 2)))), ((_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, 64, 2), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, min(_GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, _GLF_IDENTITY(int(ivec2(64, 1)), _GLF_IDENTITY((int(ivec2(64, 1))), clamp((int(ivec2(64, 1))), _GLF_IDENTITY((int(ivec2(64, 1))), max((int(ivec2(64, 1))), (int(ivec2(64, 1))))), _GLF_IDENTITY((int(ivec2(64, 1))), ((int(ivec2(64, 1)))) * 1))) ^ 0)), int(ivec4(64, 1, 0, 0)))) * 1), 64)), 2))))) | 0u));
                                                                                                    }
                                                                                                  }
                                                                                                 else
                                                                                                  {
                                                                                                  }
                                                                                                }
                                                                                               else
                                                                                                {
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                        }
                                                                                      }
                                                                                     while(_GLF_WRAPPED_LOOP(false));
                                                                                    }
                                                                                  }
                                                                                 else
                                                                                  {
                                                                                  }
                                                                                }
                                                                               else
                                                                                {
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                     else
                                                                      {
                                                                      }
                                                                    }
                                                                   else
                                                                    {
                                                                    }
                                                                  }
                                                                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                                                                }
                                                               else
                                                                {
                                                                 do
                                                                  {
                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                    {
                                                                    }
                                                                   else
                                                                    {
                                                                     for(int _injected_loop_counter = (60010 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                                                                      {
                                                                       do
                                                                        {
                                                                         if(_GLF_WRAPPED_IF_TRUE(true))
                                                                          {
                                                                           if(_GLF_WRAPPED_IF_TRUE(true))
                                                                            {
                                                                             for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                                                                              {
                                                                               do
                                                                                {
                                                                                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                                  {
                                                                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                    {
                                                                                    }
                                                                                   else
                                                                                    {
                                                                                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                                      {
                                                                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                                                                        {
                                                                                        }
                                                                                       else
                                                                                        {
                                                                                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                                                                          {
                                                                                           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(false || ((injectionSwitch.x < injectionSwitch.y)), false || (false || ((injectionSwitch.x < injectionSwitch.y)))))), (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y)))), (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || ((injectionSwitch.x < injectionSwitch.y))))) && true)) || false)))
                                                                                            {
                                                                                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                                                                                              {
                                                                                               do
                                                                                                {
                                                                                                 subgroupAll(false);
                                                                                                }
                                                                                               while(_GLF_WRAPPED_LOOP(false));
                                                                                              }
                                                                                            }
                                                                                           else
                                                                                            {
                                                                                            }
                                                                                          }
                                                                                         else
                                                                                          {
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                     else
                                                                                      {
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                              }
                                                                            }
                                                                           else
                                                                            {
                                                                            }
                                                                          }
                                                                         else
                                                                          {
                                                                          }
                                                                        }
                                                                       while(_GLF_WRAPPED_LOOP(false));
                                                                      }
                                                                    }
                                                                  }
                                                                 while(_GLF_WRAPPED_LOOP(false));
                                                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                                                  {
                                                                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) + 0, ((_GLF_IDENTITY(1, (1) - 0)) + 0) - 0))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) - 0)) + 0, _GLF_IDENTITY(((_GLF_IDENTITY(1, (1) - 0)) + 0), clamp(((_GLF_IDENTITY(1, (1) - 0)) + 0), _GLF_IDENTITY(((_GLF_IDENTITY(1, (1) - 0)) + 0), 0 | (((_GLF_IDENTITY(1, (1) - 0)) + 0))), ((_GLF_IDENTITY(1, (1) - 0)) + 0))) - 0)))) || false); _injected_loop_counter ++)
                                                                    {
                                                                     do
                                                                      {
                                                                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) ^ 0) > 0) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * determinant(mat3(1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))), true && (injectionSwitch.x > injectionSwitch.y)))))); _injected_loop_counter --)
                                                                        {
                                                                         _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, 0u + (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(num_workgroup) : virtual_gid))))))], 4, _GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1))), max(_GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1))), ~ (~ (_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1)))))), _GLF_IDENTITY(_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1))), _GLF_IDENTITY((_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1)))) >> 0, ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1)))) >> 0, max(_GLF_IDENTITY((_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1)))) >> 0, 0 ^ ((_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1)))) >> 0)), (_GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1)))) >> 0)))))))), 2), _GLF_IDENTITY(0u, (0u) | (0u)) | (_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, 0u + (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(num_workgroup) : virtual_gid))))))], 4, _GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1))), 2), (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u ^ (_GLF_IDENTITY(virtual_gid, 0u + (_GLF_IDENTITY(virtual_gid, (false ? _GLF_FUZZED(num_workgroup) : virtual_gid))))))], 4, _GLF_IDENTITY(64, int(ivec4(64, 0, 0, 1))), 2)) << 0u)));
                                                                        }
                                                                      }
                                                                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                                    }
                                                                  }
                                                                 else
                                                                  {
                                                                  }
                                                                }
                                                              }
                                                             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))));
                                                            }
                                                          }
                                                         while(_GLF_WRAPPED_LOOP(false));
                                                        }
                                                      }
                                                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                                                    }
                                                   else
                                                    {
                                                    }
                                                  }
                                                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                                                }
                                               else
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
                                      }
                                     else
                                      {
                                      }
                                    }
                                  }
                                 else
                                  {
                                  }
                                }
                               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                              }
                             else
                              {
                              }
                            }
                          }
                         else
                          {
                          }
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) + vec2(0.0, 0.0))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((5.5)), _GLF_FUZZED(430.617)), bvec2(false, false))).y)) || (false))));
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_LOOP(false))), bool(bool((! (_GLF_WRAPPED_LOOP(false))))))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false))))))) || false));
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (_GLF_IDENTITY(~ (_injected_loop_counter), (~ (_injected_loop_counter)) >> 0))) > ((_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, true))) ? _GLF_IDENTITY(1, 0 ^ (1)) : _GLF_FUZZED(_injected_loop_counter))) ^ 0, clamp(1 ^ 0, _GLF_IDENTITY(1, (false ? _GLF_FUZZED(findMSB(workgroup_size)) : 1)) ^ 0, _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, 1 ^ 0))))) ^ 1), (_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(int(ivec2((~ (_injected_loop_counter)), (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) ^ ((0 ^ 0) << _GLF_IDENTITY(int(6), int(6))), (_GLF_IDENTITY((int(7)) ^ ((0 ^ 0) << _GLF_IDENTITY(int(6), int(6))), max(_GLF_IDENTITY((int(7)) ^ ((0 ^ 0) << _GLF_IDENTITY(int(6), int(6))), ((int(7)) ^ ((_GLF_IDENTITY(0 ^ 0, (0 ^ 0) | (0 ^ 0))) << _GLF_IDENTITY(int(6), int(6)))) / 1), (int(7)) ^ ((0 ^ _GLF_IDENTITY(0, (0) - 0)) << _GLF_IDENTITY(int(6), int(6)))))) | 0)), int(7))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec2((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(7), int(7)))))), (ivec2((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(7), int(7))))))) | (_GLF_IDENTITY(ivec2((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(7), int(7)))))), ivec2(ivec3(_GLF_IDENTITY(ivec2((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(7), int(7)))))), (false ? _GLF_FUZZED(ivec2(-91677, 53616)) : ivec2((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(7), int(7)))))))), 0))))), ivec2(0, 0) | (ivec2((~ (_injected_loop_counter)), _GLF_IDENTITY((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) >> 0)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 << _GLF_IDENTITY(int(7), int(7)))))))))) / 1)) >> 0)), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(~ (_injected_loop_counter), _GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(int(ivec2((~ (_injected_loop_counter)), (0 << _GLF_IDENTITY(int(7), int(7))))), (int(ivec2((~ (_injected_loop_counter)), (0 << _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, int(int(_GLF_IDENTITY(7, max(7, 7))))))))))) / 1)) >> 0)), (true ? (_GLF_IDENTITY(_GLF_IDENTITY(~ (_injected_loop_counter), int(int(_GLF_IDENTITY(~ (_injected_loop_counter), min(~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter))), _GLF_IDENTITY(~ (_injected_loop_counter), (true ? ~ (_injected_loop_counter) : _GLF_FUZZED(_injected_loop_counter)))))))), _GLF_IDENTITY((~ (_injected_loop_counter)), _GLF_IDENTITY(int(ivec2((~ (_injected_loop_counter)), (0 << _GLF_IDENTITY(int(7), int(7))))), (int(ivec2((~ (_injected_loop_counter)), (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))))) / 1)) >> _GLF_IDENTITY(0, _GLF_IDENTITY((0) - (-51688 & 0), ((0) - (-51688 & 0)) >> (0 << _GLF_IDENTITY(int(5), int(5))))))) : _GLF_FUZZED(-95391))))))) > ((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY((true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) ^ 0), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)), max((true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)), (true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)))), (_GLF_IDENTITY((true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)), max((true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | 0)), int(_GLF_IDENTITY(ivec4((1), 0, 0, 0), min(ivec4((1), 0, 0, 0), ivec4((1), 0, 0, 0)))))) ^ 0)))) : _GLF_FUZZED(_injected_loop_counter), (true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY((1), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)) | (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), min(_GLF_IDENTITY(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), int(ivec4(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 1, 1, 0))), _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))))) ^ _GLF_IDENTITY((1), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), max((1), _GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), max((1), (1)))))))) : _GLF_FUZZED(_injected_loop_counter), 0 ^ (true ? _GLF_IDENTITY(1, 0 ^ _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((1), max((1), (1))), (_GLF_IDENTITY(_GLF_IDENTITY((1), max((1), (1))), min(_GLF_IDENTITY((1), max((1), (1))), _GLF_IDENTITY((1), max((1), (1)))))) >> (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | 0)))), max((1), (1)))) : _GLF_FUZZED(_injected_loop_counter)))) | 0))))))) + 0)) ^ 0, clamp(1 ^ 0, 1 ^ 0, _GLF_IDENTITY(1 ^ 0, min(1 ^ 0, 1 ^ 0))))) ^ 1)) && true)); _injected_loop_counter --)
            {
             subgroupBarrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
  }
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))) && true))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, true)), bool(bvec2(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x < injectionSwitch.y))), false, true)), true)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(76003) : 1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false))))))))
                  {
                  }
                 else
                  {
                   for(int _injected_loop_counter = (1 & 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != (0 >> _GLF_IDENTITY(int(4), int(4)))), true && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4)))), bool(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), min(_GLF_IDENTITY(int(4), int(4)), _GLF_IDENTITY(int(4), int(4))))))))))); _injected_loop_counter --)
                    {
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false)))), bool(bvec3(! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(true, false || (true)) && (false)))), false, false))))))
                      {
                      }
                     else
                      {
                       do
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (false ? _GLF_FUZZED(_injected_loop_counter) : _injected_loop_counter)) != (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1), 1), (ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1), 1)) | (ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1), 1)))), (true ? int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1), 1), (ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1), 1)) | (ivec2(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) / 1), 1)))) : _GLF_FUZZED(_injected_loop_counter)))), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0, max(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0, min((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0)), _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0, max(_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0, min((0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0, (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0)), (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))) - 0)))) ^ 0))); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_TRUE(true))
                                {
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(true))
                                    {
                                     atomicStore(checker[virtual_gid], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z, _GLF_IDENTITY(4, _GLF_IDENTITY(max(4, 4), (max(4, 4)) + 0)), 64, 4);
                                    }
                                   else
                                    {
                                    }
                                  }
                                }
                               else
                                {
                                }
                              }
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
