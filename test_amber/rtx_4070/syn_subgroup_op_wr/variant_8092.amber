#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           return;
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ((false) && true) && true))))))))), (_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 0.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))).x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) ^ 0)); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)), (bool(bvec2(injectionSwitch.x > injectionSwitch.y, true))) || false), false, true))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), ! (! (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x), max((injectionSwitch.x), _GLF_IDENTITY((injectionSwitch.x), (true ? (injectionSwitch.x) : _GLF_FUZZED(-1.6))))) + 0.0))) > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) : _GLF_FUZZED(-8.2))), (injectionSwitch.y) - 0.0)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) && true))), true && (bool(bool(_GLF_IDENTITY(true, (true) && true)))))), (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)) && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != 1), ((_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != 1)) && true))), false || (! (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != 1)))))))); _injected_loop_counter ++)
            {
             return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
            }
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false))), false))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), false || (false)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), false || (_GLF_IDENTITY(false, false || (false))))))))))))))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      break;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec2(-36.02, 468.421).g)), float(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), bool(_GLF_IDENTITY(true, ! (! (true)))))))), true && _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))));
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)), 1u * (_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)))), clamp(_GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)), _GLF_IDENTITY(gl_NumWorkGroups.x, 1u * (gl_NumWorkGroups.x)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) >> uvec3(0u, 0u, 0u))[0], (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) | (_GLF_IDENTITY(gl_NumWorkGroups[0], min(_GLF_IDENTITY(gl_NumWorkGroups[0], 0u + (gl_NumWorkGroups[0])), _GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) ^ 0u))))))), gl_NumWorkGroups[1], gl_NumWorkGroups[2])).x, gl_NumWorkGroups.x)), 0u | (_GLF_IDENTITY(gl_NumWorkGroups.x, clamp(gl_NumWorkGroups.x, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) | (gl_NumWorkGroups[0])))), gl_NumWorkGroups[1], gl_NumWorkGroups[2]), (false ? _GLF_FUZZED(uvec3(198849u, 54115u, 84952u)) : _GLF_IDENTITY(uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) | (gl_NumWorkGroups[0])))), gl_NumWorkGroups[1], gl_NumWorkGroups[2]), ~ (~ (uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(gl_NumWorkGroups[0], (gl_NumWorkGroups[0]) | (gl_NumWorkGroups[0])))), gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))))).x, gl_NumWorkGroups.x))))) * 1u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize))), min(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize))), _GLF_IDENTITY(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize))), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize))), clamp(max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize))), max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize))), max(gl_WorkGroupSize, _GLF_IDENTITY(gl_WorkGroupSize, (_GLF_IDENTITY(gl_WorkGroupSize, (true ? _GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)) : _GLF_FUZZED(uvec3(127407u, 129588u, 36665u))))) | (gl_WorkGroupSize)))))))))).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), (bool(bvec2(_GLF_DEAD(false), true))) || false)), false))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - sqrt(0.0)) > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec3(workgroup_base + subgroup_id * subgroup_size, 0u, 0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, clamp(1, 1, 1))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | _GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) << 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), min(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))))))) * 1u), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u))) / 1u) | (subgroup_id * subgroup_size), (_GLF_IDENTITY(0u | (subgroup_id * subgroup_size), 1u * (0u | (_GLF_IDENTITY(subgroup_id, 0u + (_GLF_IDENTITY(subgroup_id, min(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u))))) * subgroup_size)))) >> 0u)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size)), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))))) * 1u)) << 0u)) >> 0u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     do
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
        {
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(90.35)), vec2(_GLF_FUZZED(-8.8), (injectionSwitch)[1]), bvec2(false, true))).y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bool(false))))))))
              continue;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! (false))))) || false))), (injectionSwitch.x > injectionSwitch.y))));
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))))));
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), bool(bvec4(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), false, true, false)))))))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     return;
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), min(uint(1), _GLF_IDENTITY(uint(1), max(uint(1), uint(1))))), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bvec3((false), false, false)))), ((! _GLF_IDENTITY((false), bool(bvec3((false), false, false))))) || false))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, sqrt(1.0), 1.0, 1.0))), injectionSwitch)).x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x2(max(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, round(length(normalize(1.0)))))), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-96.91), _GLF_FUZZED(932.812)), bvec2(false, false))).x), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(77.48, 6.3, -2417.8752, 62.31).x)), bool(false))), 1.0, round(_GLF_IDENTITY(length(normalize(1.0)), max(_GLF_IDENTITY(length(normalize(1.0)), (length(normalize(1.0))) / 1.0), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0))))))))))) - 0.0), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x3(max(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(54.76))), injectionSwitch.x))), max(_GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, sqrt(1.0), 1.0, 1.0))), injectionSwitch)).x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x2(max(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, round(length(normalize(1.0)))))), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-96.91), _GLF_FUZZED(932.812)), bvec2(false, false))).x), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(77.48, 6.3, -2417.8752, 62.31).x)), bool(false))), 1.0, round(_GLF_IDENTITY(length(normalize(1.0)), max(_GLF_IDENTITY(length(normalize(1.0)), (length(normalize(1.0))) / 1.0), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0))))))))))) - 0.0), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x3(max(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(54.76))), injectionSwitch.x))), _GLF_IDENTITY(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, sqrt(1.0), 1.0, 1.0))), injectionSwitch)).x), clamp(_GLF_IDENTITY(_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x2(max(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, round(length(normalize(1.0)))))), (_GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x2(max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], min(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) / 1.0), (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-96.91), _GLF_FUZZED(932.812)), bvec2(false, false))).x), 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(vec4(77.48, 6.3, -2417.8752, 62.31).x)), bool(false))), 1.0, round(_GLF_IDENTITY(length(normalize(1.0)), max(_GLF_IDENTITY(length(normalize(1.0)), (length(normalize(1.0))) / 1.0), _GLF_IDENTITY(length(normalize(1.0)), min(length(normalize(1.0)), length(normalize(1.0))))))))))) - 0.0), _GLF_IDENTITY(max(injectionSwitch.x, injectionSwitch.x), float(mat4x3(max(injectionSwitch.x, injectionSwitch.x), 0.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0))), max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(54.76))), injectionSwitch.x)))))) > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (_GLF_IDENTITY(! (! (false)), (! (! (false))) && true))))))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       return;
      }
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, int(ivec3(1, 0, 1))), (_GLF_IDENTITY(1, int(ivec3(1, 0, 1)))) ^ (0 ^ 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), true && (false || (_GLF_IDENTITY(false, (false) && true)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   do
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_DEAD(false))
    break;
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), ! (! (_injected_loop_counter != (1 & 1)))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != (1 & 1), ! (! (_GLF_IDENTITY(_injected_loop_counter != (1 & 1), ! (! (_injected_loop_counter != (1 & 1))))))), ! (! (_injected_loop_counter != (1 & 1)))), true, true, true)))); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (subgroup_local_id + 1))) < subgroup_size)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && true)))
            return;
           continue;
          }
         atomicStore(checker[_GLF_IDENTITY(virtual_gid, (_GLF_IDENTITY(_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u), min(virtual_gid, virtual_gid))) / 1u)], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (4) + 0), (_GLF_IDENTITY(4, _GLF_IDENTITY((4) + 0, int(_GLF_IDENTITY(ivec2((4) + 0, 1), (false ? _GLF_FUZZED(ivec2(-55625, 17103)) : ivec2((4) + 0, 1))))))) | (_GLF_IDENTITY(4, (4) + 0))));
        }
       if(_GLF_DEAD(false))
        return;
       do
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | 0)) | (1)) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))), (false ? _GLF_FUZZED(mix(38912, -80630, true)) : _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(clamp(int(5), int(5), int(5)), (clamp(int(5), int(5), int(5))) >> 0)), ~ (~ (_GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))))))), int(_GLF_IDENTITY(5, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (5))))) >> _GLF_IDENTITY(int(5), int(5)), clamp((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) - 0)))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, 0 | (5)))))) | _GLF_IDENTITY((int(5)), ((int(5))) | (_GLF_IDENTITY((int(5)), 0 ^ ((int(5)))))))), ~ (~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, 0 | (5)))))) | _GLF_IDENTITY((int(5)), ((int(5))) | (_GLF_IDENTITY((int(5)), 0 ^ ((int(5)))))))))))) >> _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, (_GLF_IDENTITY(5, ~ (~ (5)))) | (5))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, _GLF_IDENTITY(~ (~ (5)), min(~ (~ (5)), _GLF_IDENTITY(~ (~ (5)), min(~ (~ (5)), ~ (~ (5)))))))), _GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))) : int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), min(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5))))))), (_GLF_IDENTITY((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))) : int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), min(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5))))))), min((false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))) : int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), min(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(_injected_loop_counter, 0 + (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0)))) : int(_GLF_IDENTITY(_GLF_IDENTITY(5, ~ (~ (5))), min(_GLF_IDENTITY(5, ~ (~ (5))), _GLF_IDENTITY(5, ~ (~ (5)))))))))) / 1)), int(5))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec3(0, 1, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4)), min(1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4)), 1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), 0 | (int(4))), int(4))))) >> _GLF_IDENTITY(int(4), int(4)))))), (0 & 1477) ^ (0))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false)))), (bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, false), bvec2(bvec4(bvec2(injectionSwitch.x > injectionSwitch.y, false), false, false))))) && true))) && true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))))
              continue;
             break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
             subgroupAll(false);
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
              break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        break;
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) : _GLF_FUZZED(_injected_loop_counter))) != (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), (_GLF_IDENTITY(int(3), (int(3)) - 0)) >> _GLF_IDENTITY(0, (0) + 0))))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) | (int(6))), int(6))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 | _GLF_IDENTITY((6), int(int(_GLF_IDENTITY((6), (_GLF_IDENTITY((6), ((6)) << 0)) ^ 0))))), ~ (~ (_GLF_IDENTITY(6, 0 | (6)))))) ^ 0))), min((int(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 | (6)), ~ (~ (_GLF_IDENTITY(6, 0 | (6)))))) ^ 0))), (int(_GLF_IDENTITY(6, (_GLF_IDENTITY(_GLF_IDENTITY(6, 0 | (6)), ~ (~ (_GLF_IDENTITY(6, 0 | (6)))))) ^ 0))))) | (int(6))), int(6)))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
                      return;
                     break;
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))) || false)))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, tan(vec2(0.0, 0.0)) + (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(_GLF_IDENTITY(-85.80, float(_GLF_IDENTITY(vec2(-85.80, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4172.9887))), 0.0, 0.0, 1.0))), min(vec2(-85.80, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0), (mat2x3(0.0, 0.0, 0.0, abs(0.0), 1.0, 1.0)) * mat2(1.0)))), 0.0, 1.0))), vec2(-85.80, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 0.0)) : _GLF_FUZZED(3.0))), 1.0))))))), -975.313)) : _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(181.147, max(181.147, _GLF_IDENTITY(181.147, max(181.147, 181.147))))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), true))), _GLF_IDENTITY(0.0, max(0.0, 0.0))))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_IDENTITY(_GLF_FUZZED(54.17), (_GLF_FUZZED(54.17)) * 1.0)), bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && true)), false, false))))), mix(vec2((_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), _GLF_IDENTITY(mix(vec3(_GLF_FUZZED(0.2), _GLF_IDENTITY((vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * mat2(1.0)), 0.0)), min((vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * mat2(1.0)), 0.0)), (vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * mat2(1.0)), 0.0))))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false)), vec3(1.0, 1.0, 1.0) * (mix(vec3(_GLF_FUZZED(0.2), _GLF_IDENTITY((vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0))))), 0.0)), min((vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * mat2(1.0)), 0.0)), (vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * mat2(1.0)), 0.0))))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(_GLF_IDENTITY(true, (true) || false), true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false))))))))[0], _GLF_FUZZED(3.9)), vec2(_GLF_FUZZED(-914.432), (_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1]), (vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1])) / vec2(1.0, 1.0)), bvec2(true, true))), 0.0))[1], (_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0), (true ? vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0) : _GLF_FUZZED(vec3(4.1, 94.28, -7.4)))))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_IDENTITY(vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)))))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), vec3(0.0, 0.0, 0.0) + (_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1]), (vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1])) / vec2(1.0, 1.0)), bvec2(true, true))), 0.0))[1], (_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0), (true ? vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0) : _GLF_FUZZED(vec3(4.1, 94.28, -7.4)))))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_IDENTITY(vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)))))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), max(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1]), (vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1])) / vec2(1.0, 1.0)), bvec2(true, true))), 0.0))[1], (_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0), (true ? vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0) : _GLF_FUZZED(vec3(4.1, 94.28, -7.4)))))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_IDENTITY(vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)))))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), _GLF_IDENTITY(vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1]), (vec2(_GLF_IDENTITY(((injectionSwitch)), mix(vec2((((injectionSwitch)))[0], _GLF_FUZZED(-9.0)), vec2(_GLF_FUZZED(1.3), (((injectionSwitch)))[1]), bvec2(false, true)))[0], ((injectionSwitch))[1])) / vec2(1.0, 1.0)), bvec2(true, true))), 0.0))[1], (_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0), (true ? vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), 0.0) : _GLF_FUZZED(vec3(4.1, 94.28, -7.4)))))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_IDENTITY(vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat4(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, cos(0.0), 1.0, 0.0, 0.0, abs(1.0), _GLF_ZERO(0.0, injectionSwitch.x), tan(0.0), 0.0, 1.0, 0.0)))))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, _GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))))))[1]), bvec2(false, true))))), mix(vec2(_GLF_FUZZED(7079.3022), _GLF_FUZZED(-4.0)), vec2((_GLF_IDENTITY((injectionSwitch), (false ? _GLF_IDENTITY(_GLF_FUZZED(vec2(-85.80, -975.313)), min(_GLF_FUZZED(vec2(-85.80, -975.313)), _GLF_IDENTITY(_GLF_FUZZED(vec2(-85.80, -975.313)), max(_GLF_FUZZED(vec2(-85.80, -975.313)), _GLF_FUZZED(vec2(-85.80, -975.313)))))) : _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), (mat2(injectionSwitch, 1.0, 0.0)) / mat2(1.0, 1.0, 1.0, 1.0))) / mat2(1.0, 1.0, 1.0, 1.0))))))[0], _GLF_IDENTITY(((injectionSwitch)), max(_GLF_IDENTITY(((injectionSwitch)), vec2(mat4x2(((injectionSwitch)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), ((injectionSwitch))))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), (_GLF_FUZZED(181.147)) / exp(0.0)), _GLF_FUZZED(_GLF_IDENTITY(68.27, mix(float(68.27), float(_GLF_FUZZED(0.2)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(_GLF_IDENTITY(((injectionSwitch)), clamp(((injectionSwitch)), ((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), clamp(((injectionSwitch)), ((injectionSwitch)), ((injectionSwitch))))))[0], (false ? _GLF_FUZZED(-384.940) : _GLF_IDENTITY(((injectionSwitch)), clamp(((injectionSwitch)), ((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), clamp(((injectionSwitch)), ((injectionSwitch)), _GLF_IDENTITY(((injectionSwitch)), _GLF_IDENTITY((((injectionSwitch))) * mat2(1.0), clamp((((injectionSwitch))) * mat2(1.0), (((injectionSwitch))) * mat2(1.0), (((injectionSwitch))) * mat2(1.0))))))))[0])), ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), vec2(mat2x4(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0, sqrt(0.0), 1.0, 0.0, 0.0, sqrt(0.0)))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false))))), mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), (mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false)))))), vec2(mat4x3(_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), (mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false)))))), min((_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), (mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false)))))), (_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), (mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), mix(float(_GLF_FUZZED(-34.37)), float(_GLF_FUZZED(181.147)), bool(true))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))) - vec2(0.0, 0.0))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2((_GLF_IDENTITY((injectionSwitch), max((injectionSwitch), (injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, clamp(1, 1, 1))]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false)))))))), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0)))[0], _GLF_FUZZED(3.9)), vec2(_GLF_FUZZED(-914.432), (_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(((injectionSwitch)), (true ? _GLF_IDENTITY(((injectionSwitch)), min(((injectionSwitch)), ((injectionSwitch)))) : _GLF_FUZZED((mat3x2(2309.0149, -2173.5662, -0.2, -6109.1726, -2507.4381, -5.9) * vec3(3.7, -6.3, -5.4)))))[0], ((injectionSwitch))[1]), bvec2(true, true))), mat2(1.0) * (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(((injectionSwitch)), (true ? _GLF_IDENTITY(((injectionSwitch)), min(((injectionSwitch)), ((injectionSwitch)))) : _GLF_FUZZED((mat3x2(2309.0149, -2173.5662, -0.2, -6109.1726, -2507.4381, -5.9) * vec3(3.7, -6.3, -5.4)))))[0], ((injectionSwitch))[1]), bvec2(true, true))))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)), mix(vec2((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(_GLF_IDENTITY(true, false || (true)), true)))[0], _GLF_IDENTITY(_GLF_IDENTITY((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1], min((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1], (mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1])), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1], min((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1], (mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1])), 1.0)), (false ? _GLF_FUZZED(1935.4136) : float(vec2(_GLF_IDENTITY((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1], min((mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1], (mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))[1])), 1.0)))))), vec2(_GLF_FUZZED(7568.3202), _GLF_FUZZED(_GLF_IDENTITY(-1149.6984, mix(float(-1149.6984), float(_GLF_FUZZED(335.874)), bool(false))))), bvec2(false, false)))), 0.0))[_GLF_IDENTITY(0, 0 + (0))], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY(false, false || (false)), false))))))[1]), bvec2(false, true))))))[0], (_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(vec2(-85.80, -975.313)) : _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(float(55360u))), vec2(_GLF_FUZZED(float(149139u)), ((injectionSwitch))[1]), bvec2(false, true))), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), ((injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), max(vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(float(55360u))), vec2(_GLF_FUZZED(float(149139u)), ((injectionSwitch))[1]), bvec2(false, true))), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), ((injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0), vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], _GLF_FUZZED(float(55360u))), vec2(_GLF_FUZZED(float(149139u)), ((injectionSwitch))[1]), bvec2(false, true))), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(((injectionSwitch)), max(((injectionSwitch)), ((injectionSwitch))))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_IDENTITY(_GLF_FUZZED(54.17), float(mat3x2(_GLF_FUZZED(54.17), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 1.0)))), bvec3(true, false, false))))), mix(vec2((_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(51.77, -14.93)) : injectionSwitch))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(181.147, clamp(_GLF_IDENTITY(181.147, max(181.147, _GLF_IDENTITY(181.147, 1.0 * (181.147)))), 181.147, 181.147))), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], _GLF_IDENTITY(((injectionSwitch))[1], min(((injectionSwitch))[1], ((injectionSwitch))[1]))), bvec2(true, true))), 0.0), mix(vec3(_GLF_FUZZED(0.2), (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(8753.4378) : _GLF_IDENTITY(0.0, min(0.0, 0.0))))))[1], (vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(181.147), _GLF_IDENTITY(float(mat4(_GLF_FUZZED(181.147), 1.0, 0.0, sin(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, sqrt(0.0), 1.0, cos(0.0), 1.0, sin(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(0.0, abs(length(vec4(0.0, 0.0, 0.0, 0.0))) + (0.0)), 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-3113.5563)), float(0.0), bool(true))))), (float(mat4(_GLF_FUZZED(181.147), 1.0, 0.0, sin(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, sqrt(0.0), 1.0, cos(0.0), 1.0, sin(_GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(6.3))))))), 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))), 0.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-9777.5516) : 0.0))))) / 1.0)), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[_GLF_IDENTITY(1, min(1, 1))]), bvec2(true, true))), 0.0))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], (_GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * ((injectionSwitch))), _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))))))[1]), bvec2(true, true))), 0.0))[0], _GLF_FUZZED(_GLF_IDENTITY(557.282, clamp(557.282, _GLF_IDENTITY(557.282, max(557.282, 557.282)), 557.282))), _GLF_FUZZED(54.17)), bvec3(true, false, false))))))[0], _GLF_FUZZED(3.9)), vec2(_GLF_FUZZED(-914.432), (_GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(vec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true)))) * exp(vec2(0.0, 0.0))), 0.0), mix(vec3(_GLF_FUZZED(0.2), _GLF_IDENTITY((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(_GLF_IDENTITY(((injectionSwitch)), (((injectionSwitch))) - vec2(0.0, 0.0))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1], ((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0))[1]) - abs(0.0)), _GLF_IDENTITY((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(_GLF_IDENTITY(68.27, clamp(68.27, 68.27, _GLF_IDENTITY(68.27, max(68.27, 68.27)))))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0)), mix(vec3(((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(_GLF_IDENTITY(68.27, clamp(68.27, 68.27, _GLF_IDENTITY(68.27, max(68.27, 68.27)))))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0)))[0], _GLF_FUZZED(-10.71), _GLF_FUZZED(0.8)), vec3(_GLF_FUZZED(-8.1), ((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(_GLF_IDENTITY(68.27, clamp(68.27, 68.27, _GLF_IDENTITY(68.27, max(68.27, 68.27)))))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0)))[1], ((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(_GLF_IDENTITY(68.27, clamp(68.27, 68.27, _GLF_IDENTITY(68.27, max(68.27, 68.27)))))), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), 0.0)))[2]), bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))[2]), vec3((vec3(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(181.147), _GLF_FUZZED(68.27)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), _GLF_IDENTITY(bvec2(true, true), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, true), false, true)), bvec2(bvec3(bvec2(bvec4(bvec2(true, true), false, true)), true)))))), 0.0))[0], _GLF_FUZZED(557.282), _GLF_FUZZED(54.17)), bvec3(true, false, false))))))[1]), bvec2(false, true))))))[1]), bvec2(true, true))) * vec2(1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-9.3) : 1.0))), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), sqrt(0.0), 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8673.7554)), bool(false))))), 1.0, 0.0, 1.0, 1.0, sin(0.0), abs(round(length(normalize(1.0)))), 1.0, 1.0, 1.0, 0.0, 1.0)), mix(float(float(mat4(_GLF_IDENTITY(1.0, 0.0 + (1.0)), 1.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.4) : 0.0))), float(_GLF_FUZZED(389.111)), bool(false))), determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), _GLF_IDENTITY(vec2(0.0, 1.0), (true ? vec2(0.0, 1.0) : _GLF_FUZZED(vec2(-41.71, 6.7))))), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, _GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0))), 1.0, 0.0, 1.0)), 1.0, 0.0, 1.0, 1.0, sin(_GLF_IDENTITY(0.0, float(mat3(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, sqrt(1.0))))), abs(round(length(normalize(1.0)))), 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, 1.0 * (_GLF_IDENTITY(1.0, (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))))), (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.6) : 1.0))))))), float(_GLF_FUZZED(-9842.9789)), bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(-7101.5920, 955.593)))).y)))))), (false ? _GLF_FUZZED(-6883.4583) : 1.0)))), injectionSwitch)).y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                       if(_GLF_DEAD(false))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         break;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       break;
                      }
                     continue;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   if(_GLF_DEAD(false))
                    return;
                   for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (0) - 0), _GLF_IDENTITY(0, min(0, 0)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter))))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || false)), true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))))
                        {
                         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          continue;
                         return;
                        }
                       break;
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((+ -10.73))), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-7981.5562 + (3.5 - -7.3)))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               return;
                              }
                            }
                           break;
                           if(_GLF_DEAD(false))
                            return;
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                          {
                           do
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_IDENTITY(_GLF_FUZZED(9780.4080), 1.0 * (_GLF_FUZZED(9780.4080)))))))))
                                  {
                                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                                    {
                                     return;
                                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                      return;
                                    }
                                   else
                                    {
                                    }
                                  }
                                 if(_GLF_DEAD(false))
                                  break;
                                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                  }
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = int(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 0.0, sqrt(1.0), 0.0, 0.0, 1.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0)), 0.0, 1.0))))), injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) * 1))) != 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                            continue;
                           if(_GLF_DEAD(false))
                            continue;
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                            {
                             return;
                            }
                           if(_GLF_DEAD(false))
                            break;
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, (0.0) - 0.0))), injectionSwitch.x))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  continue;
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   return;
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                          }
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(false))
                            return;
                          }
                         else
                          {
                          }
                        }
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         continue;
                        }
                      }
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))), ! (! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), false || (! (false)))) && _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))))))))))))))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false), ((false)) || false) || false) || false))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           atomicStore(checker[virtual_gid], read, 4, 64, 4);
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
       subgroupAll(_GLF_IDENTITY(true, (true) || false));
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), false, true))))))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         return;
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_ONE(1.0, injectionSwitch.y)), float(_GLF_FUZZED(-2746.0596)), bool(false))), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
