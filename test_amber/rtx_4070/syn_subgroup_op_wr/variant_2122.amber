#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_8 {
 uint _f0;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 uvec4 _f1;
 uvec3 _f2;
 vec4 _f3;
 bvec2 _f4;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
} ;

struct _GLF_struct_9 {
 _GLF_struct_5 _f0;
 _GLF_struct_6 _f1;
 _GLF_struct_7 _f2;
 bvec4 _f3;
 _GLF_struct_8 _f4;
} ;

struct _GLF_struct_3 {
 ivec2 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_2 {
 mat2x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_1 {
 vec4 _f0;
 mat2x3 _f1;
 mat4x3 _f2;
 ivec2 _f3;
 uvec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_0 {
 mat2x3 _f0;
 uvec3 _f1;
 vec2 _f2;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 float _f1;
 _GLF_struct_1 _f2;
 uvec3 _f3;
 _GLF_struct_2 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_10 {
 _GLF_struct_4 _f0;
 uint virtual_gid;
 ivec3 _f1;
 uvec4 _f2;
 mat4x3 _f3;
 _GLF_struct_9 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])))).x > injectionSwitch.y))), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])))))))).x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])))).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), vec2(1.0, 1.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])))))))).x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), vec2(_GLF_IDENTITY(injectionSwitch[0], 0.0 + (injectionSwitch[0])), injectionSwitch[1])))).x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bvec2(false, false))), false), bvec2(bvec4(bvec2(false, false), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! (false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup, _GLF_IDENTITY(_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup)) - 0u), (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup), ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.y = num_workgroup)) >> 0u)) + (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (0u << _GLF_IDENTITY(uint(2u), uint(2u))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (true ? _GLF_IDENTITY(uint(2u), uint(2u)) : _GLF_FUZZED(152797u))))), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(2u, clamp(_GLF_IDENTITY(2u, 0u ^ (2u)), 2u, 2u))), uint(_GLF_IDENTITY(2u, max(2u, 2u)))), uint(uint(_GLF_IDENTITY(uint(2u), uint(2u))))))))) / _GLF_IDENTITY(_GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), (_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u))))) >> 0u)))), (_GLF_IDENTITY(1u, 0u + (_GLF_IDENTITY(1u, _GLF_IDENTITY(~ (~ (1u)), _GLF_IDENTITY((_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u))))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | 0u))))), ~ (~ (1u))))) >> _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 0u, 1u))))), 0u | ((_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u))))) >> 0u))) | ((_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u)))), max(_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u)))), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u)))), max(_GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u)))), _GLF_IDENTITY(~ (~ (1u)), max(_GLF_IDENTITY(~ (~ (1u)), uint(uint(~ (~ (1u))))), ~ (~ (1u))))))) - 0u)))) >> 0u))))))) - (0u >> _GLF_IDENTITY(uint(5u), uint(_GLF_IDENTITY(5u, min(_GLF_IDENTITY(5u, min(5u, 5u)), 5u)))))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, 0u | (gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0)); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(true, true && _GLF_IDENTITY((true), true && ((true)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))), false, true, true)))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(_GLF_IDENTITY(984.314, mix(float(984.314), float(_GLF_FUZZED(11.33)), bool(false)))) : injectionSwitch.x)) > injectionSwitch.y)), false, false, true)))), ((_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-801.292), _GLF_FUZZED(vec2(-67.95, -3414.8988).r)), bvec2(false, false))).x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec3(bool(bvec2(false, true)), false, true)))), true))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true && (bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), (true && (true)) && true)), _GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(78.12) : injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, true))))))))))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(0), int(0))) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
      }
    }
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u), _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), 1u, 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - 0u), (_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - 0u)) - 0u)), clamp((_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) | 0u), workgroup_size * workgroup_id, workgroup_size * workgroup_id)), 1u, 1u)))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) - 0u), (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - 0u)), uint(uint((_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, _GLF_IDENTITY(min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), workgroup_size * workgroup_id, workgroup_size * workgroup_id))), (true ? _GLF_IDENTITY(min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), workgroup_size * workgroup_id, workgroup_size * workgroup_id))), (false ? _GLF_FUZZED(subgroup_size) : min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, clamp(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), workgroup_size * workgroup_id, workgroup_size * workgroup_id))))) : _GLF_FUZZED(workgroup_id))))) - 0u))))), (_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(workgroup_size * workgroup_id, 1u, 1u)))) | (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), 0u + (~ (workgroup_id))))), (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) - 0u)), (_GLF_IDENTITY(workgroup_size * workgroup_id, uint(uvec3(workgroup_size * workgroup_id, 1u, 1u)))) | (_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * _GLF_IDENTITY(workgroup_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_id), 0u ^ (~ (workgroup_id)))), (_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_id), 0u ^ (~ (workgroup_id)))), ((_GLF_IDENTITY(~ (workgroup_id), 0u ^ (~ (workgroup_id))))) - 0u)) | 0u)), workgroup_size * workgroup_id))) - 0u)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec2(bvec2(false, false))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (subgroup_id)) * subgroup_size;
 do
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
        {
         GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w = _GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(workgroup_base)));
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_10 _GLF_struct_replacement_10 = _GLF_struct_10(_GLF_struct_4(_GLF_struct_0(mat2x3(1.0), uvec3(1u), vec2(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), max(float(vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), float(vec2(float(vec3(1.0, 1.0, 0.0)), 1.0))))))) / 1.0)) / 1.0))), max(_GLF_IDENTITY(float(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), max(float(vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), float(vec2(float(vec3(1.0, 1.0, 0.0)), 1.0))))))) / 1.0)) / 1.0))), clamp(float(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), max(float(vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), float(vec2(float(vec3(1.0, 1.0, 0.0)), 1.0))))))) / 1.0)) / 1.0))), float(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), max(float(vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), float(vec2(float(vec3(1.0, 1.0, 0.0)), 1.0))))))) / 1.0)) / 1.0))), float(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), max(float(vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), float(vec2(float(vec3(1.0, 1.0, 0.0)), 1.0))))))) / 1.0)) / 1.0))))), float(_GLF_IDENTITY(1.0, (1.0) * _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 0.0))), (_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), max(float(vec3(1.0, 1.0, 0.0)), _GLF_IDENTITY(float(vec3(1.0, 1.0, 0.0)), float(vec2(float(vec3(1.0, 1.0, 0.0)), 1.0))))))) / 1.0)) / 1.0))))), float(_GLF_FUZZED(_GLF_IDENTITY(-2879.8025, clamp(-2879.8025, _GLF_IDENTITY(_GLF_IDENTITY(-2879.8025, mix(float(-2879.8025), float(_GLF_FUZZED(-878.543)), bool(false))), min(_GLF_IDENTITY(-2879.8025, mix(float(-2879.8025), float(_GLF_FUZZED(-878.543)), bool(false))), _GLF_IDENTITY(-2879.8025, mix(float(-2879.8025), float(_GLF_FUZZED(-878.543)), bool(false))))), -2879.8025)))), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), 1.0, _GLF_struct_1(vec4(1.0), mat2x3(1.0), mat4x3(1.0), ivec2(1), uvec4(1u), true), uvec3(1u), _GLF_struct_2(mat2x3(1.0), mat2x4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-3.4)), bool(false))))), _GLF_struct_3(ivec2(1), ivec3(1))), workgroup_base + _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base, uvec4(0u, 0u, 0u, 0u) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base)).w + subgroup_local_id, ivec3(1), uvec4(1u), mat4x3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat2x3(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 1.0)))))), _GLF_struct_9(_GLF_struct_5(ivec3(1)), _GLF_struct_6(bvec3(true)), _GLF_struct_7(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-29058, _GLF_IDENTITY(min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058), 0 ^ (_GLF_IDENTITY(min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058), int(int(min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058))))))), (_GLF_IDENTITY(-29058, (-29058) + 0)) | (0 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) >> 0))))) : 1))), clamp((1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-29058, min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058)), (-29058) | (0 << _GLF_IDENTITY(int(0), int(0))))) : 1))), (1) | _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-29058, min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058)), (-29058) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), int(ivec2(0 << _GLF_IDENTITY(int(0), int(0)), 0)))))) : 1))), ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-29058, min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058)), (-29058) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(0), int(0)), int(ivec2(0 << _GLF_IDENTITY(int(0), int(0)), 0)))))) : 1)))) - 0), (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-29058, min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058)), (-29058) | (0 << _GLF_IDENTITY(int(0), int(0))))) : 1)))))), 0, 1)))) >> 0)), (ivec2(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) / 1)))), (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(-29058, min(_GLF_IDENTITY(-29058, ~ (~ (-29058))), -29058)), (-29058) | (0 << _GLF_IDENTITY(int(0), int(0))))) : 1)))), 0, 1)))) >> 0))) / ivec2(1, 1)), uvec4(1u), uvec3(1u), vec4(1.0), bvec2(true)), bvec4(true), _GLF_struct_8(_GLF_IDENTITY(1u, (1u) | (1u)))));
 uint next_virtual_gid = workgroup_base + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.w + ((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, 0u + (subgroup_local_id + 1)), clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id + 1, uint(uint(_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, subgroup_local_id + 1)))))))))), 1u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u))), 0u, 0u)), 0u)), 1u * (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))))), 1u, 0u, 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))))), 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) - 0u), 0u)), (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u))))))) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u))))) | 0u))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))))), 1u, 0u, 0u)), clamp(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, uint(uvec3(subgroup_local_id + 1, 1u, 0u))), subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))))), 1u, 0u, 0u)), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uint(subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY(uint(subgroup_local_id + 1), uint(uint(uint(subgroup_local_id + 1)))))))))), 1u, 0u, 0u)), (0u << _GLF_IDENTITY(uint(4u), uint(4u))) ^ (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(_GLF_IDENTITY(uint(subgroup_local_id + 1), 0u ^ (_GLF_IDENTITY(uint(subgroup_local_id + 1), uint(uint(uint(subgroup_local_id + 1)))))))))), 1u, 0u, 0u)))), uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / _GLF_IDENTITY(1u, uint(uvec3(_GLF_IDENTITY(1u, ~ (~ (1u))), 1u, 1u))), ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))))), 1u, 0u, 0u))))) << 0u)) | (_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (1) << (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0)))), uint(uint(subgroup_local_id + 1))))), 1u, 0u, 0u)), (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, (_GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) | ((subgroup_local_id) / 1u))) + 0u)))) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, uint(uint(subgroup_local_id + 1))))), 1u, 0u, 0u))) | 0u))))))) % subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x = _GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)));
    }
  }
 else
  {
  }
 uint read = 0;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-0.4) : injectionSwitch[1])))).x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), true && (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + determinant(mat4(0.0, 0.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0))) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), ((! ((injectionSwitch.x > injectionSwitch.y)))) || false))), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), mix(float(_GLF_IDENTITY((injectionSwitch.y), ((injectionSwitch.y)) - 0.0)), float(_GLF_FUZZED(-6150.8656)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) / 1.0)) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(1.0, 1.0) * (mat2(1.0) * (injectionSwitch)))), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), vec2(1.0, 1.0) * (mat2(1.0) * (injectionSwitch)))), injectionSwitch))) * mat2(1.0)).x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))))) != 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        barrier();
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))));
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
        barrier();
      }
     else
      {
      }
    }
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = read;
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x, (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.x) + 0u)], uint(1), 4, 64, 4);
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, true, true))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), (! _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), ! _GLF_IDENTITY((! (_GLF_IDENTITY(! ((false)), true && (! ((false)))))), bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY(! ((false)), true && (! ((false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(! ((false)), true && (! ((false)))))))), false, true, true))))))) || _GLF_IDENTITY(false, ! (! (false))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))), bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, bool(bool(false))))), ! (! _GLF_IDENTITY((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false)))))))), false || ((! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(false, bool(bool(false))))))))))))))) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  {
   for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2)))) == 0, ! (! ((_GLF_IDENTITY(subgroup_local_id % 2, ~ (~ (subgroup_local_id % 2)))) == 0))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, bool(bvec2(false, false))), false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true))) && true))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true))) && true))), (! (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true))) && true)))) || false)))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y, false, false), false))), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), true))), _GLF_IDENTITY(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)), bvec3(bvec4(bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)), true)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x3(injectionSwitch.y, 0.0, abs(tan(0.0)), 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0), (mat4x3(injectionSwitch.y, 0.0, abs(tan(0.0)), 0.0, 1.0, 0.0, exp(0.0), 0.0, 0.0, 0.0, 0.0, 1.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), false, false), false))), false))))))))), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, false), false))))))))), true)), ! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(8098.2847)), bool(false))) > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(bvec3(bvec2(false, false), false)), bvec2(bvec4(bvec2(bvec3(bvec2(false, false), false)), true, true)))))), false), false)))))), true))) && true), true && (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y)))))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)))), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (true)))))), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false))), bvec3(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false))), bvec3(bvec3(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), false)))))), true))) && true)))) || false)), ((_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), true)), ! (! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), true))) && true))))), false, false), false)))))), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), true)), ! (! (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), true)), (bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, (false) || false), true))) && true))))), false, false), false)))))), true))), true)), (bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))) && true), true && (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true)), (bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true, ! (! (true)))))), bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), bvec3(bvec4(bvec3(injectionSwitch.x > injectionSwitch.y, false, false), false)))))), true))) && true)))) || false))) && true))))))))))
      barrier();
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
        }
       else
        {
        }
       subgroupAll(false);
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(56.66, -382.185)) : injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(56.66, -382.185)) : injectionSwitch)).y)))))));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), true && (false)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)), ! (! (bool(bvec2((injectionSwitch.x < injectionSwitch.y), false)))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
                barrier();
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, true, false))))
                    barrier();
                  }
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bvec3(_GLF_IDENTITY(! ((false)), ! (! (! ((false))))), true, true))))) || false)))
                    {
                     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), _GLF_IDENTITY(~ (~ (int(1))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? ~ (~ (int(1))) : _GLF_FUZZED(_injected_loop_counter)))))) | 1)); _injected_loop_counter ++)
                      {
                       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1))), (int(ivec2(0, (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))) ^ 1)))) / 1))); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, false || (true)))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true))))) || false)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[_GLF_struct_replacement_10.virtual_gid], 4, 64, 2);
  }
 else
  {
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, (5) / 1))) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
            {
            }
           else
            {
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ((false)) || false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) << int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0)))), vec2(vec4((injectionSwitch) * _GLF_IDENTITY(mat2(1.0), mat2(mat3x4(mat2(1.0)))), 1.0, 0.0)))).y))))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false)))))), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bvec3(! (true), true, false))))))) && true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false))))))))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), (false || (false)) || false))))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           _GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[_GLF_struct_replacement_10.virtual_gid], 4, 64, 2), _GLF_IDENTITY(1u, (1u) / 1u) * (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z = atomicLoad(buf[_GLF_struct_replacement_10.virtual_gid], 4, 64, 2)));
          }
         for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 1 * (int(_GLF_IDENTITY(6, 0 ^ (6))))), (_GLF_IDENTITY(int(6), (_GLF_IDENTITY(int(6), (int(6)) << 0)) | (int(6)))) * 1))), ~ (~ (((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), 0 ^ (int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), 1 * (int(_GLF_IDENTITY(6, (6) | (6))))), _GLF_IDENTITY((_GLF_IDENTITY(int(6), (int(6)) | (int(6)))), max((_GLF_IDENTITY(int(6), (int(6)) | (int(6)))), (_GLF_IDENTITY(int(6), (int(6)) | (int(6)))))) * 1)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED((mat2(2.7, -734.179, -494.337, 7317.6747) / mat2(-3616.7474, 961.451, 4.9, -1.9))[1]) : (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED((mat2(2.7, -734.179, -494.337, 7317.6747) / mat2(-3616.7474, 961.451, 4.9, -1.9))[1]) : (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED((mat2(2.7, -734.179, -494.337, 7317.6747) / mat2(-3616.7474, 961.451, 4.9, -1.9))[1]) : (injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))) && true)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), false || (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || false))))))))))), true, false))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             do
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-27.16)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               else
                {
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)), false || (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)), true, false)))))))
          barrier();
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, false)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))), true, true)), false || (bool(bvec3(_GLF_IDENTITY(bool(bvec2(true, false)), ! (! (bool(bvec2(true, false))))), true, true))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), int(8))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) || false)), false, false)), (bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false, false))) && true)); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))) && true)))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(bvec4((false), true, true, _GLF_IDENTITY(true, ! (! (true))))))))))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7))))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) >> 0))))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 else
                  {
                  }
                }
              }
             else
              {
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), min(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) + 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))));
                }
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 do
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(0.0), 0.0), (true ? _GLF_IDENTITY(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(0.0), 0.0), (false ? _GLF_FUZZED(mat2x3(2970.0407, 0.9, 6.0, -52.98, -63.53, 9.0)) : mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, abs(0.0), 0.0))) : _GLF_FUZZED((mat2x3(-84.98, 5.1, 9.0, 5.3, 4.4, -3.3) / mat2x3(7.0, -1042.0936, -3399.9061, -9.4, -2.5, -8.5)))))))))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = ((0 << _GLF_IDENTITY(int(3), int(3))) | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) ^ (0 ^ 0))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
              }
             else
              {
              }
            }
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (true ? _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED(clamp(_injected_loop_counter, findMSB(workgroup_size), _injected_loop_counter)))))); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7))))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), int(ivec4(int(7), 1, (1 | 1), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           subgroupBarrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << 0))
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             for(int _injected_loop_counter = (-43323 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), ! (! (false))), true, true)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(57444)))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, true && (true)))), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec4(bool(_GLF_IDENTITY(true, (true) && true)), false, false, false)))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, (true) && true)), bool(bvec4(bool(_GLF_IDENTITY(true, (true) && true)), false, false, false)))), false, false, true)))), true && (true)))), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (true)))), false), true))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec2((! ((injectionSwitch.x > injectionSwitch.y))), false))))), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & -98485)); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, false)))))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = (_GLF_IDENTITY(0 & 48786, 0 ^ (0 & 48786))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), (! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) / 1) < 1)) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_injected_loop_counter < 1), (! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) / 1) < 1)) && true), (_GLF_IDENTITY(! (_injected_loop_counter < 1), (! (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0)) / 1) < 1)) && true)) || false))))))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
  }
 else
  {
  }
 atomicStore(checker[_GLF_IDENTITY(_GLF_struct_replacement_10.virtual_gid, clamp(_GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid, _GLF_struct_replacement_10.virtual_gid))], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_13next_virtual_gidnum_workgroupreadsubgroup_base.z, _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (_GLF_IDENTITY(~ (4), (true ? ~ (4) : _GLF_FUZZED(-61752)))) - 0))), _GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, clamp(64, 64, 64)))), 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 do
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))) < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(length(vec3(89.59, -1.6, 67.11)))))))))))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
