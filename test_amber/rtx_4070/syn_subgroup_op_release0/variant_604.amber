#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uvec2 GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)) : _GLF_FUZZED(vec2(-1392.5545, -9642.9594)))).y, injectionSwitch.y)))), max(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)), (false ? _GLF_FUZZED(8.8) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(injectionSwitch.y, injectionSwitch.y)))))), 1.0, 0.0, 1.0, 0.0, 1.0)))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(448), min(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(448), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-5379.6455)), bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), float(_GLF_FUZZED(1.7)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) ? 1 : _GLF_FUZZED(_GLF_IDENTITY(448, (_GLF_IDENTITY(448, clamp(448, 448, 448))) | (448))), max(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (! (! ((injectionSwitch.x < injectionSwitch.y)))))))) ? 1 : _GLF_FUZZED(448), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, (1) | 0) : _GLF_FUZZED(448), (false ? _GLF_FUZZED(_GLF_IDENTITY(-52347, max(-52347, -52347))) : _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(12.36) : injectionSwitch.x))))) - 0.0) < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)) ? 1 : _GLF_IDENTITY(_GLF_FUZZED(448), (_GLF_IDENTITY(_GLF_FUZZED(448), 0 + (_GLF_FUZZED(448)))) | (83860 & 0)))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, false || (false))), bool(bvec4(bool(_GLF_IDENTITY(false, false || (false))), true, false, false))))), true, true))))))))
                barrier();
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true) || false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false, true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y) || false)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0), transpose(transpose(mat2x4(injectionSwitch.x, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0))))))) / 1.0) > injectionSwitch.y) || false, true && ((injectionSwitch.x > injectionSwitch.y) || false)))), false, true, false))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 0 ^ ((0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) ^ 0)))))), (_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), ~ (~ (int(2)))))), 0 ^ ((0 << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) ^ _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) | (0)), 0))))))))) && true)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), (_GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-98094) : int(4)))) | (int(4))), int(4)), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 + (_GLF_IDENTITY(int(4), int(4)))), (true ? _GLF_IDENTITY(int(4), int(4)) : _GLF_FUZZED(-4497))), _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) * 1)))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u))), max(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(float(1.0))), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0), injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u)))), 0u, 0u, 1u)), ~ (~ (uint(uvec4(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(float(1.0))), (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0), injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u)))), 0u, 0u, 1u))))), (uint(uvec4(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - _GLF_IDENTITY(0u, (0u) ^ 0u))))), 0u, 0u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) / 1u))))), uint(1u)))), 0u + (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x = _GLF_IDENTITY(subgroup_id, (subgroup_id) | (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY((uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u), ~ (~ ((uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u)), _GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(uint(1u), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u))))), (uint(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), ~ (_GLF_IDENTITY(~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), clamp(~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))))), _GLF_IDENTITY((uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u), ~ (~ ((uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u))))), max(_GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(_GLF_IDENTITY(0u, ~ (~ (0u))), 0u, 0u)), _GLF_IDENTITY(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(uint(1u), _GLF_IDENTITY(0u, max(0u, 0u)), uint(_GLF_ONE(1.0, injectionSwitch.y)))) - uvec3(0u, 0u, 0u)))))) ^ (0u & 32184u)), max(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) | (1u))) >> 0u))))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u), (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u)) >> 0u), _GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u), _GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u)))))), 0u, 0u, 1u), ~ (~ (uvec4(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(_GLF_IDENTITY(1.0, (1.0) * 1.0), injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u), clamp(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u), (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u)) >> 0u), _GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u), _GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - 0u)))))), 0u, 0u, 1u))))), (uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-430.889), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((-60.02 / (- -2.6)))), bvec2(true, false))).y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, ~ (~ (_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) * 1u))))))))), 0u, 0u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) / 1u)))), ~ (_GLF_IDENTITY(~ (uvec4(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-430.889), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((-60.02 / (- -2.6)))), bvec2(true, false))).y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, ~ (~ (_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) * 1u))))))))), 0u, 0u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) / 1u))))), (~ (uvec4(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-430.889), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((-60.02 / (- -2.6)))), bvec2(true, false))).y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, ~ (~ (_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) * 1u))))))))), 0u, 0u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) | (_GLF_IDENTITY(~ (uvec4(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-430.889), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((-60.02 / (- -2.6)))), bvec2(true, false))).y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, ~ (~ (_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) * 1u))))))))), 0u, 0u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) / 1u))))), (~ (uvec4(_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u))), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (~ (_GLF_IDENTITY(uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-430.889), _GLF_IDENTITY((injectionSwitch)[1], max((injectionSwitch)[1], (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED((-60.02 / (- -2.6)))), bvec2(true, false))).y)))), (uint(uvec3(uint(1u), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))))) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) ^ 0u, ~ (~ (_GLF_IDENTITY((0u) ^ 0u, ((0u) ^ 0u) * 1u))))))))), 0u, 0u, _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (1u) / 1u)))))) - uvec4(0u, 0u, 0u, 0u)))))))) / 1u))))), uint(_GLF_IDENTITY(1u, 0u | (1u))))))));
  }
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - log(vec2(1.0, 1.0))).y : _GLF_FUZZED(343.431))), _GLF_IDENTITY((injectionSwitch.y) + 0.0, ((injectionSwitch.y) + 0.0) * 1.0))), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), false), bvec2(bvec3(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(-8510.4731, 1785.3503, -6.5, 2.2)))))).x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * round(length(normalize(vec2(1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(vec2(-464.357, 3671.0585), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0)))))))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(-8510.4731, 1785.3503, -6.5, 2.2))))), mix(vec2(_GLF_FUZZED(-729.609), _GLF_FUZZED(77.25)), vec2((vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * round(length(normalize(vec2(1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(vec2(-464.357, 3671.0585), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0)))))))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(-8510.4731, 1785.3503, -6.5, 2.2))))))[0], (vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))), (true ? mat2(injectionSwitch, 0.0, determinant(mat4(1.0, tan(0.0), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, (1.0) / 1.0)) * round(length(normalize(vec2(1.0, 1.0))))), 0.0, 0.0, 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))), 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(distance(vec2(-464.357, 3671.0585), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 0.0, 1.0, 1.0)))))))), float(_GLF_FUZZED(-6.9)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), 0.0, 0.0, 1.0))) : _GLF_FUZZED(mat2(-8510.4731, 1785.3503, -6.5, 2.2))))))[1]), bvec2(true, true)))).x > injectionSwitch.y))), false), true))), false, true)))), true && (bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, abs(1.0), 0.0), vec3(mat4(vec3(injectionSwitch.x, abs(1.0), 0.0), 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0, 1.0, 0.0, round(length(normalize(_GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) / 1.0), min(1.0, 1.0)), 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0)))))), 0.0, 0.0, 1.0))))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) / 1.0, float(mat4((injectionSwitch.x) / 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0)))))) > injectionSwitch.y), false), bvec2(bvec4(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec3(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), true, false))), true))), false, true))))))), ((_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)) && _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(injectionSwitch.x < injectionSwitch.y, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, false || (true))), bool(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, false || (true)), true, false), bvec3(bvec3(bvec3(_GLF_IDENTITY(true, false || (true)), true, false))))))), false))))), (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))), ((_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false))))))) && true) || false)) && true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bvec3(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (true)), bool(bvec3(! (! (true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), (_GLF_IDENTITY(! (! (true)), true && (! (! (true))))) || false))))), true, _GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false)))))))))), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false)))))))))), ((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))))))))) || false)) || false) && true)) || false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), bool(bvec4(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), true, false, false))), true, false)), false || (bool(bvec3(_GLF_IDENTITY(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), bool(bvec4(((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, false))), true, false, false))), true, false))))))), ! (! _GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3((_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false)))) || false)))), _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), false)))))))))), ((_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), ! (! (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), true && (_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(bvec2((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), false))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)).y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false)))))))))), (_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), false, false))), false, true, false))))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false)))))))))), _GLF_IDENTITY(((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))))))))) || false, (_GLF_IDENTITY(((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))))))))) || false, false || (((! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)), bool(bvec4(! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), _GLF_IDENTITY((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))), ((! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))))) || false) || false)), false, false, true)))) && true))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))))) || false))))), true && (! ((_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)))), (! (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), _GLF_IDENTITY(bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), false, true)), bool(bvec3(bool(bvec3((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)), false, true)), false, false))))))) || false))))))))))) || false))) && true))) || false) && true)) || false)))))))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.1)), vec2(_GLF_FUZZED(-2.7), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false)), (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))), false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)), _GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) || false))), true && (_GLF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) || false), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3.5)), bool(false)))) || false))))), true), bvec3(bvec4(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))), true), _GLF_IDENTITY(true, (true) && true))))))));
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), _GLF_IDENTITY(bool(bvec4(bool(bvec4(false, true, false, true)), true, true, false)), ! (! (bool(bvec4(bool(bvec4(false, true, false, true)), true, true, false)))))))));
            }
          }
         else
          {
          }
         do
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY((_GLF_WRAPPED_LOOP(false)) && true, true && ((_GLF_WRAPPED_LOOP(false)) && true))));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, false, false)))))));
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(58.67)))))))
      barrier();
     barrier();
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), false, true, true))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), false, true, true))))))), (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (_GLF_IDENTITY(false, (false) || false))), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false))))))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY((! (false)), bool(bvec3((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, (_GLF_IDENTITY((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true, false || ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true))) && true)), false, true, true)))))))) || false)) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true)))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true)))), false)), bvec2(_GLF_IDENTITY(bvec3(bvec2(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true)))), false)), false), bvec3(bvec4(bvec3(bvec2(bvec2((_GLF_IDENTITY(! (false), bool(bvec2(_GLF_IDENTITY(! (false), (! (false)) && true), true)))), false)), false), false)))))))), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, _GLF_IDENTITY(((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true, bool(bvec4(_GLF_IDENTITY(((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true, true && (((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))))), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! (false)), false))) && true) && true)), false || (! (_GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! (false)), false))) && true) && true)))))), ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), false, true, true)))))))), true && (! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec2((false), false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2((false), false)), ! (! (bool(bvec2((false), false))))), true, true, true)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(bool(bvec2((false), false)), ! (! (bool(bvec2((false), false))))), true, true, true))), true && (! (bool(bvec4(_GLF_IDENTITY(bool(bvec2((false), false)), ! (! (bool(bvec2((false), false))))), true, true, true))))))))), true)))), false))) && true) && true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, false || (false)), true))), false || (_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, false || (false)), true))), bool(bvec3(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, false || (false)), true))), true, false)))))), false)), ! (! (_GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, false || (false)), true))), bool(bool(_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, false || (false)), true))))))), false)), true && (bool(bvec2((_GLF_IDENTITY(! (false), bool(bvec3(! (false), _GLF_IDENTITY(false, false || (false)), true)))), false)))))))) && true, ((bool(bvec2((_GLF_IDENTITY(! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) && true), bool(bvec2((false), false))), _GLF_IDENTITY(true, bool(bvec4(true, false, true, true)))))), (! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))))), true)))) || false)), false))) && true) && true)), false, true, true)), true && (bool(bvec4(_GLF_IDENTITY(bool(bvec2((! (false)), false)), _GLF_IDENTITY(_GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY((! (false)), false || ((! (false)))), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)), ! (! (! (_GLF_IDENTITY((bool(bvec2((! (false)), false))) && true, ((bool(bvec2((! _GLF_IDENTITY((false), bool(bvec2(_GLF_IDENTITY((false), bool(bvec2((false), false))), true)))), false))) && true) && true)))))))), false, true, true))))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, (true) || false))), bool(bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (true) || false)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID))))).x, _GLF_IDENTITY(1u * (gl_WorkGroupID.x), (_GLF_IDENTITY(1u * _GLF_IDENTITY((gl_WorkGroupID.x), uint(uvec2(_GLF_IDENTITY((gl_WorkGroupID.x), ~ (_GLF_IDENTITY(~ ((gl_WorkGroupID.x)), clamp(~ ((gl_WorkGroupID.x)), ~ ((gl_WorkGroupID.x)), ~ ((gl_WorkGroupID.x)))))), 0u))), (_GLF_IDENTITY(1u * (_GLF_IDENTITY(gl_WorkGroupID, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2]))), (~ (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])))) | uvec3(0u, 0u, 0u)))).x), min(1u * (gl_WorkGroupID.x), 1u * (gl_WorkGroupID.x)))) << (0u | (_GLF_IDENTITY(0u | 0u, min(0u | 0u, 0u | 0u)))))) >> 0u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id), _GLF_IDENTITY(((workgroup_id)), max(((workgroup_id)), ((workgroup_id)))) / 1u) | (workgroup_id)), _GLF_IDENTITY(~ (~ (workgroup_size * workgroup_id)), ~ (~ (~ (_GLF_IDENTITY(~ (workgroup_size * workgroup_id), max(~ (_GLF_IDENTITY(workgroup_size, (true ? workgroup_size : _GLF_FUZZED(subgroup_size))) * workgroup_id), ~ (workgroup_size * workgroup_id))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(3.3)) : injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(atan(3.3)) : injectionSwitch.y)))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x)) > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false)) || false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false) || false)))))))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base))), (false ? _GLF_FUZZED(min(workgroup_base, subgroup_size)) : _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base, ~ (~ (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y = workgroup_base)))));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), min((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u)))).y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), min((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u)))).y, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), min((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u)))).y) << 0u), _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), min((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u)))).y, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), min((GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u), (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u)))).y)) + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u))))) << uvec2(0u, 0u)).x * subgroup_size + subgroup_local_id, (true ? _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, min(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y)))) + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * subgroup_size + subgroup_local_id : _GLF_FUZZED(subgroup_local_id))), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base) | uvec2(0u, 0u)).y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, clamp(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base, GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base))) << uvec2(0u, 0u)).x * subgroup_size + subgroup_local_id, (true ? GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u) + subgroup_local_id : _GLF_FUZZED(subgroup_local_id)))) - 0u)) - 0u);
 uint next_virtual_gid = GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.y + _GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, 0u + (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x))) | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x) << 0u), (_GLF_IDENTITY(GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x, (GLF_merged2_0_1_11_1_1_14subgroup_idworkgroup_base.x) / 1u)) >> 0u))) * subgroup_size + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   _GLF_IDENTITY(buf[virtual_gid] = 1, ~ (_GLF_IDENTITY(~ (buf[virtual_gid] = 1), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (buf[virtual_gid] = 1), (~ (buf[virtual_gid] = 1)) | 0u)), (~ (_GLF_IDENTITY(~ (buf[virtual_gid] = 1), (~ (buf[virtual_gid] = 1)) | 0u))) ^ 0u)))));
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), false || (! (! (false)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), false || ((false))) && true, ! (! (_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, _GLF_IDENTITY(! (! (_GLF_IDENTITY((false) && true, bool(bool((false) && true))))), (! (! (_GLF_IDENTITY((false) && true, bool(bool(_GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec2((false), true)))))) && true)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && (_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((false) && true, ! (! (_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((false), ((false)) || false) && true, ! (! (_GLF_IDENTITY((false) && true, bool(bool((false) && true)))))))), true, true), false))))))))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (! (bool(false))))))) || false, ! (! ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! _GLF_IDENTITY((bool(false)), false || ((bool(false))))))))) || false))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | _GLF_IDENTITY((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED((_GLF_IDENTITY(ivec4(-26819, 33666, -84195, -4273), (true ? ivec4(_GLF_IDENTITY(-26819, (-26819) * ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY(33666, (true ? 33666 : _GLF_FUZZED(-86965))), (true ? 33666 : _GLF_FUZZED(4184))), -84195, -4273) : _GLF_FUZZED(ivec4(6310, _GLF_IDENTITY(629, (true ? _GLF_IDENTITY(629, ~ (~ (_GLF_IDENTITY(629, min(629, 629))))) : _GLF_FUZZED(int(false)))), -31963, 8218)))) | ivec4(48704, -58660, -70910, -72540))[2]) : int(6)))), (_GLF_IDENTITY((_GLF_IDENTITY(int(6), (false ? _GLF_IDENTITY(_GLF_FUZZED((ivec4(_GLF_IDENTITY(-26819, int(int(-26819))), _GLF_IDENTITY(33666, 0 | (_GLF_IDENTITY(33666, 0 ^ (33666)))), -84195, -4273) | ivec4(48704, -58660, -70910, -72540))[2]), (_GLF_FUZZED((ivec4(_GLF_IDENTITY(-26819, int(int(-26819))), 33666, -84195, _GLF_IDENTITY(-4273, (-4273) + int(_GLF_ZERO(0.0, injectionSwitch.x)))) | ivec4(48704, -58660, -70910, -72540))[2])) + 0) : int(6)))), ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED((ivec4(_GLF_IDENTITY(-26819, int(int(_GLF_IDENTITY(-26819, 0 | (-26819))))), 33666, -84195, -4273) | ivec4(48704, -58660, -70910, -72540))[2]) : int(_GLF_IDENTITY(6, ~ (_GLF_IDENTITY(~ (6), (~ (_GLF_IDENTITY(6, 0 | (6)))) * 1)))))))) * 1)) | ((_GLF_IDENTITY(int(6), (false ? _GLF_FUZZED((ivec4(-26819, 33666, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-84195, (-84195) / 1), 0 | (-84195)), (_GLF_IDENTITY(_GLF_IDENTITY(-84195, 0 | (-84195)), (_GLF_IDENTITY(-84195, 0 | (-84195))) ^ 0)) >> 0), -4273) | ivec4(48704, -58660, -70910, -72540))[2]) : int(6))))))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / _GLF_IDENTITY(1, (1) >> 0))) - int(_GLF_ZERO(0.0, injectionSwitch.x))) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (false))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && true) || (false))))
        barrier();
       do
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) : _GLF_FUZZED(_injected_loop_counter))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1)) | 0))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), int(ivec4(int(0), 0, 1, 1)))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), max(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), clamp(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
              barrier();
             barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), mix(vec2(_GLF_FUZZED(vec4(-5.9, -689.598, -9.8, 9.9).z), _GLF_FUZZED(-842.920)), vec2(((injectionSwitch) * mat2(1.0))[0], ((injectionSwitch) * mat2(1.0))[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))).x > injectionSwitch.y) || false))))))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY((1 | 1), int(_GLF_IDENTITY(ivec3((1 | 1), 1, 0), ivec3(0, 0, 0) | (ivec3((1 | 1), 1, 0))))), (_GLF_IDENTITY(_GLF_IDENTITY((1 | 1), int(_GLF_IDENTITY(ivec3((1 | 1), 1, 0), ivec3(0, 0, 0) | (ivec3((1 | 1), 1, 0))))), (_GLF_IDENTITY((1 | 1), int(_GLF_IDENTITY(ivec3((1 | 1), 1, 0), ivec3(0, 0, 0) | (ivec3((1 | 1), 1, 0)))))) >> 0)) ^ 0)); _injected_loop_counter ++)
              {
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), _GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(((false)) && true, (((false)) && true) && true)) && true) || (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fma(asinh(injectionSwitch), injectionSwitch, vec2(7.2, -0.2))) : injectionSwitch)).y), true && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(fma(asinh(injectionSwitch), injectionSwitch, vec2(7.2, -0.2))) : injectionSwitch)).y))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0), (true ? _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(870.322)), vec2(_GLF_FUZZED(4074.4359), _GLF_IDENTITY((injectionSwitch)[1], clamp((injectionSwitch)[1], (injectionSwitch)[1], (injectionSwitch)[1]))), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec4(bvec2(false, true), true, false))))).y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0) : _GLF_FUZZED(495.719)))), ((injectionSwitch.x > injectionSwitch.y)) && true))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0), bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0), true, true, true)))), ((injectionSwitch.x > injectionSwitch.y)) && true))), bool(bvec4(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0)), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0))))))), ((injectionSwitch.x > injectionSwitch.y)) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0)), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0))))))), ((injectionSwitch.x > injectionSwitch.y)) && true), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0)), true && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0), (_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0)) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(-994.115))), injectionSwitch.y, injectionSwitch.y))) - 0.0))))))), ((injectionSwitch.x > injectionSwitch.y)) && true)))) && true))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(739.898)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(739.898)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))) || (true)), (injectionSwitch.x < injectionSwitch.y))) && true))), _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0)))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, 1.0, determinant(mat4(0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0)))))))) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false), true && (! _GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))) && true)), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false), (_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(vec2(9.9, -2.4)))).y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))) || false)) || false)))))) && true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! (! (true))))))) || false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! (! (true))))))) || false), true), bvec2(bvec3(bvec2(_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! (! (true))))))) || false), true), false)))))))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), ! (! (_GLF_IDENTITY(true, ! (! (true))))))))))))))) || false))))) || false) && true, false || ((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))) && true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y) / 1.0))) && true)))) || false)))) && true)))), ! (_GLF_IDENTITY(! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-5.8)), float(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0) : _GLF_FUZZED(132.620)))), bool(true)))), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! (! (true))))))) || false)))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! (! (true))))))) || false), ! (! (! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) + vec2(0.0, 0.0), mix(vec2(((injectionSwitch) + vec2(0.0, 0.0))[0], _GLF_FUZZED(float(-36369))), vec2(_GLF_FUZZED(-807.810), ((injectionSwitch) + vec2(0.0, 0.0))[1]), bvec2(false, true)))).y)) && _GLF_IDENTITY(true, ! (! (true))))))) || false)))))))) || false) && true, false || ((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y)) && true)))) || false)))) && true))))), (! (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))) || false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))) || false))), bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(true, ! _GLF_IDENTITY((! (true)), ! (! ((! (true)))))))))) || false))), true))))))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))), false, false, false)))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0))), _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) && _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), false || (_GLF_IDENTITY(true, ! (! (true))))))))) || false))))) || false) && true, false || (_GLF_IDENTITY((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))) && true)), ! _GLF_IDENTITY((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))), ((! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y)) && true)))) || false)))) && true, ((! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), false)))) && _GLF_IDENTITY(true, true && (true)))), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)))))), ((! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), vec2(mat2x4((injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))).y)) && true)))) || false)))) && true) && true))))))) && true))))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(subgroup_local_id + _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, clamp(1, 1, 1)), 1)) < subgroup_size)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = (0 & -90269); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))), ! (! (bool(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))))))))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(2, min(2, 2)), int(_GLF_IDENTITY(ivec3(2, _GLF_IDENTITY(1, clamp(1, 1, 1)), ((0 ^ 1) | 1)), max(_GLF_IDENTITY(ivec3(2, 1, ((_GLF_IDENTITY(0, (0) / 1) ^ 1) | 1)), _GLF_IDENTITY(_GLF_IDENTITY(ivec3(ivec4(ivec3(2, 1, ((_GLF_IDENTITY(0 ^ 1, ~ (_GLF_IDENTITY(~ (0 ^ 1), ~ (~ (~ (0 ^ 1))))))) | 1)), 0)), (ivec3(ivec4(ivec3(2, 1, ((_GLF_IDENTITY(0 ^ 1, ~ (_GLF_IDENTITY(~ (0 ^ 1), ~ (_GLF_IDENTITY(~ (~ (0 ^ 1)), max(~ (~ (0 ^ 1)), ~ (~ (0 ^ 1))))))))) | 1)), 0))) - ivec3(0, 0, 0)), (ivec3(ivec4(ivec3(2, 1, ((0 ^ 1) | 1)), 0))) | ivec3(0, 0, 0))), ivec3(2, 1, ((0 ^ 1) | 1))))))), 4, 64, 4);
              }
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), 0 + _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) / 1))))), 0 ^ (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) / 1))))), max(((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) / 1))))), ((1 << _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, (5) / 1)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (true ? 5 : _GLF_FUZZED(atomicMax(_injected_loop_counter, -18582))))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 | 0, _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0), 0, (1 & 1), 1), (ivec4(_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0), 0, (1 & 1), 1)) | ivec4(0, 0, 0, 0))), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0), 0, (1 & 1), 1), (ivec4(_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0), 0, (1 & 1), 1)) | ivec4(0, 0, 0, 0))), 0 ^ (int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0), 0, (1 & 1), 1), (ivec4(_GLF_IDENTITY(0 | 0, (0 | 0) ^ 0), 0, (1 & 1), 1)) | ivec4(0, 0, 0, 0)))))) + 0)))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false), false)))))))))));
         for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(atomicCompSwap(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), min(_GLF_IDENTITY((0 | 0), ~ (~ ((0 | 0)))), _GLF_IDENTITY((0 | 0), ((0 | 0)) | ((0 | _GLF_IDENTITY(0, 0 ^ (0))))))) ^ 1)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : 0), 0 | (_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : 0), min(_GLF_IDENTITY((false ? _GLF_FUZZED(_injected_loop_counter) : 0), ((false ? _GLF_FUZZED(_injected_loop_counter) : 0)) | 0), (false ? _GLF_FUZZED(_injected_loop_counter) : 0)))))))) ^ (_GLF_IDENTITY(0, min(0, 0)))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0)))), bool(bvec3(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) ^ 0)))), true, true))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             subgroupAll(false);
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), max(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-77.07)), float(0.0), bool(true))), 0.0))), float(_GLF_FUZZED(-5.7)), bool(false))), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, _GLF_IDENTITY(cos(0.0), float(mat4(cos(0.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), (false ? _GLF_FUZZED(-740.322) : float(_GLF_IDENTITY(vec4(injectionSwitch.x, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.2)), bool(false)))) + 0.0), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, _GLF_IDENTITY(determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), clamp(determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(float(0.0)))) + 0.0)) * 1.0)), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))))), float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-696.367)), bool(false))))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(93116))), float(0.0), bool(true))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), max(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), mix(vec4((vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[0], (vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[1], _GLF_IDENTITY((vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[2], (true ? (vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[2] : _GLF_FUZZED(-149.486))), _GLF_FUZZED(-5.9)), vec4(_GLF_FUZZED(55.95), _GLF_FUZZED(49.91), _GLF_FUZZED(-0.4), (vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[3]), bvec4(false, false, false, true))), vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec4(injectionSwitch.x, 0.0, determinant(_GLF_IDENTITY(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0))))))) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), max(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(injectionSwitch.x, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-77.07)), float(0.0), bool(true))), 0.0))), float(_GLF_FUZZED(-5.7)), bool(false))), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, _GLF_IDENTITY(cos(0.0), float(mat4(cos(0.0), 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), (false ? _GLF_FUZZED(-740.322) : float(_GLF_IDENTITY(vec4(injectionSwitch.x, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-5.2)), bool(false)))) + 0.0), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), clamp(vec4(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, _GLF_IDENTITY(determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), clamp(determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, float(float(0.0)))) + 0.0)) * 1.0)), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))))), float(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-696.367)), bool(false))))), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(float(93116))), float(0.0), bool(true))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, injectionSwitch.y)), 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0)))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), max(_GLF_IDENTITY(vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), mix(vec4((vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[0], (vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[1], _GLF_IDENTITY((vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[2], (true ? (vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[2] : _GLF_FUZZED(-149.486))), _GLF_FUZZED(-5.9)), vec4(_GLF_FUZZED(55.95), _GLF_FUZZED(49.91), _GLF_FUZZED(-0.4), (vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))[3]), bvec4(false, false, false, true))), vec4(injectionSwitch.x, 0.0, determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / 1.0), cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0))), clamp(vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0), vec4(injectionSwitch.x, 0.0, determinant(mat4(1.0, cos(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec4(injectionSwitch.x, 0.0, determinant(_GLF_IDENTITY(mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0), (mat4(1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))), 0.0))))))) > injectionSwitch.y))))))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true), bool(bvec3(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (true))) && true), true, true)))))), bool(_GLF_IDENTITY(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), false, false), bvec3(bvec4(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)), false, false), false))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), ! (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), bool(bool(! (false)))), true, true)))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true, true)))) || false), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))))))
              barrier();
             atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
          }
         subgroupAll(true);
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((+ -6.6))), float(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(refract(-13.46, 5395.6837, 5.7)) : _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), bool(true))) > injectionSwitch.y)))))))))))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false, _GLF_IDENTITY(false || ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false), (false || ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false)) && true))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))))))), false, true, false)))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true)))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), true), false, true)))), true && (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, true))))))), false, true, false)))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
          }
         else
          {
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(0, ~ (~ (0))) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, min(2, 2))) + 0))))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
