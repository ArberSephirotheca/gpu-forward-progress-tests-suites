#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_6 {
 uvec3 _f0;
 bvec4 _f1;
 ivec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_7 {
 _GLF_struct_6 _f0;
 bool _f1;
 mat4 _f2;
 uint virtual_gid;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 mat2 _f1;
 mat2x4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat2x3 _f1;
} ;

struct _GLF_struct_1 {
 int _f0;
 float _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 _GLF_struct_2 _f1;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_8 {
 _GLF_struct_0 _f0;
 _GLF_struct_3 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_7 _f3;
 uvec3 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (bool(bool(false))), ! (! (! (bool(bool(false))))))))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), false || ((false)))))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), min(_GLF_IDENTITY(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), clamp(float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)), float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)))), float(mat3x4(injectionSwitch.x, 1.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, sqrt(0.0), 1.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0))))) > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))))), false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 0.0), max(vec3(injectionSwitch, 0.0), vec3(injectionSwitch, 0.0))))))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-42.44)), bool(false)))))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0))))))), mix(float(_GLF_FUZZED(2013.1114)), float(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))))))), bool(true)))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), mix(float(sqrt(length(vec4(0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(1.4)), bool(_GLF_IDENTITY(false, false || (false))))), 1.0))))))), mix(float(_GLF_FUZZED(2013.1114)), float(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(reflect(152.116, 8.1)) : 1.0))), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))))))), bool(true)))))), ! (! (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), false, true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), false)))))) && true))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), false)))))) && true))), false, false, true)))) || false))), false, true))), false), true, _GLF_IDENTITY(true, true && (true)))))))) || false))), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), true)))))), (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), bvec2(bvec3(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y, ! (! (injectionSwitch.x > injectionSwitch.y))), false)), true))))))) || false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0))))))), (true ? float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0))))))) : _GLF_FUZZED(-0.8))), mix(float(_GLF_FUZZED(2013.1114)), float(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-1096.6944)), float(0.0), bool(true)))))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))))))), bool(true)))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), 0.0))), 1.0), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, _GLF_IDENTITY(0.0, float(mat4(0.0, 1.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0))), 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, _GLF_IDENTITY(sqrt(length(vec4(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, 0.0))), mix(float(sqrt(length(vec4(0.0, 0.0, 0.0, 0.0)))), float(_GLF_FUZZED(1.4)), bool(_GLF_IDENTITY(false, false || (false))))), 1.0))))))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(2013.1114, min(2013.1114, 2013.1114)))), float(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(_GLF_IDENTITY(1.0, 0.0 + (1.0))), 0.0, 0.0, _GLF_IDENTITY(sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), float(float(sqrt(length(vec4(0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(418.800)), bool(false))))))) ? _GLF_FUZZED(reflect(152.116, 8.1)) : 1.0))), (false ? _GLF_FUZZED(mat2x3(9082.5795, -259.097, -6469.3045, 29.46, -3.2, 8.7)) : _GLF_IDENTITY(mat2x3(injectionSwitch.y, abs(1.0), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0), transpose(transpose(mat2x3(injectionSwitch.y, _GLF_IDENTITY(abs(1.0), (false ? _GLF_FUZZED(-6516.2730) : abs(1.0))), 0.0, 0.0, sqrt(length(vec4(0.0, 0.0, 0.0, 0.0))), 1.0)))))))), bool(true)))))), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) + vec2(0.0, 0.0))).y))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false))), true))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ((injectionSwitch.x > injectionSwitch.y) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) && true))), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), bvec3(bvec4(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), false)))))) && true))), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, true)))), (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), ! (! (bool(! ((injectionSwitch.x > injectionSwitch.y))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), ! (! (bool(! ((injectionSwitch.x > injectionSwitch.y))))))), false || (bool(_GLF_IDENTITY(bool(! ((injectionSwitch.x > injectionSwitch.y))), ! (! (bool(! ((injectionSwitch.x > injectionSwitch.y)))))))))) || false)), false, false), bvec3(bvec4(bvec3(! ((injectionSwitch.x > injectionSwitch.y)), false, false), false)))))) && true))), false, false, true)))) || false))), false, true))), false), true, _GLF_IDENTITY(true, true && (true)))))))) || false))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), (false ? _GLF_FUZZED(step(vec2(-940.578, -1.9), vec2(-295.573, 3023.9118))) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), min(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), (injectionSwitch), (injectionSwitch))), (injectionSwitch))) / vec2(1.0, 1.0)))).y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(false, ! (! (false)))))), false, _GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x < injectionSwitch.y))) || false), true))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))) | 0u);
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, clamp(gl_WorkGroupSize.x, gl_WorkGroupSize.x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0))), _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(! (false), true, _GLF_IDENTITY(false, (false) || false), false)), ! (_GLF_IDENTITY(! (bool(bvec4(! (false), true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))) || false), false))), (! (bool(bvec4(_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, _GLF_IDENTITY(false, (false) || false), false)))) || false))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), false), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), false), true, false))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 _GLF_struct_8 _GLF_struct_replacement_8 = _GLF_struct_8(_GLF_struct_0(mat4x2(1.0)), _GLF_struct_3(_GLF_struct_1(1, 1.0, ivec4(1)), _GLF_struct_2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2(_GLF_IDENTITY((vec2(1.0, 0.0)), min((vec2(1.0, 0.0)), (vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0))))[0], (vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-79643)))))]), _GLF_IDENTITY(vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((-308.408 / 26.60))), min(vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((-308.408 / 26.60))), vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((-308.408 / 26.60))))), bvec2(false, false)))), clamp(float(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2((vec2(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (1.0) / cos(0.0)), 1.0)), 0.0))[0], (vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0), (true ? mat3(1.0, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0, 0.0, 1.0) : _GLF_FUZZED(mat3(-21.26, -8429.8082, -3.6, 915.107, 441.709, -471.301, -0.0, 6.5, -6489.2734))))))) - 0.0), 0.0))[1]), vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((_GLF_IDENTITY(-308.408, max(_GLF_IDENTITY(-308.408, (-308.408) / 1.0), _GLF_IDENTITY(-308.408, (true ? -308.408 : _GLF_FUZZED(-7035.6403))))) / 26.60))), bvec2(false, false)))), float(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2(_GLF_IDENTITY((vec2(1.0, 0.0))[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.5) : (vec2(1.0, 0.0))[0])), (vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))[1]), vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((-308.408 / 26.60))), bvec2(false, false)))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2((vec2(1.0, 0.0))[0], (vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), (_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4x3(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0)), mix(float(_GLF_FUZZED(float(false))), float(_GLF_IDENTITY(float(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0)), max(float(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0)), float(mat4(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0))))), bool(true)))), 1.0, sqrt(0.0), 0.0, 0.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0), mat4x3(mat4x3(mat4x3(_GLF_IDENTITY(1.0, float(mat4(1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, abs(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, sin(0.0), 1.0, 0.0))), 1.0, sqrt(0.0), 0.0, 0.0, abs(0.0), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 1.0, 1.0))))))) - 0.0), 0.0))[1]), vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((-308.408 / 26.60))), bvec2(false, false)))), float(float(_GLF_IDENTITY(float(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2((vec2(1.0, 0.0))[0], _GLF_IDENTITY((vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))[1], float(vec4((vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))[1], log(1.0), 0.0, 1.0)))), vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(-308.408, mix(float(_GLF_FUZZED(280.026)), float(-308.408), bool(true))), min(_GLF_IDENTITY(-308.408, _GLF_IDENTITY(float(mat3x2(-308.408, 0.0, 1.0, 1.0, 1.0, 0.0)), min(float(mat3x2(-308.408, 0.0, 1.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY(float(mat3x2(-308.408, 0.0, 1.0, 1.0, 1.0, 0.0)), (float(mat3x2(-308.408, 0.0, 1.0, 1.0, 1.0, 0.0))) / 1.0)))), -308.408)), max(-308.408, -308.408)) / 26.60))), bvec2(false, false)))), (float(_GLF_IDENTITY(vec2(1.0, 0.0), mix(vec2((vec2(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0))))[0], (vec2(_GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0))[1]), vec2(_GLF_FUZZED(-768.076), _GLF_FUZZED((_GLF_IDENTITY(-308.408, (false ? _GLF_FUZZED(9.2) : -308.408)) / 26.60))), bvec2(false, false))))) / 1.0))))))), mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 1.0 * (1.0)), mix(float(_GLF_IDENTITY(1.0, 1.0 * (1.0))), float(_GLF_FUZZED(-59.92)), bool(false))), 0.0, 1.0, 1.0, _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(floor(_GLF_IDENTITY(13.93, (13.93) / 1.0))) : length(vec3(0.0, 0.0, 0.0)))), 0.0)))))), _GLF_struct_5(_GLF_struct_4(uvec3(1u), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), mat2(_GLF_IDENTITY(mat4x2(transpose(mat2(1.0))), transpose(transpose(mat4x2(transpose(mat2(1.0)))))))))), (_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0))))), mat2(_GLF_IDENTITY(mat4x2(transpose(mat2(1.0))), transpose(transpose(mat4x2(transpose(mat2(1.0))))))))))) + mat2(0.0, 0.0, 0.0, 0.0)), mat2x4(1.0), mat4x3(1.0))), _GLF_struct_7(_GLF_struct_6(_GLF_IDENTITY(uvec3(1u), max(uvec3(1u), _GLF_IDENTITY(uvec3(1u), max(uvec3(1u), uvec3(1u))))), bvec4(true), ivec4(1), mat2(1.0)), true, mat4(1.0), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, clamp(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, workgroup_base + subgroup_id * subgroup_size)) + subgroup_local_id, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + subgroup_local_id, min(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | uint(_GLF_ZERO(0.0, injectionSwitch.x))) + subgroup_local_id, workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))) / 1u))), subgroup_size, _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), clamp(~ (subgroup_size), ~ (subgroup_size), ~ (subgroup_size))))))) + subgroup_local_id))))), uvec3(1u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), bool(bvec4((false), true, false, true)))))), ! (! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base))) | 0u) + subgroup_id * subgroup_size, uint(uvec2(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)) + subgroup_id * subgroup_size, 1u))), _GLF_IDENTITY(0u, max(0u, 0u)) | (workgroup_base + _GLF_IDENTITY(subgroup_id, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_id : _GLF_FUZZED(workgroup_base))) * subgroup_size)), max(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(workgroup_base, max(workgroup_base, _GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base))))) / _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, 0u ^ (_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), 1u))))) << 0u)))) + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_size), (_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(1u, min(1u, 1u)), 1u))), subgroup_local_id))) : _GLF_IDENTITY(0u ^ (subgroup_size), (0u ^ (subgroup_size)) * 1u), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, clamp(_GLF_IDENTITY(1u, (1u) >> 0u), _GLF_IDENTITY(1u, min(1u, 1u)), 1u))), subgroup_local_id))) : _GLF_IDENTITY(0u ^ (subgroup_size), (0u ^ (subgroup_size)) * 1u)) << 0u)))), min(subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_size), (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id))) : _GLF_IDENTITY(0u ^ (subgroup_size), (0u ^ (subgroup_size)) * 1u)))), subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u ^ (subgroup_size), (false ? _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, (1u) / 1u)), subgroup_local_id))), (_GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id)))) | (_GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / _GLF_IDENTITY(1u, (1u) | (1u))), subgroup_local_id))))) : _GLF_IDENTITY(0u ^ (subgroup_size), (0u ^ (subgroup_size)) * 1u)))))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))) ^ 0u), (false ? _GLF_FUZZED((subgroup_size ^ num_workgroup)) : workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))))), (_GLF_IDENTITY(workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) + (0u | 0u)), ~ (~ (subgroup_size))), (false ? _GLF_FUZZED((subgroup_size ^ num_workgroup)) : workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) | 0u), _GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u) + _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id)), 0u)), uint(uvec3(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id)), 0u)), 0u | (uint(uvec2(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_id)), 0u)))), 0u, 0u)))) * subgroup_size)))))) + ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))))))) | ((subgroup_size)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size))), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), clamp((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))))))))) / (1u | 1u)))) ^ 0u), 0u + (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)))), ((_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), clamp((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))))))))) / (1u | 1u)))) ^ 0u, (_GLF_IDENTITY((subgroup_size), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), clamp((_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))), clamp(max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))))) | ((subgroup_size)))), (_GLF_IDENTITY((subgroup_size), (_GLF_IDENTITY((subgroup_size), max((subgroup_size), _GLF_IDENTITY((subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_size), 0u | ((subgroup_size))))))))) | ((subgroup_size)))))))))) / (1u | 1u)))) ^ 0u) - 0u)), 0u + (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u))))) + uint(_GLF_ZERO(0.0, injectionSwitch.x)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true))))), false || (_GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true))))), ! (! (bool(bvec3(false, false, _GLF_IDENTITY(true, ! (! (true)))))))))))) && true, bool(bool((false) && true))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) + sin(vec2(0.0, 0.0)))), mix(float(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 0.0), (vec2(injectionSwitch.y, 0.0)) + sin(vec2(0.0, 0.0))))), float(_GLF_FUZZED(-0.9)), bool(false)))))))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(-8310.7606, max(_GLF_IDENTITY(-8310.7606, mix(float(-8310.7606), float(_GLF_FUZZED((false ? 3.5 : 536.333))), bool(false))), -8310.7606)))), float(injectionSwitch.x), _GLF_IDENTITY(bool(true), ! (_GLF_IDENTITY(! (bool(true)), (! (bool(true))) && true))))) > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5054.4450), _GLF_FUZZED(-2.3)), vec2(_GLF_IDENTITY((injectionSwitch)[0], _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0]), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.2) : (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0], (false ? _GLF_FUZZED(3110.4169) : (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[0]))))) - 0.0), (injectionSwitch)[1]), bvec2(true, true))).y)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, _GLF_IDENTITY(dot(vec2(sqrt(0.0), sqrt(1.0)), vec2(1.0, 0.0)), dot(vec2(sqrt(0.0), sqrt(1.0)), vec2(1.0, 0.0))), cos(0.0)))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * _GLF_IDENTITY(determinant(mat4(_GLF_IDENTITY(1.0, (1.0) / cos(length(vec2(0.0, 0.0)))), sqrt(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), (determinant(mat4(1.0, sqrt(0.0), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(458.426))), 0.0, 0.0)) : _GLF_FUZZED(-9.2))), 0.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0)), 1.0))) + 0.0))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, true)))))))), ! (! (bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (! (_GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, true))))))))))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-3041.0702)), vec2(_GLF_FUZZED(-3.2), (injectionSwitch)[1]), bvec2(false, true))).y))))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) && _GLF_IDENTITY(true, ! (! (true))), false || ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))) && _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), false || (_GLF_IDENTITY((true), ! (! (_GLF_IDENTITY((true), bool(bvec4((true), true, true, false)))))))))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[_GLF_struct_replacement_8._f3.virtual_gid], _GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) | uint(_GLF_ZERO(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, (0.0) * 1.0) : _GLF_FUZZED(-915.262)))))), exp(0.0), 0.0), (mat3x2(0.0, 1.0, 1.0, sqrt(_GLF_IDENTITY(0.0, 0.0 + (0.0))), exp(0.0), 0.0)) * mat3(1.0)))), injectionSwitch.x)), uint(uint((uint(1)) | uint(_GLF_ZERO(_GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x4(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, tan(0.0), 1.0)), clamp(float(mat3x4(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, tan(0.0), 1.0)), float(mat3x4(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, tan(0.0), 1.0)), _GLF_IDENTITY(float(mat3x4(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, tan(0.0), 1.0)), mix(float(float(mat3x4(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 1.0, 1.0, determinant(mat4(1.0, 1.0, 0.0, 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, tan(0.0), 1.0))), float(_GLF_FUZZED(-86.22)), bool(false)))))), float(_GLF_IDENTITY(mat3x2(0.0, 1.0, 1.0, sqrt(0.0), exp(0.0), 0.0), (mat3x2(0.0, 1.0, 1.0, sqrt(0.0), exp(0.0), 0.0)) * mat3(1.0)))), injectionSwitch.x)))))), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(bool(bvec4(false, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true)))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), _GLF_IDENTITY((false) || false, false || ((false) || false))), true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) || false))))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(subgroup_local_id + 1 < subgroup_size)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), true, false, true))))), true, true, true)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), clamp((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) * vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(false, (false) && true), false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))) && true), false)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), false)), bool(bool(bool(bvec4(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, ! (! (false)))) && true), false))))))))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false)), (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))), false, true)), bool(bvec2(bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x > injectionSwitch.y))), false, true)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(vec2((injectionSwitch) * mat2(1.0))))))).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), false, false)))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) && true), false, false, false))))))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false))))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(true && (bool(false)), (_GLF_IDENTITY(true && (bool(false)), (_GLF_IDENTITY(true && (bool(false)), false || (true && (bool(false))))) && true)) && true)))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? next_virtual_gid : _GLF_FUZZED(subgroup_local_id)))], uint(2), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) * 1), (4) >> 0), 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false))))))), false), true, true)))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))))), false), true, true))), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))))), false), true, true))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))))))))), false), true, true))), false)), false, true))))))), ! (! (bool(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), (bool(false)) && true)))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(bool(false), ! (! (bool(_GLF_IDENTITY(false, ! (! (false))))))), false), true, true)))))))))) || false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       return;
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false || (bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec3(injectionSwitch, 1.0), mix(vec3(_GLF_FUZZED(-7.8), _GLF_FUZZED(vec4(-50.04, -35.06, 2.6, 52.19).x), (vec3(injectionSwitch, 1.0))[2]), vec3((vec3(injectionSwitch, 1.0))[0], (vec3(injectionSwitch, 1.0))[1], _GLF_FUZZED(1.1)), bvec3(true, true, false)))))) : injectionSwitch)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
