#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(87.50), _GLF_FUZZED(6681.7784)), bvec2(false, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, tan(0.0), 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 0.0))))).y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), (bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))) || false)))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 | 0), clamp((0 | 0), (0 | 0), _GLF_IDENTITY((0 | 0), 0 ^ ((0 | 0)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_IDENTITY(true, true && (true)), false, true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))))), true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY((gl_WorkGroupSize.x), ((gl_WorkGroupSize.x)) / 1u) >> 0u), max(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) << uvec3(0u, 0u, 0u)).x, gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / exp(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) && true)))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u);
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 1u))), min(~ _GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), ~ (subgroup_id)))) ^ 0u))) * subgroup_size, 1u * (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), ~ (_GLF_IDENTITY(~ (subgroup_id), (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_id), uint(uvec2((subgroup_id), 1u))), min(~ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) | 0u), ~ (subgroup_id)))) ^ 0u))) * subgroup_size)) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1))), ~ (~ (max(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (subgroup_local_id + 1)))))))) | (subgroup_local_id + 1))) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)))) > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             continue;
            }
           barrier();
          }
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, true, false))))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      break;
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) - 0)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(int(true))))), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(2073) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) * 1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), min((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (true ? (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))) / 1)) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)), ~ (~ (1))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0) << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, max(3, 3))) | 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (false ? _GLF_FUZZED(56297) : ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0 + (1 << _GLF_IDENTITY(int(3), int(3))), 0 ^ (0 + (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (_GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) + (0 ^ 0))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), (true ? int(_GLF_IDENTITY(3, ~ (~ (3)))) : _GLF_FUZZED(-82075))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) ^ 0)) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) / 1), 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + _GLF_IDENTITY(0, (0) - 0), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), min(~ (~ (1)), ~ (~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(13496))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), int(3))) + 0, min(((_GLF_IDENTITY(1, int(ivec2(1, 0))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) ^ (0 | 0))))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(ivec4(3, 1, 0, 0)))))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, max(0, 0)), 0, 1), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), int(ivec2((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 & 1)))), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(10532)))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3)))), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), _GLF_IDENTITY((ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0) ^ ((ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), _GLF_IDENTITY(int(3), (int(3)) - 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) | (0 ^ 0)), ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(true, (true) && true) ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (ivec3(-51952, 65977, -44916).x & 0) | (int(3))), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31197) : _GLF_IDENTITY(3, (3) | (3))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 + (1))))) | (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3))), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))))), (false ? _GLF_FUZZED(-37543) : false ? _GLF_FUZZED(2073) : _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), clamp(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) | (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (_GLF_IDENTITY(1, ~ (~ (1)))) * 1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), min((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))), (true ? (_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), 0 ^ ((~ (1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), min(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(3), int(3))))))) / 1)) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))), 1)), ~ (~ (1))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 1 * (int(3))))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) / 1)) ^ 0) << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (_GLF_IDENTITY(3, max(3, 3))) | 0)), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))), (false ? _GLF_FUZZED(56297) : ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0 + (1 << _GLF_IDENTITY(int(3), int(3))), 0 ^ (0 + (1 << _GLF_IDENTITY(int(3), int(3))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (0 >> _GLF_IDENTITY(int(6), int(6))) ^ (_GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, int(ivec4(3, int(_GLF_ZERO(0.0, injectionSwitch.x)), 0, 1)))), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) + (0 ^ 0))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) | 0)) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), (true ? int(_GLF_IDENTITY(3, ~ (~ (3)))) : _GLF_FUZZED(-82075))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) ^ 0)) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) / 1), 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + _GLF_IDENTITY(0, (0) - 0), ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), min(~ (~ (1)), ~ (~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(13496))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) - 0), int(3))) + 0, min(((_GLF_IDENTITY(1, int(ivec2(1, 0))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), clamp((_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) ^ (0 | 0))))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, int(ivec4(3, 1, 0, 0)))))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(0, max(0, 0)), 0, 1), (ivec4(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), int(ivec2((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (1 & 1)))), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (true ? 1 << _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(10532)))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3)))), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), max(_GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(1, ~ (~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(int(3), int(3)))), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), _GLF_IDENTITY((ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0) ^ ((ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (3) | 0)), _GLF_IDENTITY(int(3), (int(3)) - 0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(3, (3) | (0 ^ 0)), ~ (~ (3)))), int(3))) + 0)))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(true, (true) && true) ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), (ivec3(-51952, 65977, -44916).x & 0) | (int(3))), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((_GLF_IDENTITY(1, min(1, 1)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (1 << _GLF_IDENTITY(int(3), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), (true ? (_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(-66897))), int(_GLF_IDENTITY(ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1), (ivec4((_GLF_IDENTITY(1, ~ (~ (1))) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)), 0, 0, 1)) - ivec4(0, 0, 0, 0)))))), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, min(((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(3, (false ? _GLF_FUZZED(-31197) : _GLF_IDENTITY(3, (3) | (3))))), int(3))) >> _GLF_IDENTITY(int(3), int(3))) + 0, ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), 0 + (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, 0 + (1))))) | (1)) << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), ~ (~ (int(3)))), int(3))), int(3))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(3, ~ (~ (3)))), int(3))) + 0)))))))))) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, clamp(_GLF_IDENTITY(7, (7) << 0), 7, 7))), int(_GLF_IDENTITY(7, max(7, 7)))), (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) / 1)), (_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y), true))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y), true))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), true)))) || false)) || false)) ? _GLF_FUZZED(38477) : int(7))), int(7))) >> (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), _GLF_IDENTITY(int(3), (false ? _GLF_FUZZED(_injected_loop_counter) : int(3))))))))) | 0) | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), false || (bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
      continue;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-3074.1694)), bool(false))), injectionSwitch.y))))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, virtual_gid))], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true))))))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))));
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0)), clamp(vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0)), vec2(mat4x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0, 0.0, abs(1.0), 1.0, 0.0))))).y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 1.0, 1.0, 0.0, 1.0)))) + abs(0.0)) < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), injectionSwitch), (clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), injectionSwitch)) * mat2(1.0))).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), injectionSwitch), (clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(mat3x4((injectionSwitch) * mat2(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0)))), injectionSwitch)) * mat2(1.0))).y)))))))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) || false)))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false))))))))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(2, (2) ^ 0)), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(int(2), (int(2)) ^ 0)) | (int(2))))) >> _GLF_IDENTITY(int(2), int(2)), ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) ^ 0), 0 + (_GLF_IDENTITY(int(2), (int(2)) ^ 0)))) | (int(2))))) >> _GLF_IDENTITY(int(2), int(2))) * 1))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false), ! (! (false)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bool((! (false)))), bool(bool(bool(bool((! (false)))))))))))
            barrier();
          }
         return;
        }
      }
     else
      {
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_IDENTITY(false, (false) || false))), (bool(bvec2(false, false))) || false))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-3.4, -4.5)) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).x > injectionSwitch.y))))
          return;
         break;
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, ~ (~ (1))), 1)), _GLF_IDENTITY(1, (1) | (1)))))); _injected_loop_counter ++)
            {
             return;
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec3(true, true, false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / cos(vec2(0.0, 0.0))).y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
      }
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! _GLF_IDENTITY((false), ((false)) || false)), ! (! (! (! (false))))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && true)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), bool(bvec4(bool(bvec4(false, true, true, _GLF_IDENTITY(false, ! (! (false))))), false, false, true))))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false, ! (! (false)))))));
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(true ? subgroup_local_id : _GLF_FUZZED(subgroup_id), (true ? subgroup_local_id : _GLF_FUZZED(subgroup_id)) * (1u ^ 0u)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id) << 0u, (_GLF_IDENTITY((subgroup_local_id) << 0u, clamp((subgroup_local_id) << 0u, (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) >> 0u)) << 0u, (subgroup_local_id) << 0u))) - 0u), clamp(_GLF_IDENTITY((subgroup_local_id) << 0u, (_GLF_IDENTITY((subgroup_local_id) << 0u, clamp((subgroup_local_id) << 0u, (subgroup_local_id) << 0u, (subgroup_local_id) << 0u))) - 0u), _GLF_IDENTITY((subgroup_local_id) << 0u, (_GLF_IDENTITY((subgroup_local_id) << 0u, clamp((subgroup_local_id) << 0u, (subgroup_local_id) << 0u, (subgroup_local_id) << 0u))) - 0u), _GLF_IDENTITY((subgroup_local_id) << 0u, (_GLF_IDENTITY((subgroup_local_id) << 0u, clamp((subgroup_local_id) << 0u, (subgroup_local_id) << _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 1u, 1u), ~ (~ (uvec4(0u, 0u, 1u, 1u)))))), (subgroup_local_id) << 0u))) - 0u))), (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), 0u + ((subgroup_local_id))) << 0u, 1u * (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), 0u + ((subgroup_local_id))) << 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((subgroup_local_id), 0u + ((subgroup_local_id))) << 0u))))) * 1u)) + 1 < subgroup_size)
    {
     for(int _injected_loop_counter = (_GLF_IDENTITY((1 | _GLF_IDENTITY(0, _GLF_IDENTITY((0), (_GLF_IDENTITY((0), 0 + ((0)))) >> 0) << 0)) | 1, max((1 | _GLF_IDENTITY(0, (0) << 0)) | 1, _GLF_IDENTITY((_GLF_IDENTITY(1 | _GLF_IDENTITY(0, (0) << 0), max(1 | _GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(1 | _GLF_IDENTITY(0, (0) << 0), (1 | _GLF_IDENTITY(0, (0) << 0)) / 1)))) | 1, ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-21172) : 1)) | _GLF_IDENTITY(0, (0) << 0)) | 1) / 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (! (_injected_loop_counter > 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(2), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(uint(2), min(_GLF_IDENTITY(uint(2), (uint(2)) | (uint(2))), uint(2))), 0u)), (uint(uvec2(_GLF_IDENTITY(uint(2), min(_GLF_IDENTITY(uint(2), (uint(2)) | (uint(2))), uint(2))), 0u))) | 0u)), 4, 64, 4);
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
          }
         break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY(false || (injectionSwitch.x < injectionSwitch.y), true && (false || (injectionSwitch.x < injectionSwitch.y)))) && true))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y))), ((_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (injectionSwitch.x < injectionSwitch.y)))) || false)) && true))))
        {
         return;
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, bool(bvec4(true, true, false, true))), true, false)))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))), false, false, true)))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), bool(bvec4(bool(_GLF_DEAD(false)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           do
            {
             barrier();
             if(_GLF_DEAD(false))
              return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 1.0, 1.0, 1.0, 1.0)))))));
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
          return;
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-721.428)), float(injectionSwitch.y), bool(true)))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x, _GLF_IDENTITY((false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), max(_GLF_IDENTITY((false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), ((false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)) - 0.0), (false ? _GLF_FUZZED(3.8) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)))) < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))))
        {
         subgroupAll(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           return;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bvec2(bool(bool(false)), true), bvec2(bvec3(bvec2(bool(bool(false)), true), true)))))), bool(bool(! (_GLF_IDENTITY(bool(bool(false)), bool(_GLF_IDENTITY(bvec2(bool(bool(false)), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), bvec2(bvec3(bvec2(bool(bool(false)), true), true))))))))))))))
      {
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          barrier();
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, true)))))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     subgroupAll(true);
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min(_GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))), (int(6)))) / 1), _GLF_IDENTITY(int(6), min(int(6), int(6))))))), ~ (~ (_GLF_IDENTITY((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min(_GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))), (int(6)))) / 1), _GLF_IDENTITY(int(6), min(int(6), int(6))))))), max((0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min(_GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))), (int(6)))) / 1), _GLF_IDENTITY(int(6), min(int(6), int(6))))))), (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)), min(_GLF_IDENTITY((int(6)), clamp((int(6)), (int(6)), (int(6)))), (int(6)))) / 1), _GLF_IDENTITY(int(6), min(int(6), int(6))))))))))))); _injected_loop_counter --)
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
            }
           continue;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
          barrier();
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((~ (~ -18260)) & _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-83489) : 0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             else
              {
              }
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
           if(_GLF_DEAD(false))
            break;
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(0.2)), bool(false))) > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), ! (! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.0)), float(1.0), bool(true)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((1 ^ _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), clamp(~ (0), ~ (0), ~ (0)))))), (false ? _GLF_FUZZED(55977) : _GLF_IDENTITY((1 ^ 0), clamp((1 ^ 0), (1 ^ 0), (1 ^ 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false))))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
      }
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
