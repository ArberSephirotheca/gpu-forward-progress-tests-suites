#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_28 {
 bvec4 _f0;
 bvec4 _f1;
 mat4x3 _f2;
 int _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_27 {
 bvec3 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_29 {
 _GLF_struct_27 _f0;
 _GLF_struct_28 _f1;
 float _f2;
 mat3x4 _f3;
 bool _f4;
} ;

struct _GLF_struct_25 {
 bvec4 _f0;
 mat3x2 _f1;
 ivec2 _f2;
 uvec2 _f3;
 uint _f4;
} ;

struct _GLF_struct_24 {
 mat2x4 _f0;
 ivec3 _f1;
} ;

struct _GLF_struct_26 {
 ivec3 _f0;
 _GLF_struct_24 _f1;
 _GLF_struct_25 _f2;
} ;

struct _GLF_struct_30 {
 _GLF_struct_26 _f0;
 uint num_workgroup;
 mat4 _f1;
 _GLF_struct_29 _f2;
} ;

struct _GLF_struct_21 {
 uint _f0;
 uvec3 _f1;
 mat2 _f2;
 vec3 _f3;
 bvec2 _f4;
 int _f5;
} ;

struct _GLF_struct_20 {
 vec4 _f0;
 mat2x4 _f1;
 mat3x2 _f2;
 bvec3 _f3;
} ;

struct _GLF_struct_19 {
 int _f0;
 float _f1;
} ;

struct _GLF_struct_22 {
 mat4x2 _f0;
 vec3 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_20 _f3;
 _GLF_struct_21 _f4;
 uvec3 _f5;
 bvec3 _f6;
} ;

struct _GLF_struct_17 {
 ivec2 _f0;
 bool _f1;
 bvec3 _f2;
} ;

struct _GLF_struct_16 {
 uvec2 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_15 {
 mat3 _f0;
 float _f1;
 mat2 _f2;
 mat3 _f3;
 uvec2 _f4;
 mat3x4 _f5;
 int _f6;
} ;

struct _GLF_struct_14 {
 bool _f0;
 mat4 _f1;
 uvec4 GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id;
} ;

struct _GLF_struct_18 {
 mat3x4 _f0;
 float _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
 _GLF_struct_16 _f4;
 _GLF_struct_17 _f5;
} ;

struct _GLF_struct_12 {
 mat3 _f0;
 vec4 _f1;
 mat3x2 _f2;
 mat2x3 _f3;
} ;

struct _GLF_struct_11 {
 ivec2 _f0;
 mat3x4 _f1;
 uvec2 _f2;
 ivec2 _f3;
 mat2x3 _f4;
 bvec4 _f5;
} ;

struct _GLF_struct_10 {
 mat3x2 _f0;
 vec2 _f1;
 mat4x2 _f2;
} ;

struct _GLF_struct_9 {
 int _f0;
 ivec3 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_13 {
 _GLF_struct_9 _f0;
 _GLF_struct_10 _f1;
 uint _f2;
 _GLF_struct_11 _f3;
 _GLF_struct_12 _f4;
} ;

struct _GLF_struct_23 {
 mat4 _f0;
 bvec4 _f1;
 _GLF_struct_13 _f2;
 _GLF_struct_18 _f3;
 ivec2 _f4;
 mat2x3 _f5;
 _GLF_struct_22 _f6;
} ;

struct _GLF_struct_7 {
 vec3 _f0;
} ;

struct _GLF_struct_5 {
 ivec2 _f0;
 mat4x2 _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_4 {
 uvec3 _f0;
 bvec2 _f1;
 uvec3 _f2;
 uvec3 _f3;
 mat4x2 _f4;
} ;

struct _GLF_struct_6 {
 _GLF_struct_4 _f0;
 _GLF_struct_5 _f1;
} ;

struct _GLF_struct_2 {
 float _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_1 {
 bool _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_0 {
 mat2 _f0;
 bvec2 _f1;
 uvec4 _f2;
 mat4x2 _f3;
 mat3x4 _f4;
 uvec2 _f5;
} ;

struct _GLF_struct_3 {
 _GLF_struct_0 _f0;
 uint _f1;
 bool _f2;
 float _f3;
 _GLF_struct_1 _f4;
 _GLF_struct_2 _f5;
} ;

struct _GLF_struct_8 {
 uvec4 GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid;
 bvec2 _f0;
 _GLF_struct_3 _f1;
 mat4x2 _f2;
 _GLF_struct_6 _f3;
 ivec3 _f4;
 mat4x3 _f5;
 _GLF_struct_7 _f6;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_23 _GLF_struct_replacement_23;
 _GLF_struct_8 _GLF_struct_replacement_8;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, true))))))))
          {
           _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.y = subgroup_id;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.z = subgroup_size;
    }
  }
 else
  {
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y = subgroup_local_id;
 _GLF_struct_30 _GLF_struct_replacement_30 = _GLF_struct_30(_GLF_struct_26(ivec3(1), _GLF_struct_24(mat2x4(1.0), ivec3(1)), _GLF_struct_25(bvec4(true), mat3x2(1.0), ivec2(1), uvec2(1u), 1u)), gl_NumWorkGroups.x, mat4(1.0), _GLF_struct_29(_GLF_struct_27(bvec3(true), ivec3(1)), _GLF_struct_28(bvec4(true), bvec4(true), mat4x3(1.0), 1, mat2x3(1.0)), 1.0, mat3x4(1.0), true));
 _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.x = _GLF_struct_replacement_30.num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 do
  {
   _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w = workgroup_id;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.w;
 _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z = workgroup_base;
 uint virtual_gid = _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z + _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.y * _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.z + _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y;
 _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.w = virtual_gid;
 uint next_virtual_gid = _GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.z + _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.y * _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.z + ((_GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1) % _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.z);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.x = next_virtual_gid;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 atomicStore(buf[_GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.w], uint(1), 4, 64, 4);
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_struct_replacement_23._f3._f2.GLF_merged4_0_1_13_1_1_17_2_1_14_3_1_12num_workgroupsubgroup_local_idworkgroup_baseworkgroup_id.y + 1 < _GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.z)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, false || (true))) && true)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         atomicStore(buf[_GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.x], uint(2), 4, 64, 4);
        }
       else
        {
        }
      }
     else
      {
      }
     for(int _injected_loop_counter = (-10944 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (int(_GLF_ZERO(0.0, injectionSwitch.x)) | (1 ^ 0))); _injected_loop_counter ++)
      {
       do
        {
         subgroupAll(false);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         atomicStore(buf[_GLF_struct_replacement_8.GLF_merged4_0_1_16_1_1_11_2_1_13_3_1_11next_virtual_gidsubgroup_idsubgroup_sizevirtual_gid.x], uint(2), 4, 64, 4);
        }
      }
     else
      {
      }
     subgroupAll(true);
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
