#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    barrier();
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(40711u, 20475u, 6492u)))), gl_NumWorkGroups))[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(_GLF_IDENTITY(1u, (true ? _GLF_IDENTITY(1u, min(1u, 1u)) : _GLF_FUZZED(subgroup_id))), 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), uvec3(0u, 0u, 0u) | (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, min(1u, 1u)), 1u)), 1u)), 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(8u), uvec3(8u))) ^ (uvec3(0u, 0u, 0u))))) | ((gl_NumWorkGroups)), (uvec3(_GLF_IDENTITY(0u, max(0u, 0u)), 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-44472)))), (~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-44472))))) | (~ (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-44472))))))))], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | 0u), 0u)), 0u, 0u))))) * uvec3(1u, 1u, 1u)))))) / uvec3(1u, 1u, 1u)))), max((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))) / uvec3(1u, 1u, 1u))) | (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)))))[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) * ((gl_NumWorkGroups)))) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) / uvec3(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, ~ (~ (1u)))) >> 0u)) | (1u)), 1u, 1u))) | (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), min((gl_NumWorkGroups), (gl_NumWorkGroups)))), (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))), uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))), (true ? uvec3(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))), uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))))), uint(_GLF_ONE(1.0, injectionSwitch.y)))) : _GLF_FUZZED((uvec3(66134u, 124731u, 67360u) ^ uvec3(28065u, 120313u, 19428u)))))))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, 0u, 0u))))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u)))).x, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, _GLF_IDENTITY(1u, uint(uvec3(1u, 1u, 0u)))) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, _GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, 0u + (1u)), 1u)), 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (1u) / 1u)) << 0u), 1u))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))), max(uvec3(0u, 0u, 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))))))) / uvec3(1u, 1u, 1u)))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? gl_NumWorkGroups : _GLF_FUZZED(floatBitsToUint(vec3(7.5, 268.291, 732.264)))))[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) | 0)], gl_NumWorkGroups[2]))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) | _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) >> 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((false ? -68905 : 6763))))) | (2))])))), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) >> 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((false ? -68905 : 6763))))) | (2))])))), (((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) >> 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((false ? -68905 : 6763))))) | (2))]))))) ^ uvec3(0u, 0u, 0u)), 0u)), ~ (~ (uvec3(uvec4(_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) >> 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((false ? -68905 : 6763))))) | (2))])))), (((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[_GLF_IDENTITY(1, (1) >> 0)], gl_NumWorkGroups[_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (true ? 2 : _GLF_FUZZED((false ? -68905 : 6763))))) | (2))]))))) ^ uvec3(0u, 0u, 0u)), 0u))))))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), uvec3(uvec4(((gl_NumWorkGroups)), 0u)))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)) * uvec3(1u, 1u, 1u)))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(170428u) : _GLF_IDENTITY(gl_NumWorkGroups[0], max(gl_NumWorkGroups[0], gl_NumWorkGroups[0])))), _GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)))))[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) ^ uvec3(0u, 0u, 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) / uvec3(1u, 1u, 1u))) | (uvec3(0u, 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(subgroup_size))), 0u), uvec3(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat3(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-270.896))), 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, exp(0.0), 0.0))), _GLF_IDENTITY(0.0, (0.0) * 1.0))), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u) | (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec4(uvec3(0u, 0u, 0u), 1u))))))))))) * uvec3(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, uint(uvec4(1u, 0u, 1u, 0u)))) + 0u), 1u)), 1u, 1u))))))) >> uvec3(0u, 0u, 0u)))).x, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, ~ (~ (0u)))) | 0u), 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec4(uvec3(0u, 0u, 0u), 1u))) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (true ? ((gl_NumWorkGroups)) : _GLF_FUZZED(uvec3(162451u, 98307u, 51510u))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), clamp(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) | (uvec3(0u, 0u, 0u))) + (_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_local_id) : 0u)))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec3(116265u, 80577u, 65006u)) : _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) / uvec3(1u, 1u, 1u)))), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))))) ^ uvec3(0u, 0u, 0u))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec4(uvec3(0u, 0u, 0u), 1u)))) * uvec3(1u, 1u, 1u)))))) / uvec3(1u, 1u, 1u)))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, (false ? _GLF_FUZZED(45368) : 0))], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))), (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)) | ((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(0u, 0u, 0u) ^ (gl_NumWorkGroups)), gl_NumWorkGroups)), uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u)), uvec3(0u, 0u, 0u) + (uvec3(0u, 0u, 0u)))) / uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))) ^ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u), ((uvec3(1u, 1u, 1u) << _GLF_IDENTITY(uvec3(4u), uvec3(4u))) >> _GLF_IDENTITY(uvec3(4u), uvec3(4u))) * (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(_GLF_IDENTITY(1u, 0u | (1u)), 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)))))[1], (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)))))[1], (_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, gl_NumWorkGroups)))))[1]) * 1u)) ^ 0u), gl_NumWorkGroups[2]))) * _GLF_IDENTITY(uvec3(1u, 1u, 1u), min(_GLF_IDENTITY(uvec3(1u, 1u, 1u), (uvec3(1u, 1u, 1u)) / uvec3(1u, 1u, 1u)), _GLF_IDENTITY(uvec3(1u, 1u, 1u), uvec3(uvec4(uvec3(1u, 1u, 1u), uint(_GLF_ONE(1.0, injectionSwitch.y))))))), _GLF_IDENTITY(uvec3(0u, 0u, 0u), _GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u)), ~ (~ (_GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u)), uvec3(0u, 0u, 0u) + (_GLF_IDENTITY(uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u)), (uvec3(uvec4(_GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(subgroup_local_id)))) | (_GLF_IDENTITY(0u, (0u) | (_GLF_IDENTITY(0u, (0u) | (0u)))))), 0u, 0u)) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), clamp(uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u), uvec3(0u, 0u, 0u)))), 0u))) ^ uvec3(0u, 0u, 0u)))))))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) / uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) | (1u))))) | (uvec3(_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 0u)), 0u, 0u) << _GLF_IDENTITY(uvec3(5u), uvec3(5u)))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << _GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, 0u, 0u))))))) * uvec3(1u, 1u, 1u))))))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (false ? _GLF_FUZZED(uvec3(uvec4(60686u, 23271u, 30418u, 77616u))) : uvec3(0u, 0u, 0u)))))).x)))))), (_GLF_IDENTITY(gl_NumWorkGroups, min(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2])), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) + uvec3(0u, 0u, 0u))) - uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], (true ? gl_NumWorkGroups[1] : _GLF_FUZZED(subgroup_size))), gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(_GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (_GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) >> uvec3(0u, 0u, 0u))) ^ uvec3(0u, 0u, 0u)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups[1], min(gl_NumWorkGroups[1], gl_NumWorkGroups[1])), gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, _GLF_IDENTITY(1u, (1u) - 0u)) * (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * ((gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | _GLF_IDENTITY(((gl_NumWorkGroups)), (((gl_NumWorkGroups))) ^ (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], _GLF_IDENTITY(gl_NumWorkGroups, clamp(gl_NumWorkGroups, gl_NumWorkGroups, _GLF_IDENTITY(gl_NumWorkGroups, min(_GLF_IDENTITY(gl_NumWorkGroups, ~ (~ (gl_NumWorkGroups))), gl_NumWorkGroups))))[1], gl_NumWorkGroups[2]))) * uvec3(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | (1u)), _GLF_IDENTITY(1u, (1u) << 0u))), 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) + 0u), 1u)), 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))), _GLF_IDENTITY(uvec3(uvec3(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))), uvec3(1u, 1u, 1u) * ((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))))))), clamp(uvec3(uvec3(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))), uvec3(1u, 1u, 1u) * ((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))))))), uvec3(uvec3(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))), uvec3(1u, 1u, 1u) * ((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))))))), uvec3(uvec3(_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))), uvec3(1u, 1u, 1u) * ((_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, max(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) / uvec3(1u, 1u, 1u)), gl_NumWorkGroups))), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)))))))))))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))) << uvec3(0u, 0u, 0u))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) >> uvec4(0u, 0u, 0u, 0u))), (uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 0u), (uvec4(gl_NumWorkGroups, 0u)) >> uvec4(0u, 0u, 0u, 0u)))) << uvec3(0u, 0u, 0u)))[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), uint(uvec2(~ (1u), 1u))))), 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))), (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u)))))) ^ uvec3(0u, 0u, 0u)) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u)), clamp(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u), uvec3(uvec4(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u), 1u)))), _GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | ((gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | ((gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)))), min((_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | ((gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), ((gl_NumWorkGroups)) | ((gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u))))))) >> uvec3(0u, 0u, 0u))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), max((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u)), ~ (~ (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), max(_GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3((gl_NumWorkGroups))))), (uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 1u), (uvec4(gl_NumWorkGroups, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))) | (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3((gl_NumWorkGroups))))), (uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 1u), (uvec4(gl_NumWorkGroups, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))) | (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))))), min(_GLF_IDENTITY(~ ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3((gl_NumWorkGroups))))), (uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 1u), (uvec4(gl_NumWorkGroups, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))) | (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))))), ~ (~ (~ ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3((gl_NumWorkGroups))))), (uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 1u), (uvec4(gl_NumWorkGroups, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))) | (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))))), ~ ((_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), _GLF_IDENTITY(uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) | (uvec3(0u, _GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 1u), max(uvec2(0u, 1u), uvec2(0u, 1u))))), 0u)), 0u))) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(uvec3((gl_NumWorkGroups))))), (uvec3(0u, 0u, 0u) | ((_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, uvec3(_GLF_IDENTITY(uvec4(gl_NumWorkGroups, 1u), (uvec4(gl_NumWorkGroups, 1u)) ^ uvec4(0u, 0u, 0u, 0u))))) | (gl_NumWorkGroups))))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u)))))))))), (_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY((_GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[0], gl_NumWorkGroups[1], gl_NumWorkGroups[2]))) * uvec3(1u, 1u, 1u), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((gl_NumWorkGroups), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY((gl_NumWorkGroups), _GLF_IDENTITY(uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups)), (uvec3(0u, 0u, 0u) | ((gl_NumWorkGroups))) << uvec3(0u, 0u, 0u))))) * uvec3(1u, 1u, 1u))))))) >> uvec3(0u, 0u, 0u))))))))))).x) ^ (uint(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(uint(4u), uint(4u))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false), false || (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false), (! _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) || false)) || false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec4(gl_WorkGroupID, 0u))).x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, 0u | (gl_WorkGroupID.x))))))), ((_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))))) >> 0u), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(_GLF_IDENTITY(gl_WorkGroupID.x, 0u + (_GLF_IDENTITY(gl_WorkGroupID.x, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(gl_WorkGroupID.x, max(gl_WorkGroupID.x, gl_WorkGroupID.x)))))), gl_WorkGroupID.x))), 0u ^ (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))))))) >> 0u)) / 1u)), 0u | (~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), max(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))))))), ((_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))) >> 0u)))) >> 0u), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), 0u ^ (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, gl_WorkGroupID.x), clamp(min(gl_WorkGroupID.x, gl_WorkGroupID.x), _GLF_IDENTITY(min(gl_WorkGroupID.x, gl_WorkGroupID.x), 0u ^ (min(gl_WorkGroupID.x, gl_WorkGroupID.x))), min(gl_WorkGroupID.x, gl_WorkGroupID.x)))))))))) >> 0u)) / 1u), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), max(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))))))), ((_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))) >> 0u)))) >> 0u), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), 0u ^ (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, gl_WorkGroupID.x), clamp(min(gl_WorkGroupID.x, gl_WorkGroupID.x), _GLF_IDENTITY(min(gl_WorkGroupID.x, gl_WorkGroupID.x), 0u ^ (min(gl_WorkGroupID.x, gl_WorkGroupID.x))), min(gl_WorkGroupID.x, gl_WorkGroupID.x)))))))))) >> 0u)) / 1u), _GLF_IDENTITY(~ (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))), (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), max(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)), 0u | (_GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))))))))), ((_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x)))) >> 0u)))) >> 0u), (~ (_GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x))), 0u ^ (min(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, _GLF_IDENTITY(min(gl_WorkGroupID.x, gl_WorkGroupID.x), clamp(min(gl_WorkGroupID.x, gl_WorkGroupID.x), _GLF_IDENTITY(min(gl_WorkGroupID.x, gl_WorkGroupID.x), 0u ^ (min(gl_WorkGroupID.x, gl_WorkGroupID.x))), min(gl_WorkGroupID.x, gl_WorkGroupID.x)))))))))) >> 0u)) / 1u)))))));
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * subgroup_size));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0)), min(float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0)), float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))))) > injectionSwitch.y, true))))))) || false)), true && ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, _GLF_IDENTITY(true, (true) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0)), min(float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0)), float(mat2(injectionSwitch.x, 0.0, 1.0, 0.0))))) > injectionSwitch.y, true))))))) || false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(false, true)))), ! (! _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(false, _GLF_IDENTITY(true, (true) || false)))))), true && (((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(false, _GLF_IDENTITY(true, (true) || false)))))))))) || _GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))), true), bvec2(bvec2(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y), bool(bool((_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y)))))), true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), (false ? _GLF_FUZZED(subgroup_local_id) : subgroup_local_id + 1))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), ! (! (true && (false)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     return;
    }
  }
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY((subgroup_local_id % 2), 0u + ((subgroup_local_id % 2))) == 0)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   subgroupAll(true);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)), true && ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(95.16) : _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
    }
   subgroupAll(false);
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | (next_virtual_gid))], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
