#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))))), false)))))) || false)) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(((! (_GLF_DEAD(false)))) && true, ! (! (_GLF_IDENTITY(((! (_GLF_DEAD(false)))) && true, bool(bvec2(((! (_GLF_DEAD(false)))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))))), false)))))) || false)) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(((! (_GLF_DEAD(false)))) && true, ! (! (_GLF_IDENTITY(((! (_GLF_DEAD(false)))) && true, bool(bvec2(((! (_GLF_DEAD(false)))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false))))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), true && (bool(bool(_GLF_DEAD(false)))))))))), false)))))) || false)) && _GLF_IDENTITY(true, bool(bvec2(true, false))))), _GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(((! (_GLF_DEAD(false)))) && true, ! (! (_GLF_IDENTITY(((! (_GLF_DEAD(false)))) && true, bool(bvec2(((! (_GLF_DEAD(false)))) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), true)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), 1.0, determinant(mat2(1.0, 0.0, tan(0.0), 1.0))))).x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(distance(vec3(90.62, -7.2, 48.25), vec3(-1.2, -345.517, 54.46)))))))))), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / exp(0.0)) < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true, bool(bool(true))) ? injectionSwitch : _GLF_FUZZED(asinh(inversesqrt(injectionSwitch))))).y))))))))))) && true))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, bool(bvec2(false, true))), true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), _GLF_IDENTITY(false, bool(bvec2(false, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true))))), (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), _GLF_IDENTITY(false, bool(bvec2(false, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))) && true))), true, false, true)), false || (bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true)))))), false, _GLF_IDENTITY(true, ! (! (true))), _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))) && true))), true, false, true))))))) && true)))))) || false)), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))))))))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))))), _GLF_IDENTITY(bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))))), false)), ! (! (bool(bvec2(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))))), false)))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))), false))))))))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec3((false) && true, false, false)))))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), true)), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), true)), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))), bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), true)), bvec3(bvec4(bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true))))), true)), true)), true))))), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, true)), bool(bvec3(bool(bvec4(false, true, true, true)), false, true))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), true), true, true))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) && true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))), ! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(bvec2(false, false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))))), ! (_GLF_IDENTITY(! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))))))))), false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (_GLF_IDENTITY(! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true)))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(true, ! (! (true))))))), _GLF_IDENTITY(true, false || (true))))))))))))))), false, true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))))))))))), false || (! (! (bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), _GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (_GLF_IDENTITY(false, (false) && true))), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec4(true, false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.8), _GLF_FUZZED(68.71)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).x > injectionSwitch.y))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_IDENTITY(true, bool(bvec2(true, false))))), bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true))))))), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))), bvec3(bvec4(bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_DEAD(false), false, true)))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)), bvec3(bvec3(bvec3(bvec4(bvec3(bvec3(_GLF_DEAD(false), false, true)), true)))))))))))), true)))))), true))))))), false, true, _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, false))))))))))))))), false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (_GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))) | (gl_NumWorkGroups.x));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (false ? _GLF_FUZZED(subgroup_id) : gl_WorkGroupSize.x));
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(length(-956.026)) : _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 0.0))))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_size), clamp(_GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size))), (subgroup_size), (subgroup_size))))) - _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), subgroup_size))) << _GLF_IDENTITY(0u, (0u) | 0u)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), (! ((injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x2(injectionSwitch, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, float(vec4(1.0, exp(0.0), 0.0, sin(0.0)))), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-434.685))))), 0.0, 1.0)), log(1.0), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-2.3)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), sqrt(0.0), 1.0, 0.0)), min(vec2(mat3x2(injectionSwitch, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), _GLF_IDENTITY(log(1.0), mix(float(_GLF_FUZZED(-98.55)), float(log(1.0)), bool(true))), 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0)), sqrt(0.0), 1.0, 0.0)), vec2(mat3x2(injectionSwitch, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0)), log(1.0), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 0.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), sqrt(0.0), 1.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(mod(injectionSwitch, -3.2)[1])))))))).y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-8747.2078))) > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_base) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) | (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u))))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_id, 0u, 0u), (true ? uvec3(subgroup_id, _GLF_IDENTITY(0u, uint(uvec3(0u, 1u, 0u))), 0u) : _GLF_FUZZED(uvec3(_GLF_IDENTITY(144563u, (144563u) ^ 0u), 138217u, 35200u))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(subgroup_id, 0u, 0u), (true ? uvec3(subgroup_id, _GLF_IDENTITY(0u, max(0u, 0u)), 0u) : _GLF_FUZZED(uvec3(144563u, _GLF_IDENTITY(138217u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(138217u, clamp(138217u, 138217u, 138217u)), 1u * (138217u))))), _GLF_IDENTITY(35200u, clamp(35200u, 35200u, 35200u))))))), 0u ^ (uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(subgroup_id, 0u, 0u), (true ? uvec3(subgroup_id, 0u, 0u) : _GLF_FUZZED(uvec3(144563u, 138217u, 35200u)))), (_GLF_IDENTITY(uvec3(subgroup_id, 0u, 0u), (_GLF_IDENTITY(true ? uvec3(subgroup_id, 0u, 0u) : _GLF_FUZZED(uvec3(144563u, 138217u, 35200u)), (true ? uvec3(subgroup_id, 0u, 0u) : _GLF_FUZZED(uvec3(144563u, 138217u, 35200u))) | (uvec3(0u, 0u, 0u) | uvec3(0u, 0u, 0u)))))) + (uvec3(0u, 0u, 0u) & uvec3(187647u, _GLF_IDENTITY(186702u, min(_GLF_IDENTITY(186702u, (186702u) >> 0u), 186702u)), 48186u))))))) ^ (_GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u), clamp(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u), min(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u), _GLF_IDENTITY(_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u)) / 1u))), _GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(0u), uint(0u)), (0u >> _GLF_IDENTITY(uint(0u), uint(0u))) + 0u)))))), subgroup_id)) * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(virtual_gid) : subgroup_size))) / _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)))), ~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)))), ~ (_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)) | (_GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u)))))))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), subgroup_local_id), (max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), subgroup_local_id)) | (_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), subgroup_local_id), ~ (~ (max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) + 0u), subgroup_local_id))))))), 1u, 1u, _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), clamp(_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), (_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), clamp(_GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), min(_GLF_IDENTITY(uint(uvec2(subgroup_local_id, 1u)), 0u ^ (uint(uvec2(subgroup_local_id, 1u)))), uint(uvec2(subgroup_local_id, 1u))))), subgroup_local_id), (max(subgroup_local_id, subgroup_local_id)) >> 0u), _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), _GLF_IDENTITY((0u | 0u) | (max(subgroup_local_id, subgroup_local_id)), ~ (~ (_GLF_IDENTITY((0u | _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u))) | (max(subgroup_local_id, subgroup_local_id)), (0u >> _GLF_IDENTITY(uint(3u), uint(3u))) ^ ((0u | _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u))) | (max(subgroup_local_id, subgroup_local_id)))))))), max(subgroup_local_id, subgroup_local_id)))) - 0u), max(subgroup_local_id, subgroup_local_id), max(subgroup_local_id, subgroup_local_id)))), _GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), (0u ^ 1u)), uvec2(uvec2(uvec2(_GLF_IDENTITY(1u, (1u) >> 0u), (0u ^ 1u))))))), 1u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, _GLF_IDENTITY((0u) | (0u), 0u | ((0u) | (0u)))), 0u), (true ? uvec2(_GLF_IDENTITY(0u, (0u) | (0u)), 0u) : _GLF_FUZZED(uvec2(45407u, 89079u)))))))) / uvec4(1u, 1u, 1u, 1u)))))) + _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (_GLF_IDENTITY(clamp(1, 1, _GLF_IDENTITY(1, (1) / 1)), (_GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, _GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ((1)) * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))))) | (_GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(max(-96020, 52404)))))) ^ (0 >> _GLF_IDENTITY(int(8), int(8)))), 1)) * 1)) - 0)) / 1))) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(radians(injectionSwitch)) : injectionSwitch)).y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)), ! (! (bool(bvec3(false, true, true))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, ! (! (subgroup_local_id + 1 < subgroup_size))), ! (! (_GLF_IDENTITY(subgroup_local_id + 1 < subgroup_size, (subgroup_local_id + 1 < subgroup_size) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) | _GLF_IDENTITY((_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) | ((next_virtual_gid))))), uint(uint((_GLF_IDENTITY(_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u))), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (next_virtual_gid)))), 0u ^ (_GLF_IDENTITY((~ (_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (next_virtual_gid)))), 0u | (_GLF_IDENTITY((~ (_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (next_virtual_gid)))), ((~ (_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (next_virtual_gid))))) | ((~ (_GLF_IDENTITY(next_virtual_gid, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (next_virtual_gid)))))))))))))))), next_virtual_gid))], uint(2), 4, _GLF_IDENTITY(64, (64) | (64)), 4);
   subgroupAll(false);
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(bvec3(_GLF_DEAD(false), false, false), true))))), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))))))))))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))), (_GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))), bool(bool((! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))))))) || false)) || false)))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, (true) || false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))) && true), (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, clamp(next_virtual_gid, _GLF_IDENTITY(next_virtual_gid, uint(uvec3(next_virtual_gid, 0u, 1u))), next_virtual_gid))], _GLF_IDENTITY(uint(2), max(uint(_GLF_IDENTITY(2, _GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))), ((_GLF_IDENTITY(2, max(2, 2)))) | ((_GLF_IDENTITY(2, max(2, 2))))) | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), clamp(_GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY(2, (2) / 1)))), int(ivec3((_GLF_IDENTITY(_GLF_IDENTITY(2, (2) / 1), clamp(_GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY(2, (2) / 1)))), 1, (0 | 0)))))), uint(2))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))), ! (! (_GLF_DEAD(false)))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(9.5)), bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false)))))) && true)))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), true, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))))))))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, false))))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_IDENTITY(false, ! (! (false))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
