#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 uvec4 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 uvec3 GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid;
 do
  {
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     switch(_GLF_SWITCH((60114 & (0 ^ 0))))
      {
       case 31:
       min(injectionSwitch, mix(injectionSwitch, vec2(-4.6, -69.52), 3.3));
       if(_GLF_DEAD(false))
        break;
       case 0:
       case 6:
       case 9:
       if(_GLF_DEAD(false))
        continue;
       case 26:
       case 82:
       case 87:
       case 99:
       case 53:
       case 75:
       if(_GLF_DEAD(false))
        return;
       case 12:
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       break;
       if(_GLF_DEAD(false))
        continue;
       case 44:
       bvec4 _GLF_SWITCH_5_0v;
       default:
       if(_GLF_DEAD(false))
        return;
       1;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz = GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid;
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) || false)), (bool(_GLF_IDENTITY(false, (false) || false))) || false)))))
  return;
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x = subgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     switch(_GLF_SWITCH(_GLF_IDENTITY(0, 0 + (0))))
      {
       case 45:
       do
        {
         if((mat3x4(mat4x3(-609.203, -943.294, -6.1, 877.805, -0.4, -78.92, 9.1, 2.9, 51.75, -79.06, 9.8, 749.303)) == mat3x4(17.66, 25.34, -2059.5440, 8382.3707, -399.425, 221.423, -482.336, 93.94, fma(708.162, -807.221, 4.8), 988.682, -3520.9447, 3.2)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               bvec4 _GLF_SWITCH_5_0v, _GLF_SWITCH_5_1v[3], _GLF_SWITCH_5_2v;
               ;
               vec3(-2.7, 6.5, 161.847);
               if(_GLF_DEAD(false))
                continue;
               mat3x4(-0.3, -3.2, -3891.9556, -3144.3387, 3.9, 37.51, -7.8, 8.7, 7469.2237, -5.8, 690.485, -5607.9184);
              }
             while((mat4(-5.1, -6.8, -87.93, -4014.2504, 271.381, 178.952, -6.3, -7.2, -459.655, -9.5, -5769.5098, -3.4, -371.950, -41.47, 7.5, -9.1) != mat4(-79.02, -50.47, -840.945, -483.228, -36.82, -7542.0923, -6.5, -6430.9214, -4697.2204, -3.6, 150.612, -4829.4397, -7136.4950, -8011.5586, -2.7, -7.6)));
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
            }
           while(true)
            {
             if(_GLF_DEAD(false))
              continue;
             mat2x3(3389.2970, -6.9, 7.2, 5.2, 62.43, -2.2);
             if(_GLF_DEAD(false))
              continue;
             ivec3 _GLF_SWITCH_5_3v, _GLF_SWITCH_5_4v, _GLF_SWITCH_5_5v;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               outerProduct(vec3(3645.8570, -89.15, -6.8), vec2(379.979, -2.6));
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           false;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             break;
            }
           uvec2 _GLF_SWITCH_5_6v, _GLF_SWITCH_5_7v[58], _GLF_SWITCH_5_8v;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_DEAD(false))
            return;
           while(false)
            {
             mat3x4 _GLF_SWITCH_5_9v;
             ivec4(30620, -24908, -23835, -95942);
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              continue;
             mat2(69.11, -644.774, -3.2, -928.159);
            }
           if(_GLF_DEAD(false))
            break;
           mat3 _GLF_SWITCH_5_10v[7];
           if(_GLF_DEAD(false))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       case 0:
       case 1:
       case 57:
       case 55:
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       case 52:
       GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.w = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.x;
       break;
       case 5:
       mat3x4 _GLF_SWITCH_5_11v[69], _GLF_SWITCH_5_12v, _GLF_SWITCH_5_13v;
       default:
       do
        {
         1;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz.y = num_workgroup;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       switch(_GLF_SWITCH(0))
        {
         case 75:
         if(_GLF_DEAD(false))
          return;
         uvec4 _GLF_SWITCH_5_0v[26], _GLF_SWITCH_5_1v;
         case 17:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
          return;
         if(false)
          {
           mat2x3 _GLF_SWITCH_5_2v[31], _GLF_SWITCH_5_3v[32], _GLF_SWITCH_5_4v;
           mat3x4 _GLF_SWITCH_5_5v, _GLF_SWITCH_5_6v;
           ;
          }
         case 0:
         case 92:
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         case 25:
         case 96:
         case 74:
         if(_GLF_DEAD(false))
          break;
         case 38:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
         break;
         case 3:
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
         _GLF_SWITCH_5_1v;
         default:
         if(_GLF_DEAD(false))
          return;
         1;
         if(_GLF_DEAD(false))
          continue;
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y = workgroup_base;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           switch(_GLF_SWITCH(0))
            {
             case 0:
             case 76:
             case 10:
             case 99:
             case 8:
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  break;
                 switch(_GLF_SWITCH(((1 ^ (1 & 1)) | 0)))
                  {
                   case 0:
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     break;
                    }
                   case 97:
                   case 81:
                   case 36:
                   if(_GLF_DEAD(false))
                    break;
                   case 64:
                   do
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       switch(_GLF_SWITCH(0))
                        {
                         case 0:
                         if(_GLF_DEAD(false))
                          return;
                         case 72:
                         case 30:
                         case 65:
                         case 44:
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            return;
                           continue;
                          }
                         if(_GLF_DEAD(false))
                          break;
                         case 88:
                         case 50:
                         case 94:
                         case 61:
                         return;
                         break;
                         case 43:
                         uvec3 _GLF_SWITCH_6_0v[73], _GLF_SWITCH_6_1v, _GLF_SWITCH_6_2v;
                         default:
                         1;
                        }
                      }
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
                   return;
                   break;
                   case 83:
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     continue;
                    }
                   {
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
                     return;
                    if(_GLF_DEAD(false))
                     {
                      switch(_GLF_SWITCH(0))
                       {
                        case 0:
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        if(_GLF_DEAD(false))
                         break;
                        if(_GLF_DEAD(false))
                         continue;
                        case 46:
                        case 15:
                        case 36:
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          return;
                         }
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                             }
                            else
                             {
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               continue;
                              return;
                             }
                           }
                          if(_GLF_DEAD(false))
                           continue;
                         }
                        else
                         {
                         }
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        case 58:
                        case 68:
                        case 28:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        case 99:
                        case 13:
                        case 18:
                        continue;
                        break;
                        default:
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          1;
                         }
                        else
                         {
                         }
                       }
                     }
                    vec4 GLF_merged2_0_2_16_2_2_17_GLF_SWITCH_1_0v_GLF_SWITCH_1_22v;
                    if(_GLF_DEAD(false))
                     break;
                    vec2 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
                    GLF_merged2_0_2_16_2_2_17_GLF_SWITCH_1_0v_GLF_SWITCH_1_22v.xy = _GLF_SWITCH_1_0v;
                    bitfieldExtract(ivec4(-25888, -21812, -44126, -83121), 34538, -93323);
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       return;
                      continue;
                     }
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       continue;
                      break;
                     }
                    for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                     {
                      vec3(-85.88, 45.37, -7226.5756);
                     }
                    if((vec4(-9.0, -8218.3413, 272.470, -31.85) == vec4(-1639.0868, -5.1, 808.302, 34.21)))
                     {
                      ;
                      if(_GLF_DEAD(false))
                       continue;
                     }
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                    -73497;
                    for(bvec2 _GLF_SWITCH_1_3v, _GLF_SWITCH_1_4v; true; (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size & uvec4(48424u, 186698u, 133845u, 49346u).y))
                     {
                      bvec2 _GLF_SWITCH_1_5v, _GLF_SWITCH_1_6v;
                      if(_GLF_DEAD(false))
                       continue;
                      (mat4x2(-7.3, -9.8, 83.84, 7.3, 1347.8894, -9941.0070, 174.819, 10.44) == mat4x2(1079.9549, -885.531, 2853.3396, 63.06, 1.5, -6.1, -16.78, 2639.0493));
                      do
                       {
                        switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
                         {
                          case 45:
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(false))
                           continue;
                          ivec2 _GLF_SWITCH_4_0v[73];
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           return;
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                           continue;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             break;
                            if(_GLF_DEAD(false))
                             break;
                            continue;
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                           }
                          case 0:
                          (861.328 - mat2(35.12, 6.1, -0.4, 5.6));
                          break;
                          default:
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            if(_GLF_DEAD(false))
                             break;
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               continue;
                              break;
                             }
                            1;
                           }
                          else
                           {
                           }
                         }
                        if(_GLF_DEAD(false))
                         break;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                    do
                     {
                      for(mat4 _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v[54]; false; mat3x2(-6.2, -7991.2398, -88.48, 6035.8276, 7.0, 503.466))
                       {
                        switch(_GLF_SWITCH((57800 & 0)))
                         {
                          case 0:
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                          case 99:
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          mat2x3(mat3x4(-6.1, -6.6, 4.8, -5856.4854, 66.84, 1.2, -8.3, 8.4, 9.5, -2646.1559, -29.63, -20.08));
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             break;
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            if(_GLF_DEAD(false))
                             {
                              if(_GLF_DEAD(false))
                               return;
                              return;
                             }
                            if(_GLF_DEAD(false))
                             continue;
                            if(_GLF_DEAD(false))
                             continue;
                            if(_GLF_DEAD(false))
                             return;
                            continue;
                            if(_GLF_DEAD(false))
                             return;
                           }
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(false))
                           break;
                          for(bvec3 _GLF_SWITCH_1_10v, _GLF_SWITCH_1_11v, _GLF_SWITCH_1_12v[61]; true; mat3x2(-294.056, -3.6, 0.9, 8038.0173, 1544.2923, 4.6))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             return;
                            if(_GLF_DEAD(false))
                             break;
                            if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                             }
                            else
                             {
                              switch(_GLF_SWITCH((-31260 & 0)))
                               {
                                case 54:
                                uvec2 _GLF_SWITCH_6_0v, _GLF_SWITCH_6_1v, _GLF_SWITCH_6_2v;
                                case 0:
                                case 34:
                                if(_GLF_DEAD(false))
                                 return;
                                case 91:
                                switch(_GLF_SWITCH((0 & -87009)))
                                 {
                                  case 1:
                                  mat3(-1108.5859, -3.3, 7.9, -6.7, 5408.7044, -6.8, 4896.8910, 44.25, 701.447);
                                  if(_GLF_DEAD(false))
                                   break;
                                  case 0:
                                  case 71:
                                  outerProduct(roundEven(roundEven(vec3(-7.7, 912.962, 141.216))), injectionSwitch);
                                  case 30:
                                  case 48:
                                  case 56:
                                  case 60:
                                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                   continue;
                                  if(_GLF_DEAD(false))
                                   continue;
                                  break;
                                  case 31:
                                  if(_GLF_WRAPPED_IF_TRUE(true))
                                   {
                                    (52507 % ivec4(73929, 20503, -47114, -68072));
                                   }
                                  else
                                   {
                                   }
                                  if(_GLF_DEAD(false))
                                   continue;
                                  default:
                                  1;
                                 }
                                break;
                                case 11:
                                vec2 _GLF_SWITCH_6_3v[67], _GLF_SWITCH_6_4v[9];
                                default:
                                1;
                               }
                             }
                            mat3((+ mat2x4(8552.8179, 0.1, 3.4, -2.1, -8339.8405, -34.07, 466.847, -9.3)));
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           return;
                          case 50:
                          case 44:
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            continue;
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             break;
                            if(_GLF_DEAD(false))
                             continue;
                            continue;
                           }
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(false))
                           continue;
                          while(false)
                           {
                            do
                             {
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_DEAD(false))
                                 break;
                                return;
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(false));
                            for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                             {
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_DEAD(false))
                                 continue;
                                continue;
                               }
                              bvec4(false, true, false, true);
                              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                               {
                                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                                 continue;
                                continue;
                               }
                             }
                            (14976 * ivec2(-94308, -24896));
                            mat2 _GLF_SWITCH_1_13v, _GLF_SWITCH_1_14v;
                            if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                             continue;
                            if(_GLF_DEAD(false))
                             break;
                            vec4 _GLF_SWITCH_1_15v[90], _GLF_SWITCH_1_16v[92];
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            if(_GLF_DEAD(false))
                             {
                              if(_GLF_DEAD(false))
                               continue;
                              break;
                             }
                            mat2x3(-366.430, 366.508, -9959.3900, 294.152, -22.27, -2.0);
                            if(_GLF_DEAD(false))
                             break;
                            vec3(atan(6.0, -3359.6986), -7.2, 0.9);
                            if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                             return;
                            if(_GLF_DEAD(false))
                             continue;
                            if(_GLF_DEAD(false))
                             continue;
                           }
                          clamp(uvec3(46882u, 117835u, 87249u), uvec3(108355u, 91407u, 179640u), GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid);
                          case 43:
                          if(true)
                           {
                            ivec3(53217, 30343, -24158);
                            mat2x3 _GLF_SWITCH_1_17v;
                            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                             return;
                            ivec2 _GLF_SWITCH_1_18v, _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v;
                            do
                             {
                              for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                               {
                                (true , bvec2(false, false));
                                if(_GLF_DEAD(false))
                                 break;
                               }
                             }
                            while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                            vec4(-6.6, 1.4, 9.5, 62.89);
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                            if(_GLF_WRAPPED_IF_FALSE(false))
                             {
                              if(_GLF_DEAD(false))
                               continue;
                              if(_GLF_DEAD(false))
                               return;
                             }
                            else
                             {
                              if(_GLF_DEAD(false))
                               {
                                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                 return;
                                return;
                               }
                              mat2(8.5, -2.7, 6.5, 92.31);
                             }
                           }
                          else
                           {
                           }
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             return;
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             {
                              if(_GLF_DEAD(false))
                               return;
                              continue;
                             }
                            if(_GLF_DEAD(false))
                             {
                              if(_GLF_DEAD(false))
                               return;
                              return;
                             }
                            return;
                           }
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_DEAD(false))
                           return;
                          case 77:
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            if(_GLF_DEAD(false))
                             {
                              if(_GLF_DEAD(false))
                               return;
                              if(_GLF_DEAD(false))
                               return;
                              continue;
                             }
                            mat4x3(6939.3362, -8.2, -8965.6732, -4.5, 40.27, 3674.4106, 20.52, -648.324, -772.108, 4.5, 556.518, 0.7);
                            if(_GLF_DEAD(false))
                             break;
                            if(_GLF_DEAD(false))
                             return;
                           }
                          else
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             continue;
                           }
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           continue;
                          if(_GLF_DEAD(false))
                           break;
                          case 15:
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                             return;
                            break;
                           }
                          case 64:
                          if(_GLF_DEAD(false))
                           return;
                          notEqual(bitfieldInsert(uvec2(150323u, 179223u), uvec2(102100u, 32372u), -15351, 22640), (uvec2(28835u, 60736u) - 147615u));
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           return;
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(false))
                           continue;
                          case 6:
                          if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                           return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           continue;
                          if(_GLF_DEAD(false))
                           continue;
                          vec4(7.8, 4397.5966, -709.180, -410.781);
                          break;
                          if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                           continue;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             return;
                            break;
                           }
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             return;
                            return;
                           }
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             break;
                            continue;
                            if(_GLF_DEAD(false))
                             break;
                           }
                          if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
                           break;
                          if(_GLF_DEAD(false))
                           return;
                          case 81:
                          mat4x3(-540.459, -64.61, -413.639, 6.9, 24.25, 0.8, 5760.9405, -4.5, 105.656, -10.64, -0.6, 1609.4214);
                          if(_GLF_DEAD(false))
                           break;
                          if(_GLF_DEAD(false))
                           return;
                          case 68:
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             continue;
                            return;
                           }
                          mat4x3 _GLF_SWITCH_2_0v, _GLF_SWITCH_2_1v, _GLF_SWITCH_2_2v;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                          default:
                          if(_GLF_DEAD(false))
                           return;
                          do
                           {
                            1;
                            if(_GLF_DEAD(false))
                             break;
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                           break;
                         }
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        if(_GLF_DEAD(false))
                         {
                          if(_GLF_DEAD(false))
                           return;
                          continue;
                         }
                       }
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      break;
                     }
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                     {
                      mat2x3(-904.892, -8.6, 7.1, 5655.7695, 0.5, 9.7);
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       break;
                      if(_GLF_DEAD(false))
                       return;
                     }
                    if(_GLF_DEAD(false))
                     return;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       return;
                      break;
                     }
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        continue;
                       }
                      break;
                     }
                    vec2 _GLF_SWITCH_1_21v[16], _GLF_SWITCH_1_22v, _GLF_SWITCH_1_23v[80];
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      if(_GLF_DEAD(false))
                       return;
                      do
                       {
                        GLF_merged2_0_2_16_2_2_17_GLF_SWITCH_1_0v_GLF_SWITCH_1_22v.zw = _GLF_SWITCH_1_22v;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                    else
                     {
                     }
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(false))
                     return;
                   }
                   default:
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                      {
                       switch(_GLF_SWITCH(_GLF_IDENTITY(0, max(0, 0))))
                        {
                         case 48:
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         atomicAnd(_injected_loop_counter, (_injected_loop_counter | _injected_loop_counter));
                         case 31:
                         if(_GLF_DEAD(false))
                          continue;
                         (GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base);
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         case 0:
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                            {
                             1;
                            }
                           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
                            return;
                          }
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              continue;
                             return;
                            }
                           return;
                          }
                         if(_GLF_DEAD(false))
                          continue;
                         break;
                         default:
                         1;
                        }
                      }
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             break;
             case 88:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             while(false)
              {
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(true)
                  {
                   bvec3(true, bvec4(bvec2(false, false), bvec2(false, true)).zz);
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               {
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                 return;
                int _GLF_SWITCH_2_0v[64], _GLF_SWITCH_2_1v;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                   return;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    break;
                   }
                  break;
                 }
                mat2x4(-2999.0173, 10.08, 5.1, 66.28, 3.1, 8.5, 4.7, -521.303);
                mat4x3 _GLF_SWITCH_2_2v, _GLF_SWITCH_2_3v;
                ;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  continue;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                 }
                if(_GLF_DEAD(false))
                 break;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   return;
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                    if(_GLF_DEAD(false))
                     return;
                   }
                  else
                   {
                    return;
                   }
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  break;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  break;
                 }
                mat2x4(mat3(-3.2, -7009.6464, -542.000, -3.7, 6837.6603, -655.042, 6.5, 693.633, 3247.2275));
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  continue;
                 }
                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                 break;
                uvec2 _GLF_SWITCH_2_4v[94];
                if(_GLF_DEAD(false))
                 break;
                if(_GLF_DEAD(false))
                 return;
                mat3 _GLF_SWITCH_2_5v;
                if(_GLF_DEAD(false))
                 return;
                if(_GLF_DEAD(false))
                 break;
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                 {
                  do
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    mat3x4(-6.2, -2.1, 4.6, -56.36, -2.2, 52.45, -5.1, -4735.6377, -9.2, -770.322, 241.547, -456.779);
                   }
                  while(_GLF_WRAPPED_LOOP(false));
                 }
               }
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 ivec2 _GLF_SWITCH_2_6v[16];
                 mat3x4 _GLF_SWITCH_2_7v[22], _GLF_SWITCH_2_8v;
                 uvec4 _GLF_SWITCH_2_9v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 mat2 _GLF_SWITCH_2_10v;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 bitfieldExtract((uvec4(107892u, 56835u, 295u, 40621u) - uvec4(11795u, 32080u, 139237u, 119856u)), -61424, 25601);
                 0.8;
                 float _GLF_SWITCH_2_11v, _GLF_SWITCH_2_12v, _GLF_SWITCH_2_13v;
                 ((mat3x2(6.3, -88.47, -5.4, -35.63, 7.3, 3.4) * mat4x3(6.9, 452.874, 1150.1575, -5.4, 68.69, -3626.4134, -6.7, -8.3, -99.36, -3.1, -5207.5773, 996.380)) * _GLF_SWITCH_2_8v);
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 while((vec2(0.6, -7.3) != injectionSwitch))
                  {
                   switch(_GLF_SWITCH((1 ^ 1)))
                    {
                     case 27:
                     uint _GLF_SWITCH_3_0v[47];
                     if(_GLF_DEAD(false))
                      continue;
                     case 67:
                     if(_GLF_DEAD(false))
                      break;
                     all(equal(bvec2(true, true), bvec2(true, false)));
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                      }
                     case 0:
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       switch(_GLF_SWITCH(0))
                        {
                         case 24:
                         mat3x2(-3.4, 67.00, 4936.0584, 470.827, 1.2, -38.96);
                         if(_GLF_DEAD(false))
                          continue;
                         case 69:
                         mat4x3 _GLF_SWITCH_5_0v;
                         case 0:
                         ((mat3x4(2.1, 4.0, -710.909, 1578.5219, -1.5, -927.704, -7.2, -381.182, 94.23, 99.46, 453.306, -4.5) + mat3x4(-256.115, -9.6, 2.3, -727.179, -8015.2446, 2.0, -0.1, -7860.8742, 64.83, 6.9, 61.40, -6.8)) * mat3(-499.151, 77.48, 6783.5979, -153.787, 4954.4750, -957.663, -295.430, -57.49, 5.1));
                         break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         case 6:
                         mat4x3 _GLF_SWITCH_5_1v[19];
                         case 68:
                         do
                          {
                           ;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         default:
                         1;
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(false))
                          break;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
                          {
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            return;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               return;
                              }
                             if(_GLF_DEAD(false))
                              return;
                            }
                           return;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     do
                      {
                       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                        {
                         switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(8), int(8)))))
                          {
                           case 0:
                           case 67:
                           case 85:
                           case 77:
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              break;
                             continue;
                            }
                           if(_GLF_DEAD(false))
                            return;
                           case 71:
                           case 80:
                           case 81:
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             (mat2(-2.1, 218.511, 2.0, 65.26) * vec2(-4144.9279, 5.7));
                            }
                           else
                            {
                            }
                           break;
                           case 44:
                           if(_GLF_DEAD(false))
                            break;
                           false;
                           case 88:
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           vec4(-3.2, -711.873, -95.32, -8.5);
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            break;
                           default:
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           1;
                           if(_GLF_DEAD(false))
                            continue;
                          }
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       return;
                       if(_GLF_DEAD(false))
                        break;
                      }
                     break;
                     default:
                     for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(false))
                            break;
                           return;
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))));
                       if(_GLF_DEAD(false))
                        continue;
                      }
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     1;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                }
               else
                {
                }
               mat2x4((mat3x2(9051.8037, 6880.3191, 6945.9241, -737.012, 4.9, -561.303) / mat3x2(450.280, 1221.0431, 697.163, 85.65, -13.15, -3.1)));
               for(bvec2 _GLF_SWITCH_2_14v[29], _GLF_SWITCH_2_15v; all(bvec3(true, true, false)); greaterThan(uvec3(107548u, 190107u, 146349u), GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gid))
                {
                 bvec2 _GLF_SWITCH_2_16v;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   break;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               mat3x4 _GLF_SWITCH_2_17v;
               while(false)
                {
                }
              }
             default:
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   continue;
                  }
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   1;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                }
              }
            }
          }
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + subgroup_id * GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.w + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))) ^ 1)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          break;
        }
       if(_GLF_DEAD(false))
        break;
      }
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) / 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 << _GLF_IDENTITY(int(0), int(0))), max((0 << _GLF_IDENTITY(int(0), int(0))), (0 << _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
      {
       switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(5), int(5)))))
        {
         case 5:
         if(_GLF_DEAD(false))
          break;
         mat2(-4706.0142, -3.6, 4675.3144, -31.92);
         case 0:
         case 7:
         case 94:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         case 49:
         case 84:
         if(_GLF_DEAD(false))
          continue;
         case 60:
         case 13:
         case 48:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         return;
         if(_GLF_DEAD(false))
          continue;
         break;
         if(_GLF_DEAD(false))
          break;
         default:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         1;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   switch(_GLF_SWITCH((-32202 & ((0 ^ 0) | 0))))
    {
     case 33:
     mat3 _GLF_SWITCH_6_0v;
     case 0:
     case 53:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     case 31:
     case 48:
     case 30:
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 39:
     case 54:
     return;
     break;
     case 60:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(true)
      {
       vec3 _GLF_SWITCH_6_1v, _GLF_SWITCH_6_2v;
       uvec2 _GLF_SWITCH_6_3v, _GLF_SWITCH_6_4v[42];
       bvec4 _GLF_SWITCH_6_5v, _GLF_SWITCH_6_6v, _GLF_SWITCH_6_7v;
       {
        while((bvec2(false, true) == bvec2(false, true)))
         {
          ;
          uvec4(77564u, 166596u, 193671u, 73132u);
          ;
         }
        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
         return;
       }
       while(((mat2(mat4(1003.1574, 0.3, 3087.6529, -4862.9102, 1189.7526, 34.23, 5636.1595, 0.0, 762.076, 9.9, -749.053, -8.9, -3609.4778, 7157.9203, -1819.4970, -515.637)) * mat2(4.9, -61.16, -4209.6209, 8.9)) != mat2(55.86, 60.40, -669.093, -1810.9040)))
        {
         if(_GLF_DEAD(false))
          continue;
         {
         }
         ;
         for(ivec4 _GLF_SWITCH_6_8v; true; mat4(-163.728, 15.38, -84.10, 6.2, 3.3, -796.952, -1.6, 3.9, 2.6, -4944.5485, -8020.1622, 6.1, -113.010, 14.25, 4734.8123, -4.4))
          {
           ivec4 _GLF_SWITCH_6_9v;
           ivec3(-66226, -82999, 40772);
           vec4(-2.1, 758.294, -4.1, 307.360);
           false;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          continue;
         ;
         while((5762 < mix(-79311, 55956, true)))
          {
           ivec3(-65719, 29157, -19059);
           mat2(mat2x4(5.5, 7015.6793, -251.091, 22.57, 8.7, -9298.2420, 3.8, 9.5));
           GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
           bvec2 _GLF_SWITCH_6_10v[19], _GLF_SWITCH_6_11v, _GLF_SWITCH_6_12v;
           _GLF_SWITCH_6_0v;
           min(ivec4(49568, 9929, -57685, -5885), -12753);
          }
         (ivec3(36693, -29163, -29152) & 43199).b;
         if(_GLF_DEAD(false))
          continue;
         bool _GLF_SWITCH_6_13v;
        }
       mat4x3((mat3(-4.4, 97.64, 105.918, 92.91, 80.55, 9.2, 705.074, -2.7, 6.4)));
      }
     else
      {
       if((uaddCarry(uvec2(59552u, 112849u), uvec2(79140u, 180104u), GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base) != uvec2(107793u, 107628u)))
        {
        }
       for(bvec2 _GLF_SWITCH_6_14v[66], _GLF_SWITCH_6_15v, _GLF_SWITCH_6_16v[35]; greaterThanEqual(vec3(7.1, -3.5, -3.0), vec3(1.2, 268.041, 9.5))[1]; degrees(vec4(4.8, -2.4, 32.74, 3.8)))
        {
        }
       subgroup_id;
       if(_GLF_DEAD(false))
        return;
      }
     default:
     1;
    }
  }
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz.z = virtual_gid;
 uint next_virtual_gid = GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base.y + subgroup_id * GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.w + ((subgroup_local_id + 1) % GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.w);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), ~ (~ (int(6)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           switch(_GLF_SWITCH(0))
            {
             case 14:
             mat4x3 _GLF_SWITCH_6_0v[28], _GLF_SWITCH_6_1v, _GLF_SWITCH_6_2v;
             case 24:
             vec2 _GLF_SWITCH_6_3v[83], _GLF_SWITCH_6_4v[77];
             if(_GLF_DEAD(false))
              continue;
             case 0:
             case 38:
             case 32:
             case 51:
             if(_GLF_DEAD(false))
              return;
             break;
             case 94:
             bvec2 _GLF_SWITCH_6_5v[79];
             if(_GLF_DEAD(false))
              break;
             default:
             1;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        {
         if(_GLF_DEAD(false))
          continue;
         break;
        }
       do
        {
         if(_GLF_DEAD(false))
          continue;
         return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 ^ (int(2))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz.x = next_virtual_gid;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   atomicStore(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz.z], uint(1), 4, 64, 4);
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     return;
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(subgroup_local_id + 1 < GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.w)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
        }
       switch(_GLF_SWITCH((0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))))
        {
         case 74:
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                    {
                     do
                      {
                       return;
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(false))
                          break;
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                     continue;
                    }
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         vec3 _GLF_SWITCH_0_0v;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           do
            {
             switch(_GLF_SWITCH((0 & 65556)))
              {
               case 41:
               vec4 _GLF_SWITCH_6_0v[63];
               case 31:
               (mat2(-4.3, -6.0, 1.2, 4.6) / mat2(4.7, -5.0, -426.719, -7.0));
               if(_GLF_DEAD(false))
                break;
               case 0:
               case 22:
               case 81:
               case 73:
               case 64:
               case 14:
               case 1:
               return;
               break;
               case 91:
               ivec2 _GLF_SWITCH_6_1v;
               case 75:
               GLF_merged2_0_1_13_1_1_14subgroup_sizeworkgroup_base;
               default:
               if(_GLF_DEAD(false))
                continue;
               1;
               if(_GLF_DEAD(false))
                break;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            return;
          }
         case 21:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (621 & 0)); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             switch(_GLF_SWITCH((0 << _GLF_IDENTITY(int(6), int(6)))))
              {
               case 49:
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 ;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               case 66:
               lessThan(bitfieldExtract(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size, _injected_loop_counter, -94698), GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size);
               case 0:
               case 69:
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               case 72:
               case 9:
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                return;
               break;
               default:
               1;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                continue;
               break;
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             break;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     break;
                    }
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(false, false))), bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        break;
                       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
                        {
                         if(_GLF_DEAD(false))
                          return;
                         return;
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))));
                    }
                   if(_GLF_DEAD(false))
                    break;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             continue;
            }
          }
         if(_GLF_DEAD(false))
          return;
         {
          if(_GLF_WRAPPED_IF_FALSE(false))
           {
           }
          else
           {
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             return;
           }
          if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
            if(_GLF_DEAD(false))
             return;
            if(_GLF_DEAD(false))
             {
              if(_GLF_DEAD(false))
               return;
              return;
             }
            return;
            if(_GLF_DEAD(false))
             return;
           }
          ivec3 _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v[93];
          do
           {
            switch(_GLF_SWITCH(0))
             {
              case 0:
              if(_GLF_DEAD(false))
               continue;
              case 23:
              case 83:
              case 25:
              case 15:
              case 70:
              case 91:
              case 93:
              case 26:
              switch(_GLF_SWITCH(0))
               {
                case 18:
                ivec3(-35913, -82388, -96381);
                case 0:
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
                 break;
                case 97:
                case 81:
                if(_GLF_DEAD(false))
                 continue;
                case 57:
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  continue;
                 }
                case 80:
                case 61:
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  return;
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  break;
                 }
                case 2:
                if(_GLF_DEAD(false))
                 break;
                case 29:
                if(_GLF_DEAD(false))
                 return;
                for(int _injected_loop_counter = _GLF_IDENTITY(1, clamp(1, _GLF_IDENTITY(1, 0 | (1)), 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                 {
                  ;
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   return;
                 }
                if(_GLF_DEAD(false))
                 break;
                break;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                default:
                1;
               }
              break;
              if(_GLF_DEAD(false))
               continue;
              if(_GLF_DEAD(false))
               continue;
              case 17:
              (mat3x2(-7159.9863, -0.1, -815.510, -8.3, -8.3, -381.909) - 49.53);
              default:
              1;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               break;
             }
            if(_GLF_DEAD(false))
             continue;
           }
          while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            return;
           }
          if(_GLF_DEAD(false))
           {
            if(_GLF_DEAD(false))
             return;
            return;
            if(_GLF_DEAD(false))
             return;
           }
         }
         case 0:
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
         atomicStore(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz.x], uint(2), 4, 64, 4);
         if(_GLF_DEAD(false))
          {
           switch(_GLF_SWITCH((0 >> _GLF_IDENTITY(int(8), int(8)))))
            {
             case 22:
             if(_GLF_DEAD(false))
              return;
             ;
             case 0:
             case 39:
             case 49:
             case 91:
             if(_GLF_DEAD(false))
              return;
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(false));
             case 26:
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             case 29:
             case 8:
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             case 94:
             return;
             case 78:
             case 73:
             if(_GLF_DEAD(false))
              return;
             break;
             default:
             1;
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
                {
                }
               else
                {
                 return;
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         subgroupAll(false);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         case 61:
         {
          if(_GLF_DEAD(false))
           return;
          if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
           {
           }
          else
           {
            if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), false || (bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))
             return;
            for(ivec2 _GLF_SWITCH_0_3v[46], _GLF_SWITCH_0_4v; (mat4(-52.04, -210.890, -8.8, -4368.4825, 0.0, -6801.0070, -8.3, 642.139, 0.9, 4.3, -3.3, -892.577, 806.252, -3740.3461, -767.256, -4342.2520) != mat4(-586.538, -807.862, -6.1, 9372.9997, -1.4, -226.353, 35.99, -7.0, -6.1, 4.0, -5.9, 7.9, 2.8, 7.2, -9.5, -28.59)); mat2x4(6.0, 883.914, 351.102, -1565.9690, 4340.7029, -6281.7442, 81.32, -109.178))
             {
              do
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                (7.6 - mat2(2.3, 3331.8175, -56.26, 4594.6494));
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  break;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
              if(true)
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    return;
                    if(_GLF_DEAD(false))
                     continue;
                   }
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  do
                   {
                    return;
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 }
                bvec4 _GLF_SWITCH_0_5v[98];
                (_GLF_SWITCH_0_4v --);
                if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                 {
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     return;
                    switch(_GLF_SWITCH(0))
                     {
                      case 7:
                      ivec4(-68713, -19115, -72086, 44574);
                      case 0:
                      case 16:
                      switch(_GLF_SWITCH(0))
                       {
                        case 57:
                        mat2 _GLF_SWITCH_5_0v;
                        case 50:
                        (sqrt(97.42) / mat4x2(-762.475, -163.464, 2853.2371, 378.734, 3.8, -6.0, 2.4, 297.371));
                        if(_GLF_DEAD(false))
                         break;
                        case 0:
                        case 74:
                        case 97:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                        case 49:
                        if(_GLF_WRAPPED_IF_TRUE(true))
                         {
                          return;
                          if(_GLF_DEAD(false))
                           return;
                         }
                        else
                         {
                         }
                        break;
                        case 68:
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          if(_GLF_DEAD(false))
                           break;
                          bitCount(uvec4(169334u, 186274u, 99769u, 120541u));
                         }
                        else
                         {
                         }
                        case 59:
                        if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                         {
                          next_virtual_gid;
                         }
                        else
                         {
                         }
                        default:
                        if(_GLF_DEAD(false))
                         continue;
                        1;
                        if(_GLF_DEAD(false))
                         continue;
                       }
                      break;
                      case 45:
                      mat3x2 _GLF_SWITCH_6_0v, _GLF_SWITCH_6_1v;
                      default:
                      1;
                     }
                   }
                 }
                ivec2(73011, 21299);
                if(_GLF_DEAD(false))
                 continue;
                if(_GLF_DEAD(false))
                 break;
                vec2 _GLF_SWITCH_0_6v, _GLF_SWITCH_0_7v[95];
                for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                 {
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     {
                      if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                       return;
                      break;
                     }
                    do
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       {
                        if(_GLF_DEAD(false))
                         return;
                        if(_GLF_DEAD(false))
                         continue;
                        return;
                       }
                     }
                    while(_GLF_WRAPPED_LOOP(false));
                    return;
                   }
                  if(_GLF_DEAD(false))
                   continue;
                 }
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                   continue;
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   continue;
                  if(_GLF_DEAD(false))
                   return;
                  break;
                  if(_GLF_DEAD(false))
                   break;
                 }
                for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ (~ (int(0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 & 1) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(int(1), int(1))))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1)))))); _injected_loop_counter ++)
                 {
                  if(_GLF_DEAD(false))
                   return;
                 }
                if(_GLF_DEAD(false))
                 break;
                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                 return;
                mat3(7.2, -4529.7560, 4.0, 24.41, 4.3, 9.9, 3.2, -83.92, 74.29);
                if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
                 {
                  do
                   {
                    return;
                    if(_GLF_DEAD(false))
                     return;
                   }
                  while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    ivec3(22999, 41071, -63719);
                   }
                  else
                   {
                   }
                 }
                else
                 {
                  if(_GLF_DEAD(false))
                   continue;
                 }
                vec4 _GLF_SWITCH_0_8v, _GLF_SWITCH_0_9v, _GLF_SWITCH_0_10v;
                ((false , (ivec3(-95208, -93896, 8051) ^ 18698)) * ivec3(30160, -26704, -87265));
                if(_GLF_DEAD(false))
                 break;
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  break;
                 }
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
               }
              else
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 continue;
                mat2x4 _GLF_SWITCH_0_11v;
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), (int(1)) | (int(1)))) | (_GLF_IDENTITY(int(1), ~ (~ (int(1)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                   {
                    if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, false)))))
                     {
                      if(_GLF_DEAD(false))
                       break;
                      if(_GLF_DEAD(false))
                       break;
                     }
                    else
                     {
                      if(_GLF_DEAD(false))
                       return;
                      return;
                     }
                   }
                 }
                float _GLF_SWITCH_0_12v[69];
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 {
                  if(_GLF_DEAD(false))
                   continue;
                  return;
                 }
                if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                 continue;
                for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, 0 + (1)), 1))); _injected_loop_counter ++)
                 {
                  switch(_GLF_SWITCH(0))
                   {
                    case 80:
                    mat3(-763.732, 5.4, -9.3, -3480.7795, -596.524, -3645.9099, 0.8, -9420.8710, 749.458);
                    case 97:
                    uvec4 _GLF_SWITCH_5_0v;
                    case 0:
                    if(_GLF_DEAD(false))
                     continue;
                    case 6:
                    case 51:
                    case 14:
                    case 99:
                    if(_GLF_DEAD(false))
                     return;
                    case 17:
                    case 79:
                    case 86:
                    case 49:
                    if(_GLF_DEAD(false))
                     return;
                    break;
                    default:
                    if(_GLF_DEAD(false))
                     continue;
                    1;
                   }
                 }
                if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, false, false)))))
                 {
                 }
                else
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_DEAD(false))
                     break;
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(false))
                       continue;
                      do
                       {
                        return;
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                     }
                   }
                  else
                   {
                    if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                     continue;
                   }
                  if(_GLF_DEAD(false))
                   continue;
                  if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   break;
                  if(_GLF_DEAD(false))
                   continue;
                 }
                do
                 {
                  if(_GLF_WRAPPED_IF_TRUE(true))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                    if(_GLF_DEAD(false))
                     {
                      if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                       continue;
                      for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                       {
                        switch(_GLF_SWITCH((0 & 88991)))
                         {
                          case 0:
                          case 94:
                          case 12:
                          case 13:
                          case 65:
                          if(_GLF_DEAD(false))
                           {
                            if(_GLF_DEAD(false))
                             break;
                            return;
                           }
                          if(_GLF_DEAD(false))
                           continue;
                          case 95:
                          return;
                          case 61:
                          if(_GLF_DEAD(false))
                           continue;
                          case 6:
                          case 18:
                          if(_GLF_DEAD(false))
                           return;
                          if(_GLF_DEAD(false))
                           return;
                          break;
                          case 62:
                          mat4x3(337.446, -5.1, 8072.5656, 905.467, 5.6, -72.43, -7084.7771, 77.50, 5.7, 7747.6249, -514.157, 360.300);
                          case 97:
                          bvec3 _GLF_SWITCH_6_0v[60], _GLF_SWITCH_6_1v;
                          default:
                          1;
                         }
                       }
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         continue;
                        return;
                       }
                     }
                    for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                     {
                      switch(_GLF_SWITCH(0))
                       {
                        case 14:
                        bitfieldInsert((uvec2(26361u, 138430u).rrgr ^ min(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size, subgroup_size)), GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size, _injected_loop_counter, -19923);
                        case 71:
                        mat4 _GLF_SWITCH_6_0v, _GLF_SWITCH_6_1v;
                        case 0:
                        case 68:
                        case 98:
                        if(_GLF_DEAD(false))
                         return;
                        case 10:
                        notEqual(_GLF_SWITCH_0_0v, vec3(-621.422, -97.31, 4.8));
                        break;
                        case 63:
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         break;
                        vec4(-4620.6263, -8859.1990, -899.696, -546.487);
                        default:
                        1;
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                         return;
                       }
                     }
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     break;
                   }
                  else
                   {
                   }
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              do
               {
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   return;
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     continue;
                    return;
                   }
                  return;
                 }
               }
              while(_GLF_WRAPPED_LOOP(false));
             }
           }
          for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(8), int(8))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
           {
            do
             {
              if(_GLF_DEAD(false))
               {
                if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                 continue;
                do
                 {
                  if(_GLF_DEAD(false))
                   return;
                 }
                while(_GLF_WRAPPED_LOOP(false));
                return;
                if(_GLF_DEAD(false))
                 continue;
               }
              ;
              if(_GLF_DEAD(false))
               break;
              if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               {
               }
              else
               {
                if(_GLF_DEAD(false))
                 {
                  for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                   {
                    return;
                   }
                 }
               }
              if(_GLF_DEAD(false))
               break;
             }
            while(_GLF_WRAPPED_LOOP(false));
            if(_GLF_DEAD(false))
             return;
           }
          ;
          if(_GLF_DEAD(false))
           return;
          if(_GLF_DEAD(false))
           return;
          if(_GLF_WRAPPED_IF_TRUE(true))
           {
            if(_GLF_WRAPPED_IF_TRUE(true))
             {
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
               return;
              if(_GLF_DEAD(false))
               return;
             }
            else
             {
             }
           }
          else
           {
           }
         }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
         case 7:
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           switch(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             case 44:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             bvec2 _GLF_SWITCH_5_0v[3], _GLF_SWITCH_5_1v;
             case 0:
             case 15:
             if(_GLF_DEAD(false))
              continue;
             case 43:
             if(_GLF_DEAD(false))
              break;
             case 36:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             case 10:
             case 87:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             case 63:
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              continue;
             case 81:
             case 69:
             case 59:
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                return;
               return;
              }
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             case 27:
             (true ? ivec3(5585, 39034, -51739) : bitfieldReverse(ivec3(38763, 17162, 5542)));
             case 99:
             mix(notEqual(ivec3(24983, -4515, -72829), ivec3(-61867, -41517, 38336)), bvec3(true, false, false), notEqual(vec3(0.9, -2.8, -601.675), _GLF_SWITCH_0_0v));
             default:
             1;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) && true)))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           greaterThanEqual(injectionSwitch, injectionSwitch);
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             return;
             if(_GLF_DEAD(false))
              break;
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           switch(_GLF_SWITCH(0))
            {
             case 0:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             case 19:
             if(_GLF_DEAD(false))
              return;
             case 25:
             if(_GLF_DEAD(false))
              return;
             case 3:
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             case 5:
             case 64:
             if(_GLF_DEAD(false))
              return;
             case 43:
             do
              {
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(false));
             break;
             default:
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             1;
            }
          }
         default:
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             continue;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 continue;
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         1;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), false || (bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))))
              continue;
             return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         return;
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         break;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   atomicStore(buf[GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_16_1_1_13_2_1_11next_virtual_gidnum_workgroupvirtual_gidsubgroup_size.xyz.x], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + (0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
      }
     else
      {
       switch(_GLF_SWITCH(0))
        {
         case 3:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         bool _GLF_SWITCH_2_0v[66], _GLF_SWITCH_2_1v;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           switch(_GLF_SWITCH(_GLF_IDENTITY((0 & (-65552 << 93888)), (false ? _GLF_FUZZED(_injected_loop_counter) : (0 & (-65552 << 93888))))))
            {
             case 9:
             ivec4 _GLF_SWITCH_6_0v, _GLF_SWITCH_6_1v, _GLF_SWITCH_6_2v[38];
             case 78:
             (-309.483 - mat2x3(598.215, -34.29, -28.75, -3353.9547, -75.70, -2.9));
             case 0:
             case 69:
             case 3:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               return;
              }
             case 92:
             return;
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             case 36:
             ;
             case 11:
             (+ mat4x2(-3651.8046, -5.8, 3635.3207, -5042.3613, 168.369, 6464.9319, 4584.0740, 17.06));
             default:
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             1;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         case 62:
         mat3x4 _GLF_SWITCH_2_2v;
         case 0:
         case 10:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          continue;
         case 63:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               break;
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              break;
            }
           for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         case 86:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         case 36:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           subgroupAll(true);
          }
         break;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         case 85:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           (uvec4(132786u, 135958u, 85595u, 10410u) + workgroup_base);
          }
         case 72:
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             mat4(-7.0, 6.4, 46.30, 75.90, 9.8, 9.1, -9.5, -9305.2901, 61.68, -622.229, 3.8, 0.4, 9.0, -273.264, 4730.7958, -5635.6065);
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         if(_GLF_DEAD(false))
          continue;
         default:
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               switch(_GLF_SWITCH(0))
                {
                 case 0:
                 if(_GLF_DEAD(false))
                  continue;
                 case 84:
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                      }
                    }
                  }
                 case 71:
                 case 43:
                 case 16:
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 case 89:
                 if(_GLF_DEAD(false))
                  continue;
                 1;
                 break;
                 case 99:
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 ;
                 default:
                 1;
                }
              }
             else
              {
              }
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   switch(_GLF_SWITCH(0))
    {
     case 91:
     vec3 _GLF_SWITCH_6_0v, _GLF_SWITCH_6_1v;
     case 0:
     case 28:
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        continue;
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
           return;
          }
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 43:
     case 6:
     case 69:
     case 25:
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     break;
     case 82:
     if(_GLF_DEAD(false))
      return;
     bvec2(true, true);
     case 23:
     ;
     default:
     1;
     if(_GLF_DEAD(false))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
