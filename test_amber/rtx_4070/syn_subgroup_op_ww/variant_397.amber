#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-82.96)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-82.96)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, 1.0, 0.0, 1.0)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) / 1.0))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(5975.1971)))))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) / vec2(1.0, 1.0), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * _GLF_IDENTITY(((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0)))), _GLF_IDENTITY((((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * mat2(1.0), max(_GLF_IDENTITY((((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * mat2(1.0), vec2(0.0, 0.0) + ((((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * mat2(1.0))), (((injectionSwitch) / _GLF_IDENTITY(vec2(1.0, 1.0), vec2(1.0, 1.0) * (vec2(1.0, 1.0))))) * mat2(1.0)))))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), (injectionSwitch) / vec2(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(5.2) : 1.0)))).y)))) && true), true))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4(_GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), false || (bool((! (false))))))), true, false, _GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bool(true)))))))))) && true), (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch))) - vec2(0.0, 0.0)), 1.0, 0.0, 1.0, 1.0)))) + vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), false, _GLF_IDENTITY(true, true && (true)), false))), false, false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      return;
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_DEAD(_GLF_IDENTITY(false, (false) || false))) && true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || ((false))) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))
    barrier();
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups.x, _GLF_IDENTITY(~ _GLF_IDENTITY((~ (gl_NumWorkGroups.x)), 1u * ((~ (gl_NumWorkGroups.x)))), 0u | (_GLF_IDENTITY(~ (~ _GLF_IDENTITY((gl_NumWorkGroups.x), min((gl_NumWorkGroups.x), (gl_NumWorkGroups.x)))), ~ (_GLF_IDENTITY(~ (~ (~ (gl_NumWorkGroups.x))), max(~ (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << (uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ uvec3(1u, 1u, 1u))), (_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << (uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ uvec3(1u, _GLF_IDENTITY(1u, (1u) * 1u), 1u)))) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, (gl_NumWorkGroups) << (uvec3(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 0.0))).y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ _GLF_IDENTITY(uvec3(1u, 1u, 1u), (_GLF_IDENTITY(uvec3(1u, 1u, 1u), max(uvec3(1u, 1u, 1u), uvec3(1u, 1u, 1u)))) - uvec3(0u, 0u, 0u)))), (_GLF_IDENTITY(gl_NumWorkGroups, (_GLF_IDENTITY(gl_NumWorkGroups, (true ? gl_NumWorkGroups : _GLF_FUZZED(uvec3(66014u, 5878u, 48825u))))) << (uvec3(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)) ^ uvec3(1u, 1u, 1u)))) ^ _GLF_IDENTITY(uvec3(0u, 0u, 0u), (_GLF_IDENTITY(uvec3(0u, 0u, 0u), uvec3(uvec3(uvec3(0u, 0u, 0u))))) | (uvec3(0u, 0u, 0u)))))).x))), ~ (~ (~ (gl_NumWorkGroups.x)))))))))), min(_GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x))), _GLF_IDENTITY(gl_NumWorkGroups.x, ~ (~ (gl_NumWorkGroups.x)))));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false)))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.8), _GLF_FUZZED(-62.56)), bvec2(false, false)))) / vec2(1.0, 1.0)).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))) || (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id))), max(workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)))) >> 0u), workgroup_size * workgroup_id)), (_GLF_IDENTITY(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u), _GLF_FUZZED(subgroup_id))), (0u ^ 0u) | (_GLF_FUZZED(subgroup_id))) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (workgroup_size * workgroup_id)), workgroup_size * workgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), min(_GLF_IDENTITY((workgroup_size), 0u + ((workgroup_size))), (workgroup_size))) | 0u) * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u))), workgroup_size * workgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 1u, 1u), (uvec4(workgroup_size, 0u, 1u, 1u)) + uvec4(0u, 0u, 0u, 0u))))) / 1u) * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))))), uint(uvec4(false ? _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(subgroup_id), clamp(_GLF_FUZZED(subgroup_id), _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), (_GLF_FUZZED(subgroup_id)) ^ 0u), _GLF_FUZZED(subgroup_id))), (0u ^ 0u) | (_GLF_FUZZED(subgroup_id))) : _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, 1u * (workgroup_size * workgroup_id)), workgroup_size * workgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((workgroup_size), min(_GLF_IDENTITY((workgroup_size), 0u + ((workgroup_size))), (workgroup_size))) | 0u) * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(_GLF_IDENTITY(workgroup_size * workgroup_id, min(workgroup_size * workgroup_id, _GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u))), workgroup_size * workgroup_id)), min(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) * 1u) * workgroup_id, max(workgroup_size * workgroup_id, workgroup_size * workgroup_id))) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, uint(_GLF_IDENTITY(uvec4(workgroup_size, 0u, 1u, 1u), (uvec4(workgroup_size, 0u, 1u, 1u)) + uvec4(0u, 0u, 0u, 0u))))) / 1u) * _GLF_IDENTITY(workgroup_id, (workgroup_id) | 0u), max(workgroup_size * workgroup_id, workgroup_size * workgroup_id)))))), 1u, 1u, 1u)))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false)))))), (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bool(! (_GLF_DEAD(false))))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (false)), false))), false || (false))))
  barrier();
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (true ? subgroup_size : _GLF_FUZZED(workgroup_size)))))), ~ (~ (~ (subgroup_size))))), _GLF_IDENTITY(uint(uint(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((subgroup_size), min((subgroup_size), (subgroup_size))), ~ (~ (~ (subgroup_size))))))), (uint(uint(~ (_GLF_IDENTITY(~ (subgroup_size), ~ (_GLF_IDENTITY(~ (~ (subgroup_size)), uint(uvec3(~ (~ (subgroup_size)), uint(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y)), 0u))))))))) | (uint(uint(~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))), (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size))))) << 0u)) / 1u))))))), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size))))), ((_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ (subgroup_size)))))) ^ 0u), ~ (_GLF_IDENTITY(~ (subgroup_size), ~ (~ (~ _GLF_IDENTITY((subgroup_size), ((subgroup_size)) ^ 0u)))))))), (_GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(true, true, false, false))), ! (! ((bool(bvec4(true, true, false, false))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), max(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) * _GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED((vec2(2.3, -95.61) + -63.54).t)), bool(false)))) > injectionSwitch.y)), (_GLF_IDENTITY((_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(true, true, false, false))), ! (! ((bool(bvec4(true, true, false, false))))))))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), max(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))) * _GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED((vec2(2.3, -95.61) + -63.54).t)), bool(false)))) > injectionSwitch.y)), ! (! ((_GLF_IDENTITY(true, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(true, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(true, true, false, false))), ! (! ((bool(bvec4(true, true, false, false))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec4(true, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(true, true, false, false))), ! (! ((bool(bvec4(true, true, false, false))))))))), (bool(bool(_GLF_IDENTITY(bool(bvec4(true, true, false, false)), false || _GLF_IDENTITY((bool(bvec4(true, true, false, false))), ! (! ((bool(bvec4(true, true, false, false)))))))))) && true)))) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(308.847) : 1.0)), _GLF_IDENTITY(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(vec4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(0.0, float(mat4x3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))), 1.0))))), max(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), clamp(_GLF_IDENTITY(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) / 1.0), _GLF_IDENTITY(float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0), float(mat3x2(1.0, sqrt(0.0), sqrt(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))))))) * _GLF_IDENTITY((injectionSwitch.x), mix(float((injectionSwitch.x)), float(_GLF_FUZZED((vec2(2.3, -95.61) + -63.54).t)), _GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(bool(false)), bool(bool(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))), false || (bool(_GLF_IDENTITY(bool(bool(false)), bool(bool(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))))))) > injectionSwitch.y)))))) && true)), (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-400.808)), vec2(_GLF_FUZZED(_GLF_IDENTITY(-6.5, min(-6.5, -6.5))), _GLF_IDENTITY((injectionSwitch), (true ? (injectionSwitch) : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (_GLF_FUZZED(injectionSwitch)) - vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))[1]), bvec2(false, true))), injectionSwitch)).y) && true))) ? _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u) : _GLF_FUZZED(bitfieldInsert(129269u, workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(findMSB(-61464), (findMSB(_GLF_IDENTITY(-61464, max(_GLF_IDENTITY(-61464, (-61464) * 1), -61464)))) | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), 0 ^ (_GLF_IDENTITY(int(8), 0 ^ (_GLF_IDENTITY(int(8), ~ (~ (int(8)))))))), int(8)))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464)))), (_GLF_IDENTITY((findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464)))), ((findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))) | (_GLF_IDENTITY((findMSB(_GLF_IDENTITY(-61464, _GLF_IDENTITY(0 ^ (-61464), ~ (~ (_GLF_IDENTITY(0 ^ (-61464), (0 ^ (-61464)) * 1))))))), ((findMSB(_GLF_IDENTITY(-61464, _GLF_IDENTITY(0 ^ (-61464), ~ (~ (_GLF_IDENTITY(0 ^ (-61464), (0 ^ (-61464)) * 1)))))))) / 1)))) | 0)), clamp(~ (~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))), ~ (~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))), ~ _GLF_IDENTITY((~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))), min((~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))), _GLF_IDENTITY((~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))), (_GLF_IDENTITY((~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))), ~ (~ ((~ (findMSB(_GLF_IDENTITY(-61464, 0 ^ (-61464))))))))) - 0)))))), 72580))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)) | (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), (workgroup_base + subgroup_base + subgroup_local_id) << 0u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))), max((_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), min(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(float(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))) > injectionSwitch.y))) && true), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))))) && true))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, min((subgroup_local_id + 1) % subgroup_size, (subgroup_local_id + 1) % subgroup_size)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))) || false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4425.0842))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), ! (! (! (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true))))))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, true))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      return;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), ! (! (_GLF_DEAD(false)))), bool(bvec4(_GLF_DEAD(false), true, _GLF_IDENTITY(false, ! (! (false))), false)))) || false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(93.41)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), bool(bvec4(_GLF_IDENTITY(false, bool(bool(false))), true, true, true))))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          return;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec4((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true, false)))), false, true)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && _GLF_IDENTITY(true, bool(bvec3(true, false, true)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), true && (bool(bvec4(false, false, false, false))))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     return;
    }
  }
 atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)], _GLF_IDENTITY(uint(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), clamp((1), (1), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(1388) : _GLF_IDENTITY(1, 0 | (1)))))))))), (1))), ((1) | _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), clamp((1), (1), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(1388) : _GLF_IDENTITY(1, 0 | (1)))))))))), (1)))) >> 0))), min(uint(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), clamp((1), (_GLF_IDENTITY(1, (1) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4))))), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(1388) : _GLF_IDENTITY(1, 0 | (1)))))))))), (1))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY((1), ~ (~ ((1)))) | _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), clamp((1), (1), (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 ^ (1)), (false ? _GLF_FUZZED(1388) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, (1) * 1) : _GLF_FUZZED(-97032))), 0 | (1)), clamp(_GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), clamp(_GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, int(ivec3(_GLF_IDENTITY(1, min(1, 1)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), 1))))), _GLF_IDENTITY(1, 0 | (1)), _GLF_IDENTITY(1, 0 | (1)))))))))))))), (1))))), (true ? uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) - 0)) | _GLF_IDENTITY((1), max(_GLF_IDENTITY((1), ~ (~ (_GLF_IDENTITY((1), clamp((1), (1), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(1388) : _GLF_IDENTITY(1, 0 | (1)))))))))), (1))))) : _GLF_FUZZED(workgroup_id))))), 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 4);
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), false || (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), ! (! ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))))))), true && (! (_GLF_DEAD(false))))), true && ((_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) && true) || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))), ! (! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((false ? 4.0 : 50.21))), float(injectionSwitch.y), bool(true))), false || (injectionSwitch.x > injectionSwitch.y))))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false, true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], float(mat4x3((injectionSwitch)[0], 0.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), sqrt(1.0), 1.0))), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-3496.7491), _GLF_FUZZED(-1.2)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))).x > injectionSwitch.y))))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))) && true))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) || (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))) || (false))), (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(324.628)), bool(false)))) - 0.0))) || (false)))) && true)) && true))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   barrier();
  }
 if(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) / 1), _GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, int(ivec2(2, 1)))), min(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, int(ivec2(2, 1)))), ((subgroup_local_id % _GLF_IDENTITY(2, int(ivec2(2, 1))))) | 0u), (subgroup_local_id % _GLF_IDENTITY(2, int(ivec2(2, 1)))))) << 0u)) | (_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))))) == 0, ! (! (_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2))))), max(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2))))), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)))))))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % _GLF_IDENTITY(2, (2) - 0)), (subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), uint(uint((subgroup_local_id % 2)))))))), _GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), 0u | (((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (subgroup_local_id % 2))) | 0u))) | ((subgroup_local_id % 2)))))) >> 0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u, ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u) >> 0u)), ((_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u, ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u) >> 0u))) | 0u), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | _GLF_IDENTITY(((subgroup_local_id % 2)), (false ? _GLF_FUZZED(virtual_gid) : ((subgroup_local_id % 2)))))) >> 0u), ~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uint(subgroup_local_id % 2)), (uint(uint(subgroup_local_id % 2))) | (uint(_GLF_IDENTITY(uint(subgroup_local_id % 2), (_GLF_IDENTITY(uint(subgroup_local_id % 2), (uint(subgroup_local_id % 2)) >> 0u)) >> 0u)))))), _GLF_IDENTITY(((subgroup_local_id % 2)) | _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), ((subgroup_local_id % 2)))))), 0u | (((subgroup_local_id % 2)) | _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), ((subgroup_local_id % 2)))))))))) >> 0u)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) % 2)))) >> 0u), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), max((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))))) >> 0u)))), (false ? _GLF_FUZZED(atomicMin(subgroup_base, workgroup_base)) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), 0u ^ (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) << 0u))), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))), clamp((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | 0), max(subgroup_local_id % _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | 0), min(subgroup_local_id % _GLF_IDENTITY(2, (2) | 0), _GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | 0), 0u ^ (subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))))))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))))) >> 0u), min(_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2))), min(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2))), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))))) >> 0u), clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp(_GLF_IDENTITY((subgroup_local_id % 2), 0u ^ ((subgroup_local_id % 2))), (subgroup_local_id % 2), (subgroup_local_id % 2))), _GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) | (_GLF_IDENTITY(((subgroup_local_id % 2)), clamp(_GLF_IDENTITY(((subgroup_local_id % 2)), (((subgroup_local_id % 2))) ^ 0u), ((subgroup_local_id % 2)), ((subgroup_local_id % 2)))))) | ((subgroup_local_id % 2)))) >> 0u), 0u ^ (~ _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), clamp(((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u))))), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), clamp(_GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), 1u * (((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))))) >> 0u))), ~ _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((subgroup_local_id % 2), min((_GLF_IDENTITY(subgroup_local_id % 2, min(subgroup_local_id % 2, subgroup_local_id % 2))), _GLF_IDENTITY((subgroup_local_id % 2), (0u ^ 0u) ^ ((subgroup_local_id % 2))))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), (true ? _GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((subgroup_local_id % 2), min((_GLF_IDENTITY(subgroup_local_id % 2, min(subgroup_local_id % 2, subgroup_local_id % 2))), _GLF_IDENTITY((subgroup_local_id % 2), (0u ^ 0u) ^ ((subgroup_local_id % 2))))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ~ (~ (((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (_GLF_IDENTITY(1u << _GLF_IDENTITY(uint(0u), uint(0u)), ~ (~ (1u << _GLF_IDENTITY(uint(0u), uint(0u))))))))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((subgroup_local_id % 2), min((_GLF_IDENTITY(subgroup_local_id % 2, min(subgroup_local_id % 2, subgroup_local_id % 2))), _GLF_IDENTITY((subgroup_local_id % 2), (0u ^ 0u) ^ ((subgroup_local_id % 2))))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u)))) : _GLF_FUZZED(subgroup_id)))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2)))))), ~ (~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2))))))))) >> 0u), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % _GLF_IDENTITY(2, min(2, 2)))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (((subgroup_local_id % 2)))) | ((subgroup_local_id % 2)))) >> 0u), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u)))))))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY((2), ((2)) | (_GLF_IDENTITY((2), (_GLF_IDENTITY((2), 0 | ((2)))) << 0))) | (2))))), max(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2))))), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)))))))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % _GLF_IDENTITY(2, (2) - 0)), (subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), uint(uint((subgroup_local_id % 2)))))))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) >> 0u))) | ((subgroup_local_id % 2)), 0u | (((subgroup_local_id % 2)) | _GLF_IDENTITY(((subgroup_local_id % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, 1 * (2))))))), (((subgroup_local_id % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, 1 * (2)))))))) | (((subgroup_local_id % _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, 1 * (2))))))))))))) >> 0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) / 1u)))) >> 0u), ~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uint(subgroup_local_id % 2)), (uint(uint(subgroup_local_id % 2))) | _GLF_IDENTITY((uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) % 2))), max((uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) % 2))), (uint(uint(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) % 2)))))))), ((subgroup_local_id % 2)) | _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), ((subgroup_local_id % 2)))))))) >> 0u)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))) | ((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) - 0u, ((subgroup_local_id) - 0u) >> 0u)) % 2)))) >> 0u), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ~ _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), max((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))) | ((subgroup_local_id % 2)))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), max((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))) | ((subgroup_local_id % 2)))))) >> 0u), 0u + ((_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, 0u | (subgroup_local_id % 2))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), max((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))) | ((subgroup_local_id % 2)))))) >> 0u)))) ^ 0u)))), (false ? _GLF_IDENTITY(_GLF_FUZZED(atomicMin(subgroup_base, workgroup_base)), (_GLF_IDENTITY(_GLF_FUZZED(atomicMin(subgroup_base, workgroup_base)), 0u + (_GLF_FUZZED(atomicMin(subgroup_base, workgroup_base))))) << 0u) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), 0u ^ (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) << 0u))), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | _GLF_IDENTITY(0, ~ (~ (0)))))))), clamp((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))))) >> 0u), min(_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) >> 0u)), (~ (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) >> 0u))) / 1u)))))) >> 0u), 0u ^ (~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u))), ~ _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), uint(uvec4(((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), 1u, 1u, 1u))), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u))), ~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u) % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u)))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2)))))) >> 0u), min(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (((subgroup_local_id % 2)))) | ((subgroup_local_id % 2)))) >> 0u), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), (_GLF_IDENTITY((subgroup_local_id % 2), uint(uint((subgroup_local_id % 2))))) | (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) + 0u)))))) >> 0u)))))))) >> 0u), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2))))), max(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | (2))))), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)), min(_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)), clamp(_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)), max(subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)), subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)))), subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)), subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)))), subgroup_local_id % _GLF_IDENTITY(2, (2) | (2)))))))))) >> 0u, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), clamp((subgroup_local_id % _GLF_IDENTITY(2, (2) - _GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, (0) / 1), 0))))), (subgroup_local_id % 2), _GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), uint(uint((subgroup_local_id % 2)))))))), _GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), 0u | (((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))))) >> 0u, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(uint(uint(subgroup_local_id % 2)), (true ? uint(uint(subgroup_local_id % 2)) : _GLF_FUZZED(virtual_gid))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ~ ((_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u) % 2, _GLF_IDENTITY(uint(uint(subgroup_local_id % 2)), (uint(uint(_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) | (subgroup_local_id % 2))))) | (uint(uint(subgroup_local_id % 2)))))), ((subgroup_local_id % 2)) | _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), _GLF_IDENTITY(((subgroup_local_id % 2)), max(((subgroup_local_id % 2)), ((subgroup_local_id % 2)))))))) >> 0u)))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u) % 2)))) >> 0u), min(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)), subgroup_local_id)) % 2), ((subgroup_local_id % 2)) | ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) << 0u))) % _GLF_IDENTITY(2, (2) >> 0))))) >> 0u), ~ (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), max((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))))) >> 0u)))), (false ? _GLF_FUZZED(atomicMin(subgroup_base, workgroup_base)) : ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), 0u ^ (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) << _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 1u * (0u))) | (0u << _GLF_IDENTITY(uint(8u), uint(8u))))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(_GLF_IDENTITY(2, int(ivec3(2, (1 & 1), 1))), (2) | 0))))), clamp((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))), (_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % _GLF_IDENTITY(2, (2) | 0))))))) >> 0u), min(_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), uint(uvec4(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), 0u, 1u, 0u))))) >> 0u), 0u ^ (((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), uint(uvec4(((subgroup_local_id % 2)) | ((subgroup_local_id % 2)), 0u, 1u, 0u))))) >> 0u))), clamp(_GLF_IDENTITY(~ ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_local_id % 2 : _GLF_FUZZED(115259u)))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), 0u ^ (~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u))), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), (_GLF_IDENTITY((subgroup_local_id % 2), min(_GLF_IDENTITY((subgroup_local_id % 2), 0u | ((subgroup_local_id % 2))), (subgroup_local_id % 2)))) | ((subgroup_local_id % 2)))) >> 0u))), _GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u), 0u ^ (~ ((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2))))), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u)))))))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | (_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2)))))) >> 0u), min(~ ((_GLF_IDENTITY((subgroup_local_id % 2), _GLF_IDENTITY(((subgroup_local_id % 2)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (((subgroup_local_id % 2)))) | ((subgroup_local_id % 2)))) >> 0u), ~ ((_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) | ((subgroup_local_id % 2)))) >> 0u)))))))) >> 0u)) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), _GLF_ZERO(0.0, injectionSwitch.x)))))) - 0u)) == _GLF_IDENTITY(0, min(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, _GLF_IDENTITY((0), ((0)) | (_GLF_IDENTITY((0), 0 | ((0))))) << 0), _GLF_IDENTITY(_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (false ? _GLF_FUZZED(18583) : 0)), 0)), int(ivec2(0, 1))))), _GLF_IDENTITY(0, (0) >> 0)))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(true);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ (~ (next_virtual_gid)))], uint(2), 4, _GLF_IDENTITY(64, _GLF_IDENTITY((64) ^ 0, ((64) ^ 0) | ((64) ^ _GLF_IDENTITY(0, ~ (~ (0)))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), min(_GLF_IDENTITY(4, _GLF_IDENTITY(~ (~ (4)), (false ? _GLF_FUZZED(-57811) : ~ (~ (4))))), _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), min(_GLF_IDENTITY(4, ~ (~ (4))), _GLF_IDENTITY(4, ~ (~ (4))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ _GLF_IDENTITY((4), (_GLF_IDENTITY((_GLF_IDENTITY(4, int(ivec2(4, 0)))), ((_GLF_IDENTITY(4, (4) | (4)))) | ((4)))) >> 0))), ~ (~ (_GLF_IDENTITY(4, ~ (~ (4)))))), _GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), (false ? _GLF_FUZZED(int(689.569)) : ~ (4))))), _GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, 0 + (4)), _GLF_IDENTITY(4, ~ (~ (4))))), ~ (~ (4))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, true))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(6122.1662), _GLF_FUZZED(-0.2)), vec2(mat2x4(vec2(_GLF_FUZZED(6122.1662), _GLF_FUZZED(-0.2)), 1.0, 0.0, 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (! (true)), ! (! (! (! (true)))))))))))).y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6122.1662), _GLF_FUZZED(-0.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6122.1662), _GLF_FUZZED(-0.2)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)))) || false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   subgroupAll(false);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec2(_GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))), true))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-6693.9587)), bool(false)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (next_virtual_gid) + 0u)], uint(2), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (true) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(true, (true) && true))))), (! (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(_GLF_IDENTITY(true, (true) && true), ! (! (_GLF_IDENTITY(true, (true) && true))))))))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, false || ((false) && true)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)), bool(bool(_GLF_DEAD(false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
