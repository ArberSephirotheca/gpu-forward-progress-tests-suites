#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-9644.1239)))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) ^ 0u);
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (! ((_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(6.6)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false, false)))));
      }
     else
      {
      }
    }
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, ((0u >> _GLF_IDENTITY(uint(8u), uint(8u))) << _GLF_IDENTITY(uint(2u), uint(2u))) | _GLF_IDENTITY((subgroup_id * subgroup_size), min((subgroup_id * subgroup_size), (subgroup_id * subgroup_size)))), subgroup_id * _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size))))) / 1u, 0u ^ ((_GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)))) / 1u))) + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (1) * 1)), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), injectionSwitch.x)))) > injectionSwitch.y))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), (0) ^ 0)); _injected_loop_counter --)
        {
         do
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                  break;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false))))));
          }
        }
      }
     switch(_GLF_SWITCH(0))
      {
       case 99:
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         ;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec4(bvec3(false, true, false), true)))))))))))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) && true)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false))) || false, ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false))) || false, ! (! ((_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false))) || false)))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, false)), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)) || false, false || ((_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)) || false))), false || (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false))))), false || ((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(false, true, false)), (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false)) || false), false || (_GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false))))))) || false))))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))))).x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0)) - 0.0)))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       case 0:
       case 12:
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(acos(-61.56)))))) < injectionSwitch.y))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       else
        {
        }
       case 97:
       for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, min(0, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))), 0 ^ ((0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) >> 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
         subgroupAll(false);
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false, true)))))
        break;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
        return;
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat4x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 1.0, sin(0.0)), transpose(transpose(mat4x2(injectionSwitch.y, 1.0, 0.0, 0.0, 1.0, log(1.0), 1.0, sin(0.0))))))))) && (false))))))
              return;
            }
           else
            {
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3x2(injectionSwitch, 1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8.2))), 0.0, 1.0))).x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), clamp(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) / vec2(1.0, 1.0)), mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))).y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       break;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), false || (false))))
        return;
       default:
       1;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))), ! (! (_GLF_WRAPPED_LOOP(false)))));
      }
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, log(vec2(1.0, 1.0)) + (injectionSwitch)).y))))
      {
       switch(_GLF_SWITCH(0))
        {
         case 22:
         while(((mat3x4(-19.21, _GLF_IDENTITY(-1869.6611, exp(0.0) * (-1869.6611)), -4.4, 1.7, 2.1, 3021.5760, -0.6, -353.527, 52.54, -8.5, -347.401, -3237.4649) / (- mat3x4(8.8, -712.257, _GLF_IDENTITY(_GLF_IDENTITY(2.6, clamp(2.6, 2.6, 2.6)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(2.6, clamp(2.6, 2.6, 2.6)), (false ? _GLF_FUZZED(2818.1547) : _GLF_IDENTITY(2.6, clamp(2.6, 2.6, 2.6)))) : _GLF_FUZZED(54.77))), 255.877, 201.013, -5.9, -6894.1781, 40.32, -7457.4627, 9.4, -6922.2375, -3.3))) != mat3x4(569.486, _GLF_IDENTITY(0.9, float(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(0.9, (0.9) - 0.0), float(vec4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), abs(1.0)))), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(float(9776)))), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), determinant(mat2(cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)), 0.0))), abs(0.0), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (true ? transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(_GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(945.782)), float(1.0), bool(true))), 0.0, 1.0, sin(0.0), 0.0, abs(exp(0.0))))), (true ? _GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(float(9776)))), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, cos(0.0), _GLF_IDENTITY(determinant(mat2(cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)), float(_GLF_IDENTITY(mat2x4(determinant(mat2(cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, sqrt(1.0), 1.0, 0.0, 1.0), (mat2x4(determinant(mat2(cos(0.0), 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0)), 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 1.0, sqrt(1.0), 1.0, 0.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 0.0))), abs(0.0), 1.0, _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))), float(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, sin(0.0), 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-85.04) : 1.0)), length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(mat4(mat4x2(19.76, 5.1, -63.25, -0.7, 4.9, -9.5, 1412.6102, -623.634))))))), transpose(transpose(_GLF_IDENTITY(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-29.15)), vec2(_GLF_FUZZED(29.15), (injectionSwitch)[1]), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x), abs(0.0), 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(93.50)), bvec2(true, false))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.7), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(93.50)), bvec2(true, false))).x))), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)), transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) ? transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(mat4(1.2, 9653.6729, -8.0, -170.869, 202.460, 910.575, -42.77, _GLF_IDENTITY(-12.73, max(_GLF_IDENTITY(-12.73, max(-12.73, -12.73)), -12.73)), -89.06, 6602.9587, -0.1, 6.8, -38.24, 96.38, 18.22, 9234.6087))))), transpose(transpose(_GLF_IDENTITY(transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), tan(0.0), log(1.0), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0))).x), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), mix(vec2((vec2(injectionSwitch.x, 1.0))[0], (vec2(injectionSwitch.x, 1.0))[1]), vec2(_GLF_FUZZED(-33.33), _GLF_FUZZED(-7.9)), bvec2(false, false)))), float(_GLF_IDENTITY(mat4x2(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), mix(vec2((vec2(injectionSwitch.x, 1.0))[0], (vec2(injectionSwitch.x, 1.0))[1]), vec2(_GLF_FUZZED(-33.33), _GLF_FUZZED(-7.9)), bvec2(false, false)))), 0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), 0.0, 1.0), (mat4x2(float(_GLF_IDENTITY(vec2(injectionSwitch.x, 1.0), mix(vec2((vec2(injectionSwitch.x, 1.0))[0], (vec2(injectionSwitch.x, 1.0))[1]), vec2(_GLF_FUZZED(-33.33), _GLF_FUZZED(-7.9)), bvec2(false, false)))), 0.0, 0.0, 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), tan(0.0), 0.0, 1.0)) * mat4(1.0))))))) / 1.0))) : _GLF_FUZZED(mat4(1.2, 9653.6729, -8.0, -170.869, 202.460, 910.575, -42.77, -12.73, -89.06, _GLF_IDENTITY(6602.9587, mix(float(6602.9587), float(_GLF_FUZZED(354.589)), bool(false))), -0.1, 6.8, -38.24, 96.38, 18.22, 9234.6087))))), mat4(1.0) * (transpose(_GLF_IDENTITY(transpose(mat4(_GLF_IDENTITY(0.9, _GLF_IDENTITY((0.9), log(1.0) + ((0.9))) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 0.0, 1.0, 1.0, sqrt(1.0), 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 1.0, abs(1.0)))), _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? transpose(mat4(_GLF_IDENTITY(0.9, (0.9) - 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), abs(0.0), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, length(vec2(0.0, 0.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(mat4(1.2, 9653.6729, -8.0, -170.869, 202.460, 910.575, -42.77, -12.73, -89.06, 6602.9587, -0.1, 6.8, -38.24, 96.38, 18.22, 9234.6087))))))))))))))))))), -89.33, -1764.2666, _GLF_IDENTITY(-6.0, mix(float(_GLF_FUZZED(-37.30)), float(-6.0), bool(true))), 9.4, 573.661, _GLF_IDENTITY(5.4, _GLF_IDENTITY(max(5.4, _GLF_IDENTITY(5.4, max(_GLF_IDENTITY(5.4, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) ? 5.4 : _GLF_FUZZED(-4.3))), 5.4))), min(max(5.4, _GLF_IDENTITY(5.4, max(_GLF_IDENTITY(5.4, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) ? 5.4 : _GLF_FUZZED(-4.3))), 5.4))), max(_GLF_IDENTITY(5.4, mix(float(5.4), float(_GLF_FUZZED(-9071.5268)), bool(false))), _GLF_IDENTITY(5.4, max(_GLF_IDENTITY(5.4, (_GLF_IDENTITY(true, false || (_GLF_IDENTITY(true, bool(bvec3(true, false, false))))) ? 5.4 : _GLF_FUZZED(-4.3))), _GLF_IDENTITY(5.4, (5.4) * 1.0))))))), -86.02, 27.46, -250.627, 9.8)))
          {
           if((ivec4(-13849, 19962, -60499, -71866) == ivec4(60590, -21741, 26158, 91718)))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
                {
                }
               else
                {
                 ;
                }
              }
             else
              {
              }
             mat3x2 _GLF_SWITCH_1_0v[8], _GLF_SWITCH_1_1v;
             mat3x4 _GLF_SWITCH_1_2v, _GLF_SWITCH_1_3v;
             if(_GLF_DEAD(false))
              break;
             mat2 _GLF_SWITCH_1_4v, _GLF_SWITCH_1_5v[16];
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), bool(bvec2(bool(_GLF_WRAPPED_IF_TRUE(true)), true)))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_IF_TRUE(true)), bool(bvec2(bool(_GLF_WRAPPED_IF_TRUE(true)), true)))), false, false)))))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true) || false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY((true) || false, bool(_GLF_IDENTITY(bvec3((true) || false, false, true), bvec3(bvec3(bvec3((true) || false, false, true)))))), true), _GLF_IDENTITY(bvec2(bvec2(bvec2(_GLF_IDENTITY((true) || false, bool(_GLF_IDENTITY(bvec3((true) || false, false, true), bvec3(bvec3(bvec3((true) || false, false, true)))))), true))), bvec2(bvec4(bvec2(bvec2(bvec2(_GLF_IDENTITY((true) || false, bool(_GLF_IDENTITY(bvec3((true) || false, false, true), bvec3(bvec3(bvec3((true) || false, false, true)))))), true))), true, true)))))))), _GLF_IDENTITY(false, ! (! (false))) || (_GLF_WRAPPED_IF_TRUE(true))))
                {
                 do
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    break;
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   while(true);
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                }
              }
             else
              {
              }
             if((ivec3(-5577, -73454, 39260) != sign(ivec3(17714, 25882, _GLF_IDENTITY(91110, _GLF_IDENTITY(0, (0) * 1) ^ (91110))))))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, 0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(true, (true) && true) ? 1 : _GLF_FUZZED(77612)))) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 & _GLF_IDENTITY(91638, (true ? 91638 : _GLF_FUZZED(96904))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   break;
                  }
                 do
                  {
                   do
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
                      {
                       mat4(mat3(-2138.0102, -6.4, _GLF_IDENTITY(0.2, (0.2) - 0.0), -2.6, _GLF_IDENTITY(8414.7032, clamp(8414.7032, 8414.7032, 8414.7032)), _GLF_IDENTITY(-45.43, (false ? _GLF_FUZZED(_GLF_IDENTITY(7.3, (false ? _GLF_FUZZED(-937.216) : 7.3))) : _GLF_IDENTITY(-45.43, (-45.43) - 0.0))), 8213.6717, 6.5, -2451.3654));
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0)))))));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 0.0, _GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0, 1.0, 0.0))), injectionSwitch.y))))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   break;
                  }
                }
               mat3x4 _GLF_SWITCH_1_6v, _GLF_SWITCH_1_7v, _GLF_SWITCH_1_8v[81];
               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
                break;
               float _GLF_SWITCH_1_9v[85], _GLF_SWITCH_1_10v;
               bvec2 _GLF_SWITCH_1_11v[64], _GLF_SWITCH_1_12v, _GLF_SWITCH_1_13v[94];
               int _GLF_SWITCH_1_14v, _GLF_SWITCH_1_15v;
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))), _GLF_IDENTITY(true, (true) || false), false, false)))))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).y)))))))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y))))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   else
                    {
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  continue;
                }
               mat2x4 _GLF_SWITCH_1_16v;
               if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
                break;
              }
             if((_GLF_SWITCH_1_1v != (+ mat3x2(_GLF_IDENTITY(-2.6, clamp(_GLF_IDENTITY(-2.6, (-2.6) - 0.0), _GLF_IDENTITY(-2.6, clamp(-2.6, -2.6, -2.6)), _GLF_IDENTITY(_GLF_IDENTITY(-2.6, mix(float(_GLF_FUZZED(8.7)), float(-2.6), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (true ? _GLF_IDENTITY(-2.6, mix(float(_GLF_FUZZED(8.7)), float(-2.6), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(5779.2539))))), -90.29, _GLF_IDENTITY(-167.607, 0.0 + (-167.607)), 230.191, 2216.4196, 8899.3136))))
              {
               true;
               _GLF_SWITCH_1_2v;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 | (0))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
                  break;
                 ;
                }
               if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 continue;
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
               do
                {
                 do
                  {
                   ;
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || (_GLF_IDENTITY((false) || false, ! (! ((false) || false))))))));
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, cos(0.0), 0.0))))))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
                      {
                       do
                        {
                         return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     break;
                    }
                   continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false))))))))), ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), ! (! (! (_GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))))))))), ! (! (false)))))));
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) ^ (0 << _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 0 | (_injected_loop_counter --)))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                       if(_GLF_WRAPPED_IF_FALSE(false))
                        {
                        }
                       else
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) && true))))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false)))))
                          {
                          }
                         else
                          {
                           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                            {
                             ;
                            }
                          }
                        }
                       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                        break;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y))));
                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(55.64)), _GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_IDENTITY(float(injectionSwitch.x), (float(injectionSwitch.x)) - 0.0)), float(_GLF_FUZZED(1.9)), bool(false))), bool(true))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(39.47))) > injectionSwitch.y)))))))))
                      continue;
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(39.20)), float(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-495.614)), float(injectionSwitch.y), bool(true)))), bool(true))), (injectionSwitch.y) + 0.0)))))
                continue;
               if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
               ;
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
                    continue;
                   _GLF_IDENTITY((uvec3(62991u, _GLF_IDENTITY(155479u, (155479u) | 0u), 8698u) >> uvec3(18071u, 161208u, _GLF_IDENTITY(29676u, _GLF_IDENTITY(uint(uvec3(29676u, 1u, 1u)), clamp(uint(uvec3(29676u, 1u, 1u)), uint(uvec3(29676u, 1u, 1u)), uint(_GLF_IDENTITY(uvec3(29676u, 1u, 1u), (uvec3(29676u, 1u, 1u)) | uvec3(0u, 0u, 0u)))))))), ~ (~ ((uvec3(62991u, _GLF_IDENTITY(155479u, (155479u) | 0u), 8698u) >> uvec3(18071u, 161208u, _GLF_IDENTITY(29676u, _GLF_IDENTITY(uint(uvec3(29676u, 1u, 1u)), clamp(uint(uvec3(29676u, 1u, 1u)), uint(uvec3(29676u, 1u, 1u)), uint(_GLF_IDENTITY(uvec3(29676u, 1u, 1u), (uvec3(29676u, 1u, 1u)) | uvec3(0u, 0u, 0u)))))))))));
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(83.37), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.62)), bvec2(true, false))))).x), _GLF_IDENTITY(float(vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(83.37), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.62)), bvec2(true, false))))).x), 1.0, 0.0, abs(round(length(normalize(1.0)))))), mix(float(float(vec4((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(83.37), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-13.62)), bvec2(true, false))))).x), 1.0, 0.0, abs(round(length(normalize(1.0))))))), float(_GLF_FUZZED(-5891.8484)), bool(false)))) / 1.0) > _GLF_IDENTITY(injectionSwitch, vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(83.74), _GLF_FUZZED(float(false))), _GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) < injectionSwitch.y))))))), 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 0.0))).y))))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, int(int(1))) | 0)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               else
                {
                }
              }
             uvec4 _GLF_SWITCH_1_17v[73];
             if(_GLF_DEAD(false))
              break;
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(1, int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(1, 1, 0, 1), _GLF_IDENTITY((ivec4(1, 1, 0, 1)) * ivec4(1, 1, 1, 1), clamp(_GLF_IDENTITY((ivec4(1, 1, 0, 1)) * ivec4(1, 1, 1, 1), ivec4(0, 0, 0, 0) + ((ivec4(1, 1, 0, 1)) * ivec4(1, 1, 1, 1))), (ivec4(1, 1, 0, 1)) * ivec4(1, 1, 1, 1), _GLF_IDENTITY((ivec4(1, 1, 0, 1)) * ivec4(1, 1, 1, 1), (false ? _GLF_FUZZED(ivec4(99092, -17405, -66230, 98385)) : (ivec4(1, 1, 0, 1)) * ivec4(1, 1, 1, 1)))))), clamp(ivec4(1, 1, 0, 1), ivec4(1, 1, _GLF_IDENTITY(0, max(0, 0)), 1), ivec4(1, 1, _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, ~ (~ (0)))))), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((_GLF_IDENTITY(0, 1 * (0)) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), _GLF_IDENTITY(clamp(int(4), int(4), int(4)), min(clamp(int(4), int(4), int(4)), clamp(int(4), int(4), int(4))))))), (false ? _GLF_FUZZED(_GLF_IDENTITY(9727, int(int(_GLF_IDENTITY(9727, ~ (~ (9727))))))) : (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) - 0)), _GLF_IDENTITY(int(4), clamp(int(4), int(4), int(4)))))))); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   do
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))
                      {
                      }
                     else
                      {
                       mat4(5378.0258, -4.9, 644.344, -4.3, -6.8, -44.16, _GLF_IDENTITY(-6.4, max(_GLF_IDENTITY(-6.4, min(_GLF_IDENTITY(_GLF_IDENTITY(-6.4, (true ? -6.4 : _GLF_FUZZED(-3.3))), (-6.4) / 1.0), -6.4)), _GLF_IDENTITY(-6.4, _GLF_IDENTITY(1.0 * (-6.4), (true ? _GLF_IDENTITY(1.0 * (-6.4), (1.0 * (-6.4)) / 1.0) : _GLF_FUZZED(4.1)))))), 213.730, -56.61, 8.0, 0.9, 0.1, -878.321, -209.012, 7817.1337, 3.7);
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             ;
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), (int(3)) | 0), int(3)))))); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 mat2x4(29.20, 8.4, 89.83, -533.744, -19.46, 43.80, -38.34, 776.403);
                }
               if(_GLF_DEAD(false))
                continue;
              }
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51870) : 1))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51870) : 1)), min(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51870) : 1)), _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51870) : 1)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51870) : 1))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-51870) : 1))))))) && true); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   return;
                  }
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y)) || false))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, (true) && true))), (injectionSwitch.x < injectionSwitch.y)), ((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)), true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec4(injectionSwitch.x < injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))
                break;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                continue;
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | ((_GLF_IDENTITY(_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) - 0), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)) | (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(5), int(5)), (1 << _GLF_IDENTITY(int(5), int(5))) - 0)))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (_GLF_IDENTITY(_GLF_IDENTITY(5, int(ivec3(5, int(_GLF_ONE(1.0, injectionSwitch.y)), 1))), (true ? _GLF_IDENTITY(5, int(ivec3(5, int(_GLF_ONE(1.0, injectionSwitch.y)), 1))) : _GLF_FUZZED(atomicOr(_injected_loop_counter, 32781))))))), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))), (false ? _GLF_FUZZED(_injected_loop_counter) : (1 << _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               do
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
            }
           float _GLF_SWITCH_1_18v;
           for(int _injected_loop_counter = _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(2330))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
              return;
            }
           if(_GLF_DEAD(false))
            continue;
           mat2x3(20.35, -464.642, 6319.3913, 2331.1522, 3.4, -3.1);
           ivec4 _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v[23], _GLF_SWITCH_1_21v;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             mat4x2(-8.2, _GLF_SWITCH_1_18v, pow(_GLF_SWITCH_1_18v, 6.9), -9009.4218, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v, _GLF_SWITCH_1_18v);
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              continue;
             break;
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = (((((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          break;
         case 8:
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          continue;
         uvec3 _GLF_SWITCH_1_22v;
         case 0:
         case 12:
         case 93:
         case 74:
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            break;
           return;
           for(int _injected_loop_counter = (0 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), false, false)))))))
                    {
                    }
                   else
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                          }
                         else
                          {
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), 0 | (int(0))), int(0)))); _injected_loop_counter --)
                        {
                         return;
                        }
                      }
                    }
                  }
                }
              }
            }
           if(_GLF_DEAD(false))
            break;
          }
         atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(76900), 0 | (_GLF_IDENTITY(true ? 64 : _GLF_FUZZED(76900), clamp(true ? 64 : _GLF_FUZZED(76900), true ? 64 : _GLF_FUZZED(76900), true ? 64 : _GLF_FUZZED(76900))))))), 4);
         do
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              continue;
             subgroupAll(true);
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), true && _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), ((_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0))).x)), ! (! (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), ! (! (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)))))))))) || false))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), min(int(0), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         case 84:
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_FUZZED(958.463)), float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), bool(true))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))
            {
             if(_GLF_DEAD(false))
              continue;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         for(         mat2x3(7793.7003, 9.4, 74.40, -577.071, 8.7, -5.5);
 (_GLF_IDENTITY(vec4(6.4, -25.21, -27.58, 6.1) == vec4(693.046, 961.515, -9.2, -650.093), (vec4(6.4, -25.21, -27.58, 6.1) == vec4(693.046, 961.515, -9.2, -650.093)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))); ivec3(-53759, -4373, -51414))
          {
           _GLF_IDENTITY(mat4(3.9, -924.572, -6.3, _GLF_IDENTITY(7.1, min(7.1, 7.1)), 73.30, 8.0, -7509.8634, -4.2, -1905.6622, -545.367, 6.9, 6917.4168, -6898.9764, -629.186, 1005.2102, 6.9), (mat4(3.9, -924.572, -6.3, 7.1, 73.30, 8.0, -7509.8634, -4.2, -1905.6622, -545.367, 6.9, 6917.4168, -6898.9764, -629.186, 1005.2102, 6.9)) * mat4(1.0));
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 0.0)), (vec2(vec4(injectionSwitch, 1.0, 0.0))) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           ;
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
            continue;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (false))))
            break;
          }
         case 83:
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(false, (false) && true) ? _GLF_FUZZED(-13229) : 1))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 break;
                }
               for(               bvec2(true, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec3(true, true, true), bvec3(bvec3(bvec3(true, true, true)))))));
 (mat4x2(-69.74, 3.3, -8.7, _GLF_IDENTITY(-147.196, _GLF_IDENTITY(mix(float(_GLF_FUZZED(65.62)), float(-147.196), bool(true)), float(mat2x3(_GLF_IDENTITY(mix(float(_GLF_FUZZED(65.62)), float(-147.196), bool(true)), min(mix(float(_GLF_FUZZED(65.62)), float(-147.196), bool(true)), mix(float(_GLF_FUZZED(65.62)), float(-147.196), bool(true)))), 0.0, 0.0, 0.0, 0.0, 0.0)))), 4.2, -331.407, 0.9, -9.3) != mat4x2(-63.49, -3408.0133, 3.9, 672.334, 436.577, 73.73, -3578.5113, -9.4)); log2(vec4(6.1, 6076.7212, -958.267, _GLF_IDENTITY(-4.1, (_GLF_IDENTITY(-4.1, clamp(-4.1, -4.1, -4.1))) - 0.0))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.8)), float(injectionSwitch.y), bool(true)))), ! (! _GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(0.7)), bvec2(false, false))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false || ((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-7.7), _GLF_FUZZED(0.7)), bvec2(false, false))).x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), false || (! (bool(bvec2(false, false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false))), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (((injectionSwitch.x > injectionSwitch.y)) || false))))))))) && _GLF_IDENTITY(true, ! (! (true))))))))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 ivec4 _GLF_SWITCH_1_23v, _GLF_SWITCH_1_24v;
                 for(bvec2 _GLF_SWITCH_1_25v, _GLF_SWITCH_1_26v, _GLF_SWITCH_1_27v; (mat3x4(6673.2135, 1.2, -98.91, _GLF_IDENTITY(_GLF_IDENTITY(-86.33, max(-86.33, _GLF_IDENTITY(-86.33, clamp(-86.33, -86.33, -86.33)))), (-86.33) + 0.0), _GLF_IDENTITY(-4472.8013, _GLF_IDENTITY(dot(_GLF_IDENTITY(_GLF_IDENTITY(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), _GLF_IDENTITY(vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0)), (vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0))) + vec3(0.0, 0.0, 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), _GLF_IDENTITY(vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0)), (vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0))) + vec3(0.0, 0.0, 0.0))), vec3(vec4(_GLF_IDENTITY(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), _GLF_IDENTITY(vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0)), (vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0))) + vec3(0.0, 0.0, 0.0))), 0.0))), _GLF_IDENTITY(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), _GLF_IDENTITY(vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0)), (vec3(mat2x4(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0)), dot(vec3(0.0, abs(1.0), 1.0), vec3(cos(0.0), 0.0, 0.0))), 0.0, 0.0))) + vec3(0.0, 0.0, 0.0))))), _GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) + 0.0), 0.0, 0.0), min(vec3(1.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0)))), dot(vec3(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, sin(0.0)), vec3(1.0, 0.0, 0.0))) * (-4472.8013)), 19.58, 5.9, _GLF_IDENTITY(147.766, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)) ? _GLF_FUZZED(0.0) : 147.766)), -6.2, _GLF_IDENTITY(8563.0187, float(vec4(8563.0187, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0))))), 124.722, -15.77) == mat3x4(-1.0, -8.4, 445.946, 3.3, -630.836, 1.2, -31.83, -652.344, _GLF_IDENTITY(6.6, float(mat4x2(6.6, 1.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), mix(float(_GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0)))), float(_GLF_FUZZED(-6.5)), bool(false))), 1.0, 1.0))), 8783.6599, 9.0, -1713.2458)); bvec3(false, true, false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       ivec3(35741, 84452, -99452);
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((-49514 & 0) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), false || (_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))))))
                            {
                            }
                           else
                            {
                             return;
                            }
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                   do
                    {
                     mat4x2(1.1, _GLF_IDENTITY(-7839.7341, clamp(_GLF_IDENTITY(-7839.7341, mix(float(-7839.7341), float(_GLF_IDENTITY(_GLF_FUZZED(-4.6), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-3.0) : _GLF_FUZZED(-4.6)))), _GLF_IDENTITY(bool(false), true && (_GLF_IDENTITY(bool(false), (bool(false)) || false))))), -7839.7341, _GLF_IDENTITY(-7839.7341, max(-7839.7341, -7839.7341)))), -9760.0193, -5.5, 21.40, 452.006, -857.544, 6262.7307);
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat3(mat3(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)))))))), (float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), mat3(mat3(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0), transpose(transpose(mat3(injectionSwitch.y, 0.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0)), dot(vec4(_GLF_IDENTITY(dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0)), dot(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 1.0, 1.0))), 1.0, 0.0, 1.0), vec4(1.0, 0.0, 1.0, 0.0))), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0))))))))) + 0.0))), bool(bool((injectionSwitch.x > injectionSwitch.y)))))));
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), ! (! (bool(bvec4(true, true, true, true))))))))
                    {
                     notEqual(_GLF_IDENTITY(uvec4(60127u, 182545u, 177285u, _GLF_IDENTITY(40606u, (40606u) << 0u)), (uvec4(60127u, 182545u, 177285u, 40606u)) ^ uvec4(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec2(0u, 0u), min(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (0u) - 0u), 0u), (uvec2(0u, 0u)) | (uvec2(0u, 0u))), uvec2(0u, 0u))))), 0u, 0u)), uvec4(168130u, 103367u, 100665u, 42627u));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    break;
                   mat4x2 _GLF_SWITCH_1_28v[63];
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   vec4(5.4, 73.47, -5.5, 233.604);
                   if(_GLF_DEAD(false))
                    return;
                   uint(-67077);
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       true;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   vec4 _GLF_SWITCH_1_29v[98], _GLF_SWITCH_1_30v;
                  }
                 uint _GLF_SWITCH_1_31v, _GLF_SWITCH_1_32v, _GLF_SWITCH_1_33v[93];
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bool(! (false))), (bool(bool(! (false)))) || false)))), bool(bool(_GLF_IDENTITY(false, true && (false))))))))))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   continue;
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 _GLF_IDENTITY(((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true), ! (! (((vec3(-0.8, 8.1, -81.80) == vec3(-0.5, 9.3, -6.1)) || true))));
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                  }
                 vec4 _GLF_SWITCH_1_34v, _GLF_SWITCH_1_35v[50], _GLF_SWITCH_1_36v;
                 if(_GLF_DEAD(false))
                  break;
                 isnan(_GLF_SWITCH_1_36v);
                 float _GLF_SWITCH_1_37v, _GLF_SWITCH_1_38v, _GLF_SWITCH_1_39v;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  return;
                 virtual_gid;
                 if(_GLF_DEAD(false))
                  break;
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-46.85)), float(injectionSwitch.y), bool(true))))), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0))), 1.0, 0.0), vec3(abs(0.0), 1.0, 0.0)), dot(vec3(_GLF_IDENTITY(dot(vec3(0.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0)), dot(vec3(0.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - determinant(mat3(0.0, 1.0, 1.0, 0.0, sin(0.0), 1.0, 0.0, 0.0, 0.0)))), vec3(1.0, 0.0, 0.0))), 1.0, 0.0), vec3(abs(0.0), 1.0, 0.0)))))).y), clamp(float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), float(injectionSwitch.y), float(injectionSwitch.y)))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                continue;
              }
             mat3x2 _GLF_SWITCH_1_40v, _GLF_SWITCH_1_41v[1], _GLF_SWITCH_1_42v;
             {
              if(_GLF_DEAD(false))
               return;
              if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (_GLF_IDENTITY(! (false), (! (false)) && true))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec2(false, true)))) || false))))))
               break;
              if(_GLF_DEAD(false))
               return;
              for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 ^ 0)); _injected_loop_counter ++)
               {
                if((mat4(-597.747, 8.9, -5.1, 7767.2062, _GLF_IDENTITY(-3230.4366, clamp(-3230.4366, -3230.4366, -3230.4366)), 9.4, -7527.2501, 7.1, 450.205, 6298.9828, _GLF_IDENTITY(-671.286, max(_GLF_IDENTITY(-671.286, (true ? -671.286 : _GLF_FUZZED(856.864))), _GLF_IDENTITY(-671.286, float(mat4x3(-671.286, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), 103.146, 3.3, -83.80, -794.874, 2217.0476) != mat4(788.304, -46.64, -2041.8600, -8.6, -581.057, 0.6, 9025.5622, 5154.6243, -62.03, 1202.4860, -688.126, -62.41, -9.5, 5387.7031, -8.6, 9284.5271)))
                 {
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(false))
                     continue;
                    for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) | (int(7))))) * (_injected_loop_counter)) != 1), _GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), false || (_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true)))) && true), false), bvec2(bvec3(bvec2(_GLF_IDENTITY(! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))), (! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)))) && true), false), false)))))); _injected_loop_counter ++)
                     {
                      if(_GLF_DEAD(false))
                       {
                        if(_GLF_DEAD(false))
                         return;
                        continue;
                       }
                      do
                       {
                        if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), min(vec2(injectionSwitch[0], injectionSwitch[1]), vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
                         {
                          if(_GLF_WRAPPED_IF_TRUE(true))
                           {
                            return;
                           }
                          else
                           {
                           }
                         }
                       }
                      while(_GLF_WRAPPED_LOOP(false));
                      do
                       {
                        return;
                       }
                      while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, true)))));
                     }
                   }
                  vec3 _GLF_SWITCH_1_43v[18];
                  if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                     {
                      all(greaterThanEqual(uvec4(_GLF_IDENTITY(130794u, clamp(130794u, 130794u, 130794u)), 37937u, 98607u, 32003u), uvec4(155079u, _GLF_IDENTITY(147467u, max(_GLF_IDENTITY(147467u, (_GLF_IDENTITY(147467u, min(147467u, 147467u))) / (1u | 0u)), 147467u)), 14377u, 18188u)));
                      if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), (bool(bvec3(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9.5)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))) && true))))
                       {
                        if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                         {
                          do
                           {
                            return;
                           }
                          while(_GLF_WRAPPED_LOOP(false));
                         }
                       }
                      else
                       {
                       }
                     }
                   }
                  else
                   {
                   }
                  if(_GLF_DEAD(false))
                   {
                    if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                     return;
                    return;
                   }
                 }
               }
              if(_GLF_DEAD(false))
               return;
              bvec4 _GLF_SWITCH_1_44v, _GLF_SWITCH_1_45v[92], _GLF_SWITCH_1_46v;
              mat4x3 _GLF_SWITCH_1_47v, _GLF_SWITCH_1_48v, _GLF_SWITCH_1_49v;
              do
               {
                if(_GLF_DEAD(false))
                 return;
               }
              while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              bool _GLF_SWITCH_1_50v;
              do
               {
                do
                 {
                  if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                   {
                   }
                  else
                   {
                    if(_GLF_DEAD(false))
                     return;
                   }
                  if(_GLF_DEAD(false))
                   {
                    for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                     {
                      for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7)))) / 1)), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7)))) / 1))) + (0 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(7), int(7))), (true ? ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7)))) / 1)), (1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (false ? _GLF_FUZZED(_injected_loop_counter) : int(7)))) / 1))) + (0 << _GLF_IDENTITY(int(5), int(5))))) >> _GLF_IDENTITY(int(7), int(7))) : _GLF_FUZZED(_injected_loop_counter)))); _injected_loop_counter ++)
                       {
                        return;
                       }
                     }
                   }
                 }
                while(_GLF_WRAPPED_LOOP(false));
               }
              while(_GLF_WRAPPED_LOOP(false));
              for(mat2 _GLF_SWITCH_1_51v; true; bvec3(false, false, true))
               {
                mat2x4 _GLF_SWITCH_1_52v[81];
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 return;
                float _GLF_SWITCH_1_53v;
               }
              vec3 _GLF_SWITCH_1_54v, _GLF_SWITCH_1_55v, _GLF_SWITCH_1_56v;
              if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
               {
                if(_GLF_DEAD(false))
                 return;
               }
              else
               {
               }
              if(_GLF_WRAPPED_IF_TRUE(true))
               {
                sinh(injectionSwitch);
                if(_GLF_DEAD(false))
                 {
                  if(_GLF_DEAD(false))
                   break;
                  if(_GLF_WRAPPED_IF_FALSE(false))
                   {
                   }
                  else
                   {
                    return;
                    if(_GLF_DEAD(false))
                     {
                      for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter))), int(0))))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                       {
                        return;
                       }
                     }
                   }
                 }
               }
              else
               {
                if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                 break;
               }
             }
            }
          }
         default:
         if(_GLF_DEAD(false))
          {
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)), bvec2(bvec3(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), true)), false))))))));
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           _GLF_IDENTITY(1, clamp(1, 1, 1));
          }
         else
          {
          }
        }
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
