#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-626.237))))) > injectionSwitch.y)))), ! (! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y)) && true)) && true))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) || false))))))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false, false)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true))), true), true, true))))))), false || (bool(bvec4(false, true, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true)), bool(bvec3(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true)), bool(bvec4(bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))), false, false)))), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (true)), true, true, true))), true), true, true)))))))))), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bool(true))) && (false))), (! (_GLF_IDENTITY(false, true && (false)))) || false)))))) || (false))))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   barrier();
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, true && (false)) || ((injectionSwitch.x > injectionSwitch.y))))) && true))))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), (! (false)) || false))))))) && true), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, ! (! ((false) && true))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec4(1, 0, 1, 0)))) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               barrier();
              }
            }
          }
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, 0 ^ (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false)))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (false) && true)))
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, sqrt(1.0), 0.0, cos(length(0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)))))))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, 1.0, cos(0.0), 0.0, abs(0.0)))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, cos(0.0), log(1.0), 1.0, 0.0, 1.0, 1.0)), 0.0))))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED((-363.228 + 7677.8008))), float(injectionSwitch.y), bool(true)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), int(int((1 & 1)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, true && (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))) != 0))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y = subgroup_size;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
     else
      {
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (1 & _GLF_IDENTITY(1, int(ivec2(1, 1)))), bool(bvec3(_injected_loop_counter != (1 & _GLF_IDENTITY(1, int(ivec2(1, 1)))), false, false)))); _injected_loop_counter ++)
    {
     for(int _injected_loop_counter = (21443 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) >> 0), 1, 1)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false, false, true))))) && true)))
            barrier();
           barrier();
          }
        }
      }
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.x = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, ~ (~ (0))), 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, 1.0 * (injectionSwitch.y))))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(false, false, true))), bvec3(bvec3(bvec3(bvec3(bvec3(false, false, true)))))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 0u, 1u), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true))))))))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) / round(length(normalize(vec2(1.0, 1.0)))))))), bvec3(bvec3(bvec3(false, false, _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - tan(0.0)), injectionSwitch.y)))))))))))) ? _GLF_FUZZED(uvec4(145228u, 134360u, 78897u, 14650u)) : uvec4(workgroup_base, 1u, 0u, 1u))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(uint(uvec4((workgroup_base), 1u, 0u, 1u)), uint(uvec2(uint(uvec4((workgroup_base), 1u, 0u, 1u)), 1u))))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) - 0u)) / 1u, max((_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) - 0u)) / 1u, (_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) - 0u)) / 1u))), 0u | ((workgroup_base) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(uint(uvec4((workgroup_base), 1u, 0u, 1u)), uint(uvec2(uint(uvec4((workgroup_base), 1u, 0u, 1u)), 1u))))) >> 0u), 0u ^ (_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(uint(uvec4((workgroup_base), 1u, 0u, 1u)), uint(uvec2(uint(uvec4((workgroup_base), 1u, 0u, 1u)), 1u))))) >> 0u))), _GLF_IDENTITY((_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), _GLF_IDENTITY((workgroup_base), 0u + (_GLF_IDENTITY((workgroup_base), uint(uint((workgroup_base))))))))) - 0u)) / 1u, max((_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) - 0u)) / 1u, (_GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(min((workgroup_base), (workgroup_base)), 0u | (min((workgroup_base), (workgroup_base)))))) - 0u)) / 1u)))))), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))) + (0u >> _GLF_IDENTITY(uint(5u), uint(5u)))), 1u), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x)), 1u * (uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))))))) | 0u), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))), 0u + ((true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u)), (_GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)), ~ (~ ((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)))))) >> uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(cos(vec2(0.0, 0.0)) * (injectionSwitch), vec2(vec3(cos(vec2(0.0, 0.0)) * (injectionSwitch), 0.0)))).x)))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) | 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, (true) && true) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x)), 1u * (uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))))))) | 0u), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))), 0u + ((true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u)), (_GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)), ~ (~ ((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)))))) >> uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(cos(vec2(0.0, 0.0)) * (injectionSwitch), vec2(vec3(cos(vec2(0.0, 0.0)) * (injectionSwitch), 0.0)))).x)))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) | 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, (true) && true) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - _GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x)), (_GLF_IDENTITY(uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x)), 1u * (uint(_GLF_ZERO(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-178.030))), injectionSwitch.x))))) << uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, ~ (~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) - 0u))))))) | 0u), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, _GLF_IDENTITY((true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))), 0u + ((true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u)), (_GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)), ~ (~ ((uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)))))) >> uvec3(0u, 0u, 0u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u)))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(1u, 1u, 1u) * (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) - uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(cos(vec2(0.0, 0.0)) * (injectionSwitch), vec2(vec3(cos(vec2(0.0, 0.0)) * (injectionSwitch), 0.0)))).x)))), (_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base))) | 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, (true) && true) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), _GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, uint(uvec2(1u, 0u))), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)))))) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u))))))) | uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))), ~ _GLF_IDENTITY((~ ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), ((~ (1u))) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u))), 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))), (workgroup_base))) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(workgroup_size, subgroup_id), (atomicAdd(workgroup_size, subgroup_id)) + 0u)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, (0u) / 1u))), (_GLF_IDENTITY(0u, (0u) | (0u))) << _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), min((0u), (0u)))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))) << 0u))), 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : 1u))))), (_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, 1u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), 0u)), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 1u * (0u)), 0u))) << _GLF_IDENTITY((0u | 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0u | 0u), clamp((0u | 0u), (0u | 0u), (0u | 0u))) : _GLF_FUZZED(num_workgroup)))) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY((workgroup_base), ((_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))), workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))))) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), 0u ^ (_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * _GLF_IDENTITY(((workgroup_base)), max(((workgroup_base)), ((workgroup_base))))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u), ((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u))))))), ~ (~ (_GLF_IDENTITY((~ ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), ((~ (1u))) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u))), 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))), (workgroup_base))) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(workgroup_size, subgroup_id), (atomicAdd(workgroup_size, subgroup_id)) + 0u)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, (0u) / 1u))), (_GLF_IDENTITY(0u, (0u) | (0u))) << _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), min((0u), (0u)))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))) << 0u))), 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : 1u))))), (_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, 1u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), 0u)), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 1u * (0u)), 0u))) << _GLF_IDENTITY((0u | 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0u | 0u), clamp((0u | 0u), (0u | 0u), (0u | 0u))) : _GLF_FUZZED(num_workgroup)))) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY((workgroup_base), ((_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))), workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))))) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), 0u ^ (_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * _GLF_IDENTITY(((workgroup_base)), max(((workgroup_base)), ((workgroup_base))))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u), ((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u))))))), uvec3(0u, 0u, 0u) ^ (_GLF_IDENTITY((~ ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), ((~ (1u))) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u))), 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))), (workgroup_base))) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(workgroup_size, subgroup_id), (atomicAdd(workgroup_size, subgroup_id)) + 0u)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, (0u) / 1u))), (_GLF_IDENTITY(0u, (0u) | (0u))) << _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), min((0u), (0u)))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))) << 0u))), 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : 1u))))), (_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, 1u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), 0u)), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 1u * (0u)), 0u))) << _GLF_IDENTITY((0u | 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0u | 0u), clamp((0u | 0u), (0u | 0u), (0u | 0u))) : _GLF_FUZZED(num_workgroup)))) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY((workgroup_base), ((_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))), workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))))) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), 0u ^ (_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * _GLF_IDENTITY(((workgroup_base)), max(((workgroup_base)), ((workgroup_base))))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u), ((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u))))))), (false ? _GLF_FUZZED(uvec3(150107u, 184853u, 191749u)) : (~ ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(true, ! (! (true)))) && true)))) ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), uvec3(_GLF_IDENTITY(1u, ~ _GLF_IDENTITY((~ (1u)), ((~ (1u))) | _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) | 0u))), 1u, 1u) * _GLF_IDENTITY((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), max(_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base))), (workgroup_base))) | (workgroup_base)), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(_GLF_IDENTITY(atomicAdd(workgroup_size, subgroup_id), (atomicAdd(workgroup_size, subgroup_id)) + 0u)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), _GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, (0u) << 0u), 0u, _GLF_IDENTITY(0u, (0u) / 1u))), (_GLF_IDENTITY(0u, (0u) | (0u))) << _GLF_IDENTITY(0u, ~ (~ _GLF_IDENTITY((0u), min((0u), (0u)))))) | (_GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id))) << 0u))), 1u), (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(num_workgroup) : 1u))))), (_GLF_IDENTITY(workgroup_base, uint(uvec3(_GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)), 0u, 1u)))) >> 0u), _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | _GLF_IDENTITY((workgroup_base), ((workgroup_base)) | ((workgroup_base))), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(6u), uint(6u)))))), 0u)), (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, 1u * (0u)), 0u))) << _GLF_IDENTITY((0u | 0u), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((0u | 0u), clamp((0u | 0u), (0u | 0u), (0u | 0u))) : _GLF_FUZZED(num_workgroup)))) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u))) | uvec3(0u, 0u, 0u))), ((_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) << 0u))), _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u), (_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((workgroup_base), 0u | (_GLF_IDENTITY((workgroup_base), ((_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, (workgroup_base) / 1u))), workgroup_base, _GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)))))) | ((workgroup_base))))) | (workgroup_base)), _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u), (true ? 0u : _GLF_IDENTITY(_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)), 0u ^ (_GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))))), 1u), _GLF_IDENTITY((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u)), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * _GLF_IDENTITY(((workgroup_base)), max(((workgroup_base)), ((workgroup_base))))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u), ((uvec3(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), max(_GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base), _GLF_IDENTITY((workgroup_base), 1u * ((workgroup_base))) | (workgroup_base)))), _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, max(0u, 0u)) : _GLF_FUZZED(atomicAdd(workgroup_size, subgroup_id)))), 1u)) / uvec3(1u, 1u, 1u)) ^ uvec3(0u, 0u, 0u)))) | uvec3(0u, 0u, 0u)))) >> _GLF_IDENTITY(uvec3(0u, 0u, 0u), (uvec3(0u, 0u, 0u)) << uvec3(0u, 0u, 0u)))))))))))))))))), (uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | _GLF_IDENTITY((workgroup_base), (_GLF_IDENTITY((workgroup_base), min((workgroup_base), (workgroup_base)))) * 1u)), 0u, 1u), ~ (_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, clamp(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)), workgroup_base, workgroup_base)), max(_GLF_IDENTITY(workgroup_base, (workgroup_base) + 0u), workgroup_base))) ^ 0u), (_GLF_IDENTITY(workgroup_base, (true ? workgroup_base : _GLF_FUZZED(subgroup_size)))) | (workgroup_base)), 0u, 1u)), _GLF_IDENTITY(min(_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, uint(uvec3(0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u), 0u))), 1u)), (~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), 0u, 1u))) / uvec3(1u, 1u, 1u)), ~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), 0u, 1u))), uvec3(0u, 0u, 0u) | (min(_GLF_IDENTITY(~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), _GLF_IDENTITY(0u, uint(uvec3(0u, _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) ^ 0u), 0u))), 1u)), (~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), 0u, 1u))) / uvec3(1u, 1u, 1u)), ~ (uvec3(_GLF_IDENTITY(workgroup_base, (workgroup_base) | (workgroup_base)), 0u, 1u)))))))))) + 0u));
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec4(bvec3(false, true, true), true)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, ~ (~ (0)))))) | (0)), min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 | 1)); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false)))))), _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))) && true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base, ~ (~ (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base), (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)) | _GLF_IDENTITY((~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)), (_GLF_IDENTITY((~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)), ((~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base))) | ((~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base))))) << uvec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base), (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)) | (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base))), _GLF_IDENTITY(_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base), (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)) | (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base))), (_GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base), (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)) | (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)))) | uvec4(0u, 0u, 0u, 0u)), _GLF_IDENTITY(~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base), (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)) | (~ (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)))))))))).y + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.z = virtual_gid;
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y, (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y, max(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y, _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y, max(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y, GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.w + subgroup_id * GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y))))) >> 0u) + (_GLF_IDENTITY((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y, ((subgroup_local_id + 1) % GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y) ^ 0u));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(buf[_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base, (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base) - uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base, (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base) - uvec4(0u, 0u, 0u, 0u))) / uvec4(1u, 1u, 1u, 1u))) | (GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base)).z], uint(1), 4, 64, 4);
 for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, clamp(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter, _injected_loop_counter))) << 0) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (_GLF_IDENTITY(0 ^ 0, int(ivec4(_GLF_IDENTITY(0 ^ 0, min(_GLF_IDENTITY(0 ^ 0, int(_GLF_IDENTITY(ivec3(0 ^ 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) | (0)), 0), (ivec3(0 ^ 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) | (0)), 0)) | (ivec3(0 ^ 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, int(int(0)))) | (0)), 0))))), 0 ^ 0)), 1, 1, 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), false || (bool(false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), ! (_GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true && ((false)), bool(_GLF_IDENTITY(bvec3(true && ((false)), _GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_IDENTITY(false, true && (false))))), false), bvec3(bvec4(bvec3(true && ((false)), _GLF_IDENTITY(false, bool(bvec3(false, true, false))), false), true)))))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2((_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && ((false))), true, true)), bool(bvec4(bool(bvec3(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) && true)), bool(bvec2((_GLF_IDENTITY(false, (false) && true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && ((false))), true, true)), true, true, true))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true && ((false)), true && (_GLF_IDENTITY(true && ((false)), bool(bvec2(true && ((false)), true)))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true && ((false)), true && (_GLF_IDENTITY(true && ((false)), bool(bvec2(true && ((false)), _GLF_IDENTITY(true, bool(bvec4(true, true, true, false))))))))))), true, true)), (bool(bvec3(! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))), true && ((false))), true, true))) || _GLF_IDENTITY(false, ! (! (false)))))), ! (! (! (! (_GLF_IDENTITY(bool(bvec3(! _GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((_GLF_IDENTITY(false, true && (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && ((false))), true, true)), (bool(bvec3(! _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY(true, false || (true)) && ((false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((false), bool(bvec2((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && _GLF_IDENTITY(_GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(((false)), _GLF_IDENTITY((((_GLF_IDENTITY(false, (false) || false)))), bool(_GLF_IDENTITY(bvec3((((false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, true && (false))), bvec3(bvec4(bvec3((((false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(_GLF_IDENTITY(((false)), (((false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(((false)), _GLF_IDENTITY((((_GLF_IDENTITY(false, (false) || false)))), bool(_GLF_IDENTITY(bvec3((((false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, true && (false))), bvec3(bvec4(bvec3((((false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, false, false))) || _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))))), true, true))) || false))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(subgroup_local_id + 1 < GLF_merged4_0_1_13_1_1_13_2_1_11_3_1_14num_workgroupsubgroup_sizevirtual_gidworkgroup_base.y)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))), (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4))))) | (_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), 0 | (int(4)))))))); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, false || (true)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             do
              {
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - abs(vec2(0.0, 0.0))).y))));
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(false, ! (! (false)))))))))))))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))
                  barrier();
                 barrier();
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * cos(_GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0))))), vec2(0.0, 0.0)))), max(_GLF_IDENTITY((injectionSwitch) * cos(_GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0))))), vec2(0.0, 0.0)))), ((injectionSwitch) * cos(_GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0))))), vec2(0.0, 0.0))))) * mat2(1.0)), (injectionSwitch) * cos(_GLF_IDENTITY(vec2(0.0, 0.0), max(_GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), mat2(1.0) * (vec2(0.0, 0.0))))), vec2(0.0, 0.0))))))).y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), (! _GLF_IDENTITY((_GLF_IDENTITY(false, true && (false))), ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ((false)) || false))))))) && true)) || false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, (true) && true) && (false)), ! (! (_GLF_IDENTITY(false, true && (false))))))))))))
                    {
                     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                      }
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat3(injectionSwitch.x, 1.0, 0.0, sin(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)), (true ? float(mat3(injectionSwitch.x, 1.0, 0.0, sin(0.0), 1.0, 0.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0)) : _GLF_FUZZED(-84.65)))) > injectionSwitch.y))))))
                    barrier();
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(0.4), _GLF_IDENTITY((injectionSwitch)[1], 0.0 + ((injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(587.711)), bvec2(true, false))).x > injectionSwitch.y))))));
              }
            }
          }
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, clamp(2, 2, 2))), 4, 64, 4);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), ! (_GLF_IDENTITY(! ((! (false))), ! (! (_GLF_IDENTITY(! ((! (false))), true && (! ((! (false)))))))))))))
        barrier();
       subgroupAll(false);
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))));
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))), 0 | (_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)))))))) != 0, (_injected_loop_counter != 0) && true)); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, max(2, 2))), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(sinh(vec2(2.1, 20.70))) : injectionSwitch)).y)) && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true))))))), bool(bvec4(! (_GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec2((false), true), bvec2(bvec2(bvec2((false), true))))))), true, true, true))))))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), clamp(int(8), int(8), int(8))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(7), (int(7)) >> 0)), (~ (int(7))) << 0))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
      {
       subgroupAll(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), true && (! (_GLF_IDENTITY(true, (true) && true)))), true && (! (_GLF_IDENTITY(true, (true) && true)))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(true, (true) && true)), _GLF_IDENTITY(false, (false) && true) || (_GLF_IDENTITY(! (_GLF_IDENTITY(true, _GLF_IDENTITY((true), ! (_GLF_IDENTITY(! ((true)), ! (! (! ((true))))))) && true)), true && (! (_GLF_IDENTITY(true, (true) && true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bool(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, false || (true)))))))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) ^ 0)])))).y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, true), bvec3(bvec4(bvec3(_GLF_DEAD(false), true, true), false))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
