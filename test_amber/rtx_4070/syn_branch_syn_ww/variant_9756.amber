#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
        barrier();
      }
    }
   else
    {
    }
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 1.0))).y))));
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | _GLF_IDENTITY((_injected_loop_counter), clamp((_injected_loop_counter), (_injected_loop_counter), _GLF_IDENTITY((_injected_loop_counter), clamp(_GLF_IDENTITY((_injected_loop_counter), min((_injected_loop_counter), (_injected_loop_counter))), _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) | ((_injected_loop_counter))), (_injected_loop_counter)))))) > (0 | 0)); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) - 0))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), ! (! (bool(! (_GLF_DEAD(false))))))))))), (true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(_GLF_IDENTITY(bool(! (_GLF_DEAD(false))), ! (! (bool(! (_GLF_DEAD(false)))))))))))) || false)))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(int(6), int(6)), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (6) >> 0), 6, 6))), (int(_GLF_IDENTITY(6, clamp(_GLF_IDENTITY(6, (6) >> 0), 6, 6)))) - int(_GLF_ZERO(0.0, injectionSwitch.x))), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) / 1), 0 | (int(6))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), (0 << _GLF_IDENTITY(int(6), int(6))), 0, 1), min(ivec4(int(6), (0 << _GLF_IDENTITY(int(6), int(6))), 0, 1), ivec4(int(6), (0 << _GLF_IDENTITY(int(6), int(6))), 0, 1))))), _GLF_IDENTITY(int(6), (int(6)) * 1))), 0 | _GLF_IDENTITY((_GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)))), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), min(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(int(6), int(6)), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), ((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) / 1) | 1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), ~ (~ (int(_GLF_IDENTITY(6, min(6, 6))))))), (_GLF_IDENTITY((1 | 1), (_GLF_IDENTITY((1 | 1), ((1 | 1)) - 0)) - 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))))))), clamp((_GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)))), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), min(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(int(6), int(6)), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), ((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) / 1) | 1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), ~ (~ (int(_GLF_IDENTITY(6, min(6, 6))))))), (_GLF_IDENTITY((1 | 1), (_GLF_IDENTITY((1 | 1), ((1 | 1)) - 0)) - 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))))))), (_GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)))), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), min(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(int(6), int(6)), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), ((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) / 1) | 1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), ~ (~ (int(_GLF_IDENTITY(6, min(6, 6))))))), (_GLF_IDENTITY((1 | 1), (_GLF_IDENTITY((1 | 1), ((1 | 1)) - 0)) - 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))))))), (_GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, min(_GLF_IDENTITY(6, (6) | (6)), 6))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))), int(6)))), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), max(int(6), int(6))), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), min(((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, 1 | 1))) << _GLF_IDENTITY(int(6), int(6)), ((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), min(_GLF_IDENTITY(int(6), min(int(6), int(6))), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1))), ((_GLF_IDENTITY((_GLF_IDENTITY(1 | 1, clamp(1 | 1, 1 | 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_injected_loop_counter) : 1))) / 1) | 1))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, min(6, 6))), ~ (~ (int(_GLF_IDENTITY(6, min(6, 6))))))), (_GLF_IDENTITY((1 | 1), (_GLF_IDENTITY((1 | 1), ((1 | 1)) - 0)) - 0) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(6)), ~ (~ (_GLF_IDENTITY(int(6), int(6)))))) | ((1 | 1) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) + (0 << _GLF_IDENTITY(int(7), int(7))))), min(int(6), _GLF_IDENTITY(int(6), 0 | (int(6))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)), (true ? _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)) : _GLF_FUZZED(_injected_loop_counter))) : _GLF_FUZZED(_injected_loop_counter))))))))))), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY((1 | 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(6), 0 | (_GLF_IDENTITY(int(6), int(ivec2(int(_GLF_IDENTITY(6, (6) ^ 0)), 1))))), int(6)), ((1 | _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec2(1, 1)), (_GLF_IDENTITY(int(ivec2(1, 1)), (int(ivec2(1, 1))) | (int(ivec2(1, 1))))) | (_GLF_IDENTITY(int(ivec2(1, 1)), (1 ^ 0) * (_GLF_IDENTITY(int(ivec2(1, 1)), max(int(ivec2(1, 1)), int(ivec2(1, 1)))))))))) << _GLF_IDENTITY(int(6), int(6))) | ((1 | 1) << _GLF_IDENTITY(int(6), int(6))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) * 1)))), (_GLF_WRAPPED_LOOP(_injected_loop_counter < ((_GLF_IDENTITY(_GLF_IDENTITY((1 | 1) << _GLF_IDENTITY(int(6), int(6)), (_GLF_IDENTITY((1 | 1) << _GLF_IDENTITY(int(6), int(6)), clamp((1 | 1) << _GLF_IDENTITY(int(6), int(6)), (1 | 1) << _GLF_IDENTITY(int(6), int(6)), (1 | 1) << _GLF_IDENTITY(int(6), int(6))))) | ((1 | 1) << _GLF_IDENTITY(int(6), int(6)))), ((1 | 1) << _GLF_IDENTITY(int(_GLF_IDENTITY(6, (6) << 0)), int(6))) | (_GLF_IDENTITY((1 | 1) << _GLF_IDENTITY(int(6), int(6)), (false ? _GLF_FUZZED((91469 / 89023)) : (1 | 1) << _GLF_IDENTITY(int(6), int(6))))))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, (_GLF_IDENTITY(6, (6) ^ 0)) | 0)), (int(_GLF_IDENTITY(6, ~ (~ (6))))) * 1))))) && true)))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (! (true)))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, min(_GLF_IDENTITY(1, max(1, 1)), 1)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_injected_loop_counter > 0)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
          barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true))), false, false, false)), bool(bool(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, false)), false || (bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false, _GLF_IDENTITY(false, false || (false)))))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, (false ? _GLF_FUZZED(0.8) : _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1))))), false, false, true)), (bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1)), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 1))))), false, false, true))) && true)); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                        {
                         barrier();
                        }
                      }
                     else
                      {
                      }
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), true, true)))))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               for(int _injected_loop_counter = (1 & (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 | 0)); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
            }
          }
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true && _GLF_IDENTITY((bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false))))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, false || (true)), _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), true && ((injectionSwitch.x < injectionSwitch.y))))))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, true))))), (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec4(bvec2(true, false), true, true)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = (((_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), clamp((1 << _GLF_IDENTITY(int(7), int(7))), _GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))), ((1 << _GLF_IDENTITY(int(7), int(7)))) << 0), (1 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, 1 * (7))), _GLF_IDENTITY(int(7), ~ (~ (int(7)))))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, log(1.0), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, exp(0.0))), max(float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, log(1.0), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, exp(0.0))), float(mat4(injectionSwitch.x, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, 1.0, log(1.0), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, abs(1.0), 1.0, exp(0.0)))))) > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))) || false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 ^ 1, ~ (~ (_GLF_IDENTITY(0 ^ 1, int(int(0 ^ 1)))))))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = (-22342 & 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter < 1), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter < 1)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (! (true)))))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((false), ! (! ((false)))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((! (! (! (false)))), true && ((! (! (! (false)))))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((! (! (! (false)))), true && ((! (! (! (false)))))))), _GLF_IDENTITY(bool(bvec2(! (_GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((! (! (! (false)))), true && ((! (! (! (false)))))))), false)), ! (! (bool(bvec2(! (_GLF_IDENTITY(! (! (false)), ! _GLF_IDENTITY((! (! (! (false)))), true && ((! (! (! (false)))))))), false)))))))))), _GLF_IDENTITY(! (! (! (false))), false || (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (false)), bool(bool(! (! (false)))))), ! (! (! _GLF_IDENTITY((! (! (false))), bool(bvec4((! (! (false))), false, true, true)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 & 1) ^ 0, clamp((1 & 1) ^ 0, _GLF_IDENTITY((1 & 1) ^ 0, int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1 & 1) ^ 0)), (1 & 1) ^ 0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, false))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), false || (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, abs(cos(0.0))))).y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, abs(cos(0.0))))).y), true && (_GLF_IDENTITY(bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, abs(cos(0.0))))).y), ! (! (bool(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 0.0, abs(cos(0.0))))).y))))))))))))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))));
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))), (true ? (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1]))) : _GLF_FUZZED(injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-400.255), _GLF_FUZZED(-0.2)), bvec2(false, false))) : _GLF_FUZZED(unpackUnorm2x16(subgroup_id)))), mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-706.430)), vec2(_GLF_FUZZED(940.762), _GLF_IDENTITY((injectionSwitch)[1], max(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], round(length(normalize(1.0))), 0.0))), mix(float(_GLF_IDENTITY((injectionSwitch)[1], float(vec3((injectionSwitch)[1], round(length(normalize(1.0))), 0.0)))), float(_GLF_FUZZED(3.0)), bool(false))), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(765.817)), float(_GLF_IDENTITY((injectionSwitch)[1], min(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, 0 | (1))], max((injectionSwitch)[1], (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 0.0)))) / vec2(1.0, 1.0)))[1])), (injectionSwitch)[1]))), bool(true)))))), bvec2(false, true)))) / _GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (_GLF_IDENTITY(vec2(1.0, 1.0), mat2(1.0) * (vec2(1.0, 1.0)))))).x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))) - vec2(_GLF_IDENTITY(0.0, float(mat3x2(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(75.49, (75.49) - 0.0))), float(0.0), bool(true))), 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((true ? 1.0 : _GLF_FUZZED(658.079)), sin(0.0) + ((true ? 1.0 : _GLF_FUZZED(658.079))))), 0.0, 0.0))), 0.0)).y), _GLF_IDENTITY(((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).x > injectionSwitch.y)), false || ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) + 0.0))).y))))))) && true, (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))) && true, bool(bvec2((_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), float(_GLF_FUZZED(-7.2)), bool(false))), _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.8) : _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (injectionSwitch.y) / cos(0.0)))), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), false || (! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), true && _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), false, true, true))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! _GLF_IDENTITY((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (_GLF_IDENTITY((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true))))))))))))))) || false)), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), clamp(float(float(injectionSwitch.x)), float(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(-4.4)), float(float(injectionSwitch.x)), bool(true)))), float(float(injectionSwitch.x))))) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(60.12, -98.71)), max(_GLF_FUZZED(vec2(60.12, -98.71)), _GLF_IDENTITY(_GLF_FUZZED(vec2(60.12, -98.71)), clamp(_GLF_FUZZED(vec2(60.12, -98.71)), _GLF_FUZZED(vec2(60.12, -98.71)), _GLF_FUZZED(vec2(60.12, -98.71)))))))).y))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true, true))))), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), float(_GLF_FUZZED(-7.2)), bool(false))), _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.8) : _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (injectionSwitch.y) / cos(0.0)))), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), false || (! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), true && _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), false, true, true))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! _GLF_IDENTITY((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (_GLF_IDENTITY((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true))))))))))))))) || false)), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), clamp(float(float(injectionSwitch.x)), float(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(-4.4)), float(float(injectionSwitch.x)), bool(true)))), float(float(injectionSwitch.x))))) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(60.12, -98.71)), max(_GLF_FUZZED(vec2(60.12, -98.71)), _GLF_IDENTITY(_GLF_FUZZED(vec2(60.12, -98.71)), clamp(_GLF_FUZZED(vec2(60.12, -98.71)), _GLF_FUZZED(vec2(60.12, -98.71)), _GLF_FUZZED(vec2(60.12, -98.71)))))))).y))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true, true))))), true && ((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))), float(_GLF_FUZZED(-7.2)), bool(false))), _GLF_IDENTITY(mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(false)), min(mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(false)), mix(float(injectionSwitch.y), float(_GLF_FUZZED(95.95)), bool(_GLF_IDENTITY(false, ! (! (false)))))))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-0.8) : _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))), (injectionSwitch.y) / cos(0.0)))), ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! (bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)) || _GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) || false)))) && true)), _GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / exp(0.0))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(bool(bvec3(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))))), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec4(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), false || (! (! (! (injectionSwitch.x > injectionSwitch.y))))))))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), bool(bool(_GLF_IDENTITY(bool(bvec3(! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) && true)), true && _GLF_IDENTITY((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4(bool((_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))), false, true, true))))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)), ! (! _GLF_IDENTITY((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true && (_GLF_IDENTITY((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), bool(bvec3((bool(bvec3(! (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), bool(bvec3(_GLF_IDENTITY(bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))))))))), ! (! (bool((_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), ! (! (! (injectionSwitch.x > injectionSwitch.y)))), true && (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false)), ! (! (bool(_GLF_IDENTITY(! (! (! (injectionSwitch.x > injectionSwitch.y))), (! (! (! (injectionSwitch.x > injectionSwitch.y)))) || false))))))))))))))), false, true)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), true, true))))))))))))))) || false)), bool(bvec4((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bool((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))) && true)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(float(injectionSwitch.x)), clamp(float(float(injectionSwitch.x)), float(_GLF_IDENTITY(float(injectionSwitch.x), mix(float(_GLF_FUZZED(-4.4)), float(float(injectionSwitch.x)), bool(true)))), float(float(injectionSwitch.x))))) > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), true && (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(60.12, -98.71)), max(_GLF_FUZZED(vec2(60.12, -98.71)), _GLF_IDENTITY(_GLF_FUZZED(vec2(60.12, -98.71)), clamp(_GLF_FUZZED(vec2(60.12, -98.71)), _GLF_FUZZED(vec2(60.12, -98.71)), _GLF_FUZZED(vec2(60.12, -98.71)))))))).y))), ! (! (! (injectionSwitch.x > injectionSwitch.y)))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))), true, true)))))))) && true)) && true, true)))) || false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, max(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(log2(injectionSwitch)))).x > injectionSwitch.y)))))))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   for(int _injected_loop_counter = ((_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(int(int(_GLF_ONE(1.0, injectionSwitch.y))))) << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_injected_loop_counter, int(_GLF_IDENTITY(int(_injected_loop_counter), (int(_injected_loop_counter)) | (int(_injected_loop_counter))))))) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID.x, min(gl_WorkGroupID.x, gl_WorkGroupID.x));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0), sqrt(1.0) * _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)), float(mat4((_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : min(injectionSwitch, injectionSwitch)))), injectionSwitch)).y, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), mix(float(_GLF_FUZZED(-115.709)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y)) : _GLF_FUZZED(-4960.4757))))))), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), injectionSwitch)).y))) + 0.0)), _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 1.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(0.0, 1.0)), dot(vec2(1.0, 0.0), vec2(0.0, 1.0))), 1.0, 0.0, 1.0, 0.0, determinant(mat3(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 0.0, cos(0.0), 0.0, 0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, 0.0, 1.0, abs(0.0), 0.0, 0.0))))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ! (! ((false))))) || false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), ! (! (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(! (! (! (false))), true && (_GLF_IDENTITY(! (! (! (false))), (! (! (! (false)))) && true)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))), ! (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false)))))), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false)))))), false)))) || false)) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (bool((! (false)))))))), (_GLF_IDENTITY(! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (bool((! (false)))))))), (! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bool((false)), ! (! (bool((false)))))))), bool(_GLF_IDENTITY(bool((! (false))), ! _GLF_IDENTITY((! (bool((! (false))))), ! (! ((! (bool((! (false)))))))))))) || false)) || false))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, 1.0, log(determinant(mat4(_GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0, 1.0))), 1.0))) > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))) && true)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) && true)), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) && true)), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! (false), ! (! (! (false)))))) && true))) && true)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(! (! (! (false))), bool(_GLF_IDENTITY(bvec2(! (! (! (false))), false), bvec2(bvec3(bvec2(! (! (! (false))), false), false)))))))), _GLF_IDENTITY(false, (false) && true), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))), ! (! (! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false)))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true)))))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false))))), true && (! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))), ! (! (! (false))))))))))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (bool((! (false)))))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true, ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (bool((! (false)))))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (false), ! (! (! (false))))), (! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), ! (! ((! (false))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true))))))) && true) && true)), (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, log(determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true)), min(mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true)), mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))))), 0.0, 1.0))), 1.0))) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))))) && true)), bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true))))), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2360.6176)))), float(_GLF_FUZZED(0.1)), bool(false))), 0.0, 1.0, 0.0)))) * (injectionSwitch.y)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (bool((! (false)))))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, log(determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0, 1.0))), 1.0))) > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))) && true, bool(bvec3((_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (_GLF_IDENTITY(! (! (false)), (! (! (false))) || false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y)))), true && (_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true)))), ! (! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! _GLF_IDENTITY((! (false)), bool(_GLF_IDENTITY(bool((! (false))), ! (! (bool((! (false)))))))))))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), false, true))))))) && true), (_GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 1.0, log(determinant(mat4(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(8.4)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0, 1.0))), 1.0))) > _GLF_IDENTITY(injectionSwitch.y, sqrt(1.0) * (injectionSwitch.y))))))) && true, false, true))))), false, false)))))) || false))) && true))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)))))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size)))), 0u + (~ ((_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size)))))), ~ (~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size)))), 0u + (~ ((_GLF_IDENTITY(workgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_size))))))))))) | _GLF_IDENTITY((workgroup_size), _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((workgroup_size), (false ? _GLF_FUZZED(subgroup_local_id) : (workgroup_size))))), (_GLF_IDENTITY(uint(uint((workgroup_size))), (false ? _GLF_FUZZED(uint(3.4)) : _GLF_IDENTITY(uint(uint((workgroup_size))), (true ? uint(uint((workgroup_size))) : _GLF_FUZZED(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(subgroup_size) : subgroup_id)))))))) | _GLF_IDENTITY((uint(uint((workgroup_size)))), 0u | (_GLF_IDENTITY((uint(uint((workgroup_size)))), ((uint(uint((workgroup_size))))) | ((uint(uint((workgroup_size))))))))))) * workgroup_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))), true, true, true))))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? (0 ^ 1) : _GLF_FUZZED((-83760 / 18378)))), max(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) + 0), (0 ^ 1))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(_GLF_IDENTITY(7, 0 ^ (7)), (false ? _GLF_FUZZED(-17710) : 7)))), ((_GLF_IDENTITY((0 ^ 1), max((0 ^ 1), _GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? (0 ^ 1) : _GLF_FUZZED((-83760 / 18378)))), max(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) + 0), (0 ^ 1))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-17710) : 7)))), 0 | (_GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-17710) : 7))))))) | ((_GLF_IDENTITY((0 ^ 1), max(_GLF_IDENTITY((0 ^ 1), ((0 ^ 1)) + 0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0 ^ 1), (true ? _GLF_IDENTITY((0 ^ 1), int(ivec3((0 ^ 1), 1, (0 | 0)))) : _GLF_FUZZED(95140))), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)) ? (0 ^ 1) : _GLF_FUZZED((-83760 / 18378)))), max(_GLF_IDENTITY((_GLF_IDENTITY(0 ^ 1, clamp(0 ^ 1, 0 ^ 1, 0 ^ 1))), ((0 ^ 1)) + 0), (0 ^ 1))))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (false ? _GLF_FUZZED(-17710) : 7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x)), (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0))).x))) | 0)); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             barrier();
            }
           while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))) && true)), ! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), ! (! (! (_GLF_WRAPPED_LOOP(false))))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (true && (false)) || false)))) && true)))))), (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, true, false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) && true))), _GLF_IDENTITY(bool(bvec3((! (_GLF_IDENTITY(false, (false) && true))), true, false)), (_GLF_IDENTITY(bool(bvec3((! (_GLF_IDENTITY(false, (false) && true))), true, false)), (bool(bvec3((! (_GLF_IDENTITY(false, (false) && true))), true, false))) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[0], _GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1], mix(_GLF_IDENTITY(float(_GLF_FUZZED(-2.4)), max(float(_GLF_FUZZED(-2.4)), float(_GLF_FUZZED(-2.4)))), float((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), bool(true)))), vec2(_GLF_FUZZED(-4.0), _GLF_FUZZED(-117.198)), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bool((false) || false)))), false)))).y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY(_GLF_FUZZED((-2.2 - 986.997)), (false ? _GLF_FUZZED(-1365.2254) : _GLF_IDENTITY(_GLF_FUZZED((-2.2 - 986.997)), (_GLF_FUZZED((-2.2 - 986.997))) - 0.0))), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(vec4(-3107.2629, 5.0, 5.7, 52.40).r)), bvec2(true, false))), _GLF_IDENTITY(max(injectionSwitch, injectionSwitch), clamp(max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch), max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), mix(vec2(_GLF_IDENTITY((clamp(injectionSwitch, injectionSwitch, injectionSwitch)), mix(vec2(_GLF_IDENTITY(((clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[0], tan(0.0) + (_GLF_IDENTITY(((clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) : _GLF_FUZZED(vec2(5.5, 9.7)))), injectionSwitch)))[0], mix(float(((clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))) : _GLF_FUZZED(vec2(5.5, 9.7)))), injectionSwitch)))[0]), float(_GLF_FUZZED((true ? -3.3 : 2814.5861))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ((clamp(injectionSwitch, injectionSwitch, injectionSwitch)))[1]), vec2(_GLF_FUZZED(-5.2), _GLF_FUZZED(-214.099)), bvec2(false, false)))[0], _GLF_IDENTITY((_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (clamp(injectionSwitch, injectionSwitch, injectionSwitch)) + vec2(0.0, 0.0)))[1], mix(float(_GLF_FUZZED(-2.4)), float((clamp(injectionSwitch, injectionSwitch, injectionSwitch))[1]), bool(true)))), vec2(_GLF_FUZZED(_GLF_IDENTITY(-4.0, float(vec3(-4.0, abs(determinant(mat3(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0)), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0))), _GLF_IDENTITY(sqrt(1.0), float(_GLF_IDENTITY(mat4(sqrt(1.0), round(length(normalize(1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, sqrt(abs(0.0)), 0.0, 0.0, 1.0, 1.0), (mat4(sqrt(1.0), round(length(normalize(1.0))), 1.0, 1.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, sqrt(abs(0.0)), 0.0, 0.0, 1.0, 1.0)) / mat4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))))))), _GLF_FUZZED(-117.198)), bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! ((false) || false), _GLF_IDENTITY((! ((false) || false)) || false, bool(bvec3(_GLF_IDENTITY((! ((false) || false)) || false, ((! ((false) || false)) || false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))), false)))).y))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], float(mat3x4(injectionSwitch[1], 1.0, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 1.0, sin(0.0), 0.0, exp(0.0), 1.0, 0.0, 1.0, 0.0))))).y))))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7))))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
          {
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false)), ! (_GLF_IDENTITY(! (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false))), bool(bvec2(! (bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), true, false))), false)))))))
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2.0), _GLF_FUZZED(-11.25)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec3(true, false, true)))))).x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec4(false, true, false, false))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || false), true, true)))))
        barrier();
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     for(int _injected_loop_counter = (0 & 21781); _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(1 ^ 0, (1 ^ 0) / 1))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec3(_GLF_WRAPPED_IF_TRUE(true), false, false))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), false || (_GLF_WRAPPED_LOOP(false))));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 uint subgroup_base = subgroup_id * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (workgroup_base + subgroup_base + subgroup_local_id) / ((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), (_GLF_IDENTITY(uint(1u), uint(1u))) >> 0u)));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), 0u | (((subgroup_local_id + 1) % subgroup_size))))) - 0u)), (_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u)), ~ (~ ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(13984)))) - 0))))) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(subgroup_id) : subgroup_local_id + 1))) % subgroup_size))) - 0u)))))) | ((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u, clamp((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u, _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u, min((_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u, (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u)), (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | ((subgroup_local_id + 1) % subgroup_size))) - 0u)))))), max(_GLF_IDENTITY(workgroup_base + subgroup_base + ((_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id))) + 0u) + 1) % subgroup_size), clamp(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(workgroup_base + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))) % subgroup_size), min(workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size))))), workgroup_base + subgroup_base + ((subgroup_local_id + 1) % subgroup_size)));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(float(28431))), float(injectionSwitch.y), bool(true)))))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, (false) || false))))), bool(bool(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) | (1))), 4, 64, _GLF_IDENTITY(4, (4) | (4)));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec4(false || (_GLF_IDENTITY(false, false || (false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec4(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), true && (false || (_GLF_IDENTITY(false, false || (false))))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec4(false || (_GLF_IDENTITY(false, false || (false))), true, _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, ! (! (true)))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY(false || (_GLF_IDENTITY(false, false || (false))), bool(bvec4(false || (_GLF_IDENTITY(false, false || (false))), true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true))))))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false || (false)))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false || (false))), bool(bvec2(false || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), false || (false))), true)))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), exp(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), cos(0.0)))), (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(_GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (true ? _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, injectionSwitch), (false ? _GLF_FUZZED(vec2(-0.7, -97.64)) : clamp(injectionSwitch, injectionSwitch, injectionSwitch))) : _GLF_FUZZED(injectionSwitch))), clamp(injectionSwitch, injectionSwitch, injectionSwitch), clamp(injectionSwitch, injectionSwitch, injectionSwitch))))) + abs(vec2(0.0, 0.0))).y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0)) << _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) << 0))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)));
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0)), mat2(1.0) * (vec2(vec3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), 0.0))))))).y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, tan(0.0) + (injectionSwitch.y))))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))), bool(bool(! ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec2(_GLF_WRAPPED_IF_FALSE(false), true))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY((subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))), (_GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))), 1 * ((_GLF_IDENTITY(2, max(2, 2)))))) | (_GLF_IDENTITY((_GLF_IDENTITY(2, max(2, 2))), ((_GLF_IDENTITY(2, max(2, 2)))) | 0))), clamp(_GLF_IDENTITY(_GLF_IDENTITY((2), ~ (~ ((2)))), max(_GLF_IDENTITY((2), ~ (~ ((2)))), _GLF_IDENTITY((2), ~ (~ ((2)))))), (2), (2))) | _GLF_IDENTITY(_GLF_IDENTITY((2), min((2), _GLF_IDENTITY((2), ((2)) >> 0))), clamp((2), (2), (2))))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(_GLF_IDENTITY(max(subgroup_local_id, subgroup_local_id), min(max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) ^ 0u), subgroup_local_id), max(subgroup_local_id, subgroup_local_id))), max(subgroup_local_id, subgroup_local_id)))) % _GLF_IDENTITY(_GLF_IDENTITY(2, (2) | (2)), 0 + (_GLF_IDENTITY(2, (_GLF_IDENTITY(2, (2) << _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) / 1))) | (2))))))) == 0)
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3857.1332)), _GLF_IDENTITY(float(injectionSwitch.x), max(_GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(log2(-9.7)) : float(injectionSwitch.x))), _GLF_IDENTITY(float(injectionSwitch.x), (false ? _GLF_FUZZED(-140.200) : float(injectionSwitch.x))))), _GLF_IDENTITY(bool(true), (bool(true)) || _GLF_IDENTITY(false, (false) && true)))) > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
    }
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
