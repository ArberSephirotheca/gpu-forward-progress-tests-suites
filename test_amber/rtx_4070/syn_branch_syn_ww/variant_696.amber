#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, (false ? _GLF_FUZZED(uvec3(123395u, 18230u, 36458u)) : gl_WorkGroupSize)).x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, uvec3(uvec3(gl_WorkGroupID))).x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), sqrt(1.0), sqrt(1.0)), (mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), sqrt(1.0), sqrt(1.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), (vec2(_GLF_IDENTITY(mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), sqrt(1.0), sqrt(1.0)), (mat3x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(0.0), sqrt(1.0), sqrt(1.0))) - mat3x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) - vec2(0.0, 0.0))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y, max(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y, _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)))).y))) && true))))) && true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))
    return;
   return;
  }
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (_GLF_IDENTITY(workgroup_size * workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_size * workgroup_id), min(~ (workgroup_size * workgroup_id), ~ (workgroup_size * workgroup_id)))))) ^ 0u), (_GLF_IDENTITY(workgroup_size * workgroup_id, 0u + (workgroup_size * workgroup_id))) ^ 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)), (bool(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(workgroup_base, (0u | 0u) + (workgroup_base)))), (uint(uint(_GLF_IDENTITY(workgroup_base, (0u | 0u) + (workgroup_base))))) | (uint(uint(_GLF_IDENTITY(workgroup_base, (0u | 0u) + (workgroup_base))))))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u) + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) - 0u)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | (_GLF_IDENTITY(workgroup_base, max(workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(-50524) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) / 1), _GLF_IDENTITY(0, max(0, 0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))), min(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-19330) : 1))))), (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))) ^ 0), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))))))), _GLF_IDENTITY(1, (1) >> 0) * (_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, _GLF_IDENTITY((false ? _GLF_FUZZED(-16989) : 1), ((false ? _GLF_FUZZED(-16989) : 1)) ^ 0))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | _GLF_IDENTITY((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), ~ (~ ((_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x))))))))), 0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))) | (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-16989) : 1))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))) | (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))))))) * 1)) >> 0))))), min((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(-50524) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), 0 | (_GLF_IDENTITY(1, (1) >> 0)))) / 1), _GLF_IDENTITY(0, max(0, 0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))), min(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))) >> 0)) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))) ^ 0), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, 1 * (-16989))) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))))))), _GLF_IDENTITY(1, (1) >> 0) * _GLF_IDENTITY((_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (-16989) * int(_GLF_ONE(1.0, injectionSwitch.y)))) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (_GLF_IDENTITY(-16989, (-16989) + 0)) << 0)) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0)))))), _GLF_IDENTITY(int(_GLF_IDENTITY(int((_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (-16989) * int(_GLF_ONE(1.0, injectionSwitch.y)))) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (_GLF_IDENTITY(-16989, (-16989) + 0)) << 0)) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0))))))), int(int(int((_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (-16989) * int(_GLF_ONE(1.0, injectionSwitch.y)))) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (_GLF_IDENTITY(-16989, (-16989) + 0)) << 0)) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0))))))))))), int(ivec2(int(_GLF_IDENTITY(int((_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (-16989) * int(_GLF_ONE(1.0, injectionSwitch.y)))) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (_GLF_IDENTITY(-16989, (-16989) + 0)) << 0)) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0))))))), int(int(int((_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (-16989) * int(_GLF_ONE(1.0, injectionSwitch.y)))) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (_GLF_IDENTITY(-16989, (-16989) + 0)) << 0)) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))), 0))))))))))), 0)))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | _GLF_IDENTITY((0), ~ (~ ((0))))) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) + 0))), (false ? _GLF_FUZZED(-16989) : 1))), (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))) | (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))))))) >> 0))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))) ? _GLF_FUZZED(-50524) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) >> 0)), 0 | ((_GLF_IDENTITY(1, (1) >> 0)))) / 1), _GLF_IDENTITY(0, max(0, 0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))), min(_GLF_IDENTITY(1, _GLF_IDENTITY(0 | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)), (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))) - 0))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, (false ? _GLF_FUZZED(-25048) : false ? _GLF_FUZZED(-16989) : 1))) / 1))))) ^ 0), min(_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))))), ~ (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))))))), _GLF_IDENTITY(1, (1) >> 0) * (_GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, clamp(_GLF_IDENTITY(false ? _GLF_FUZZED(-16989) : 1, max(false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1)), false ? _GLF_FUZZED(-16989) : 1, false ? _GLF_FUZZED(-16989) : 1))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), int(ivec2(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)), max((_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)), (_GLF_IDENTITY(1, (1) * 1)) << int(_GLF_ZERO(0.0, injectionSwitch.x)))))))), 0)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1, max(1, 1)), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)) | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), max(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1))), _GLF_IDENTITY(0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(_GLF_IDENTITY(-16989, (true ? -16989 : _GLF_FUZZED((- -55321))))) : 1))), (0 | (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(-16989) : 1)))) | (0 | (_GLF_IDENTITY(1, (false ? _GLF_IDENTITY(_GLF_FUZZED(-16989), (true ? _GLF_FUZZED(-16989) : _GLF_FUZZED(17674))) : 1)))))))) >> 0))))))))) % subgroup_size);
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_IDENTITY(_GLF_SWITCH(0), (_GLF_SWITCH(0)) >> 0))
    {
     case 5:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, true)))) || false))))))
      return;
     mat2(_GLF_IDENTITY(853.949, float(_GLF_IDENTITY(vec2(853.949, 1.0), clamp(vec2(853.949, 1.0), vec2(853.949, 1.0), vec2(853.949, 1.0))))), 6557.5873, -4177.2480, 9739.8389);
     if(_GLF_DEAD(false))
      return;
     case 0:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true)))))))))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      return;
     case 34:
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) / vec2(1.0, 1.0)).y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     case 49:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (false || (false))))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     int i = 0;
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     case 74:
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), float(mat3(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), 0.0 + (_GLF_ONE(1.0, injectionSwitch.y))), 1.0, 1.0, determinant(mat4(tan(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0)), 0.0, sin(sqrt(0.0)), 1.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y))), mix(vec2(_GLF_FUZZED(2326.4244), _GLF_FUZZED(-8.1)), vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), max(_GLF_IDENTITY((injectionSwitch), mix(vec2(_GLF_FUZZED(231.657), _GLF_FUZZED(59.17)), vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), bvec2(true, true))), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))[0], _GLF_FUZZED(-9684.2601)), vec2(_GLF_FUZZED(-81.28), (injectionSwitch)[1]), bvec2(false, true))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-2464.6092)))) + 0.0) > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true, false, true)))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     injectionSwitch;
     case 42:
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     while(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       uvec2 _GLF_SWITCH_0_0v;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec4(bool(bvec2(false, true)), true, true, true))))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              return;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           break;
          }
         if(_GLF_DEAD(false))
          break;
         break;
         if(_GLF_DEAD(false))
          continue;
        }
       vec4(4.1, -73.33, 7.4, _GLF_IDENTITY(-647.181, max(-647.181, -647.181)));
       uvec2 _GLF_SWITCH_0_1v, _GLF_SWITCH_0_2v;
       if(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), bool(bool(true && (true))))))), false, false, false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         mat3(_GLF_IDENTITY(_GLF_IDENTITY(-48.37, min(-48.37, -48.37)), max(_GLF_IDENTITY(-48.37, _GLF_IDENTITY(min(-48.37, -48.37), float(mat2x3(min(-48.37, -48.37), 0.0, 1.0, determinant(mat4(_GLF_IDENTITY(determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0 + (determinant(mat2(1.0, 0.0, 1.0, 1.0)))), 1.0, _GLF_IDENTITY(1.0, tan(0.0) + (1.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, determinant(mat2(0.0, 1.0, 0.0, 0.0)), 1.0)), 0.0, round(length(normalize(cos(vec4(0.0, 0.0, 0.0, 0.0))))))))), _GLF_IDENTITY(_GLF_IDENTITY(-48.37, min(_GLF_IDENTITY(-48.37, (-48.37) - 0.0), -48.37)), 0.0 + (_GLF_IDENTITY(-48.37, min(-48.37, -48.37)))))), -25.14, 7.5, -30.93, 8.5, 770.498, _GLF_IDENTITY(-81.74, (_GLF_IDENTITY(-81.74, float(mat3x2(-81.74, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat2(_GLF_IDENTITY(1.0, float(mat2x4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 1.0)))) - _GLF_ZERO(0.0, injectionSwitch.x)), 1.0, 1.0, 0.0, 0.0)))) - 0.0), -4.6, -9.7);
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         ;
         vec4 _GLF_SWITCH_0_3v;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, 1.0))) - tan(vec4(0.0, 0.0, 0.0, 0.0)))))))), (_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, 1.0))) - tan(vec4(0.0, 0.0, 0.0, 0.0))))))))) / 1.0)), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, 1.0))) - tan(vec4(0.0, 0.0, 0.0, 0.0)))))))), (_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, round(length(_GLF_IDENTITY(normalize(vec4(1.0, 1.0, 1.0, 1.0)), (normalize(vec4(1.0, 1.0, 1.0, 1.0))) - tan(vec4(0.0, 0.0, 0.0, 0.0))))))))) / 1.0))) && true))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(false, true && (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && _GLF_IDENTITY(true, bool(bvec4(true, true, true, false)))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), 1.0, abs(round(length(normalize(1.0)))), 0.0, 1.0, 1.0, 1.0, 0.0))).y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-50.22) : injectionSwitch.x))) / sqrt(1.0)) > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), vec2(mat3(_GLF_IDENTITY(injectionSwitch, vec2(vec3(injectionSwitch, 1.0))), 1.0, abs(round(length(normalize(1.0)))), 0.0, 1.0, 1.0, 1.0, 0.0))).y))) && _GLF_IDENTITY(true, (true) && true)))), true, true))))), ! _GLF_IDENTITY((! (bool(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec3(bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, true))))))), ! (! ((! (bool(bool(_GLF_IDENTITY(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec3(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, true)), (bool(bvec3(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, true))) && true), (_GLF_IDENTITY(bool(bvec3(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))))))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, true)), (bool(bvec3(bool(bvec2(((injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false))), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), true, true))) && true)) && true)))))))))))) || false))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y))))
              return;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           return;
          }
         if(true)
          {
           (true ? mat4x3(-3.4, -28.22, 369.214, -0.2, _GLF_IDENTITY(-7.2, (_GLF_IDENTITY(-7.2, 1.0 * (-7.2))) - 0.0), 5150.0335, -128.140, 3246.1799, -5.7, _GLF_IDENTITY(742.636, (_GLF_IDENTITY(742.636, max(742.636, 742.636))) - 0.0), 6.1, _GLF_IDENTITY(-746.403, 0.0 + (-746.403))) : (-9014.0292 - mat4x3(9907.5800, 5698.6177, -9314.4557, -2.2, _GLF_IDENTITY(-50.11, _GLF_IDENTITY(_GLF_IDENTITY(max(-50.11, -50.11), (max(-50.11, -50.11)) * _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-30.63)), bool(false)))), _GLF_IDENTITY(_GLF_IDENTITY(float(float(max(-50.11, -50.11))), float(float(float(float(max(-50.11, -50.11)))))), _GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(float(float(max(-50.11, -50.11))), float(float(float(float(max(-50.11, -50.11)))))), 0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(float(mat4x2(_GLF_IDENTITY(float(float(max(-50.11, -50.11))), float(float(float(float(max(-50.11, -50.11)))))), 0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 1.0)), float(mat4(float(mat4x2(_GLF_IDENTITY(float(float(max(-50.11, -50.11))), float(float(float(float(max(-50.11, -50.11)))))), 0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 1.0)), log(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, 0.0, 1.0, 0.0, 0.0, 0.0))), float(mat4x2(_GLF_IDENTITY(float(float(_GLF_IDENTITY(max(-50.11, -50.11), mix(float(max(-50.11, -50.11)), float(_GLF_FUZZED(float(true))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), float(float(float(float(max(-50.11, -50.11)))))), 0.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 1.0))))))), -2381.1061, _GLF_IDENTITY(9.5, (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(34.87)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(vec2(-4196.0696, _GLF_IDENTITY(-0.3, max(-0.3, -0.3))).s) : _GLF_IDENTITY(9.5, max(9.5, 9.5)))), 952.578, -3.0, _GLF_IDENTITY(8753.7064, (8753.7064) - abs(sqrt(0.0))), _GLF_IDENTITY(-174.684, clamp(-174.684, _GLF_IDENTITY(-174.684, mix(float(-174.684), float(_GLF_FUZZED(-1.5)), bool(false))), -174.684)), -3.4)));
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))))
            {
             if(_GLF_DEAD(false))
              return;
             continue;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           mat4x3(_GLF_IDENTITY(1.9, mix(float(1.9), float(_GLF_FUZZED(-9.9)), bool(false))), _GLF_IDENTITY(-2.8, (-2.8) - tan(0.0)), 6.2, _GLF_IDENTITY(4135.9068, mix(float(_GLF_FUZZED(-9.5)), float(_GLF_IDENTITY(4135.9068, mix(float(_GLF_IDENTITY(4135.9068, (false ? _GLF_IDENTITY(_GLF_FUZZED(-9.7), (_GLF_FUZZED(-9.7)) - 0.0) : 4135.9068))), float(_GLF_FUZZED((-4.5 * 46.95))), bool(false)))), bool(true))), -823.896, _GLF_IDENTITY(13.53, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(13.53, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(vec4(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))), 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), 0.0), (mat3x4(13.53, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0)), 0.0)) * mat3(1.0))), (true ? float(_GLF_IDENTITY(mat3x4(13.53, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, sin(0.0), 0.0, 0.0, 0.0)), 0.0), (mat3x4(_GLF_IDENTITY(13.53, (13.53) / 1.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-4735.3905)), bool(false))))), determinant(mat3(0.0, 0.0, 1.0, 0.0, 0.0, sin(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(58.46)), bool(false)))), 0.0, 0.0, 0.0)), 0.0)) * mat3(1.0))) : _GLF_FUZZED(-14.47)))), 7.6, -519.029, -0.1, _GLF_IDENTITY(-863.533, (true ? -863.533 : _GLF_FUZZED(516.178))), -0.7, _GLF_IDENTITY(8.9, clamp(8.9, 8.9, 8.9)));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           continue;
          }
         break;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, true)))))
      return;
     default:
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false), true && (_GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) || false))))))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))))))))), (bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))))) && true))) || false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, true), bvec3(_GLF_IDENTITY(bvec3(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, true)), bvec3(bvec3(bvec3(bvec3(! (_GLF_IDENTITY(false, false || (false))), true, true)))))))))))))
        return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     1;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((! (false)))))) && true)))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   switch(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(38542))), _GLF_IDENTITY(clamp(_GLF_SWITCH(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(2.5)), vec2(_GLF_FUZZED(1.5), (injectionSwitch)[1]), bvec2(false, true))).x))), _GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x)))), min(clamp(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_SWITCH(int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, float(mat2(0.0, 1.0, 1.0, 0.0))), 0.0)), injectionSwitch.x))), _GLF_SWITCH(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(86.85)), float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))), bool(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(_GLF_IDENTITY(bool(bool(bool(true))), (bool(bool(bool(true)))) && true)))))))))), clamp(_GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_SWITCH(int(_GLF_ZERO(0.0, injectionSwitch.x))))))))
    {
     case 38:
     mat3(_GLF_IDENTITY(mat2(4.8, -57.60, 32.56, 6.4), mat2(mat4(mat2(4.8, -57.60, 32.56, 6.4)))));
     if(_GLF_DEAD(false))
      return;
     case 37:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), (_GLF_IDENTITY(bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true)), true && (bool(bvec4(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], min(injectionSwitch[1], injectionSwitch[1])))).y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true))))) || false)) && true))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y) || false)), false || (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) ? _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) : _GLF_FUZZED(-0.7))), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y) || false))))))))))
      return;
     atomicMin(subgroup_id, atomicMax(subgroup_local_id, num_workgroup));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     case 0:
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 1.0, 0.0, 1.0, tan(0.0), 1.0, 0.0, 1.0, sqrt(0.0), log(1.0), 1.0, 0.0)))))))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-7.1)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(4121.0293)), float(injectionSwitch.x), bool(true)))), bool(true))) > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       return;
      }
     case 73:
     case 32:
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, false, true))), true, false, false)), bool(bvec4(_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, false, true))), true, false, false)), ! (! (bool(bvec4(_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, false, true))), true, false, false))))), false, true, false)))))))))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 16:
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))))
      return;
     case 77:
     case 31:
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           return;
          }
         return;
        }
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))), (_GLF_DEAD(false)) && true))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), ! (! (! (false || (_GLF_IDENTITY(false, (false) || false)))))))))))))), bool(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), _GLF_IDENTITY(true, (true) && true) && _GLF_IDENTITY((false || (false)), bool(bvec2(_GLF_IDENTITY((false || (false)), true && (_GLF_IDENTITY((false || (false)), ((false || (false))) && true))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true && _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) && true), _GLF_IDENTITY(true, ! (! (true))) && (false || (false)))))), ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) && true), _GLF_IDENTITY(true, ! (! (true))) && (false || (false))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), ! (! _GLF_IDENTITY((! (false || (_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY(bool(bool((! (false || (_GLF_IDENTITY(false, (false) || false)))))), true && (bool(bool((! (false || (_GLF_IDENTITY(false, (false) || false))))))))))))))))))), bool(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) && true), _GLF_IDENTITY(true, ! (! (true))) && (false || (false))))))))))))))), bool(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (false)), ! (! (! (false || (_GLF_IDENTITY(false, (false) || false)))))))))))))), bool(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) && true), _GLF_IDENTITY(true, ! (! (true))) && (false || (false))))))))))))))), (! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, false || (false))), bool(_GLF_IDENTITY(bool(! _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(false, true && (false)))), ! (! (! (false || (_GLF_IDENTITY(false, (false) || false))))))))))))), true && ((_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), ! (_GLF_IDENTITY(! (false || (_GLF_IDENTITY(false, true && (false)))), ! (! (! (false || (_GLF_IDENTITY(false, (false) || false)))))))))))))))), bool(bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), true && (false || (false))))), true && (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || _GLF_IDENTITY((false), ((false)) && true), _GLF_IDENTITY(true, ! (! (true))) && (false || (false)))))))))))))))) && true), false)))))), (false) && true)))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     case 20:
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, _GLF_IDENTITY(! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))), true, false, true)), (bool(bvec4(! (_GLF_IDENTITY(! (true), bool(bvec2(! (true), true)))), true, false, true))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        return;
      }
     case 54:
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((false))))) || false)), false || (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))), true && (bool(false)))), true, false)), (bool(bvec3(_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))), true && (bool(bool(bool(_GLF_IDENTITY(bool(false), true && (bool(false)))))))))))), true, false))) || false))), (false) || false))))) && true))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)))), float(injectionSwitch.x), bool(true)), min(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), (false ? _GLF_FUZZED(0.5) : mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)))), mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.8, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)), 1.0, 1.0, 0.0), mat2(mat4x2(mat2(_GLF_IDENTITY(-4.8, min(-4.8, _GLF_IDENTITY(-4.8, float(mat3x2(-4.8, 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0)))))))), float(injectionSwitch.x), bool(true)), (true ? mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)) : _GLF_FUZZED(trunc(-99.44))))))) > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), min(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.8, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)), 1.0, 1.0, 0.0), mat2(mat4x2(mat2(_GLF_IDENTITY(-4.8, min(-4.8, _GLF_IDENTITY(-4.8, float(mat3x2(-4.8, 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0)))))))), float(injectionSwitch.x), bool(true)), (true ? mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)) : _GLF_FUZZED(trunc(-99.44))))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-4.8)), _GLF_IDENTITY(float(injectionSwitch.x), min(float(injectionSwitch.x), float(injectionSwitch.x))), bool(true)), min(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.8, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)), 1.0, 1.0, 0.0), mat2(mat4x2(mat2(_GLF_IDENTITY(-4.8, min(-4.8, _GLF_IDENTITY(-4.8, float(mat3x2(-4.8, 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0)))))))), float(injectionSwitch.x), bool(true)), (_GLF_IDENTITY(true, (true) || false) ? mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)) : _GLF_FUZZED(trunc(-99.44))))))) > injectionSwitch.y))))), false, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), min(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.8, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)), 1.0, 1.0, 0.0), mat2(mat4x2(mat2(_GLF_IDENTITY(-4.8, min(-4.8, _GLF_IDENTITY(-4.8, float(mat3x2(-4.8, 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0)))))))), float(injectionSwitch.x), bool(true)), (true ? mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)) : _GLF_FUZZED(trunc(-99.44))))))) > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), min(mix(float(_GLF_FUZZED(-4.8)), float(injectionSwitch.x), bool(true)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(_GLF_IDENTITY(-4.8, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(-4.8, min(-4.8, -4.8)), 1.0, 1.0, 0.0), mat2(mat4x2(mat2(_GLF_IDENTITY(-4.8, min(-4.8, _GLF_IDENTITY(-4.8, float(mat3x2(-4.8, 0.0, 1.0, 1.0, 1.0, 1.0))))), 1.0, 1.0, 0.0)))))))), float(injectionSwitch.x), bool(true)), (true ? mix(float(_GLF_FUZZED(-4.8)), float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6550.0226) : injectionSwitch.x))))))), _GLF_IDENTITY(bool(true), false || (bool(true)))) : _GLF_FUZZED(trunc(-99.44))))))) > injectionSwitch.y))))), false, true), true)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) && true)))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     break;
     default:
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false)))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), (bool(bvec3(_GLF_DEAD(false), false, true))) || false))) || false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     1;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))))))), (_GLF_DEAD(false)) && true))), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), ! (! (! ((_GLF_DEAD(false)))))))), _GLF_IDENTITY((! (_GLF_DEAD(false))), bool(bool((_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(false))) || false))))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
