#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      return;
    }
   return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(_GLF_IDENTITY(gl_NumWorkGroups, _GLF_IDENTITY(uvec3(uvec3(gl_NumWorkGroups)), (uvec3(uvec3(gl_NumWorkGroups))) | uvec3(0u, 0u, 0u))).x, (true ? gl_NumWorkGroups.x : _GLF_FUZZED(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u)))))) + 0u), 0u | (uint(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), uint(uvec2((1u), 1u)))) | ((1u)))) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), min(uint(_GLF_IDENTITY(2u, (2u) ^ 0u)), uint(2u)))) / 1u), _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec2(uint(2u), 1u), (uvec2(uint(2u), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 1u)), (uint(uvec2(1u, 1u))) >> 0u)))) ^ _GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) + (uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u))))))))))), 0u ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) / ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), clamp(uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u), (uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), clamp(_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)), _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u)))))))) | (1u)) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)) << uvec2(0u, 0u)))))) + 0u), 0u | (uint(uvec2(_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_local_id) : 1u))) | _GLF_IDENTITY((1u), (_GLF_IDENTITY((1u), uint(uvec2((1u), 1u)))) | ((1u)))) << _GLF_IDENTITY(uint(2u), uint(2u)), 1u)))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), (_GLF_IDENTITY(uint(2u), min(uint(_GLF_IDENTITY(2u, (2u) ^ 0u)), uint(2u)))) / 1u), _GLF_IDENTITY(uint(2u), uint(_GLF_IDENTITY(uvec2(uint(2u), 1u), (uvec2(uint(2u), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, 1u)), (uint(uvec2(1u, 1u))) >> 0u)))) ^ _GLF_IDENTITY(uvec2(0u, 0u), uvec2(0u, 0u) + (uvec2(0u, _GLF_IDENTITY(0u, (0u) | (0u))))))))))))))));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))
  {
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0), (ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0)) << ivec2(0, 0)))), min(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0), (ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0)) << ivec2(0, 0)))), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0), (ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0)) << ivec2(0, 0)))), (_GLF_IDENTITY(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), int(_GLF_IDENTITY(ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0), (ivec2(int(_GLF_IDENTITY(5, min(5, _GLF_IDENTITY(5, int(_GLF_IDENTITY(ivec4(5, 0, 1, 1), ivec4(0, 0, 0, 0) ^ (ivec4(5, 0, 1, 1)))))))), 0)) << ivec2(0, 0))))) << 0))), int(5))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)))))))
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(((-943.862 * -701.629) + -97.57))), float(injectionSwitch.x), bool(true))) < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], gl_WorkGroupID[1], gl_WorkGroupID[2])).x, (gl_WorkGroupID.x) << 0u);
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_size * workgroup_id), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), (((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))))) << 0u))))) << (0u | 0u)) / 1u, ((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))) / _GLF_IDENTITY(1u, max(1u, 1u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_size * workgroup_id), (true ? (workgroup_size * workgroup_id) : _GLF_FUZZED(num_workgroup))), ~ (~ (~ (workgroup_size * workgroup_id))))) / 1u)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), (((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))))) << 0u))))) << (0u | 0u)) / 1u, ((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))) / _GLF_IDENTITY(1u, max(1u, 1u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_size * workgroup_id), (true ? (workgroup_size * workgroup_id) : _GLF_FUZZED(num_workgroup))), ~ (~ (~ (workgroup_size * workgroup_id))))) / 1u)), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), (((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))))) << 0u))))) << (0u | 0u)) / 1u, ((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))) / _GLF_IDENTITY(1u, max(1u, 1u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_size * workgroup_id), (true ? (workgroup_size * workgroup_id) : _GLF_FUZZED(num_workgroup))), ~ (~ (~ (workgroup_size * workgroup_id))))) / 1u)), (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), (((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))))) << 0u))))) << (0u | 0u)) / 1u, ((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))) / _GLF_IDENTITY(1u, max(1u, 1u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_size * workgroup_id), (true ? (workgroup_size * workgroup_id) : _GLF_FUZZED(num_workgroup))), ~ (~ (~ (workgroup_size * workgroup_id))))) / 1u))) | (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))), _GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), 1u * (_GLF_IDENTITY(((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id)))))), (((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))))) << 0u))))) << (0u | 0u)) / 1u, ((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))) / _GLF_IDENTITY(1u, max(1u, 1u))) | ((_GLF_IDENTITY(~ _GLF_IDENTITY((workgroup_size * workgroup_id), (true ? (workgroup_size * workgroup_id) : _GLF_FUZZED(num_workgroup))), ~ (~ (~ (workgroup_size * workgroup_id))))) / 1u)))))))) - 0u), 1u * (_GLF_IDENTITY(_GLF_IDENTITY((~ (_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) * 1u))), _GLF_IDENTITY(((~ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u)), ((workgroup_size * workgroup_id)) | 0u), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | 0u), ~ (~ (_GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id))), ((workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) | 0u))))) - 0u, 0u | ((_GLF_IDENTITY(_GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) | 0u), ~ (~ (_GLF_IDENTITY((workgroup_size * _GLF_IDENTITY(workgroup_id, 0u ^ (workgroup_id))), ((workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)))) | 0u))))) - 0u))))) ^ 0u, (((~ (workgroup_size * workgroup_id))) ^ 0u) | (_GLF_IDENTITY(((~ (workgroup_size * workgroup_id))) ^ 0u, ~ (~ (((~ (workgroup_size * workgroup_id))) ^ _GLF_IDENTITY(0u, (0u) * 1u))))))) / 1u, 1u * ((~ (workgroup_size * workgroup_id)) / 1u)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! _GLF_IDENTITY((! (_GLF_WRAPPED_IF_FALSE(false))), bool(bvec3((! (_GLF_WRAPPED_IF_FALSE(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
    return;
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (false ? _GLF_FUZZED((subgroup_id & workgroup_base)) : _GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (~ (subgroup_id * subgroup_size)) | 0u), (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), uint(uint(~ (subgroup_id * subgroup_size)))), min(_GLF_IDENTITY(~ (subgroup_id * subgroup_size), uint(uint(~ (subgroup_id * subgroup_size)))), _GLF_IDENTITY(~ (subgroup_id * subgroup_size), uint(uint(~ (subgroup_id * subgroup_size))))))) | (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (subgroup_id * subgroup_size)))))))), ((_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (false ? _GLF_FUZZED((subgroup_id & workgroup_base)) : _GLF_IDENTITY(~ (subgroup_id * subgroup_size), (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), uint(uint(~ (subgroup_id * subgroup_size))))) | (~ (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size))))))))) | ((_GLF_IDENTITY(~ (subgroup_id * subgroup_size), (false ? _GLF_FUZZED(_GLF_IDENTITY((subgroup_id & workgroup_base), (_GLF_IDENTITY((subgroup_id & workgroup_base), max(_GLF_IDENTITY((subgroup_id & workgroup_base), ~ (~ ((subgroup_id & workgroup_base)))), (subgroup_id & workgroup_base)))) | ((subgroup_id & workgroup_base)))) : _GLF_IDENTITY(~ (subgroup_id * subgroup_size), (_GLF_IDENTITY(~ (subgroup_id * subgroup_size), uint(uint(~ (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, subgroup_id * subgroup_size))))))) | (~ (subgroup_id * subgroup_size))))))))) + subgroup_local_id, ~ _GLF_IDENTITY((~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))) + subgroup_local_id)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(clamp(subgroup_size, subgroup_id, 189309u)) : (~ (workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, ~ (~ (subgroup_id * subgroup_size))) + subgroup_local_id)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)) * _GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u) + ((_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + 1) % subgroup_size);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) + 0.0)))) > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_TRUE(true)), (! (_GLF_WRAPPED_IF_TRUE(true))) && true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)) != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), int(ivec2(_GLF_IDENTITY(1, (1) | (1)), 1)))))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       if(_GLF_DEAD(false))
        break;
       atomicStore(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, 0u | (virtual_gid))))], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY(int(int(4)), ~ _GLF_IDENTITY((~ (int(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) : int(4)))))), ((~ (int(_GLF_IDENTITY(int(4), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicCompSwap(_injected_loop_counter, _injected_loop_counter, _injected_loop_counter)) : int(4))))))) * 1))), 64, 4);
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-757.688, 1.4))))) / vec2(1.0, 1.0)), injectionSwitch)).y))))
            continue;
           return;
          }
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
      break;
    }
   else
    {
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
    break;
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec2(false, false)))), ! (! ((_GLF_IDENTITY(false, bool(bvec2(false, false)))))))), ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, true)))))))
    return;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bool(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), true && (_GLF_WRAPPED_IF_TRUE(true))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, (4) | (4))))), 64, _GLF_IDENTITY(4, 0 | (4)));
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 ^ 1), (_GLF_IDENTITY(_GLF_IDENTITY((1 ^ 1), ~ (~ ((1 ^ 1)))), ((1 ^ 1)) | 0)) - (0 >> _GLF_IDENTITY(int(4), int(4))))); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0))))), ((1 << _GLF_IDENTITY(int(7), int(7)))) >> 0) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), ~ (~ (int(7)))) : _GLF_FUZZED(i))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - vec2(0.0, 0.0))).x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
                  return;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(log2(vec2(639.843, -182.948))) : injectionSwitch)).y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      continue;
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(_GLF_IDENTITY(int(1), (true ? int(1) : _GLF_FUZZED(_injected_loop_counter)))))))); _injected_loop_counter ++)
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               else
                {
                 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec3(int(5), 1, 0))), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(8, (false ? _GLF_FUZZED(_injected_loop_counter) : 8))), int(8))), max((0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), clamp((0 << _GLF_IDENTITY(int(8), int(_GLF_IDENTITY(8, (8) * 1)))), (0 << _GLF_IDENTITY(int(8), int(8))), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), ~ (~ (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(8), int(8))), (true ? (0 << _GLF_IDENTITY(int(8), int(8))) : _GLF_FUZZED(mix(79932, _injected_loop_counter, false)))))))))))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                continue;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  break;
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 return;
                }
              }
             return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), true && ((true)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && _GLF_IDENTITY(true, (true) && true))))
              return;
             if(_GLF_DEAD(false))
              return;
             do
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))))))), (_GLF_IDENTITY(~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))), 1 * (~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))))) | (~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y)))))), (~ (~ (int(_GLF_ONE(1.0, injectionSwitch.y))))) >> 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, bool(bool(false))), false), bvec2(bvec3(bvec2(false, false), false)))))))
                      continue;
                    }
                   else
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     continue;
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                  }
                 else
                  {
                  }
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)) : _GLF_FUZZED((- injectionSwitch)))).x > injectionSwitch.y)), (_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y))) && true)));
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, _GLF_IDENTITY(abs(0.0), (abs(0.0)) + 0.0)))), injectionSwitch.y))))))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
                return;
               if(_GLF_DEAD(false))
                return;
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          return;
         do
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              return;
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) + log(vec2(1.0, 1.0))).x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 ^ (4))) | (_GLF_IDENTITY(4, (true ? 4 : _GLF_FUZZED(88176))))), 64, 4);
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
