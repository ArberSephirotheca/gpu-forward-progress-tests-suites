#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-23.09 * 7720.2568))), float(injectionSwitch.x), bool(true))) > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, min(0, 0))); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, true && (_GLF_IDENTITY((_GLF_IDENTITY(true, ! (! (true)))) && true, bool(bvec2((_GLF_IDENTITY(true, ! (! (true)))) && true, true)))))))), (bool(bvec2(_GLF_DEAD(false), true))) || false)))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        barrier();
      }
     else
      {
      }
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false)))))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, (true ? _GLF_IDENTITY(workgroup_size, ~ (~ (workgroup_size))) : _GLF_FUZZED(77027u))) * workgroup_id;
 uint subgroup_base = subgroup_id * subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec2(! (injectionSwitch.x > injectionSwitch.y), false)))))), ((injectionSwitch.x > injectionSwitch.y)) && true), false))))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(7.4)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))), false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, 0u | (workgroup_base + subgroup_base)), (_GLF_IDENTITY(workgroup_base + subgroup_base, 0u | (workgroup_base + subgroup_base))) - 0u) + _GLF_IDENTITY(subgroup_local_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_local_id));
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) << _GLF_IDENTITY(0u, 0u | (0u)))), _GLF_IDENTITY((~ (workgroup_base + subgroup_base)) - 0u, uint(_GLF_IDENTITY(_GLF_IDENTITY(uint((_GLF_IDENTITY(~ (workgroup_base + subgroup_base), (~ (workgroup_base + subgroup_base)) << 0u)) - 0u), (uint((~ (workgroup_base + subgroup_base)) - 0u)) - 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(uint((_GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), (~ (workgroup_base + subgroup_base)) << 0u), ~ (workgroup_base + subgroup_base)))) - 0u), (uint((~ (_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)))) - 0u)) - 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uint((_GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), (~ (workgroup_base + subgroup_base)) << 0u), ~ (workgroup_base + subgroup_base)))) - 0u), (uint((~ (_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)))) - 0u)) - 0u), (_GLF_IDENTITY(uint((_GLF_IDENTITY(~ (workgroup_base + subgroup_base), clamp(~ (workgroup_base + subgroup_base), _GLF_IDENTITY(~ (workgroup_base + subgroup_base), (~ (workgroup_base + subgroup_base)) << 0u), ~ (workgroup_base + subgroup_base)))) - 0u), (uint((~ (_GLF_IDENTITY(workgroup_base + subgroup_base, clamp(workgroup_base + subgroup_base, workgroup_base + subgroup_base, workgroup_base + subgroup_base)))) - 0u)) - 0u)) - 0u)) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))) : _GLF_FUZZED(num_workgroup)))))), _GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) >> 0u), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, _GLF_IDENTITY(0u, min(0u, 0u)), 0u), ~ (~ (uvec4(0u, 0u, 0u, 0u))))) << uvec4(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, (0u) | 0u)) / uint(_GLF_ONE(1.0, injectionSwitch.y))), 0u, 0u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), 0u ^ (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), max(_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), ((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))))) | ((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))))), (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))))))))))) + _GLF_IDENTITY(subgroup_base, (true ? subgroup_base : _GLF_FUZZED(workgroup_size)))), (_GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (_GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED(num_workgroup)))) - 0u)) | (1u)), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(~ (1u), (~ (1u)) | (~ (1u))))), (1u) >> 0u), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, 0u), _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (uvec4(0u, 0u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(workgroup_base, 1u, 1u, 1u)))) >> uvec4(0u, 0u, 0u, 0u)))))))) + subgroup_base), _GLF_IDENTITY(((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) >> 0u, ((1u) >> 0u) / 1u)), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) * uvec4(1u, 1u, 1u, 1u))) | (uvec4(0u, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (uvec4(0u, 0u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) | (uvec4(workgroup_base, 1u, 1u, 1u)))))) | uvec4(0u, 0u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), 1u * (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), max((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))))))))))) + subgroup_base)), (((_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, (1u) | (1u)), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u))), min(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, _GLF_IDENTITY(1u, _GLF_IDENTITY((1u) >> 0u, ((1u) >> 0u) / 1u)), 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) >> _GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), clamp(uvec4(0u, 0u, 0u, 0u), uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, max(0u, 0u))), _GLF_IDENTITY(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), (uvec4(0u, 0u, 0u, 0u)) * uvec4(1u, 1u, 1u, 1u))) | (uvec4(0u, 0u, 0u, 0u))), (_GLF_IDENTITY(uvec4(0u, 0u, 0u, 0u), ~ (~ (uvec4(0u, 0u, 0u, 0u))))) << uvec4(0u, 0u, 0u, 0u)))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, 1u), (uvec4(workgroup_base, 1u, 1u, 1u)) | (uvec4(workgroup_base, 1u, 1u, 1u)))))) | uvec4(0u, 0u, 0u, 0u))) >> uvec4(0u, 0u, 0u, 0u))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), 1u * (_GLF_IDENTITY((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), max((uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))), (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))) | (uint(_GLF_IDENTITY(uvec4(workgroup_base, 1u, 1u, _GLF_IDENTITY(1u, (1u) << 0u)), (uvec4(workgroup_base, 1u, 1u, 1u)) >> uvec4(0u, 0u, 0u, 0u)))))))))))) + subgroup_base))) - 0u) - 0u)) << 0u), (false ? _GLF_FUZZED(subgroup_size) : ~ (_GLF_IDENTITY(workgroup_base + subgroup_base, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base + subgroup_base, _GLF_IDENTITY((true ? workgroup_base + subgroup_base : _GLF_FUZZED(workgroup_base)), min((true ? workgroup_base + subgroup_base : _GLF_FUZZED(workgroup_base)), (true ? workgroup_base + subgroup_base : _GLF_FUZZED(workgroup_base)))))), (~ (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_base, _GLF_IDENTITY(clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base, subgroup_base)), subgroup_base), max(clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base, subgroup_base)), subgroup_base), clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) ^ 0u), _GLF_IDENTITY(subgroup_base, clamp(_GLF_IDENTITY(subgroup_base, (subgroup_base) | (subgroup_base)), subgroup_base, subgroup_base)), subgroup_base)))), (true ? workgroup_base + subgroup_base : _GLF_FUZZED(workgroup_base))))) ^ 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(~ (workgroup_base + subgroup_base), uint(uvec2(~ (workgroup_base + subgroup_base), 0u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), uint(uvec2(~ (workgroup_base + subgroup_base), 0u)))), clamp(~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), uint(uvec2(~ (workgroup_base + subgroup_base), 0u)))), ~ (_GLF_IDENTITY(~ (workgroup_base + _GLF_IDENTITY(subgroup_base, (subgroup_base) * ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))))), uint(uvec2(~ (workgroup_base + subgroup_base), 0u)))), ~ (_GLF_IDENTITY(~ (workgroup_base + subgroup_base), uint(uvec2(~ (workgroup_base + subgroup_base), 0u)))))))))))) + ((subgroup_local_id + 1) % subgroup_size);
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bvec2(injectionSwitch.x < injectionSwitch.y, false)))))) || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)) > injectionSwitch.y)))) || false))
      barrier();
     atomicStore(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) / (1u ^ 0u))], uint(_GLF_IDENTITY(1, min(1, 1))), 4, 64, 4);
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   for(int _injected_loop_counter = (0 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-9132.8858)), vec2(_GLF_FUZZED(7604.1095), _GLF_IDENTITY((injectionSwitch)[1], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(-6.4)), bool(false)))), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id % 2, ~ _GLF_IDENTITY((~ (subgroup_local_id % 2)), max((~ (subgroup_local_id % 2)), (~ (subgroup_local_id % 2))))), (subgroup_local_id % 2) | (subgroup_local_id % 2))) == _GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) | 0))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 0.0, exp(0.0)))).x > injectionSwitch.y))))), true), bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / cos(0.0)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bool((injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool((injectionSwitch.x > injectionSwitch.y)), true, false))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), true)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)))))))), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)))))))), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))))), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bvec3(bvec3(bvec3(bvec3((_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-1.2), _GLF_FUZZED(6.3)), bvec2(_GLF_IDENTITY(false, (false) || false), false))).x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))))))))), true)))), _GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)))))))), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true), true, true, true)))))))), true))))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec3(bvec3(bvec3((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))))))))))))))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-2882.7614)), float(_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 1.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, cos(0.0), 1.0, 1.0, 0.0, sqrt(0.0), 0.0, 1.0, 1.0)), 1.0, sqrt(0.0)))).x), bool(true))), injectionSwitch.x)))) > injectionSwitch.y))))))))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bool(_GLF_WRAPPED_IF_FALSE(false)))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((next_virtual_gid), ((next_virtual_gid)) | (_GLF_IDENTITY((next_virtual_gid), (_GLF_IDENTITY((next_virtual_gid), uint(uvec2((next_virtual_gid), 0u)))) + 0u))) ^ _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) / 1u), 0u)))) | (next_virtual_gid))], uint(2), 4, 64, 4);
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true)))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(cos(injectionSwitch)))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))) || false)))
      {
       do
        {
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, min(64, 64)), int(ivec4(_GLF_IDENTITY(64, (64) | _GLF_IDENTITY((64), (_GLF_IDENTITY((64), 0 | ((64)))) ^ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(int(int(0))), (true ? int(int(int(0))) : _GLF_FUZZED(-19816)))), int(_GLF_IDENTITY(0, (0) / 1)))))), 0, (1 ^ 1), 1))), _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), (_GLF_IDENTITY(min(4, 4), _GLF_IDENTITY(int(int(min(4, 4))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, clamp(4, 4, 4)), 4))))), (~ (_GLF_IDENTITY(~ (int(int(min(4, 4)))), (~ (int(int(min(4, 4))))) | (~ (int(int(min(4, 4)))))))) / 1))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, _GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) + 0)))))), _GLF_IDENTITY(~ (~ (int(int(min(4, 4))))), (~ (~ (int(int(min(4, 4)))))) / 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((int(int(min(4, 4)))), (0 << _GLF_IDENTITY(int(6), int(6))) | (_GLF_IDENTITY((int(int(min(4, 4)))), ((int(int(min(4, 4))))) | 0)))), (~ (~ (int(int(min(4, 4)))))) / 1))), (~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(4, 4))))), (~ (~ (int(int(min(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) * 1), 4)), 4)))))) / 1)))) ^ 0)) ^ 0))))))) >> 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), (_GLF_IDENTITY(min(4, 4), _GLF_IDENTITY(int(int(min(4, 4))), ~ (~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((int(int(min(4, 4)))), (_GLF_IDENTITY((int(int(min(4, 4)))), ((int(int(min(4, 4))))) - (0 >> _GLF_IDENTITY(int(0), int(0))))) | 0)), (~ (~ (int(int(min(4, 4)))))) / 1))))))) >> 0)), (_GLF_IDENTITY(4, _GLF_IDENTITY(min(4, 4), (_GLF_IDENTITY(min(4, 4), _GLF_IDENTITY(int(int(min(4, 4))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1))), (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1))), min(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1))), _GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1))), 0 ^ (~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1)))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1))), (~ (_GLF_IDENTITY(int(int(min(4, 4))), _GLF_IDENTITY(~ (~ (int(int(min(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (4) | 0), 4)), 4))))), (~ (~ (int(int(min(4, 4)))))) / 1)))) / 1))))))) >> 0))) << 0), _GLF_IDENTITY(4, _GLF_IDENTITY(min(_GLF_IDENTITY(4, (4) | 0), 4), (_GLF_IDENTITY(min(4, 4), _GLF_IDENTITY(int(int(min(4, 4))), ~ (~ (_GLF_IDENTITY(int(int(_GLF_IDENTITY(min(4, 4), max(min(4, 4), min(4, 4))))), _GLF_IDENTITY(~ (~ (int(int(min(4, 4))))), _GLF_IDENTITY((~ _GLF_IDENTITY((~ (int(int(min(4, 4))))), 0 ^ ((~ (int(int(min(4, 4)))))))), ((~ _GLF_IDENTITY((~ (int(int(min(4, 4))))), 0 ^ ((~ (int(int(min(4, 4))))))))) ^ 0) / 1))))))) >> 0)))));
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
