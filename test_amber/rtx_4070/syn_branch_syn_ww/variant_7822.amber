#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec4(bvec2(false, false), false, true)))))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))) || (false)), bool(_GLF_IDENTITY(bvec2(false, false), bvec2(bvec3(bvec2(false, false), false)))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
      return;
     return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3.7)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), (bool(bvec4(false, false, true, false))) || false))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), true && (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true)), false || (bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, false, true))))))))), false), true)), bvec2(bvec2(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false), true))))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(3.5) : injectionSwitch.y))))))))
          return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), false)))))))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), bool(bvec4(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), false, false, true))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), ! (_GLF_IDENTITY(! (bool(bvec2(false, false))), _GLF_IDENTITY(false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), (! (bool(bvec2(false, false)))) && true)))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), (! (bool(bvec2(false, false)))) && true)))), ! (! (false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), false || (_GLF_IDENTITY(! (bool(bvec2(false, false))), (! (bool(bvec2(false, false)))) && true))))))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, bool(bool(true))) && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0))) - vec2(0.0, 0.0)).y))))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || false), true)), _GLF_IDENTITY(false || _GLF_IDENTITY((bool(bvec2(false, true))), bool(bvec3((bool(bvec2(false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, false, true)), ! (! (bool(bvec3(true, false, true))))))))), false, false))), (_GLF_IDENTITY(false || _GLF_IDENTITY((bool(bvec2(false, true))), bool(bvec3((bool(bvec2(false, true))), false, false))), (false || _GLF_IDENTITY((bool(bvec2(false, true))), bool(bvec3((bool(bvec2(false, true))), false, _GLF_IDENTITY(false, ! (! (false))))))) && true)) && true)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (! (bool(bvec2(false, true))))))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       return;
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), (_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-3.1)), _GLF_FUZZED(58.13)), vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))).y, bool(bvec3(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, false, true, true))), _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), (_GLF_IDENTITY(true, (true) || false)) || false))))))))) && true)))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, _GLF_IDENTITY(log(1.0), max(log(1.0), log(1.0))), 1.0)), float(mat3x4(float(mat2x3(injectionSwitch.x, cos(0.0), 1.0, 0.0, log(1.0), 1.0)), 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, float(vec3(0.0, 0.0, 1.0))), 0.0)))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) || false))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (~ (workgroup_id)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u ^ (0u)))), 0u ^ _GLF_IDENTITY((0u), ((0u)) + 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), 1u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) - uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))) / 1u))), 1u, _GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, (0u) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), _GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) - uvec4(0u, 0u, 0u, 0u))) >> (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))), max(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, 0u ^ (0u)))), 0u ^ _GLF_IDENTITY((0u), ((0u)) + 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), 1u, _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) - uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))) / 1u))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), clamp((subgroup_size), _GLF_IDENTITY((subgroup_size), _GLF_IDENTITY(uint(uvec2((subgroup_size), 1u)), max(uint(uvec2((subgroup_size), 1u)), uint(uvec2((subgroup_size), 1u))))), _GLF_IDENTITY((subgroup_size), (true ? (subgroup_size) : _GLF_FUZZED(subgroup_size)))))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(0u | (subgroup_size), (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(0u | (subgroup_size), 1u * (0u | (subgroup_size))))))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), ~ (~ ((subgroup_size)))))))) / 1u))))), 1u, _GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, (0u) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), _GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) - uvec4(0u, 0u, 0u, 0u))) >> (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | _GLF_IDENTITY((subgroup_size), max((subgroup_size), (subgroup_size)))))), 1u, _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) - 0u) ^ (0u))), (min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) - 0u) ^ (0u)))) | (min(0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(0u, (0u) - 0u) ^ (0u)))))), _GLF_IDENTITY(0u, clamp(0u, 0u, _GLF_IDENTITY(0u, min(0u, _GLF_IDENTITY(0u, (0u) / 1u))))) ^ _GLF_IDENTITY((0u), ((0u)) + 0u)), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), 1u, _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, (0u) - (0u << _GLF_IDENTITY(uint(5u), uint(5u)))))), 0u)) - uvec4(0u, 0u, 0u, 0u)), (_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (false ? _GLF_IDENTITY(_GLF_FUZZED(num_workgroup), 1u * (_GLF_FUZZED(num_workgroup))) : (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (false ? _GLF_FUZZED(num_workgroup) : (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))))), uint(uint(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size))), (false ? _GLF_FUZZED(_GLF_IDENTITY(num_workgroup, max(_GLF_IDENTITY(num_workgroup, min(num_workgroup, _GLF_IDENTITY(num_workgroup, ~ (~ (num_workgroup))))), num_workgroup))) : (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))))))))) / 1u))), 1u, _GLF_IDENTITY(0u, 0u ^ (0u)), _GLF_IDENTITY(0u, (0u) - 0u)), (uvec4(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), _GLF_IDENTITY(1u, (1u) - 0u), _GLF_IDENTITY(0u, 0u ^ (0u)), 0u)) - uvec4(_GLF_IDENTITY(0u, (0u) + uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(vec4(injectionSwitch.x, 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0)))))), 0u, 0u, 0u))) >> (uvec4(1u, 1u, 1u, 1u) ^ uvec4(1u, 1u, 1u, 1u)))))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 0.0, 1.0, sqrt(0.0), 0.0, 1.0, 0.0))), mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(9.9), _GLF_IDENTITY((injectionSwitch)[1], mix(_GLF_IDENTITY(float((injectionSwitch)[1]), mix(float(_GLF_FUZZED(48.91)), float(float((injectionSwitch)[1])), bool(true))), float(_GLF_FUZZED(0.8)), bool(false)))), mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(2.6, float(float(2.6)))), (vec2(_GLF_FUZZED(9.9), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], (false ? _GLF_FUZZED(-864.478) : _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(7.5)))))), float(_GLF_FUZZED(0.8)), bool(false)))))[1]), vec2((vec2(_GLF_FUZZED(9.9), _GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, max(1, 1))), (true ? (_GLF_IDENTITY(1, max(1, 1))) : _GLF_FUZZED(-69538))) | 0)], mix(float((injectionSwitch)[1]), float(_GLF_FUZZED(0.8)), bool(false)))))[0], _GLF_FUZZED(-69.89)), bvec2(true, false))), vec2((injectionSwitch)[0], _GLF_FUZZED(-2.7)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), max(_GLF_IDENTITY(vec2(injectionSwitch.x, 0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? vec2(injectionSwitch.x, 0.0) : _GLF_FUZZED(vec2(-8344.6041, 0.9)))), vec2(injectionSwitch.x, 0.0))))) > injectionSwitch.y))))).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bool(_GLF_DEAD(false)), false || (bool(_GLF_DEAD(false)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : workgroup_base), (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : workgroup_base), ((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)) ? _GLF_FUZZED(workgroup_size) : workgroup_base)) / 1u)) ^ 0u)) + subgroup_base) >> (_GLF_IDENTITY(0u & 79272u, (0u & 79272u) + 0u))) + _GLF_IDENTITY(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)), clamp(_GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) * 1u, ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) * 1u))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1)), (_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + 1, subgroup_local_id + 1, subgroup_local_id + 1))) >> 0u)) * 1u, ~ (~ ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(subgroup_local_id + _GLF_IDENTITY(1, (0 >> _GLF_IDENTITY(int(3), int(3))) | (1)), subgroup_local_id + 1, subgroup_local_id + 1))) * 1u)))) ^ 0u))) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, 1u * _GLF_IDENTITY((subgroup_size), uint(uvec4((subgroup_size), 1u, 1u, 1u))))))), (_GLF_IDENTITY((subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((subgroup_local_id + 1), ((_GLF_IDENTITY(subgroup_local_id + 1, max(subgroup_local_id + 1, subgroup_local_id + 1)))) << 0u), (0u ^ 1u)))) % subgroup_size), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, _GLF_IDENTITY(min(subgroup_size, subgroup_size), (_GLF_IDENTITY(min(subgroup_size, subgroup_size), (_GLF_IDENTITY(min(subgroup_size, subgroup_size), max(min(subgroup_size, subgroup_size), min(subgroup_size, subgroup_size)))) << 0u)) | 0u)))))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false))) && true)))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 atomicStore(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) + 0), 0 + _GLF_IDENTITY((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) ^ 0)), int(ivec3(_GLF_IDENTITY((_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), 0 | (_GLF_IDENTITY(1, 0 + (1))))) ^ 0, ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) * ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, max(1, 1)))))) + (1)), 0 | (_GLF_IDENTITY(1, 0 + (1))))) ^ 0), min(~ ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), ~ (~ (_GLF_IDENTITY(1, 0 + (1))))), 0 | (_GLF_IDENTITY(1, 0 + (1))))) ^ 0), ~ ((_GLF_IDENTITY(_GLF_IDENTITY(1, 0 + (1)), 0 | (_GLF_IDENTITY(1, 0 + (1))))) ^ 0))))))), ((_GLF_IDENTITY(1, (_GLF_IDENTITY(1, 0 + (1))) ^ 0))) >> 0), (0 | 0), 0))))), 4, 64, 4);
 if(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id % 2), 0u + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id % 2), min(_GLF_IDENTITY((subgroup_local_id % 2), ((subgroup_local_id % 2)) ^ _GLF_IDENTITY(0u, (0u) << 0u)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(0u, uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(0u, (0u) / 1u))) | (subgroup_local_id)) % _GLF_IDENTITY(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) / 1), min(2, _GLF_IDENTITY(2, int(_GLF_IDENTITY(ivec4(2, (0 << _GLF_IDENTITY(int(4), int(4))), 1, _GLF_IDENTITY(0, min(0, 0))), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(2, (false ? _GLF_FUZZED(-98106) : _GLF_IDENTITY(2, (2) | (2)))), (0 << _GLF_IDENTITY(int(4), int(4))), 1, _GLF_IDENTITY(0, min(0, 0))), (ivec4(2, (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, 0 | (4))), int(4))), _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED((42660 * 77456)))), _GLF_IDENTITY(0, min(0, 0)))) << ivec4(0, 0, _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0)), 0, _GLF_IDENTITY(0, (0) / 1))), 0))) | (_GLF_IDENTITY(ivec4(2, (0 << _GLF_IDENTITY(int(4), int(4))), 1, _GLF_IDENTITY(0, min(0, 0))), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(0, ~ (~ (0))), 0, 0, 0), (ivec4(0, 0, 0, 0)) + (ivec4(0, 0, 0, 0) & ivec4(-45994, 12407, 89408, 75457)))) | (_GLF_IDENTITY(ivec4(0, 0, 0, 0), min(_GLF_IDENTITY(ivec4(0, 0, 0, 0), ivec4(0, 0, 0, 0) ^ (ivec4(0, 0, 0, 0))), _GLF_IDENTITY(ivec4(0, 0, 0, 0), (true ? ivec4(0, 0, 0, 0) : _GLF_FUZZED(ivec4(90634, 59493, 64831, 38633)))))))) ^ (ivec4(2, (0 << _GLF_IDENTITY(int(4), int(4))), 1, _GLF_IDENTITY(0, min(0, 0))))))))))), uint(uint(subgroup_local_id % 2)))), ((subgroup_local_id % 2)) >> 0u)))), ((_GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % 2, uint(uvec3(subgroup_local_id % 2, 0u, 1u)))), min(_GLF_IDENTITY((subgroup_local_id % 2), min((subgroup_local_id % 2), (subgroup_local_id % 2))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id % _GLF_IDENTITY(2, max(2, 2)), uint(uint(subgroup_local_id % _GLF_IDENTITY(2, _GLF_IDENTITY(int(ivec2(2, 1)), (false ? _GLF_FUZZED(5715) : int(ivec2(2, 1))))))))), ((_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, max(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u), subgroup_local_id)))) % 2)) >> 0u))))) | 0u)) == 0, _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id % 2, _GLF_IDENTITY(min(subgroup_local_id % 2, subgroup_local_id % 2), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(min(subgroup_local_id % 2, subgroup_local_id % 2), 0u ^ _GLF_IDENTITY((min(subgroup_local_id % 2, subgroup_local_id % 2)), (_GLF_IDENTITY((min(subgroup_local_id % 2, subgroup_local_id % 2)), ((min(subgroup_local_id % 2, subgroup_local_id % 2))) << 0u)) >> 0u)))), max(~ (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(subgroup_local_id, 0u ^ (subgroup_local_id)) % 2, subgroup_local_id % 2), 0u ^ (min(subgroup_local_id % 2, subgroup_local_id % 2))))), ~ (~ (_GLF_IDENTITY(min(subgroup_local_id % 2, subgroup_local_id % 2), 0u ^ (min(subgroup_local_id % 2, subgroup_local_id % 2)))))))))) == 0), ! (! (((_GLF_IDENTITY(subgroup_local_id, (0u >> _GLF_IDENTITY(uint(7u), uint(7u))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))) % _GLF_IDENTITY(2, 0 ^ (2))) == 0)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec2(! (false), false)))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, (_GLF_IDENTITY(2, ~ (~ (2)))) ^ _GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (4) << 0), 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(7.2), _GLF_IDENTITY(_GLF_FUZZED(-98.36), max(_GLF_FUZZED(_GLF_IDENTITY(-98.36, (true ? -98.36 : _GLF_FUZZED(reflect(pow(8592.6383, -7.1), sqrt(56.49)))))), _GLF_FUZZED(-98.36)))), _GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0))), false || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))))), false))), true, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))), false))), true, true)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))), bvec2(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - length(vec4(0.0, 0.0, 0.0, 0.0)))))), false))), true, true)), false))), false, false)))), true), bvec3(bvec3(bvec3(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))), true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true), bvec3(bvec3(bvec3(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)))))), false)))))))).y, ! (! (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4.0)), bool(false))) > injectionSwitch.y)))) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
