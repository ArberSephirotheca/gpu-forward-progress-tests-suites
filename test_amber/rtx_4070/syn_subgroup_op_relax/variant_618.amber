#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(397.352)), bool(false))))) > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(18.54, -68.80)) : injectionSwitch)).y)), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-311.751), _GLF_FUZZED(-0.4)), bvec2(false, false))), injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 1.0)), clamp(vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0)), vec2(vec3(injectionSwitch, 1.0))))))).x > injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))) > injectionSwitch.y))));
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (0 | 0) | (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter))))) != 1, _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec2(_injected_loop_counter != 1, true)))), bool(_GLF_IDENTITY(bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_injected_loop_counter != 1, _GLF_IDENTITY(bool(bvec2(_injected_loop_counter != 1, true)), ! (! (bool(bvec2(_injected_loop_counter != 1, true))))))), false), bvec2(bvec3(bvec2(_GLF_TRUE(_GLF_IDENTITY(true, bool(bvec2(true, false))), (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec2(_injected_loop_counter != 1, true))), false || (_GLF_IDENTITY(_injected_loop_counter != 1, bool(bvec2(_injected_loop_counter != 1, true)))))), false), false))))))); _GLF_IDENTITY(_injected_loop_counter ++, _GLF_IDENTITY((_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) + _GLF_IDENTITY((_GLF_IDENTITY(1 ^ _GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-14617))), int(ivec3(1 ^ 1, 1, 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, 0)))), max((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ _GLF_IDENTITY(1, int(ivec2(1, 1))), 1, 0)))), (_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, 0))))))) | ((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, 0)))))))), (false ? _GLF_FUZZED(28243) : (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _injected_loop_counter ++ : _GLF_FUZZED(_injected_loop_counter)))) + _GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, 0)))), (_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, 0)))), max((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ _GLF_IDENTITY(1, int(ivec2(1, 1))), 1, 0)))), (_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, 0))))))) | ((_GLF_IDENTITY(1 ^ 1, int(ivec3(1 ^ 1, 1, _GLF_IDENTITY(0, int(ivec4(0, 1, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))))))))))))) - 0))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      break;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, exp(0.0) * (injectionSwitch.y)))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || false)))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || false)), bool(bool(false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))) || false)))))))))) || false) || false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec3(_GLF_DEAD(false), false, true)), false)), bool(bool(bool(bvec2(bool(bvec3(_GLF_DEAD(false), false, true)), false))))))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
            barrier();
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.0) : injectionSwitch.x)) > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true))))))))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
        }
      }
    }
   else
    {
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true), false))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - tan(vec2(0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((-2338.1583))), bool(false)))))) && true))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-9.0)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * sqrt(vec2(1.0, 1.0))).x, injectionSwitch.x)) > injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))).x > injectionSwitch.y) && true))))) || false))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > injectionSwitch.y))))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                     if(_GLF_DEAD(false))
                      return;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        return;
                      }
                    }
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          return;
        }
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0)), (float(mat2(injectionSwitch.x, 0.0, 1.0, 1.0))) * 1.0)) < injectionSwitch.y)) ? _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))))) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x) : _GLF_FUZZED(pow(-8017.1837, -2750.1686)))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), clamp(_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), (false ? _GLF_FUZZED(vec2(-903.427, 7.3)) : mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)))), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), mix(float(_GLF_FUZZED(159.008)), float(_GLF_FUZZED((7.6 / -3407.0506))), bool(true))), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-46.22)), float(1.0), bool(true))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(0.0), 0.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), clamp(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, 1.0 * (_GLF_IDENTITY(0.0, (0.0) / 1.0)))), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))))), dot(vec4(0.0, 1.0, tan(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))))), sqrt(0.0), 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), (_GLF_FUZZED((7.6 / -3407.0506))) + 0.0), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))) / vec2(1.0, 1.0))) * vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, abs(log(1.0)))), max(vec2(vec3(injectionSwitch, abs(log(1.0)))), vec2(vec3(injectionSwitch, abs(log(1.0))))))))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(_GLF_IDENTITY(-9.4, mix(float(-9.4), float(_GLF_FUZZED(271.088)), bool(false))))), bvec2(false, false))))), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, round(length(normalize(1.0))), 1.0, 0.0, log(exp(0.0)), 0.0, 0.0, 0.0), (mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, round(length(normalize(1.0))), 1.0, 0.0, log(exp(0.0)), 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0), (vec4(0.0, 1.0, tan(0.0), 0.0)) * mat4(1.0)), vec4(log(1.0), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6882.5351)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(0.0), 0.0, 0.0, 0.0), mat4(_GLF_ONE(1.0, injectionSwitch.y)) * (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch), vec2(0.0, 0.0) + ((injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), (_GLF_FUZZED((7.6 / -3407.0506))) + 0.0), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), (_GLF_IDENTITY(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), max(mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)), mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))) / vec2(1.0, 1.0))) * vec2(1.0, 1.0))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, abs(log(1.0)))), max(vec2(vec3(injectionSwitch, abs(log(1.0)))), vec2(vec3(injectionSwitch, abs(log(1.0))))))))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(_GLF_IDENTITY(-9.4, mix(float(-9.4), float(_GLF_FUZZED(271.088)), bool(false))))), bvec2(false, false))))), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, round(length(normalize(1.0))), 1.0, 0.0, log(exp(0.0)), 0.0, 0.0, 0.0), (mat4(0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, round(length(normalize(1.0))), 1.0, 0.0, log(exp(0.0)), 0.0, 0.0, 0.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))), 0.0), (vec4(0.0, 1.0, tan(0.0), 0.0)) * mat4(1.0)), vec4(log(1.0), 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(6882.5351)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(0.0), 0.0, 0.0, 0.0))), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY((7.6 / -3407.0506), min(_GLF_IDENTITY((7.6 / -3407.0506), clamp((7.6 / -3407.0506), (7.6 / -3407.0506), (7.6 / -3407.0506))), (7.6 / -3407.0506)))), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_IDENTITY((injectionSwitch)[0], mix(float(_GLF_FUZZED(5476.8379)), float((injectionSwitch)[0]), bool(true)))) / 1.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) - vec2(0.0, 0.0)), (injectionSwitch)))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(0.0), 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) / 1.0)), float(_GLF_FUZZED(-610.419)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch)))))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), clamp(_GLF_IDENTITY((_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, clamp(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))), max((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))), (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), mix(float(_GLF_FUZZED(159.008)), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), float(mat3x2(_GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY((7.6 / -3407.0506), (false ? _GLF_FUZZED(normalize(-9.6)) : (7.6 / -3407.0506))))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), _GLF_IDENTITY(float(float(_GLF_FUZZED((7.6 / -3407.0506)))), (float(float(_GLF_FUZZED((7.6 / -3407.0506))))) - sin(0.0)), bool(true))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sin(0.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat4(injectionSwitch.x, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0)))) + 0.0)), 0.0))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)))), _GLF_IDENTITY(vec2(mat3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED((_GLF_IDENTITY(7.6, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(5317.2022) : 7.6)) / -3407.0506)), mix(float(_GLF_FUZZED(159.008)), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), float(mat3x2(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), float(mat2x4(_GLF_FUZZED((7.6 / -3407.0506)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0))))), bool(true))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sin(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)))), (true ? vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), mix(float(_GLF_FUZZED(159.008)), _GLF_IDENTITY(float(_GLF_FUZZED(_GLF_IDENTITY((7.6 / -3407.0506), (_GLF_IDENTITY((7.6 / -3407.0506), ((7.6 / -3407.0506)) + 0.0)) - tan(_GLF_ZERO(0.0, injectionSwitch.x))))), float(mat3x2(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED(_GLF_IDENTITY((7.6 / -3407.0506), clamp((7.6 / -3407.0506), _GLF_IDENTITY((7.6 / -3407.0506), (true ? (7.6 / -3407.0506) : _GLF_FUZZED(dot(injectionSwitch, vec2(4775.7913, 14.87))))), (7.6 / -3407.0506))))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(_GLF_IDENTITY(6459.8830, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 6459.8830 : _GLF_FUZZED(-4.7))))), float(float(_GLF_FUZZED((7.6 / _GLF_IDENTITY(-3407.0506, (true ? -3407.0506 : _GLF_FUZZED(-10.65))))))), bool(true))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sin(0.0), 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), clamp(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), 0.0))), bool(true))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_IDENTITY(_GLF_FUZZED(-9.4), min(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4))))), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)))) : _GLF_FUZZED(max(injectionSwitch, _GLF_IDENTITY(-9.7, float(mat2x4(_GLF_IDENTITY(-9.7, mix(float(-9.7), float(_GLF_FUZZED(-9008.5271)), bool(false))), 0.0, 0.0, 1.0, 1.0, 1.0, exp(0.0), 1.0))))))), 0.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 0.0)), mat2(1.0) * (vec2(mat3(_GLF_IDENTITY(vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), mix(float(_GLF_FUZZED(159.008)), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), float(mat3x2(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_FUZZED((7.6 / -3407.0506)))), bool(true))))), round(length(normalize(vec4(1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(8223.3928))), 1.0, 1.0, 1.0)))) / 1.0), 1.0, 1.0)))), sin(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)))), (true ? vec2(_GLF_IDENTITY(_GLF_FUZZED((7.6 / -3407.0506)), mix(float(_GLF_FUZZED(159.008)), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_FUZZED((7.6 / -3407.0506)))), bool(true))))), clamp(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_FUZZED((7.6 / -3407.0506)))), bool(true))))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_FUZZED((7.6 / -3407.0506)))), bool(true))))), _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_FUZZED((7.6 / -3407.0506)))), bool(true))))), mix(float(_GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), max(float(_GLF_FUZZED((7.6 / -3407.0506))), _GLF_IDENTITY(float(_GLF_FUZZED((7.6 / -3407.0506))), mix(float(_GLF_FUZZED(6459.8830)), float(float(_GLF_FUZZED((7.6 / -3407.0506)))), bool(true)))))), float(_GLF_FUZZED(96.58)), bool(false))))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), sin(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), bool(true))), _GLF_IDENTITY(_GLF_FUZZED(-9.4), max(_GLF_FUZZED(-9.4), _GLF_FUZZED(-9.4)))) : _GLF_FUZZED(max(injectionSwitch, -9.7)))), 0.0, 1.0, 0.0, abs(0.0), 1.0, 1.0, 0.0))))), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-46.22)), float(1.0), bool(true))), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) * 1.0, mix(float(_GLF_FUZZED(97.59)), float(_GLF_IDENTITY((1.0) * 1.0, min((1.0) * 1.0, (1.0) * 1.0))), bool(true)))), log(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(555.935)), float(1.0), bool(true))), 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(sqrt(0.0), float(mat3x4(sqrt(0.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))))), 0.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))[0], (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(69.70), _GLF_FUZZED(-64.27)), vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], (vec2((injectionSwitch)[0], (injectionSwitch)[1]))[1]), bvec2(true, true))), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, max(0, 0)), 0))], (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(731.517))), 1.0)) : _GLF_FUZZED(vec2(9.9, 6373.7107)))))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY((7.6 / -3407.0506), ((7.6 / _GLF_IDENTITY(-3407.0506, clamp(-3407.0506, _GLF_IDENTITY(-3407.0506, min(-3407.0506, -3407.0506)), -3407.0506)))) - 0.0)), _GLF_FUZZED(-9.4)), bvec2(false, false))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, tan(_GLF_IDENTITY(0.0, 1.0 * _GLF_IDENTITY((0.0), mix(float(_GLF_FUZZED(float(45078))), float(_GLF_IDENTITY((0.0), max((0.0), (0.0)))), bool(true))))), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) - log(1.0)), injectionSwitch.x))))), dot(vec4(0.0, 1.0, tan(0.0), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), sqrt(0.0), 0.0, 0.0, 0.0))))), (vec2(_GLF_IDENTITY(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], float(mat4x2(_GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) / 1.0), 1.0, 0.0, 0.0, 1.0, sqrt(1.0), 1.0, 0.0)))), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), _GLF_IDENTITY(vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), _GLF_IDENTITY(mat2(1.0) * (vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4))), vec2(1.0, 1.0) * (mat2(1.0) * (vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)))))) : _GLF_FUZZED(injectionSwitch))), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, abs(log(1.0)))), max(vec2(vec3(injectionSwitch, abs(log(1.0)))), vec2(vec3(injectionSwitch, abs(log(1.0))))))))[_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | 0)))) - 0)]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)))), min(min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / _GLF_IDENTITY(-3407.0506, min(-3407.0506, _GLF_IDENTITY(-3407.0506, (-3407.0506) + 0.0))))), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, abs(log(1.0)))), max(vec2(vec3(injectionSwitch, abs(log(1.0)))), vec2(vec3(injectionSwitch, abs(log(1.0))))))))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false)))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) + 0), 0))))], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))[0], (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, abs(log(1.0)))), max(vec2(vec3(injectionSwitch, abs(log(1.0)))), vec2(vec3(injectionSwitch, abs(log(1.0))))))))[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec4(0.0, 1.0, tan(0.0), 0.0), (vec4(0.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, max(1.0, 1.0))) * 1.0), tan(0.0), 0.0)) * mat4(1.0)), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)), _GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(0.0), 0.0, 0.0, 0.0), transpose(transpose(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY((7.6 / -3407.0506), min(_GLF_IDENTITY((7.6 / -3407.0506), clamp((7.6 / -3407.0506), (_GLF_IDENTITY(7.6 / -3407.0506, clamp(7.6 / -3407.0506, 7.6 / -3407.0506, _GLF_IDENTITY(7.6 / -3407.0506, _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x2(7.6 / -3407.0506, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x2(7.6 / -3407.0506, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), 0.0 + (float(_GLF_IDENTITY(mat4x2(7.6 / -3407.0506, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x2(7.6 / -3407.0506, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0))))))))))), (7.6 / -3407.0506))), (7.6 / -3407.0506)))), _GLF_FUZZED(-9.4)), bvec2(false, false))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2((_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(6.3, 122.861)) : injectionSwitch)))[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / _GLF_IDENTITY(-3407.0506, min(-3407.0506, -3407.0506)))), _GLF_FUZZED(-9.4)), bvec2(false, false))), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED((7.6 / -3407.0506)), _GLF_FUZZED(-9.4)), bvec2(false, false))))), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, log(1.0), _GLF_IDENTITY(dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))), dot(vec4(0.0, 1.0, tan(0.0), 0.0), vec4(log(1.0), 1.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x)))), sqrt(0.0), 0.0, 0.0, 0.0)))))) * vec2(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-610.419)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))).y)))))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               barrier();
              }
             if(_GLF_DEAD(false))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
               break;
              }
             if(_GLF_DEAD(false))
              return;
             barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y) || false))))))));
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (bool(bvec2(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true)))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         return;
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! (false))))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       return;
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false)))))))))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
    {
     return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, true)))))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec4(bool(bool(false)), true, false, false))))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat4x3(injectionSwitch.y, 0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), bool(bvec4(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))
          return;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), vec2(1.0, 1.0) * (vec2(injectionSwitch.y, 1.0)))), float(mat4(float(_GLF_IDENTITY(vec2(injectionSwitch.y, 1.0), vec2(1.0, 1.0) * (vec2(injectionSwitch.y, 1.0)))), 0.0, 1.0, 1.0, tan(0.0), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0))))))))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), true && (! (true))))))), (injectionSwitch.x < injectionSwitch.y)) && (false))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true, false))))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-32.92), _GLF_FUZZED(-583.750)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || _GLF_IDENTITY(false, bool(bvec4(false, false, false, false))))))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           return;
          }
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(87.57, 3.8)) : injectionSwitch)).y))));
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 & 76754), (_GLF_IDENTITY((0 & 76754), int(ivec2((0 & 76754), 1)))) | ((0 & 76754)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))) || false)))))) || false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))).x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, ~ (_GLF_IDENTITY(~ (workgroup_id), uint(uint(~ (workgroup_id))))));
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u, 1u, 1u), (uvec4(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u, 1u, 1u)) << uvec4(0u, 0u, 0u, 0u))))) >> 0u), (subgroup_size) * 1u) + _GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec4(subgroup_local_id, 0u, 1u, 0u), (uvec4(subgroup_local_id, 0u, 1u, 0u)) * uvec4(1u, 1u, 1u, 1u))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec3(! (_GLF_IDENTITY(false, (false) && true)), _GLF_IDENTITY(false, false || (false)), true)))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), clamp(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, 1u * (subgroup_size)) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((subgroup_local_id + 1) % subgroup_size)) >> (0u | 0u)), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * (1u & 1u), (_GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * (1u & 1u), ~ (~ (_GLF_IDENTITY(((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * (1u & 1u), 0u ^ (((workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) << uint(_GLF_ZERO(0.0, injectionSwitch.x))) * (1u & 1u))))))) >> 0u))), _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size), (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | (workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size))))), _GLF_IDENTITY((workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id * subgroup_size), 0u + (_GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) << 0u))), ((subgroup_id * subgroup_size)) + 0u))) | (_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(max(subgroup_id * subgroup_size, subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size))), ~ (~ (max(subgroup_id * subgroup_size, subgroup_id * subgroup_size)))))) | (subgroup_id * subgroup_size)))) + ((subgroup_local_id + 1) % subgroup_size)) | 0u, ((workgroup_base + _GLF_IDENTITY(subgroup_id, uint(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(min(subgroup_id, subgroup_id), (0u << _GLF_IDENTITY(uint(3u), uint(3u))) + (_GLF_IDENTITY(min(subgroup_id, subgroup_id), (min(subgroup_id, subgroup_id)) * 1u)))), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u, 0u))))) * subgroup_size + ((subgroup_local_id + 1) % subgroup_size)) | 0u) - 0u));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(tanh(-2.1)) : injectionSwitch.y))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0)), dot(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0))), 1.0))))) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), false)), false || (bool(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false))))), false)))))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       _GLF_IDENTITY(buf[virtual_gid] = 1, (buf[virtual_gid] = 1) | 0u);
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   if(_GLF_IDENTITY(subgroup_local_id + 1, (subgroup_local_id + 1) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, min(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (140622u & 0u)), subgroup_local_id)) + 1, _GLF_IDENTITY(0u ^ (subgroup_local_id + 1), (0u ^ (subgroup_local_id + 1)) | (0u ^ (subgroup_local_id + 1)))))) < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(6, max(6, 6)), max(_GLF_IDENTITY(6, max(6, 6)), _GLF_IDENTITY(6, max(6, 6))))), int(6)))); _injected_loop_counter ++)
      {
       atomicStore(buf[next_virtual_gid], uint(2), _GLF_IDENTITY(4, (4) / 1), 64, 0);
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      barrier();
                     barrier();
                    }
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))));
                  }
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       subgroupAll(false);
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, sqrt(1.0))), mix(float(_GLF_FUZZED(91.53)), float(_GLF_IDENTITY(float(mat2(injectionSwitch.x, 1.0, 1.0, sqrt(1.0))), (float(mat2(injectionSwitch.x, 1.0, 1.0, sqrt(1.0)))) - 0.0)), bool(true)))) > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, false, true))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (int(3))))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0), (false ? _GLF_FUZZED((mat4(-4180.8710, -5794.5854, -4.0, 7.4, -2.6, -7.8, 252.688, 4.1, 86.32, 6633.0713, -4719.5166, 2.8, 3867.7222, -7240.0296, -2.9, -3.0) , mat4(-3.1, -8958.0571, -1990.2930, -1380.7800, -5.1, -48.33, 4078.8747, 1.0, 376.396, -4259.0942, 9363.2220, -1.7, -5.3, 5879.1223, 643.009, 749.145))) : mat4(injectionSwitch, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0))))).x > injectionSwitch.y)), true, true, false)))))
                return;
               barrier();
              }
             barrier();
            }
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true && (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))))));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) - 0)))); _injected_loop_counter ++)
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 0);
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     do
      {
       do
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           subgroupAll(true);
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0) * (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     do
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true))))
          continue;
         barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (1 ^ 1)); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch), _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, log(1.0), 0.0, 0.0, 1.0, 1.0, sqrt(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_IDENTITY(1.0, (1.0) - length(0.0)), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), float(_GLF_FUZZED(8.5)), bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, determinant(mat3(1.0, 0.0, 1.0, 0.0, 1.0, 1.0, length(0.0), 0.0, 1.0)), 1.0, 0.0, 0.0, 0.0, 1.0))).x > _GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(81.98)))))))), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(0.0, (0.0) - 0.0)), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0), vec3(exp(0.0), 0.0, 0.0))), 0.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(86.56)), float(float(mat4(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, log(_GLF_IDENTITY(1.0, float(vec3(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0))), abs(0.0), 1.0)))), 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(log(-16.85)) : 1.0)), sqrt(0.0), 1.0, 1.0, _GLF_IDENTITY(dot(vec3(1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0), vec3(exp(0.0), 0.0, 0.0)), dot(vec3(1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, 1.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 0.0), vec3(exp(0.0), 0.0, 0.0))), 0.0, 0.0, 0.0))), bool(true)))), mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), _GLF_IDENTITY(bool(false), bool(bvec4(_GLF_IDENTITY(bool(false), (bool(false)) && true), false, true, false)))))), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126)))) - 0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), float(mat3(_GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), (float(_GLF_FUZZED(-88.71))) / 1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-75.87) : _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)) - 0.0), clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))))), 0.0)), dot(vec2(1.0, 1.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, _GLF_IDENTITY(tan(0.0), min(tan(0.0), tan(0.0))), 0.0, 1.0, 0.0, sqrt(0.0)))), bool(false))), 0.0, 0.0, 0.0)), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch), _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-737.465))), mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(_GLF_IDENTITY(false, ! (! (false))))))) : _GLF_FUZZED(-6018.5126))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), float(vec2(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), 0.0))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126))), min(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126))), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126)))) + 0.0), _GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_IDENTITY(_GLF_FUZZED(4775.1668), max(_GLF_FUZZED(4775.1668), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_FUZZED(4775.1668), (false ? _GLF_FUZZED(3.7) : _GLF_FUZZED(4775.1668))), float(mat3x4(_GLF_FUZZED(4775.1668), 0.0, abs(0.0), 0.0, 0.0, exp(0.0), exp(0.0), 1.0, 1.0, 1.0, cos(0.0), 1.0)))))), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126))))), _GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126)))))) - 0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), float(mat3(_GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), 1.0 * (float(_GLF_FUZZED(-88.71)))), (float(_GLF_FUZZED(-88.71))) / 1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY((false ? _GLF_FUZZED(-75.87) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(584.327) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)), float(_GLF_FUZZED(5.4)), bool(false)))))) / 1.0)), 1.0 * ((false ? _GLF_FUZZED(-75.87) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), (_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(584.327) : _GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), mix(float(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x)), float(_GLF_FUZZED(5.4)), bool(false)))))) / 1.0))))), 0.0)), dot(_GLF_IDENTITY(vec2(1.0, 1.0), (true ? vec2(1.0, 1.0) : _GLF_FUZZED(injectionSwitch))), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, tan(0.0), 0.0, 1.0, 0.0, sqrt(_GLF_IDENTITY(0.0, (0.0) * 1.0))))), bool(false))), 0.0, 0.0, 0.0))), max(mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)), _GLF_IDENTITY(transpose(transpose(mat2(1.0))), _GLF_IDENTITY((_GLF_IDENTITY(transpose(transpose(mat2(1.0))), transpose(transpose(transpose(transpose(mat2(1.0))))))) - mat2(0.0, 0.0, 0.0, 0.0), ((_GLF_IDENTITY(transpose(transpose(mat2(1.0))), transpose(transpose(transpose(transpose(mat2(1.0))))))) - mat2(0.0, 0.0, 0.0, 0.0)) - mat2(0.0, 0.0, 0.0, 0.0)))) * (injectionSwitch), _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), max(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), mix(float(_GLF_FUZZED(-6664.6494)), float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), mix(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), float(_GLF_FUZZED(115.774)), bool(false)))), bool(true))), _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), (_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), (mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0, exp(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))) * mat3(1.0))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), (true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, 0.0, exp(_GLF_IDENTITY(0.0, (0.0) / 1.0)), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126)) + 0.0), (_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 0.0, 0.0)), (determinant(mat2(0.0, 0.0, 0.0, 0.0))) / 1.0), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), max(_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0))))), min(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0))))), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0)))))))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.5) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.4)), float(0.0), bool(true))))), min(0.0, 0.0)))))) : _GLF_FUZZED(-6018.5126), (true ? true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(_GLF_IDENTITY(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0))))), min(_GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0))))), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), vec2(0.0, 0.0))), vec2(0.0, 0.0)))))))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-7.5) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.4)), float(0.0), bool(true))))), min(0.0, 0.0)))))) : _GLF_FUZZED(-6018.5126) : _GLF_FUZZED(-337.762))), _GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, (0.0) / 1.0), mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-369.504) : 0.0)), determinant(mat2(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4551.8324) : 0.0)), 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), clamp(_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0))) / 1.0))) : _GLF_FUZZED(-6018.5126), 0.0 + (_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0))) / 1.0))) : _GLF_FUZZED(-6018.5126), clamp(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0))) / 1.0))) : _GLF_FUZZED(-6018.5126), true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0))) / 1.0))) : _GLF_FUZZED(-6018.5126), true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), _GLF_IDENTITY(float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0)), (float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(_GLF_IDENTITY(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0), (true ? mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0) : _GLF_FUZZED((- mat3(92.11, -6414.3245, 40.23, 4.5, -0.3, 279.915, 2.5, 508.943, -305.182)))))), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(_GLF_IDENTITY(mat2(0.0, 1.0, 0.0, 0.0), (mat2(0.0, 1.0, 0.0, 0.0)) * mat2(1.0)))), 0.0))) / 1.0))) : _GLF_FUZZED(-6018.5126))))), true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(_GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, _GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 1.0)))), 0.0, 0.0))), 0.0)))) : _GLF_IDENTITY(_GLF_FUZZED(-6018.5126), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(-6018.5126), 1.0, 0.0, 1.0)), float(vec3(float(vec4(_GLF_FUZZED(-6018.5126), 1.0, 0.0, 1.0)), 0.0, 1.0)))), true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 0.0), _GLF_IDENTITY((mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0), mat3x2(mat3((mat3x2(0.0, 0.0, 0.0, 0.0, 1.0, 0.0)) * mat3(1.0)))))))), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(_GLF_IDENTITY(0.0, max(0.0, 0.0))), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126)))))) - 0.0)), 0.0 + ((_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * exp(0.0)), 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), (_GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(4775.1668)), (float(_GLF_FUZZED(4775.1668))) / 1.0), bool(false))), float(mat4x3(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), (_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(_GLF_IDENTITY(4775.1668, clamp(4775.1668, 4775.1668, _GLF_IDENTITY(4775.1668, (4775.1668) - 0.0))))), bool(false)))) / 1.0), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, _GLF_IDENTITY(0.0, 1.0 * (0.0)))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), max(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.9))), max(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.9))), _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.9))), mix(float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-3.9)))), float(_GLF_FUZZED(-260.824)), bool(false))))), 1.0, 0.0, 0.0, exp(0.0), 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_IDENTITY(0.0, min(0.0, 0.0))), float(_GLF_FUZZED(-5246.3364)), bool(false))), 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), _GLF_IDENTITY(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(0.0), (float(0.0)) + 0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), clamp(true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), _GLF_IDENTITY(_GLF_IDENTITY(bool(false), false || (_GLF_IDENTITY(bool(false), ! (! (bool(false)))))), ! (_GLF_IDENTITY(! (bool(false)), (_GLF_IDENTITY(! (bool(false)), false || (! (bool(false))))) && true))))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, _GLF_IDENTITY(1.0, (1.0) * 1.0), 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, 0.0, determinant(_GLF_IDENTITY(mat2(0.0, 0.0, 0.0, 0.0), (true ? mat2(0.0, 0.0, 0.0, 0.0) : _GLF_FUZZED(mat2(-79.80, -410.826, -2.0, -19.04))))), abs(1.0), 0.0, cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), true ? float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-69.48)), float(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), bool(true))), mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, 0.0)), 1.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))) - 0.0), determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0), mat4x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0) + (mat4x2(0.0, 1.0, 0.0, 0.0, length(0.0), 1.0, 0.0, 0.0))))), cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), 0.0)))) : _GLF_FUZZED(-6018.5126), true ? float(_GLF_IDENTITY(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), float(mat4x3(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false))), determinant(mat3(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, 0.0, 0.0)), 0.0, 0.0, length(vec2(0.0, _GLF_IDENTITY(0.0, (0.0) * exp(determinant(mat4(0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)))))), 1.0, 0.0, determinant(mat2(0.0, 0.0, 0.0, 0.0)), abs(1.0), 0.0, _GLF_IDENTITY(cos(determinant(mat2(0.0, 1.0, 0.0, 0.0))), (cos(determinant(mat2(0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(vec2(1.0, 1.0)))), float(_GLF_FUZZED(0.5)), bool(false))), 0.0, 0.0)))) * _GLF_ONE(1.0, injectionSwitch.y)), 0.0)))) : _GLF_FUZZED(-6018.5126)))))) - 0.0)))))) - 0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), float(mat3(_GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), (float(_GLF_FUZZED(-88.71))) / 1.0), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), (false ? _GLF_FUZZED(-75.87) : _GLF_ZERO(0.0, injectionSwitch.x))), 0.0)), dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(_GLF_IDENTITY(mat2x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0))))), mat2x4(mat4(mat2x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))), 0.0))), 1.0, _GLF_IDENTITY(tan(0.0), max(tan(0.0), _GLF_IDENTITY(tan(0.0), min(_GLF_IDENTITY(tan(0.0), clamp(tan(0.0), tan(0.0), tan(0.0))), tan(0.0))))), 0.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(5649.3464) : _GLF_IDENTITY(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(4.0) : _GLF_IDENTITY(0.0, min(0.0, 0.0)))), float(mat2(0.0, 1.0, 0.0, 0.0))))), sqrt(0.0)))), bool(false))), 0.0, 0.0, 0.0))), _GLF_IDENTITY(mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(17.81, 5164.5372, 87.31, 2210.4496)) : mat2(1.0))) * (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch))), _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126)))) - 0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), float(mat3(_GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), (float(_GLF_IDENTITY(_GLF_FUZZED(-88.71), float(vec3(_GLF_FUZZED(-88.71), 1.0, 0.0))))) / _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), float(_GLF_FUZZED(-1548.1939)), bool(false)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-75.87) : _GLF_ZERO(0.0, injectionSwitch.x))), 0.0)), dot(vec2(1.0, 1.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, tan(0.0), 0.0, 1.0, 0.0, sqrt(0.0)))), bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false)))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), vec2(mat4x3(mat2(1.0) * (vec2(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch), _GLF_IDENTITY(mat2(1.0), (false ? _GLF_FUZZED(mat2(17.81, 5164.5372, 87.31, 2210.4496)) : mat2(1.0))) * (_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))) * (injectionSwitch))), _GLF_IDENTITY(0.0, mix(_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (_GLF_IDENTITY(float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))), (true ? float(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(4775.1668)), bool(false)))) : _GLF_FUZZED(-6018.5126)))) - 0.0), _GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), float(mat3(_GLF_IDENTITY(float(_GLF_FUZZED(-88.71)), (float(_GLF_IDENTITY(_GLF_FUZZED(-88.71), float(vec3(_GLF_FUZZED(-88.71), 1.0, 0.0))))) / _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0)))))), float(_GLF_FUZZED(-1548.1939)), bool(false)))), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-75.87) : _GLF_ZERO(0.0, injectionSwitch.x))), 0.0)), dot(vec2(1.0, 1.0), vec2(_GLF_ZERO(0.0, injectionSwitch.x), 0.0))), 1.0, tan(0.0), 0.0, 1.0, 0.0, sqrt(0.0)))), bool(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, false)))))), 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, abs(0.0), 0.0, 1.0, 0.0)))))))), _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(-923.287, -835.505)) : injectionSwitch)))).x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), ! (! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, bool(bool(false))), true)))))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-42.95)), vec2(_GLF_FUZZED(-1796.0878), _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_FUZZED(3.9)), float((injectionSwitch)[1]), bool(true)))), bvec2(false, true))).x > injectionSwitch.y)))))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                  barrier();
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))) && true)))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   barrier();
                  }
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 return;
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false))))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         continue;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
